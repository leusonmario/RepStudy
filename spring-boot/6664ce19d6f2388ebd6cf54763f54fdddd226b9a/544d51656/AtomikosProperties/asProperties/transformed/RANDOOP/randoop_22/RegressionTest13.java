import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test6501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6501");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet24 = properties2.entrySet();
        java.util.Enumeration<?> wildcardEnumeration25 = properties2.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        properties28.clear();
        boolean boolean30 = properties28.isEmpty();
        java.lang.Object obj31 = properties28.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        properties34.clear();
        boolean boolean36 = properties34.isEmpty();
        java.util.Collection<java.lang.Object> objCollection37 = properties34.values();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.lang.Object obj41 = properties34.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.lang.Object obj42 = properties34.clone();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.lang.String str45 = properties34.getProperty("");
        java.util.Collection<java.lang.Object> objCollection46 = properties34.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        java.lang.Object obj52 = properties49.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection53 = properties49.values();
        java.util.Collection<java.lang.Object> objCollection54 = properties49.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        java.util.Properties properties57 = atomikosProperties55.asProperties();
        properties57.clear();
        boolean boolean59 = properties57.isEmpty();
        java.lang.Object obj60 = properties57.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.checkpointInterval;
        java.util.Properties properties63 = atomikosProperties61.asProperties();
        properties63.clear();
        boolean boolean65 = properties63.isEmpty();
        java.util.Collection<java.lang.Object> objCollection66 = properties63.values();
        properties57.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties63);
        java.util.Enumeration<?> wildcardEnumeration68 = properties63.propertyNames();
        java.util.Properties properties69 = new java.util.Properties(properties63);
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties69);
        int int71 = properties49.size();
        boolean boolean72 = properties49.isEmpty();
        java.lang.String str74 = properties49.getProperty("{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.logBaseDir;
        java.lang.String str77 = atomikosProperties75.logBaseName;
        java.lang.String str78 = atomikosProperties75.getLogBaseDir();
        boolean boolean79 = atomikosProperties75.isSerialJtaTransactions();
        long long80 = atomikosProperties75.checkpointInterval;
        atomikosProperties75.setMaxTimeout((long) (byte) 10);
        long long83 = atomikosProperties75.maxTimeout;
        boolean boolean84 = atomikosProperties75.isForceShutdownOnVmExit();
        atomikosProperties75.defaultJtaTimeout = 50;
        atomikosProperties75.maxTimeout = 9;
        java.lang.Object obj89 = properties34.put((java.lang.Object) "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}", (java.lang.Object) 9);
        int int90 = properties34.size();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(objEntrySet24);
        org.junit.Assert.assertNotNull(wildcardEnumeration25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(objCollection53);
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "{}");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objCollection66);
        org.junit.Assert.assertNotNull(wildcardEnumeration68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tmlog" + "'", str77, "tmlog");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 500L + "'", long80 == 500L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10L + "'", long83 == 10L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test6502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6502");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        long long13 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.maxActives = (short) 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        java.lang.Object obj19 = properties18.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        properties23.clear();
        boolean boolean25 = properties23.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        atomikosProperties26.setTransactionManagerUniqueName("");
        int int30 = atomikosProperties26.getMaxActives();
        java.lang.String str31 = atomikosProperties26.transactionManagerUniqueName;
        boolean boolean32 = properties23.containsValue((java.lang.Object) atomikosProperties26);
        boolean boolean33 = properties23.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.lang.Object obj36 = properties23.remove((java.lang.Object) atomikosProperties34);
        java.lang.String str37 = atomikosProperties34.logBaseName;
        long long38 = atomikosProperties34.checkpointInterval;
        boolean boolean39 = atomikosProperties34.serialJtaTransactions;
        atomikosProperties34.setLogBaseName("tmlog");
        atomikosProperties0.set(properties18, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties34);
        java.util.Properties properties43 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        java.util.Properties properties48 = new java.util.Properties(properties46);
        java.lang.Object obj51 = properties48.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        long long54 = atomikosProperties52.getDefaultJtaTimeout();
        java.util.Properties properties55 = atomikosProperties52.asProperties();
        boolean boolean56 = atomikosProperties52.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) 100);
        boolean boolean60 = atomikosProperties57.isForceShutdownOnVmExit();
        atomikosProperties57.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties57.service = "";
        atomikosProperties57.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long68 = atomikosProperties67.checkpointInterval;
        java.util.Properties properties69 = atomikosProperties67.asProperties();
        properties69.clear();
        boolean boolean71 = properties69.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long73 = atomikosProperties72.checkpointInterval;
        java.util.Properties properties74 = atomikosProperties72.asProperties();
        java.lang.Object obj77 = properties74.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection78 = properties74.values();
        boolean boolean79 = properties69.containsKey((java.lang.Object) objCollection78);
        java.util.Enumeration<java.lang.Object> objEnumeration80 = properties69.keys();
        boolean boolean81 = properties48.replace((java.lang.Object) atomikosProperties52, (java.lang.Object) atomikosProperties57, (java.lang.Object) properties69);
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties69);
        java.io.PrintStream printStream83 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties69.list(printStream83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj51, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 500L + "'", long73 == 500L);
        org.junit.Assert.assertNotNull(properties74);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(objCollection78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objEnumeration80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test6503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6503");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.maxActives = (byte) 0;
        boolean boolean12 = atomikosProperties0.enableLogging;
        boolean boolean13 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test6504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6504");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        boolean boolean48 = atomikosProperties45.isForceShutdownOnVmExit();
        atomikosProperties45.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long51 = atomikosProperties45.getDefaultJtaTimeout();
        long long52 = atomikosProperties45.getMaxTimeout();
        atomikosProperties45.logBaseName = "tmlog";
        long long55 = atomikosProperties45.getDefaultJtaTimeout();
        atomikosProperties45.maxActives = 9;
        boolean boolean58 = properties2.containsKey((java.lang.Object) atomikosProperties45);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet59 = properties2.entrySet();
        int int60 = properties2.size();
        properties2.clear();
        java.lang.Object obj62 = properties2.clone();
        java.lang.String str63 = properties2.toString();
        java.lang.String str66 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objEntrySet59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{}" + "'", str63, "{}");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str66, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test6505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6505");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean22 = properties2.contains((java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        atomikosProperties23.logBaseName = "tmlog";
        atomikosProperties23.setEnableLogging(true);
        atomikosProperties23.setMaxActives((int) (byte) 0);
        atomikosProperties23.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        properties38.clear();
        boolean boolean40 = properties38.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        java.lang.Object obj46 = properties43.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection47 = properties43.values();
        boolean boolean48 = properties38.containsKey((java.lang.Object) objCollection47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties38.keys();
        java.lang.String str51 = properties38.getProperty("");
        java.lang.Object obj52 = properties2.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) properties38);
        int int53 = properties38.size();
        java.lang.String str55 = properties38.getProperty("{com.atomikos.icatch.{}=false, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test6506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6506");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        atomikosProperties23.setMaxActives((int) (byte) -1);
        java.lang.String str29 = atomikosProperties23.getService();
        long long30 = atomikosProperties23.defaultJtaTimeout;
        java.lang.String str31 = atomikosProperties23.logBaseName;
        java.lang.String str32 = atomikosProperties23.logBaseDir;
        java.lang.Class<?> wildcardClass33 = atomikosProperties23.getClass();
        java.lang.Object obj34 = properties21.put((java.lang.Object) false, (java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.serialJtaTransactions = true;
        atomikosProperties35.checkpointInterval = (-1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        java.lang.Object obj47 = properties21.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties44);
        java.util.Properties properties48 = atomikosProperties44.asProperties();
        java.lang.String str50 = properties48.getProperty("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}");
        java.lang.String str53 = properties48.getProperty("{com.atomikos.icatch.tmlog=0.0}", "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str53, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test6507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6507");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        boolean boolean34 = atomikosProperties32.isSerialJtaTransactions();
        java.lang.Object obj35 = properties7.get((java.lang.Object) atomikosProperties32);
        java.lang.String str36 = atomikosProperties32.transactionManagerUniqueName;
        boolean boolean37 = atomikosProperties32.isSerialJtaTransactions();
        java.lang.String str38 = atomikosProperties32.logBaseName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
    }

    @Test
    public void test6508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6508");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties10.transactionManagerUniqueName = "hi!";
        java.lang.String str42 = atomikosProperties10.service;
        java.util.Properties properties43 = atomikosProperties10.asProperties();
        java.lang.String str44 = atomikosProperties10.transactionManagerUniqueName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
    }

    @Test
    public void test6509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6509");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) 100);
        boolean boolean20 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties17.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        java.lang.String str31 = atomikosProperties25.getService();
        long long32 = atomikosProperties25.defaultJtaTimeout;
        java.lang.String str33 = atomikosProperties25.logBaseName;
        java.lang.String str34 = atomikosProperties25.logBaseDir;
        java.lang.Class<?> wildcardClass35 = atomikosProperties25.getClass();
        boolean boolean36 = properties2.remove((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        atomikosProperties37.forceShutdownOnVmExit = false;
        boolean boolean41 = atomikosProperties37.isSerialJtaTransactions();
        java.lang.String str42 = atomikosProperties37.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.Object obj46 = properties2.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        atomikosProperties47.setTransactionManagerUniqueName("");
        int int51 = atomikosProperties47.getMaxActives();
        java.lang.String str52 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        java.util.Properties properties57 = atomikosProperties55.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setCheckpointInterval((long) 100);
        boolean boolean64 = atomikosProperties61.isForceShutdownOnVmExit();
        atomikosProperties61.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean67 = properties60.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties68.enableLogging = true;
        boolean boolean72 = properties57.replace((java.lang.Object) boolean67, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection73 = properties57.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet74 = properties57.entrySet();
        atomikosProperties47.set(properties57, "hi!", (java.lang.Object) 0L);
        atomikosProperties47.setEnableLogging(false);
        atomikosProperties47.setTransactionManagerUniqueName("tmlog");
        atomikosProperties47.setEnableLogging(false);
        long long84 = atomikosProperties47.checkpointInterval;
        boolean boolean85 = atomikosProperties47.isThreadedTwoPhaseCommit();
        atomikosProperties47.setForceShutdownOnVmExit(true);
        int int88 = atomikosProperties47.maxActives;
        java.lang.Object obj89 = properties2.get((java.lang.Object) atomikosProperties47);
        long long90 = atomikosProperties47.getCheckpointInterval();
        java.lang.String str91 = atomikosProperties47.logBaseDir;
        boolean boolean92 = atomikosProperties47.isEnableLogging();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertNotNull(objEntrySet74);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 50 + "'", int88 == 50);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 500L + "'", long90 == 500L);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test6510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6510");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        boolean boolean49 = properties47.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        java.lang.Object obj55 = properties52.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        java.lang.String str58 = atomikosProperties56.logBaseName;
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        atomikosProperties56.setLogBaseName("");
        java.lang.Object obj62 = properties47.replace((java.lang.Object) properties52, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long64 = atomikosProperties63.checkpointInterval;
        java.util.Properties properties65 = atomikosProperties63.asProperties();
        java.lang.Object obj66 = properties65.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.logBaseDir;
        java.lang.String str69 = atomikosProperties67.logBaseName;
        java.lang.String str70 = atomikosProperties67.getLogBaseDir();
        atomikosProperties67.setMaxActives((int) (byte) -1);
        boolean boolean73 = atomikosProperties67.isEnableLogging();
        atomikosProperties67.transactionManagerUniqueName = "";
        atomikosProperties67.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str79 = atomikosProperties78.logBaseDir;
        java.lang.String str80 = atomikosProperties78.logBaseName;
        java.lang.String str81 = atomikosProperties78.getLogBaseDir();
        atomikosProperties78.setMaxActives((int) (byte) -1);
        java.lang.String str84 = atomikosProperties78.getService();
        java.lang.Object obj85 = properties65.getOrDefault((java.lang.Object) atomikosProperties67, (java.lang.Object) atomikosProperties78);
        int int86 = properties65.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet87 = properties65.entrySet();
        java.lang.Object obj88 = properties47.remove((java.lang.Object) objEntrySet87);
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.lang.Object obj92 = properties47.setProperty("{}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        java.io.PrintStream printStream93 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties47.list(printStream93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 500L + "'", long64 == 500L);
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertNotNull(obj66);
// flaky:         org.junit.Assert.assertEquals(obj66.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "tmlog" + "'", str80, "tmlog");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertNotNull(objEntrySet87);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test6511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6511");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setDefaultJtaTimeout((long) 50);
        boolean boolean16 = properties9.contains((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        atomikosProperties17.setService("");
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        boolean boolean36 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties17.set(properties22, "{}", (java.lang.Object) boolean36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        boolean boolean42 = properties40.containsValue((java.lang.Object) 100L);
        java.lang.String str43 = properties40.toString();
        java.lang.Object obj44 = properties9.put((java.lang.Object) "{}", (java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        java.lang.Object obj48 = properties47.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        boolean boolean55 = atomikosProperties49.isEnableLogging();
        atomikosProperties49.transactionManagerUniqueName = "";
        atomikosProperties49.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        atomikosProperties60.setMaxActives((int) (byte) -1);
        java.lang.String str66 = atomikosProperties60.getService();
        java.lang.Object obj67 = properties47.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        int int70 = atomikosProperties68.getMaxActives();
        java.lang.String str71 = atomikosProperties68.logBaseDir;
        java.lang.Object obj73 = properties47.putIfAbsent((java.lang.Object) atomikosProperties68, (java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet74 = properties47.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet75 = properties47.entrySet();
        java.lang.Object obj76 = properties40.remove((java.lang.Object) properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str78 = atomikosProperties77.logBaseDir;
        java.lang.String str79 = atomikosProperties77.logBaseName;
        atomikosProperties77.setService("");
        boolean boolean82 = atomikosProperties77.threadedTwoPhaseCommit;
        int int83 = atomikosProperties77.getMaxActives();
        boolean boolean84 = atomikosProperties77.isForceShutdownOnVmExit();
        boolean boolean85 = atomikosProperties77.isEnableLogging();
        boolean boolean86 = atomikosProperties77.serialJtaTransactions;
        int int87 = atomikosProperties77.getMaxActives();
        atomikosProperties77.setForceShutdownOnVmExit(false);
        atomikosProperties77.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean92 = atomikosProperties77.serialJtaTransactions;
        boolean boolean93 = atomikosProperties77.threadedTwoPhaseCommit;
        boolean boolean94 = atomikosProperties77.enableLogging;
        int int95 = atomikosProperties77.maxActives;
        java.lang.Object obj96 = properties47.get((java.lang.Object) int95);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 50 + "'", int70 == 50);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(objSet74);
        org.junit.Assert.assertNotNull(objEntrySet75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 50 + "'", int83 == 50);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 50 + "'", int87 == 50);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 50 + "'", int95 == 50);
        org.junit.Assert.assertNull(obj96);
    }

    @Test
    public void test6512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6512");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.maxTimeout = 10000L;
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        java.lang.String str17 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        properties20.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        atomikosProperties22.setTransactionManagerUniqueName("");
        int int26 = atomikosProperties22.getMaxActives();
        boolean boolean27 = properties20.containsValue((java.lang.Object) int26);
        java.lang.Object obj30 = properties20.setProperty("", "");
        java.util.Properties properties31 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        java.lang.String str34 = atomikosProperties32.logBaseName;
        java.lang.String str35 = atomikosProperties32.getLogBaseDir();
        atomikosProperties32.setMaxActives((int) (byte) -1);
        boolean boolean38 = atomikosProperties32.isEnableLogging();
        atomikosProperties32.transactionManagerUniqueName = "";
        atomikosProperties32.threadedTwoPhaseCommit = true;
        java.util.Properties properties43 = atomikosProperties32.asProperties();
        atomikosProperties32.maxTimeout = 10L;
        java.lang.Object obj46 = properties20.remove((java.lang.Object) atomikosProperties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        boolean boolean54 = atomikosProperties48.isEnableLogging();
        atomikosProperties48.transactionManagerUniqueName = "";
        atomikosProperties48.setDefaultJtaTimeout((long) (-1));
        atomikosProperties0.set(properties20, "tmlog", (java.lang.Object) atomikosProperties48);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        java.util.Properties properties62 = atomikosProperties60.asProperties();
        java.util.Set<java.lang.Object> objSet63 = properties62.keySet();
        java.util.Properties properties64 = new java.util.Properties(properties62);
        java.lang.Object obj65 = properties20.remove((java.lang.Object) properties64);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertNotNull(objSet63);
        org.junit.Assert.assertNull(obj65);
    }

    @Test
    public void test6513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6513");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties36.setMaxActives((int) '#');
        atomikosProperties36.defaultJtaTimeout = (short) -1;
        atomikosProperties36.setMaxActives((int) (short) -1);
        atomikosProperties36.serialJtaTransactions = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test6514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6514");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        java.lang.Object obj7 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.logBaseName;
        java.lang.String str11 = atomikosProperties8.getLogBaseDir();
        atomikosProperties8.setMaxActives((int) (byte) -1);
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        atomikosProperties8.transactionManagerUniqueName = "";
        atomikosProperties8.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        java.lang.String str25 = atomikosProperties19.getService();
        java.lang.Object obj26 = properties6.getOrDefault((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        boolean boolean31 = atomikosProperties27.isSerialJtaTransactions();
        long long32 = atomikosProperties27.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        atomikosProperties38.setTransactionManagerUniqueName("");
        int int42 = atomikosProperties38.getMaxActives();
        java.lang.String str43 = atomikosProperties38.transactionManagerUniqueName;
        boolean boolean44 = properties35.containsValue((java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        atomikosProperties45.maxActives = (byte) 0;
        atomikosProperties45.setTransactionManagerUniqueName("");
        java.lang.Object obj52 = properties35.get((java.lang.Object) atomikosProperties45);
        boolean boolean54 = properties35.containsValue((java.lang.Object) 100.0d);
        boolean boolean55 = properties2.replace(obj26, (java.lang.Object) atomikosProperties27, (java.lang.Object) boolean54);
        java.lang.Object obj56 = properties2.clone();
        java.util.Collection<java.lang.Object> objCollection57 = properties2.values();
        java.lang.String str58 = properties2.toString();
        java.util.Enumeration<?> wildcardEnumeration59 = properties2.propertyNames();
        boolean boolean60 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties2.elements();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
// flaky:         org.junit.Assert.assertEquals(obj56.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objCollection57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str58, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(wildcardEnumeration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objEnumeration61);
    }

    @Test
    public void test6515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6515");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean8 = atomikosProperties0.serialJtaTransactions;
        long long9 = atomikosProperties0.getMaxTimeout();
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test6516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6516");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        atomikosProperties0.setMaxActives((int) (byte) 1);
        java.lang.String str11 = atomikosProperties0.getLogBaseName();
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.util.Properties properties13 = new java.util.Properties(properties12);
        java.util.Properties properties14 = new java.util.Properties(properties12);
        java.io.PrintWriter printWriter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties14.list(printWriter15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(properties12);
    }

    @Test
    public void test6517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6517");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.service = "";
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.forceShutdownOnVmExit = true;
        java.lang.String str13 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test6518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6518");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setLogBaseDir("{}");
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        long long11 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean12 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6519");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.maxActives = (short) 0;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test6520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6520");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection20 = properties10.values();
        java.util.Properties properties21 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        java.util.Properties properties26 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        atomikosProperties27.setTransactionManagerUniqueName("");
        int int31 = atomikosProperties27.getMaxActives();
        atomikosProperties27.logBaseName = "tmlog";
        int int34 = atomikosProperties27.maxActives;
        boolean boolean35 = properties24.containsValue((java.lang.Object) int34);
        java.util.Properties properties36 = new java.util.Properties(properties24);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties36.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        long long45 = atomikosProperties38.defaultJtaTimeout;
        java.lang.String str46 = atomikosProperties38.logBaseName;
        java.util.Properties properties47 = atomikosProperties38.asProperties();
        java.lang.Object obj48 = properties21.getOrDefault((java.lang.Object) objEnumeration37, (java.lang.Object) properties47);
        java.lang.Object obj49 = properties47.clone();
        java.util.Properties properties50 = new java.util.Properties(properties47);
        boolean boolean51 = properties50.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        properties54.clear();
        boolean boolean56 = properties54.isEmpty();
        java.lang.Object obj57 = properties54.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        atomikosProperties59.forceShutdownOnVmExit = false;
        atomikosProperties59.setTransactionManagerUniqueName("");
        java.lang.Object obj65 = properties54.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties59);
        int int66 = properties54.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long68 = atomikosProperties67.checkpointInterval;
        java.util.Properties properties69 = atomikosProperties67.asProperties();
        java.lang.Object obj70 = properties69.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        java.lang.String str73 = atomikosProperties71.logBaseName;
        java.lang.String str74 = atomikosProperties71.getLogBaseDir();
        atomikosProperties71.setMaxActives((int) (byte) -1);
        boolean boolean77 = atomikosProperties71.isEnableLogging();
        atomikosProperties71.transactionManagerUniqueName = "";
        atomikosProperties71.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str83 = atomikosProperties82.logBaseDir;
        java.lang.String str84 = atomikosProperties82.logBaseName;
        java.lang.String str85 = atomikosProperties82.getLogBaseDir();
        atomikosProperties82.setMaxActives((int) (byte) -1);
        java.lang.String str88 = atomikosProperties82.getService();
        java.lang.Object obj89 = properties69.getOrDefault((java.lang.Object) atomikosProperties71, (java.lang.Object) atomikosProperties82);
        int int90 = properties69.size();
        java.lang.String str91 = properties69.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration92 = properties69.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties93 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties93.enableLogging = true;
        atomikosProperties93.maxActives = (byte) -1;
        java.lang.Object obj98 = properties54.putIfAbsent((java.lang.Object) properties69, (java.lang.Object) (byte) -1);
        properties50.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(obj49);
// flaky:         org.junit.Assert.assertEquals(obj49.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{}");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNotNull(obj70);
// flaky:         org.junit.Assert.assertEquals(obj70.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tmlog" + "'", str73, "tmlog");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "tmlog" + "'", str84, "tmlog");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 9 + "'", int90 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str91, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration92);
        org.junit.Assert.assertNull(obj98);
    }

    @Test
    public void test6521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6521");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.lang.Object obj13 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        atomikosProperties14.setService("");
        java.util.Properties properties19 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        properties23.clear();
        boolean boolean25 = properties23.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        atomikosProperties26.setTransactionManagerUniqueName("");
        int int30 = atomikosProperties26.getMaxActives();
        java.lang.String str31 = atomikosProperties26.transactionManagerUniqueName;
        boolean boolean32 = properties23.containsValue((java.lang.Object) atomikosProperties26);
        boolean boolean33 = atomikosProperties26.forceShutdownOnVmExit;
        atomikosProperties14.set(properties19, "{}", (java.lang.Object) boolean33);
        java.util.Properties properties35 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        boolean boolean38 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.threadedTwoPhaseCommit = false;
        java.lang.Object obj41 = properties2.putIfAbsent((java.lang.Object) properties19, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long43 = atomikosProperties42.checkpointInterval;
        java.util.Properties properties44 = atomikosProperties42.asProperties();
        properties44.clear();
        boolean boolean46 = properties44.isEmpty();
        int int47 = properties44.size();
        java.util.Set<java.lang.String> strSet48 = properties44.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        boolean boolean52 = atomikosProperties49.isEnableLogging();
        atomikosProperties49.setSerialJtaTransactions(true);
        java.lang.String str55 = atomikosProperties49.logBaseDir;
        atomikosProperties49.setForceShutdownOnVmExit(true);
        java.util.Properties properties58 = atomikosProperties49.asProperties();
        boolean boolean59 = properties44.equals((java.lang.Object) properties58);
        boolean boolean60 = properties19.equals((java.lang.Object) properties44);
        java.lang.Object obj63 = properties44.setProperty("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}", "{=}");
        int int64 = properties44.size();
        boolean boolean65 = properties44.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test6522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6522");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.maxActives = '4';
        long long48 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = 10000L;
        long long51 = atomikosProperties0.getCheckpointInterval();
        long long52 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean53 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test6523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6523");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        java.lang.Object obj21 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        boolean boolean28 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.transactionManagerUniqueName = "";
        atomikosProperties22.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        java.lang.String str39 = atomikosProperties33.getService();
        java.lang.Object obj40 = properties20.getOrDefault((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties33);
        int int41 = properties20.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet42 = properties20.entrySet();
        java.lang.Object obj43 = properties2.remove((java.lang.Object) objEntrySet42);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties2.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties2.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        boolean boolean51 = properties49.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        java.lang.Object obj57 = properties54.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.logBaseDir;
        java.lang.String str60 = atomikosProperties58.logBaseName;
        java.lang.String str61 = atomikosProperties58.getLogBaseDir();
        atomikosProperties58.setLogBaseName("");
        java.lang.Object obj64 = properties49.replace((java.lang.Object) properties54, (java.lang.Object) "");
        java.lang.String str66 = properties49.getProperty("tmlog");
        int int67 = properties49.size();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        java.lang.Class<?> wildcardClass69 = properties49.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(objEntrySet42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tmlog" + "'", str60, "tmlog");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test6524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6524");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean8 = atomikosProperties0.enableLogging;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        atomikosProperties0.logBaseDir = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test6525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6525");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        int int6 = atomikosProperties0.getMaxActives();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        int int10 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        long long18 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str19 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test6526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6526");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        int int14 = properties2.size();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties2.keys();
        properties2.clear();
        java.lang.String str18 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test6527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6527");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        java.util.Collection<java.lang.Object> objCollection57 = properties17.values();
        properties17.clear();
        java.util.Set<java.lang.String> strSet59 = properties17.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        boolean boolean64 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.setLogBaseName("");
        atomikosProperties60.setTransactionManagerUniqueName("tmlog");
        atomikosProperties60.setMaxActives((int) (byte) 1);
        java.lang.String str71 = atomikosProperties60.getLogBaseName();
        java.util.Properties properties72 = atomikosProperties60.asProperties();
        java.util.Properties properties73 = new java.util.Properties(properties72);
        properties17.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties72);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(properties72);
    }

    @Test
    public void test6528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6528");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.service = "hi!";
        long long8 = atomikosProperties0.getMaxTimeout();
        java.lang.String str9 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long12 = atomikosProperties0.getCheckpointInterval();
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str9, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test6529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6529");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        int int10 = atomikosProperties0.maxActives;
        atomikosProperties0.setEnableLogging(true);
        boolean boolean13 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.defaultJtaTimeout = 35L;
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test6530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6530");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        java.lang.Object obj21 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        boolean boolean28 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.transactionManagerUniqueName = "";
        atomikosProperties22.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        java.lang.String str39 = atomikosProperties33.getService();
        java.lang.Object obj40 = properties20.getOrDefault((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties33);
        int int41 = properties20.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet42 = properties20.entrySet();
        java.lang.Object obj43 = properties2.remove((java.lang.Object) objEntrySet42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.logBaseDir;
        atomikosProperties44.setTransactionManagerUniqueName("");
        int int48 = atomikosProperties44.getMaxActives();
        java.lang.String str49 = atomikosProperties44.getLogBaseDir();
        atomikosProperties44.setTransactionManagerUniqueName("");
        atomikosProperties44.setDefaultJtaTimeout(0L);
        int int54 = atomikosProperties44.maxActives;
        atomikosProperties44.setEnableLogging(false);
        long long57 = atomikosProperties44.getDefaultJtaTimeout();
        atomikosProperties44.setDefaultJtaTimeout(1L);
        atomikosProperties44.maxActives = (byte) 100;
        long long62 = atomikosProperties44.getDefaultJtaTimeout();
        atomikosProperties44.logBaseDir = "";
        atomikosProperties44.defaultJtaTimeout = (short) 100;
        boolean boolean67 = properties2.containsKey((java.lang.Object) atomikosProperties44);
        atomikosProperties44.setLogBaseName("{=}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(objEntrySet42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test6531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6531");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setTransactionManagerUniqueName("");
        atomikosProperties6.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass16 = atomikosProperties6.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        int int19 = atomikosProperties17.getMaxActives();
        java.lang.String str20 = atomikosProperties17.transactionManagerUniqueName;
        long long21 = atomikosProperties17.getCheckpointInterval();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        atomikosProperties27.transactionManagerUniqueName = "";
        atomikosProperties27.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        java.lang.Object obj45 = properties25.getOrDefault((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        int int48 = atomikosProperties46.getMaxActives();
        java.lang.String str49 = atomikosProperties46.logBaseDir;
        java.lang.Object obj51 = properties25.putIfAbsent((java.lang.Object) atomikosProperties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        atomikosProperties52.setService("");
        boolean boolean57 = atomikosProperties52.threadedTwoPhaseCommit;
        java.lang.String str58 = atomikosProperties52.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        boolean boolean63 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.serialJtaTransactions = true;
        java.lang.String str66 = atomikosProperties59.getService();
        java.lang.Object obj67 = properties25.putIfAbsent((java.lang.Object) str58, (java.lang.Object) atomikosProperties59);
        boolean boolean68 = properties3.replace((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties59);
        java.util.Properties properties69 = new java.util.Properties(properties3);
        java.util.Properties properties70 = new java.util.Properties(properties3);
        java.util.Enumeration<?> wildcardEnumeration71 = properties70.propertyNames();
        java.io.PrintStream printStream72 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties70.list(printStream72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration71);
    }

    @Test
    public void test6532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6532");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        boolean boolean7 = properties6.isEmpty();
        java.util.Collection<java.lang.Object> objCollection8 = properties6.values();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objCollection8);
    }

    @Test
    public void test6533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6533");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) 100);
        boolean boolean27 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean30 = properties23.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.enableLogging = true;
        boolean boolean35 = properties20.replace((java.lang.Object) boolean30, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection36 = properties20.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet37 = properties20.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet38 = properties20.entrySet();
        boolean boolean39 = properties20.isEmpty();
        boolean boolean40 = properties2.equals((java.lang.Object) boolean39);
        java.lang.String str43 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertNotNull(objEntrySet37);
        org.junit.Assert.assertNotNull(objEntrySet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}" + "'", str43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test6534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6534");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        atomikosProperties14.setMaxActives((int) (byte) -1);
        boolean boolean20 = atomikosProperties14.isEnableLogging();
        atomikosProperties14.transactionManagerUniqueName = "";
        atomikosProperties14.threadedTwoPhaseCommit = true;
        java.util.Properties properties25 = atomikosProperties14.asProperties();
        atomikosProperties14.maxTimeout = 10L;
        java.lang.Object obj28 = properties2.remove((java.lang.Object) atomikosProperties14);
        java.util.Set<java.lang.String> strSet29 = properties2.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet30 = properties2.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties2.entrySet();
        java.io.OutputStream outputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(outputStream32, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(objEntrySet31);
    }

    @Test
    public void test6535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6535");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        java.lang.Object obj16 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        properties19.clear();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj22 = properties19.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        properties25.clear();
        boolean boolean27 = properties25.isEmpty();
        java.util.Collection<java.lang.Object> objCollection28 = properties25.values();
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.util.Enumeration<?> wildcardEnumeration30 = properties25.propertyNames();
        java.util.Properties properties31 = new java.util.Properties(properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        properties34.clear();
        boolean boolean36 = properties34.isEmpty();
        java.lang.Object obj37 = properties34.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        java.lang.Object obj41 = properties40.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setMaxActives((int) (byte) -1);
        boolean boolean48 = atomikosProperties42.isEnableLogging();
        atomikosProperties42.transactionManagerUniqueName = "";
        atomikosProperties42.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        java.lang.String str55 = atomikosProperties53.logBaseName;
        java.lang.String str56 = atomikosProperties53.getLogBaseDir();
        atomikosProperties53.setMaxActives((int) (byte) -1);
        java.lang.String str59 = atomikosProperties53.getService();
        java.lang.Object obj60 = properties40.getOrDefault((java.lang.Object) atomikosProperties42, (java.lang.Object) atomikosProperties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setCheckpointInterval((long) 100);
        java.lang.String str64 = atomikosProperties61.getService();
        atomikosProperties61.defaultJtaTimeout = 'a';
        atomikosProperties61.enableLogging = false;
        atomikosProperties61.logBaseName = "tmlog";
        java.lang.Object obj71 = properties34.putIfAbsent((java.lang.Object) atomikosProperties42, (java.lang.Object) atomikosProperties61);
        java.lang.String str72 = atomikosProperties42.logBaseDir;
        java.lang.Object obj73 = properties25.get((java.lang.Object) atomikosProperties42);
        boolean boolean74 = properties2.equals((java.lang.Object) properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.logBaseDir;
        java.lang.String str77 = atomikosProperties75.logBaseName;
        java.lang.String str78 = atomikosProperties75.getLogBaseDir();
        atomikosProperties75.setMaxActives((int) (byte) -1);
        boolean boolean81 = atomikosProperties75.isEnableLogging();
        java.lang.String str82 = atomikosProperties75.getLogBaseName();
        atomikosProperties75.setDefaultJtaTimeout((long) '#');
        long long85 = atomikosProperties75.defaultJtaTimeout;
        java.lang.Object obj86 = properties25.remove((java.lang.Object) long85);
        java.io.OutputStream outputStream87 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.save(outputStream87, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "tmlog" + "'", obj16, "tmlog");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertNotNull(wildcardEnumeration30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{}");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tmlog" + "'", str77, "tmlog");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "tmlog" + "'", str82, "tmlog");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 35L + "'", long85 == 35L);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test6536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6536");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.setService("tmlog");
        java.lang.String str25 = atomikosProperties15.getLogBaseDir();
        long long26 = atomikosProperties15.getCheckpointInterval();
        atomikosProperties15.logBaseDir = "";
        atomikosProperties15.maxTimeout = (byte) 1;
        java.lang.String str31 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.maxActives = 9;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test6537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6537");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        java.util.Properties properties16 = new java.util.Properties(properties14);
        java.lang.Object obj19 = properties16.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str20 = properties16.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        boolean boolean23 = atomikosProperties21.isSerialJtaTransactions();
        atomikosProperties21.maxTimeout = 100;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.Object obj27 = properties2.replace((java.lang.Object) properties16, (java.lang.Object) int26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        properties30.clear();
        boolean boolean32 = properties30.isEmpty();
        java.lang.Object obj33 = properties30.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        properties36.clear();
        boolean boolean38 = properties36.isEmpty();
        java.util.Collection<java.lang.Object> objCollection39 = properties36.values();
        properties30.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        java.util.Enumeration<?> wildcardEnumeration41 = properties30.propertyNames();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.util.Collection<java.lang.Object> objCollection43 = properties16.values();
        java.lang.Object obj44 = properties16.clone();
        java.io.OutputStream outputStream45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.storeToXML(outputStream45, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNotNull(wildcardEnumeration41);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{}");
    }

    @Test
    public void test6538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6538");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long12 = atomikosProperties6.getDefaultJtaTimeout();
        long long13 = atomikosProperties6.getMaxTimeout();
        atomikosProperties6.logBaseName = "tmlog";
        long long16 = atomikosProperties6.getDefaultJtaTimeout();
        atomikosProperties6.maxActives = 9;
        boolean boolean19 = properties2.equals((java.lang.Object) atomikosProperties6);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties2.keys();
        java.lang.String str21 = properties2.toString();
        java.io.InputStream inputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.loadFromXML(inputStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
    }

    @Test
    public void test6539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6539");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setCheckpointInterval((-1L));
        boolean boolean5 = atomikosProperties0.serialJtaTransactions;
        boolean boolean6 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setDefaultJtaTimeout((long) '4');
        long long11 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test6540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6540");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.threadedTwoPhaseCommit = true;
        atomikosProperties31.setService("{}");
        java.lang.String str49 = atomikosProperties31.logBaseName;
        atomikosProperties31.setEnableLogging(false);
        long long52 = atomikosProperties31.maxTimeout;
        atomikosProperties31.maxActives = (short) -1;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
    }

    @Test
    public void test6541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6541");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        long long8 = atomikosProperties0.getMaxTimeout();
        long long9 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval((long) (short) 0);
        atomikosProperties0.setDefaultJtaTimeout(32L);
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        atomikosProperties0.setForceShutdownOnVmExit(true);
        boolean boolean18 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setCheckpointInterval((long) 9);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test6542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6542");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setCheckpointInterval((-1L));
        boolean boolean5 = atomikosProperties0.serialJtaTransactions;
        boolean boolean6 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setDefaultJtaTimeout((long) '4');
        atomikosProperties0.setLogBaseName("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test6543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6543");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        boolean boolean4 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str5 = atomikosProperties0.service;
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives(2);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
    }

    @Test
    public void test6544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6544");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setLogBaseName("");
        long long6 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) 0);
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6545");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        boolean boolean57 = atomikosProperties48.isThreadedTwoPhaseCommit();
        atomikosProperties48.setLogBaseName("");
        atomikosProperties48.maxActives = 100;
        atomikosProperties48.checkpointInterval = '4';
        atomikosProperties48.forceShutdownOnVmExit = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test6546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6546");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        atomikosProperties36.threadedTwoPhaseCommit = true;
        atomikosProperties36.setCheckpointInterval((long) 100);
        atomikosProperties36.setLogBaseName("");
        atomikosProperties36.setThreadedTwoPhaseCommit(true);
        atomikosProperties36.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        atomikosProperties36.maxActives = (byte) 1;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test6547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6547");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        java.util.Collection<java.lang.Object> objCollection22 = properties21.values();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.lang.Object obj24 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = properties23.contains(obj24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objCollection22);
    }

    @Test
    public void test6548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6548");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        java.util.Properties properties15 = atomikosProperties9.asProperties();
        boolean boolean16 = properties2.equals((java.lang.Object) atomikosProperties9);
        int int17 = atomikosProperties9.getMaxActives();
        boolean boolean18 = atomikosProperties9.threadedTwoPhaseCommit;
        atomikosProperties9.transactionManagerUniqueName = "hi!";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test6549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6549");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        boolean boolean29 = properties2.isEmpty();
        java.lang.Object obj30 = properties2.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties2.entrySet();
        java.lang.Object obj32 = properties2.clone();
        java.util.Set<java.lang.String> strSet33 = properties2.stringPropertyNames();
        java.io.InputStream inputStream34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(inputStream34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertNotNull(objEntrySet31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNotNull(strSet33);
    }

    @Test
    public void test6550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6550");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = 1;
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setCheckpointInterval((long) ' ');
        java.lang.String str18 = atomikosProperties0.service;
        boolean boolean19 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean20 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test6551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6551");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        java.util.Collection<java.lang.Object> objCollection57 = properties17.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet58 = properties17.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        java.util.Properties properties61 = atomikosProperties59.asProperties();
        properties61.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        atomikosProperties63.setTransactionManagerUniqueName("");
        int int67 = atomikosProperties63.getMaxActives();
        boolean boolean68 = properties61.containsValue((java.lang.Object) int67);
        java.lang.Object obj71 = properties61.setProperty("", "");
        java.util.Properties properties72 = new java.util.Properties(properties61);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str74 = atomikosProperties73.logBaseDir;
        java.lang.String str75 = atomikosProperties73.logBaseName;
        java.lang.String str76 = atomikosProperties73.getLogBaseDir();
        atomikosProperties73.setMaxActives((int) (byte) -1);
        boolean boolean79 = atomikosProperties73.isEnableLogging();
        atomikosProperties73.transactionManagerUniqueName = "";
        atomikosProperties73.threadedTwoPhaseCommit = true;
        java.util.Properties properties84 = atomikosProperties73.asProperties();
        atomikosProperties73.maxTimeout = 10L;
        java.lang.Object obj87 = properties61.remove((java.lang.Object) atomikosProperties73);
        atomikosProperties73.serialJtaTransactions = false;
        boolean boolean90 = properties17.containsKey((java.lang.Object) atomikosProperties73);
        java.lang.String str91 = atomikosProperties73.logBaseName;
        atomikosProperties73.maxTimeout = (short) 100;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(objEntrySet58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tmlog" + "'", str75, "tmlog");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(properties84);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "tmlog" + "'", str91, "tmlog");
    }

    @Test
    public void test6552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6552");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.maxActives = '4';
        boolean boolean48 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean49 = atomikosProperties0.isForceShutdownOnVmExit();
        long long50 = atomikosProperties0.checkpointInterval;
        boolean boolean51 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str52 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test6553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6553");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        boolean boolean18 = atomikosProperties14.isSerialJtaTransactions();
        atomikosProperties14.setLogBaseName("");
        atomikosProperties14.setTransactionManagerUniqueName("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        java.lang.Object obj28 = properties13.replace((java.lang.Object) "tmlog", (java.lang.Object) int27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        java.lang.Object obj32 = properties31.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        boolean boolean39 = atomikosProperties33.isEnableLogging();
        atomikosProperties33.transactionManagerUniqueName = "";
        atomikosProperties33.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.logBaseDir;
        java.lang.String str46 = atomikosProperties44.logBaseName;
        java.lang.String str47 = atomikosProperties44.getLogBaseDir();
        atomikosProperties44.setMaxActives((int) (byte) -1);
        java.lang.String str50 = atomikosProperties44.getService();
        java.lang.Object obj51 = properties31.getOrDefault((java.lang.Object) atomikosProperties33, (java.lang.Object) atomikosProperties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        int int54 = atomikosProperties52.getMaxActives();
        java.lang.String str55 = atomikosProperties52.logBaseDir;
        java.lang.Object obj57 = properties31.putIfAbsent((java.lang.Object) atomikosProperties52, (java.lang.Object) "");
        int int58 = properties31.size();
        java.util.Collection<java.lang.Object> objCollection59 = properties31.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        int int62 = atomikosProperties60.getMaxActives();
        java.lang.String str63 = atomikosProperties60.logBaseDir;
        java.lang.String str64 = atomikosProperties60.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.logBaseDir;
        java.lang.String str67 = atomikosProperties65.logBaseName;
        java.lang.String str68 = atomikosProperties65.getLogBaseDir();
        atomikosProperties65.setMaxActives((int) (byte) -1);
        boolean boolean71 = atomikosProperties65.isEnableLogging();
        java.lang.String str72 = atomikosProperties65.getLogBaseName();
        java.lang.Object obj73 = properties31.replace((java.lang.Object) atomikosProperties60, (java.lang.Object) atomikosProperties65);
        int int74 = atomikosProperties60.getMaxActives();
        boolean boolean75 = properties13.containsValue((java.lang.Object) atomikosProperties60);
        atomikosProperties60.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties60.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties60.enableLogging = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNotNull(obj32);
// flaky:         org.junit.Assert.assertEquals(obj32.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(objCollection59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 50 + "'", int62 == 50);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tmlog" + "'", str72, "tmlog");
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 50 + "'", int74 == 50);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test6554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6554");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.lang.Object obj4 = properties3.clone();
        java.util.Set<java.lang.Object> objSet5 = properties3.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.lang.Object obj11 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        atomikosProperties13.forceShutdownOnVmExit = false;
        atomikosProperties13.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties8.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties13);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        boolean boolean25 = properties23.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        java.lang.Object obj31 = properties28.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        java.lang.String str34 = atomikosProperties32.logBaseName;
        java.lang.String str35 = atomikosProperties32.getLogBaseDir();
        atomikosProperties32.setLogBaseName("");
        java.lang.Object obj38 = properties23.replace((java.lang.Object) properties28, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        java.lang.Object obj42 = properties41.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.String str46 = atomikosProperties43.getLogBaseDir();
        atomikosProperties43.setMaxActives((int) (byte) -1);
        boolean boolean49 = atomikosProperties43.isEnableLogging();
        atomikosProperties43.transactionManagerUniqueName = "";
        atomikosProperties43.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str55 = atomikosProperties54.logBaseDir;
        java.lang.String str56 = atomikosProperties54.logBaseName;
        java.lang.String str57 = atomikosProperties54.getLogBaseDir();
        atomikosProperties54.setMaxActives((int) (byte) -1);
        java.lang.String str60 = atomikosProperties54.getService();
        java.lang.Object obj61 = properties41.getOrDefault((java.lang.Object) atomikosProperties43, (java.lang.Object) atomikosProperties54);
        boolean boolean62 = properties8.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties23, (java.lang.Object) atomikosProperties54);
        java.util.Collection<java.lang.Object> objCollection63 = properties23.values();
        java.util.Collection<java.lang.Object> objCollection64 = properties23.values();
        java.util.Set<java.lang.String> strSet65 = properties23.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        boolean boolean68 = atomikosProperties66.isSerialJtaTransactions();
        atomikosProperties66.maxTimeout = 100;
        int int71 = atomikosProperties66.getMaxActives();
        atomikosProperties66.setEnableLogging(false);
        atomikosProperties66.logBaseDir = "{}";
        atomikosProperties66.setDefaultJtaTimeout(0L);
        atomikosProperties66.setMaxTimeout((long) '4');
        boolean boolean80 = properties23.equals((java.lang.Object) '4');
        java.util.Set<java.lang.Object> objSet81 = properties23.keySet();
        properties3.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.io.OutputStream outputStream83 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.save(outputStream83, "{com.atomikos.icatch.{}=false, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(obj4);
// flaky:         org.junit.Assert.assertEquals(obj4.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objSet5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{}");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tmlog" + "'", str56, "tmlog");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objCollection63);
        org.junit.Assert.assertNotNull(objCollection64);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 50 + "'", int71 == 50);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objSet81);
    }

    @Test
    public void test6555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6555");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.lang.Object obj15 = properties2.remove((java.lang.Object) atomikosProperties13);
        atomikosProperties13.forceShutdownOnVmExit = true;
        atomikosProperties13.setLogBaseName("tmlog");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        int int21 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setCheckpointInterval((long) (byte) 100);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
    }

    @Test
    public void test6556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6556");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        boolean boolean46 = atomikosProperties44.isSerialJtaTransactions();
        java.lang.String str47 = atomikosProperties44.getLogBaseName();
        long long48 = atomikosProperties44.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.lang.Object obj54 = properties51.clone();
        java.util.Set<java.lang.Object> objSet55 = properties51.keySet();
        boolean boolean58 = properties51.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        java.lang.Object obj59 = properties15.replace((java.lang.Object) long48, (java.lang.Object) properties51);
        java.util.Set<java.lang.String> strSet60 = properties15.stringPropertyNames();
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.save(outputStream61, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(strSet60);
    }

    @Test
    public void test6557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6557");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setDefaultJtaTimeout(0L);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setMaxActives((int) (short) 100);
        atomikosProperties0.maxActives = (short) 100;
        long long15 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test6558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6558");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        java.util.Properties properties50 = atomikosProperties48.asProperties();
        java.lang.Object obj51 = properties50.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        java.lang.String str55 = atomikosProperties52.getLogBaseDir();
        atomikosProperties52.setMaxActives((int) (byte) -1);
        boolean boolean58 = atomikosProperties52.isEnableLogging();
        atomikosProperties52.transactionManagerUniqueName = "";
        atomikosProperties52.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        atomikosProperties63.setMaxActives((int) (byte) -1);
        java.lang.String str69 = atomikosProperties63.getService();
        java.lang.Object obj70 = properties50.getOrDefault((java.lang.Object) atomikosProperties52, (java.lang.Object) atomikosProperties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long72 = atomikosProperties71.checkpointInterval;
        int int73 = atomikosProperties71.getMaxActives();
        java.lang.String str74 = atomikosProperties71.logBaseDir;
        java.lang.Object obj76 = properties50.putIfAbsent((java.lang.Object) atomikosProperties71, (java.lang.Object) "");
        boolean boolean77 = atomikosProperties71.isThreadedTwoPhaseCommit();
        boolean boolean78 = properties7.contains((java.lang.Object) boolean77);
        java.util.Properties properties79 = new java.util.Properties(properties7);
        boolean boolean80 = properties79.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(obj51);
// flaky:         org.junit.Assert.assertEquals(obj51.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 500L + "'", long72 == 500L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 50 + "'", int73 == 50);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test6559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6559");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        int int14 = properties2.size();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties2.elements();
        int int16 = properties2.size();
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.save(outputStream17, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test6560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6560");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        atomikosProperties48.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test6561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6561");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.transactionManagerUniqueName = "{-1=1}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test6562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6562");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        java.util.Collection<java.lang.Object> objCollection22 = properties21.values();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.lang.String str25 = properties21.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        java.util.Enumeration<?> wildcardEnumeration26 = properties21.propertyNames();
        java.io.OutputStream outputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties21.storeToXML(outputStream27, "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(wildcardEnumeration26);
    }

    @Test
    public void test6563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6563");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        boolean boolean23 = atomikosProperties4.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        java.lang.Object obj29 = properties26.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        java.lang.Object obj34 = properties33.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        atomikosProperties35.setMaxActives((int) (byte) -1);
        boolean boolean41 = atomikosProperties35.isEnableLogging();
        atomikosProperties35.transactionManagerUniqueName = "";
        atomikosProperties35.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        java.lang.String str52 = atomikosProperties46.getService();
        java.lang.Object obj53 = properties33.getOrDefault((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        int int56 = atomikosProperties54.getMaxActives();
        java.lang.String str57 = atomikosProperties54.logBaseDir;
        java.lang.Object obj59 = properties33.putIfAbsent((java.lang.Object) atomikosProperties54, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        boolean boolean64 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.setEnableLogging(false);
        boolean boolean67 = properties26.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        java.util.Properties properties70 = atomikosProperties68.asProperties();
        properties70.clear();
        java.util.Properties properties72 = new java.util.Properties(properties70);
        java.lang.Object obj75 = properties72.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str76 = properties72.toString();
        boolean boolean77 = properties26.containsValue((java.lang.Object) properties72);
        java.util.Set<java.lang.Object> objSet78 = properties72.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long81 = atomikosProperties80.checkpointInterval;
        int int82 = atomikosProperties80.getMaxActives();
        atomikosProperties4.set(properties72, "hi!", (java.lang.Object) atomikosProperties80);
        java.io.Reader reader84 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties72.load(reader84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj75, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{}" + "'", str76, "{}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objSet78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 50 + "'", int82 == 50);
    }

    @Test
    public void test6564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6564");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.threadedTwoPhaseCommit = true;
        atomikosProperties31.service = "tmlog";
        java.lang.String str49 = atomikosProperties31.logBaseName;
        atomikosProperties31.setLogBaseName("{}");
        atomikosProperties31.setTransactionManagerUniqueName("");
        atomikosProperties31.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
    }

    @Test
    public void test6565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6565");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str7 = atomikosProperties0.logBaseName;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.maxActives = 50;
        long long11 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str12 = atomikosProperties0.service;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test6566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6566");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        long long29 = atomikosProperties21.getDefaultJtaTimeout();
        int int30 = atomikosProperties21.maxActives;
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.tmlog=0.0}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
    }

    @Test
    public void test6567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6567");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.setMaxTimeout((long) (short) 100);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test6568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6568");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setCheckpointInterval((-1L));
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        atomikosProperties0.maxTimeout = ' ';
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 10);
        atomikosProperties0.setTransactionManagerUniqueName("{-1=1}");
        boolean boolean13 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.serialJtaTransactions = false;
        java.lang.String str16 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test6569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6569");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setMaxActives((int) (byte) 0);
        atomikosProperties0.setMaxActives((int) (short) 1);
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str14 = atomikosProperties0.getLogBaseDir();
        long long15 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        long long17 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
    }

    @Test
    public void test6570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6570");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str12 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        long long15 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
    }

    @Test
    public void test6571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6571");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        boolean boolean9 = properties7.containsValue((java.lang.Object) 100L);
        boolean boolean10 = properties2.contains((java.lang.Object) properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        properties13.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        atomikosProperties15.setTransactionManagerUniqueName("");
        int int19 = atomikosProperties15.getMaxActives();
        boolean boolean20 = properties13.containsValue((java.lang.Object) int19);
        java.lang.Object obj23 = properties13.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.lang.Object obj24 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        boolean boolean27 = atomikosProperties25.isSerialJtaTransactions();
        atomikosProperties25.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        atomikosProperties30.setTransactionManagerUniqueName("");
        int int34 = atomikosProperties30.getMaxActives();
        java.lang.String str35 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = atomikosProperties44.isForceShutdownOnVmExit();
        atomikosProperties44.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean50 = properties43.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.enableLogging = true;
        boolean boolean55 = properties40.replace((java.lang.Object) boolean50, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection56 = properties40.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet57 = properties40.entrySet();
        atomikosProperties30.set(properties40, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long63 = atomikosProperties62.checkpointInterval;
        java.util.Properties properties64 = atomikosProperties62.asProperties();
        properties64.clear();
        boolean boolean66 = properties64.isEmpty();
        java.util.Collection<java.lang.Object> objCollection67 = properties64.values();
        atomikosProperties25.set(properties40, "hi!", (java.lang.Object) objCollection67);
        atomikosProperties25.forceShutdownOnVmExit = false;
        atomikosProperties25.maxActives = '4';
        atomikosProperties25.maxTimeout = 10;
        boolean boolean75 = properties2.remove(obj24, (java.lang.Object) atomikosProperties25);
        atomikosProperties25.maxTimeout = '4';
        atomikosProperties25.logBaseDir = "hi!";
        boolean boolean80 = atomikosProperties25.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objCollection56);
        org.junit.Assert.assertNotNull(objEntrySet57);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 500L + "'", long63 == 500L);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objCollection67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test6572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6572");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        boolean boolean4 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        java.lang.String str8 = atomikosProperties6.transactionManagerUniqueName;
        boolean boolean9 = atomikosProperties6.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        java.util.Properties properties12 = atomikosProperties10.asProperties();
        java.lang.Object obj13 = properties12.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        atomikosProperties14.setMaxActives((int) (byte) -1);
        boolean boolean20 = atomikosProperties14.isEnableLogging();
        atomikosProperties14.transactionManagerUniqueName = "";
        atomikosProperties14.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        java.lang.String str31 = atomikosProperties25.getService();
        java.lang.Object obj32 = properties12.getOrDefault((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties25);
        int int33 = properties12.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.serialJtaTransactions = true;
        java.lang.String str42 = atomikosProperties35.getService();
        atomikosProperties6.set(properties12, "hi!", (java.lang.Object) str42);
        java.lang.String str45 = properties12.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseName();
        long long51 = atomikosProperties47.maxTimeout;
        java.lang.String str52 = atomikosProperties47.getTransactionManagerUniqueName();
        atomikosProperties0.set(properties12, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties47);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet54 = properties12.entrySet();
        java.lang.Class<?> wildcardClass55 = properties12.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 300000L + "'", long51 == 300000L);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(objEntrySet54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test6573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6573");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        java.lang.String str27 = properties2.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        properties30.clear();
        boolean boolean32 = properties30.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        atomikosProperties33.setTransactionManagerUniqueName("");
        int int37 = atomikosProperties33.getMaxActives();
        java.lang.String str38 = atomikosProperties33.transactionManagerUniqueName;
        boolean boolean39 = properties30.containsValue((java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) 100);
        atomikosProperties40.maxActives = (byte) 0;
        atomikosProperties40.setTransactionManagerUniqueName("");
        java.lang.Object obj47 = properties30.get((java.lang.Object) atomikosProperties40);
        boolean boolean49 = properties30.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        properties52.clear();
        boolean boolean54 = properties52.isEmpty();
        java.lang.Object obj55 = properties52.clone();
        java.util.Set<java.lang.Object> objSet56 = properties52.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) 100);
        java.lang.String str60 = atomikosProperties57.getService();
        atomikosProperties57.defaultJtaTimeout = 'a';
        atomikosProperties57.enableLogging = false;
        atomikosProperties57.threadedTwoPhaseCommit = false;
        int int67 = atomikosProperties57.maxActives;
        atomikosProperties57.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj70 = properties30.getOrDefault((java.lang.Object) properties52, (java.lang.Object) atomikosProperties57);
        java.lang.Object obj71 = properties2.remove((java.lang.Object) atomikosProperties57);
        atomikosProperties57.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean74 = atomikosProperties57.isSerialJtaTransactions();
        atomikosProperties57.maxTimeout = 9;
        atomikosProperties57.maxTimeout = 0;
        atomikosProperties57.enableLogging = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{}");
        org.junit.Assert.assertNotNull(objSet56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test6574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6574");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties2.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties2.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet15 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        int int18 = atomikosProperties16.getMaxActives();
        atomikosProperties16.setEnableLogging(true);
        boolean boolean21 = properties2.containsValue((java.lang.Object) atomikosProperties16);
        boolean boolean22 = atomikosProperties16.isThreadedTwoPhaseCommit();
        atomikosProperties16.setEnableLogging(false);
        boolean boolean25 = atomikosProperties16.threadedTwoPhaseCommit;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objEntrySet15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test6575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6575");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.maxTimeout = 0L;
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test6576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6576");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        boolean boolean4 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        java.lang.String str8 = atomikosProperties6.transactionManagerUniqueName;
        boolean boolean9 = atomikosProperties6.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        java.util.Properties properties12 = atomikosProperties10.asProperties();
        java.lang.Object obj13 = properties12.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        atomikosProperties14.setMaxActives((int) (byte) -1);
        boolean boolean20 = atomikosProperties14.isEnableLogging();
        atomikosProperties14.transactionManagerUniqueName = "";
        atomikosProperties14.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        java.lang.String str31 = atomikosProperties25.getService();
        java.lang.Object obj32 = properties12.getOrDefault((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties25);
        int int33 = properties12.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.serialJtaTransactions = true;
        java.lang.String str42 = atomikosProperties35.getService();
        atomikosProperties6.set(properties12, "hi!", (java.lang.Object) str42);
        java.lang.String str45 = properties12.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseName();
        long long51 = atomikosProperties47.maxTimeout;
        java.lang.String str52 = atomikosProperties47.getTransactionManagerUniqueName();
        atomikosProperties0.set(properties12, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties47);
        atomikosProperties0.setCheckpointInterval((long) 'a');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 300000L + "'", long51 == 300000L);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test6577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6577");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        java.util.Set<java.lang.String> strSet20 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        properties23.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        properties27.clear();
        boolean boolean29 = properties27.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        java.util.Properties properties32 = atomikosProperties30.asProperties();
        java.lang.Object obj35 = properties32.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection36 = properties32.values();
        boolean boolean37 = properties27.containsKey((java.lang.Object) objCollection36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseName();
        int int42 = atomikosProperties38.getMaxActives();
        atomikosProperties38.setLogBaseDir("hi!");
        java.lang.String str45 = atomikosProperties38.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        atomikosProperties46.setTransactionManagerUniqueName("");
        int int50 = atomikosProperties46.getMaxActives();
        java.lang.String str51 = atomikosProperties46.getLogBaseDir();
        java.lang.String str52 = atomikosProperties46.logBaseName;
        java.lang.Object obj53 = properties27.replace((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties46);
        boolean boolean54 = properties27.isEmpty();
        java.lang.Object obj55 = properties27.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet56 = properties27.entrySet();
        java.lang.Object obj57 = properties27.clone();
        boolean boolean58 = properties23.equals((java.lang.Object) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        atomikosProperties59.setService("");
        java.util.Properties properties64 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        properties68.clear();
        boolean boolean70 = properties68.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        atomikosProperties71.setTransactionManagerUniqueName("");
        int int75 = atomikosProperties71.getMaxActives();
        java.lang.String str76 = atomikosProperties71.transactionManagerUniqueName;
        boolean boolean77 = properties68.containsValue((java.lang.Object) atomikosProperties71);
        boolean boolean78 = atomikosProperties71.forceShutdownOnVmExit;
        atomikosProperties59.set(properties64, "{}", (java.lang.Object) boolean78);
        java.util.Properties properties80 = new java.util.Properties(properties64);
        java.util.Collection<java.lang.Object> objCollection81 = properties80.values();
        java.lang.Object obj82 = properties80.clone();
        java.lang.Object obj83 = properties2.put((java.lang.Object) properties23, (java.lang.Object) properties80);
        java.io.Writer writer84 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties23.store(writer84, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{}");
        org.junit.Assert.assertNotNull(objEntrySet56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 50 + "'", int75 == 50);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objCollection81);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "{}");
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test6578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6578");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean68 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test6579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6579");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.lang.Object obj15 = properties2.remove((java.lang.Object) atomikosProperties13);
        java.lang.String str16 = atomikosProperties13.logBaseName;
        boolean boolean17 = atomikosProperties13.isForceShutdownOnVmExit();
        atomikosProperties13.setEnableLogging(false);
        atomikosProperties13.checkpointInterval = (byte) 10;
        atomikosProperties13.logBaseName = "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties13.maxTimeout = 'a';
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test6580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6580");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.maxTimeout = 0L;
        long long16 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
    }

    @Test
    public void test6581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6581");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) -1);
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        properties17.clear();
        boolean boolean19 = properties17.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.logBaseDir;
        atomikosProperties20.setTransactionManagerUniqueName("");
        int int24 = atomikosProperties20.getMaxActives();
        java.lang.String str25 = atomikosProperties20.transactionManagerUniqueName;
        boolean boolean26 = properties17.containsValue((java.lang.Object) atomikosProperties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setCheckpointInterval((long) 100);
        atomikosProperties27.maxActives = (byte) 0;
        atomikosProperties27.setTransactionManagerUniqueName("");
        java.lang.Object obj34 = properties17.get((java.lang.Object) atomikosProperties27);
        atomikosProperties27.logBaseDir = "{}";
        atomikosProperties27.maxActives = (-1);
        atomikosProperties27.enableLogging = false;
        java.lang.String str41 = atomikosProperties27.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long43 = atomikosProperties42.checkpointInterval;
        long long44 = atomikosProperties42.getDefaultJtaTimeout();
        java.util.Properties properties45 = atomikosProperties42.asProperties();
        java.util.Set<java.lang.Object> objSet46 = properties45.keySet();
        java.util.Properties properties47 = new java.util.Properties(properties45);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.enableLogging = true;
        atomikosProperties49.maxActives = (byte) -1;
        atomikosProperties49.threadedTwoPhaseCommit = false;
        java.lang.String str56 = atomikosProperties49.getLogBaseName();
        atomikosProperties49.setMaxActives(100);
        atomikosProperties27.set(properties45, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        java.lang.String str64 = atomikosProperties61.getLogBaseDir();
        atomikosProperties61.setMaxActives((int) (byte) -1);
        boolean boolean67 = atomikosProperties61.isEnableLogging();
        long long68 = atomikosProperties61.checkpointInterval;
        atomikosProperties61.setCheckpointInterval(10L);
        int int71 = atomikosProperties61.maxActives;
        atomikosProperties61.setEnableLogging(true);
        atomikosProperties61.forceShutdownOnVmExit = false;
        boolean boolean76 = atomikosProperties61.enableLogging;
        atomikosProperties0.set(properties45, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) boolean76);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNotNull(objSet46);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tmlog" + "'", str56, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test6582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6582");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setLogBaseDir("{}");
        atomikosProperties0.setLogBaseDir("{}");
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        java.lang.Object obj19 = properties15.setProperty("tmlog", "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Object obj22 = properties15.setProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Object obj25 = properties15.setProperty("{-1=1}", "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        properties28.clear();
        java.util.Properties properties30 = new java.util.Properties(properties28);
        int int31 = properties30.size();
        boolean boolean32 = properties30.isEmpty();
        java.util.Collection<java.lang.Object> objCollection33 = properties30.values();
        java.lang.String str34 = properties30.toString();
        boolean boolean35 = properties15.contains((java.lang.Object) properties30);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test6583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6583");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        int int14 = properties2.size();
        java.lang.String str16 = properties2.getProperty("tmlog");
        java.util.Collection<java.lang.Object> objCollection17 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        properties20.clear();
        java.util.Properties properties22 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        atomikosProperties23.logBaseName = "tmlog";
        int int30 = atomikosProperties23.maxActives;
        boolean boolean31 = properties20.containsValue((java.lang.Object) int30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        atomikosProperties33.setThreadedTwoPhaseCommit(false);
        boolean boolean38 = properties20.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setCheckpointInterval((long) 100);
        atomikosProperties39.maxActives = (byte) 0;
        java.lang.Object obj44 = properties20.remove((java.lang.Object) atomikosProperties39);
        boolean boolean45 = properties2.containsKey((java.lang.Object) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        properties48.clear();
        boolean boolean50 = properties48.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        atomikosProperties51.setTransactionManagerUniqueName("");
        int int55 = atomikosProperties51.getMaxActives();
        java.lang.String str56 = atomikosProperties51.transactionManagerUniqueName;
        boolean boolean57 = properties48.containsValue((java.lang.Object) atomikosProperties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties58.setCheckpointInterval((long) 100);
        atomikosProperties58.maxActives = (byte) 0;
        atomikosProperties58.setTransactionManagerUniqueName("");
        java.lang.Object obj65 = properties48.get((java.lang.Object) atomikosProperties58);
        java.lang.String str66 = atomikosProperties58.getTransactionManagerUniqueName();
        atomikosProperties58.setService("tmlog");
        java.lang.String str69 = atomikosProperties58.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str71 = atomikosProperties70.logBaseDir;
        java.lang.String str72 = atomikosProperties70.logBaseName;
        java.lang.String str73 = atomikosProperties70.getLogBaseDir();
        atomikosProperties70.setMaxActives((int) (byte) -1);
        java.lang.String str76 = atomikosProperties70.getService();
        atomikosProperties70.setEnableLogging(false);
        long long79 = atomikosProperties70.checkpointInterval;
        java.lang.Object obj80 = properties20.getOrDefault((java.lang.Object) str69, (java.lang.Object) atomikosProperties70);
        java.io.OutputStream outputStream81 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.store(outputStream81, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 50 + "'", int55 == 50);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tmlog" + "'", str72, "tmlog");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 500L + "'", long79 == 500L);
        org.junit.Assert.assertNotNull(obj80);
    }

    @Test
    public void test6584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6584");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        boolean boolean46 = atomikosProperties44.isSerialJtaTransactions();
        java.lang.String str47 = atomikosProperties44.getLogBaseName();
        long long48 = atomikosProperties44.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.lang.Object obj54 = properties51.clone();
        java.util.Set<java.lang.Object> objSet55 = properties51.keySet();
        boolean boolean58 = properties51.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        java.lang.Object obj59 = properties15.replace((java.lang.Object) long48, (java.lang.Object) properties51);
        java.util.Properties properties60 = new java.util.Properties(properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.checkpointInterval;
        java.util.Properties properties63 = atomikosProperties61.asProperties();
        properties63.clear();
        boolean boolean65 = properties63.isEmpty();
        java.lang.Object obj66 = properties63.clone();
        java.util.Set<java.lang.Object> objSet67 = properties63.keySet();
        java.util.Enumeration<?> wildcardEnumeration68 = properties63.propertyNames();
        boolean boolean69 = properties51.containsKey((java.lang.Object) properties63);
        boolean boolean70 = properties63.isEmpty();
        properties63.clear();
        java.io.PrintWriter printWriter72 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties63.list(printWriter72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{}");
        org.junit.Assert.assertNotNull(objSet67);
        org.junit.Assert.assertNotNull(wildcardEnumeration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test6585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6585");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.setCheckpointInterval((long) 100);
        boolean boolean6 = atomikosProperties3.isForceShutdownOnVmExit();
        atomikosProperties3.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean9 = properties2.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties2.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        java.lang.String str14 = atomikosProperties12.logBaseName;
        java.lang.String str15 = atomikosProperties12.getLogBaseDir();
        atomikosProperties12.setLogBaseName("");
        boolean boolean18 = atomikosProperties12.threadedTwoPhaseCommit;
        long long19 = atomikosProperties12.getDefaultJtaTimeout();
        atomikosProperties12.setSerialJtaTransactions(true);
        boolean boolean22 = properties2.containsKey((java.lang.Object) atomikosProperties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        long long25 = atomikosProperties23.getDefaultJtaTimeout();
        java.util.Properties properties26 = atomikosProperties23.asProperties();
        java.util.Set<java.lang.Object> objSet27 = properties26.keySet();
        int int28 = properties26.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setTransactionManagerUniqueName("");
        atomikosProperties29.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass39 = atomikosProperties29.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        int int42 = atomikosProperties40.getMaxActives();
        java.lang.String str43 = atomikosProperties40.transactionManagerUniqueName;
        long long44 = atomikosProperties40.getCheckpointInterval();
        java.util.Properties properties45 = atomikosProperties40.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        java.lang.Object obj49 = properties48.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        atomikosProperties50.setMaxActives((int) (byte) -1);
        boolean boolean56 = atomikosProperties50.isEnableLogging();
        atomikosProperties50.transactionManagerUniqueName = "";
        atomikosProperties50.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        java.lang.String str64 = atomikosProperties61.getLogBaseDir();
        atomikosProperties61.setMaxActives((int) (byte) -1);
        java.lang.String str67 = atomikosProperties61.getService();
        java.lang.Object obj68 = properties48.getOrDefault((java.lang.Object) atomikosProperties50, (java.lang.Object) atomikosProperties61);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long70 = atomikosProperties69.checkpointInterval;
        int int71 = atomikosProperties69.getMaxActives();
        java.lang.String str72 = atomikosProperties69.logBaseDir;
        java.lang.Object obj74 = properties48.putIfAbsent((java.lang.Object) atomikosProperties69, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.logBaseDir;
        java.lang.String str77 = atomikosProperties75.logBaseName;
        atomikosProperties75.setService("");
        boolean boolean80 = atomikosProperties75.threadedTwoPhaseCommit;
        java.lang.String str81 = atomikosProperties75.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str83 = atomikosProperties82.logBaseDir;
        java.lang.String str84 = atomikosProperties82.logBaseName;
        java.lang.String str85 = atomikosProperties82.getLogBaseDir();
        boolean boolean86 = atomikosProperties82.isSerialJtaTransactions();
        atomikosProperties82.serialJtaTransactions = true;
        java.lang.String str89 = atomikosProperties82.getService();
        java.lang.Object obj90 = properties48.putIfAbsent((java.lang.Object) str81, (java.lang.Object) atomikosProperties82);
        boolean boolean91 = properties26.replace((java.lang.Object) atomikosProperties29, (java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties82);
        java.util.Properties properties92 = new java.util.Properties(properties26);
        boolean boolean93 = properties2.contains((java.lang.Object) properties92);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNotNull(obj49);
// flaky:         org.junit.Assert.assertEquals(obj49.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 500L + "'", long70 == 500L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 50 + "'", int71 == 50);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tmlog" + "'", str77, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tmlog" + "'", str81, "tmlog");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "tmlog" + "'", str84, "tmlog");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test6586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6586");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setMaxActives(11);
        boolean boolean14 = atomikosProperties0.serialJtaTransactions;
        long long15 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
    }

    @Test
    public void test6587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6587");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.tmlog=0.0}");
        atomikosProperties0.maxTimeout = '4';
        long long14 = atomikosProperties0.getMaxTimeout();
        boolean boolean15 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test6588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6588");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        properties2.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        java.io.OutputStream outputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(outputStream7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration6);
    }

    @Test
    public void test6589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6589");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        int int9 = atomikosProperties0.getMaxActives();
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test6590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6590");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str6 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        java.lang.Object obj14 = properties11.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str15 = properties11.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) 100);
        boolean boolean26 = atomikosProperties23.isForceShutdownOnVmExit();
        java.lang.Object obj27 = properties11.putIfAbsent((java.lang.Object) atomikosProperties16, (java.lang.Object) boolean26);
        java.util.Set<java.lang.String> strSet28 = properties11.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet29 = properties11.keySet();
        java.lang.Object obj30 = properties2.remove((java.lang.Object) properties11);
        boolean boolean31 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties2.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        atomikosProperties33.setTransactionManagerUniqueName("");
        int int37 = atomikosProperties33.getMaxActives();
        java.lang.String str38 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setTransactionManagerUniqueName("");
        atomikosProperties33.setDefaultJtaTimeout(0L);
        boolean boolean43 = atomikosProperties33.isForceShutdownOnVmExit();
        atomikosProperties33.setMaxActives((int) (short) 100);
        atomikosProperties33.setForceShutdownOnVmExit(true);
        boolean boolean48 = atomikosProperties33.isForceShutdownOnVmExit();
        boolean boolean49 = properties2.containsKey((java.lang.Object) boolean48);
        java.lang.Object obj50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj51 = properties2.get(obj50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj14, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(objSet29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test6591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6591");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.logBaseDir = "";
        long long10 = atomikosProperties0.getCheckpointInterval();
        int int11 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
    }

    @Test
    public void test6592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6592");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        atomikosProperties15.setThreadedTwoPhaseCommit(false);
        boolean boolean20 = properties2.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        atomikosProperties22.setDefaultJtaTimeout((long) (-1));
        int int31 = atomikosProperties22.maxActives;
        atomikosProperties22.setDefaultJtaTimeout(1L);
        java.lang.String str34 = atomikosProperties22.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.enableLogging = true;
        boolean boolean38 = atomikosProperties35.forceShutdownOnVmExit;
        java.lang.Object obj39 = properties2.replace((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        properties42.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.logBaseDir;
        atomikosProperties44.setTransactionManagerUniqueName("");
        int int48 = atomikosProperties44.getMaxActives();
        boolean boolean49 = properties42.containsValue((java.lang.Object) int48);
        java.lang.Object obj52 = properties42.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        java.lang.String str55 = atomikosProperties53.logBaseName;
        java.lang.String str56 = atomikosProperties53.getLogBaseDir();
        atomikosProperties53.setMaxActives((int) (byte) -1);
        boolean boolean59 = atomikosProperties53.isEnableLogging();
        long long60 = atomikosProperties53.checkpointInterval;
        atomikosProperties53.setCheckpointInterval(10L);
        boolean boolean63 = atomikosProperties53.serialJtaTransactions;
        java.lang.Object obj64 = properties2.put((java.lang.Object) properties42, (java.lang.Object) boolean63);
        java.lang.String str65 = properties42.toString();
        java.io.OutputStream outputStream66 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties42.storeToXML(outputStream66, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}" + "'", str65, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
    }

    @Test
    public void test6593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6593");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        int int66 = properties53.size();
        java.util.Properties properties67 = new java.util.Properties(properties53);
        boolean boolean68 = properties67.isEmpty();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test6594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6594");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setMaxActives((int) 'a');
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.checkpointInterval = (byte) 100;
        atomikosProperties0.enableLogging = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test6595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6595");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        boolean boolean22 = properties20.containsValue((java.lang.Object) 100L);
        java.lang.String str23 = properties20.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties20.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        properties27.clear();
        boolean boolean29 = properties27.isEmpty();
        java.lang.Object obj30 = properties27.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        java.lang.Object obj35 = properties34.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        atomikosProperties36.transactionManagerUniqueName = "";
        atomikosProperties36.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setMaxActives((int) (byte) -1);
        java.lang.String str53 = atomikosProperties47.getService();
        java.lang.Object obj54 = properties34.getOrDefault((java.lang.Object) atomikosProperties36, (java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        int int57 = atomikosProperties55.getMaxActives();
        java.lang.String str58 = atomikosProperties55.logBaseDir;
        java.lang.Object obj60 = properties34.putIfAbsent((java.lang.Object) atomikosProperties55, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        java.lang.String str64 = atomikosProperties61.getLogBaseDir();
        boolean boolean65 = atomikosProperties61.isSerialJtaTransactions();
        atomikosProperties61.setEnableLogging(false);
        boolean boolean68 = properties27.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties61);
        atomikosProperties61.logBaseName = "{}";
        long long71 = atomikosProperties61.getDefaultJtaTimeout();
        boolean boolean72 = atomikosProperties61.isThreadedTwoPhaseCommit();
        boolean boolean73 = atomikosProperties61.forceShutdownOnVmExit;
        long long74 = atomikosProperties61.getCheckpointInterval();
        boolean boolean75 = properties7.remove((java.lang.Object) objEnumeration24, (java.lang.Object) atomikosProperties61);
        atomikosProperties61.setService("tmlog");
        java.lang.String str78 = atomikosProperties61.getService();
        atomikosProperties61.logBaseDir = "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=1, com.atomikos.icatch.log_base_name=tmlog}";
        int int81 = atomikosProperties61.maxActives;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str23, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10000L + "'", long71 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 500L + "'", long74 == 500L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 50 + "'", int81 == 50);
    }

    @Test
    public void test6596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6596");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties2.entrySet();
        int int20 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        atomikosProperties21.forceShutdownOnVmExit = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setDefaultJtaTimeout(500L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) 100);
        boolean boolean36 = atomikosProperties33.isForceShutdownOnVmExit();
        atomikosProperties33.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties33.service = "hi!";
        java.lang.Object obj41 = properties2.put((java.lang.Object) atomikosProperties21, (java.lang.Object) "hi!");
        atomikosProperties21.threadedTwoPhaseCommit = false;
        boolean boolean44 = atomikosProperties21.threadedTwoPhaseCommit;
        atomikosProperties21.setMaxTimeout((long) 35);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test6597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6597");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str11 = atomikosProperties0.logBaseName;
        long long12 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
    }

    @Test
    public void test6598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6598");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Collection<java.lang.Object> objCollection8 = properties7.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties7.entrySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objCollection8);
        org.junit.Assert.assertNotNull(objEntrySet9);
    }

    @Test
    public void test6599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6599");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.lang.Object obj15 = properties2.setProperty("", "");
        java.util.Collection<java.lang.Object> objCollection16 = properties2.values();
        java.util.Set<java.lang.String> strSet17 = properties2.stringPropertyNames();
        java.io.InputStream inputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(inputStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(strSet17);
    }

    @Test
    public void test6600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6600");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        boolean boolean9 = properties7.containsValue((java.lang.Object) 100L);
        boolean boolean10 = properties2.contains((java.lang.Object) properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        properties13.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        atomikosProperties15.setTransactionManagerUniqueName("");
        int int19 = atomikosProperties15.getMaxActives();
        boolean boolean20 = properties13.containsValue((java.lang.Object) int19);
        java.lang.Object obj23 = properties13.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.lang.Object obj24 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        boolean boolean27 = atomikosProperties25.isSerialJtaTransactions();
        atomikosProperties25.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        atomikosProperties30.setTransactionManagerUniqueName("");
        int int34 = atomikosProperties30.getMaxActives();
        java.lang.String str35 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = atomikosProperties44.isForceShutdownOnVmExit();
        atomikosProperties44.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean50 = properties43.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.enableLogging = true;
        boolean boolean55 = properties40.replace((java.lang.Object) boolean50, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection56 = properties40.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet57 = properties40.entrySet();
        atomikosProperties30.set(properties40, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long63 = atomikosProperties62.checkpointInterval;
        java.util.Properties properties64 = atomikosProperties62.asProperties();
        properties64.clear();
        boolean boolean66 = properties64.isEmpty();
        java.util.Collection<java.lang.Object> objCollection67 = properties64.values();
        atomikosProperties25.set(properties40, "hi!", (java.lang.Object) objCollection67);
        atomikosProperties25.forceShutdownOnVmExit = false;
        atomikosProperties25.maxActives = '4';
        atomikosProperties25.maxTimeout = 10;
        boolean boolean75 = properties2.remove(obj24, (java.lang.Object) atomikosProperties25);
        atomikosProperties25.maxActives = 10;
        atomikosProperties25.maxTimeout = 0L;
        atomikosProperties25.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objCollection56);
        org.junit.Assert.assertNotNull(objEntrySet57);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 500L + "'", long63 == 500L);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objCollection67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test6601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6601");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        int int14 = properties2.size();
        java.lang.String str16 = properties2.getProperty("tmlog");
        java.util.Collection<java.lang.Object> objCollection17 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        properties20.clear();
        java.util.Properties properties22 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        atomikosProperties23.logBaseName = "tmlog";
        int int30 = atomikosProperties23.maxActives;
        boolean boolean31 = properties20.containsValue((java.lang.Object) int30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        atomikosProperties33.setThreadedTwoPhaseCommit(false);
        boolean boolean38 = properties20.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setCheckpointInterval((long) 100);
        atomikosProperties39.maxActives = (byte) 0;
        java.lang.Object obj44 = properties20.remove((java.lang.Object) atomikosProperties39);
        boolean boolean45 = properties2.containsKey((java.lang.Object) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        boolean boolean52 = atomikosProperties46.isEnableLogging();
        long long53 = atomikosProperties46.checkpointInterval;
        atomikosProperties46.setCheckpointInterval(10L);
        boolean boolean56 = atomikosProperties46.isForceShutdownOnVmExit();
        atomikosProperties46.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties46.setLogBaseName("hi!");
        boolean boolean61 = atomikosProperties46.isThreadedTwoPhaseCommit();
        boolean boolean62 = atomikosProperties46.isEnableLogging();
        boolean boolean63 = properties20.containsKey((java.lang.Object) atomikosProperties46);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet64 = properties20.entrySet();
        java.io.Reader reader65 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.load(reader65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objEntrySet64);
    }

    @Test
    public void test6602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6602");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        long long7 = atomikosProperties0.checkpointInterval;
        java.lang.String str8 = atomikosProperties0.getLogBaseDir();
        int int9 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.hi!=0, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
    }

    @Test
    public void test6603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6603");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        java.lang.Object obj22 = properties2.setProperty("", "tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) 100);
        atomikosProperties23.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        properties30.clear();
        boolean boolean32 = properties30.isEmpty();
        java.lang.Object obj33 = properties30.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        java.lang.Object obj38 = properties37.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        java.lang.String str41 = atomikosProperties39.logBaseName;
        java.lang.String str42 = atomikosProperties39.getLogBaseDir();
        atomikosProperties39.setMaxActives((int) (byte) -1);
        boolean boolean45 = atomikosProperties39.isEnableLogging();
        atomikosProperties39.transactionManagerUniqueName = "";
        atomikosProperties39.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        atomikosProperties50.setMaxActives((int) (byte) -1);
        java.lang.String str56 = atomikosProperties50.getService();
        java.lang.Object obj57 = properties37.getOrDefault((java.lang.Object) atomikosProperties39, (java.lang.Object) atomikosProperties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        int int60 = atomikosProperties58.getMaxActives();
        java.lang.String str61 = atomikosProperties58.logBaseDir;
        java.lang.Object obj63 = properties37.putIfAbsent((java.lang.Object) atomikosProperties58, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.logBaseDir;
        java.lang.String str66 = atomikosProperties64.logBaseName;
        java.lang.String str67 = atomikosProperties64.getLogBaseDir();
        boolean boolean68 = atomikosProperties64.isSerialJtaTransactions();
        atomikosProperties64.setEnableLogging(false);
        boolean boolean71 = properties30.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long73 = atomikosProperties72.checkpointInterval;
        java.util.Properties properties74 = atomikosProperties72.asProperties();
        properties74.clear();
        java.util.Properties properties76 = new java.util.Properties(properties74);
        java.lang.Object obj79 = properties76.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str80 = properties76.toString();
        boolean boolean81 = properties30.containsValue((java.lang.Object) properties76);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long84 = atomikosProperties83.checkpointInterval;
        boolean boolean85 = atomikosProperties83.isSerialJtaTransactions();
        atomikosProperties83.transactionManagerUniqueName = "";
        atomikosProperties23.set(properties76, "{}", (java.lang.Object) "");
        boolean boolean89 = properties2.containsKey((java.lang.Object) "");
        java.lang.Object obj90 = properties2.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "tmlog" + "'", str66, "tmlog");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 500L + "'", long73 == 500L);
        org.junit.Assert.assertNotNull(properties74);
        org.junit.Assert.assertEquals("'" + obj79 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj79, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{}" + "'", str80, "{}");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "{=tmlog}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "{=tmlog}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "{=tmlog}");
    }

    @Test
    public void test6604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6604");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setMaxActives((int) ' ');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
    }

    @Test
    public void test6605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6605");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        properties10.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        java.util.Properties properties16 = new java.util.Properties(properties14);
        java.lang.Object obj19 = properties16.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        long long22 = atomikosProperties20.getDefaultJtaTimeout();
        java.util.Properties properties23 = atomikosProperties20.asProperties();
        boolean boolean24 = atomikosProperties20.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setCheckpointInterval((long) 100);
        boolean boolean28 = atomikosProperties25.isForceShutdownOnVmExit();
        atomikosProperties25.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties25.service = "";
        atomikosProperties25.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        properties37.clear();
        boolean boolean39 = properties37.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        java.lang.Object obj45 = properties42.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection46 = properties42.values();
        boolean boolean47 = properties37.containsKey((java.lang.Object) objCollection46);
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties37.keys();
        boolean boolean49 = properties16.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties25, (java.lang.Object) properties37);
        java.lang.Object obj50 = properties16.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long52 = atomikosProperties51.checkpointInterval;
        java.util.Properties properties53 = atomikosProperties51.asProperties();
        properties53.clear();
        java.util.Properties properties55 = new java.util.Properties(properties53);
        java.lang.Object obj58 = properties55.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str59 = properties55.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        atomikosProperties60.setMaxActives((int) (byte) -1);
        boolean boolean66 = atomikosProperties60.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties67.setCheckpointInterval((long) 100);
        boolean boolean70 = atomikosProperties67.isForceShutdownOnVmExit();
        java.lang.Object obj71 = properties55.putIfAbsent((java.lang.Object) atomikosProperties60, (java.lang.Object) boolean70);
        java.util.Set<java.lang.String> strSet72 = properties55.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet73 = properties55.keySet();
        java.lang.String str74 = properties55.toString();
        boolean boolean75 = properties10.remove((java.lang.Object) properties16, (java.lang.Object) properties55);
        java.lang.Object obj78 = properties10.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str80 = atomikosProperties79.logBaseDir;
        java.lang.String str81 = atomikosProperties79.logBaseName;
        java.lang.String str82 = atomikosProperties79.getLogBaseDir();
        long long83 = atomikosProperties79.getDefaultJtaTimeout();
        long long84 = atomikosProperties79.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long86 = atomikosProperties85.checkpointInterval;
        java.util.Properties properties87 = atomikosProperties85.asProperties();
        properties87.clear();
        boolean boolean89 = properties10.remove((java.lang.Object) long84, (java.lang.Object) properties87);
        java.util.Enumeration<?> wildcardEnumeration90 = properties87.propertyNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj58, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(objSet73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tmlog" + "'", str81, "tmlog");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10000L + "'", long83 == 10000L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 500L + "'", long86 == 500L);
        org.junit.Assert.assertNotNull(properties87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration90);
    }

    @Test
    public void test6606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6606");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        atomikosProperties5.setLogBaseName("{}");
        java.lang.String str14 = atomikosProperties5.getTransactionManagerUniqueName();
        atomikosProperties5.setEnableLogging(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test6607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6607");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setMaxActives(0);
        atomikosProperties0.maxTimeout = 10;
        java.lang.String str11 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}";
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setDefaultJtaTimeout(1L);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test6608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6608");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        java.util.Properties properties48 = new java.util.Properties(properties46);
        java.lang.Object obj51 = properties48.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str52 = properties48.toString();
        boolean boolean53 = properties2.containsValue((java.lang.Object) properties48);
        java.util.Set<java.lang.Object> objSet54 = properties48.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        atomikosProperties55.forceShutdownOnVmExit = false;
        atomikosProperties55.setTransactionManagerUniqueName("");
        boolean boolean61 = atomikosProperties55.serialJtaTransactions;
        java.lang.Object obj62 = properties48.get((java.lang.Object) atomikosProperties55);
        java.lang.String str63 = properties48.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.logBaseDir;
        java.lang.String str66 = atomikosProperties64.logBaseName;
        java.lang.String str67 = atomikosProperties64.getLogBaseDir();
        atomikosProperties64.setMaxActives((int) (byte) -1);
        boolean boolean70 = atomikosProperties64.isEnableLogging();
        long long71 = atomikosProperties64.checkpointInterval;
        atomikosProperties64.setCheckpointInterval(10L);
        boolean boolean74 = atomikosProperties64.serialJtaTransactions;
        atomikosProperties64.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long78 = atomikosProperties77.checkpointInterval;
        java.util.Properties properties79 = atomikosProperties77.asProperties();
        properties79.clear();
        boolean boolean81 = properties79.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long83 = atomikosProperties82.checkpointInterval;
        java.util.Properties properties84 = atomikosProperties82.asProperties();
        java.lang.Object obj87 = properties84.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection88 = properties84.values();
        boolean boolean89 = properties79.containsKey((java.lang.Object) objCollection88);
        java.lang.Object obj90 = properties48.putIfAbsent((java.lang.Object) false, (java.lang.Object) properties79);
        java.lang.Object obj91 = properties48.clone();
        java.io.OutputStream outputStream92 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties48.storeToXML(outputStream92, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj51, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objSet54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{}" + "'", str63, "{}");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "tmlog" + "'", str66, "tmlog");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 500L + "'", long71 == 500L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 500L + "'", long78 == 500L);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 500L + "'", long83 == 500L);
        org.junit.Assert.assertNotNull(properties84);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(objCollection88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertEquals(obj91.toString(), "{false={}}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "{false={}}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "{false={}}");
    }

    @Test
    public void test6609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6609");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        java.util.Set<java.lang.String> strSet21 = properties4.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet22 = properties4.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties4.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties4.elements();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objSet22);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(objEnumeration24);
    }

    @Test
    public void test6610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6610");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.tmlog=0.0}");
        atomikosProperties0.maxTimeout = '4';
        long long14 = atomikosProperties0.getMaxTimeout();
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test6611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6611");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.checkpointInterval = 100L;
        atomikosProperties31.transactionManagerUniqueName = "{}";
        java.lang.String str49 = atomikosProperties31.transactionManagerUniqueName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{}" + "'", str49, "{}");
    }

    @Test
    public void test6612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6612");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties2.entrySet();
        int int20 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        atomikosProperties21.forceShutdownOnVmExit = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setDefaultJtaTimeout(500L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) 100);
        boolean boolean36 = atomikosProperties33.isForceShutdownOnVmExit();
        atomikosProperties33.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties33.service = "hi!";
        java.lang.Object obj41 = properties2.put((java.lang.Object) atomikosProperties21, (java.lang.Object) "hi!");
        properties2.clear();
        java.util.Set<java.lang.Object> objSet43 = properties2.keySet();
        java.lang.Object obj44 = properties2.clone();
        java.io.OutputStream outputStream45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream45, "{com.atomikos.icatch.{}=false, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(objSet43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{}");
    }

    @Test
    public void test6613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6613");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        long long12 = atomikosProperties0.getCheckpointInterval();
        boolean boolean13 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test6614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6614");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean6 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setMaxActives((int) 'a');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test6615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6615");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        int int5 = properties2.size();
        java.util.Set<java.lang.String> strSet6 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        boolean boolean10 = atomikosProperties7.isEnableLogging();
        atomikosProperties7.setSerialJtaTransactions(true);
        java.lang.String str13 = atomikosProperties7.logBaseDir;
        atomikosProperties7.setForceShutdownOnVmExit(true);
        java.util.Properties properties16 = atomikosProperties7.asProperties();
        boolean boolean17 = properties2.equals((java.lang.Object) properties16);
        java.lang.Object obj18 = properties16.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test6616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6616");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        boolean boolean20 = properties8.equals((java.lang.Object) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        atomikosProperties21.forceShutdownOnVmExit = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.maxTimeout = 50;
        boolean boolean33 = properties16.equals((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.logBaseDir;
        atomikosProperties34.setTransactionManagerUniqueName("");
        int int38 = atomikosProperties34.getMaxActives();
        java.lang.String str39 = atomikosProperties34.transactionManagerUniqueName;
        boolean boolean40 = properties16.containsValue((java.lang.Object) atomikosProperties34);
        java.util.Properties properties41 = new java.util.Properties(properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long43 = atomikosProperties42.checkpointInterval;
        java.util.Properties properties44 = atomikosProperties42.asProperties();
        java.lang.Object obj45 = properties44.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        boolean boolean52 = atomikosProperties46.isEnableLogging();
        atomikosProperties46.transactionManagerUniqueName = "";
        atomikosProperties46.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        java.lang.String str59 = atomikosProperties57.logBaseName;
        java.lang.String str60 = atomikosProperties57.getLogBaseDir();
        atomikosProperties57.setMaxActives((int) (byte) -1);
        java.lang.String str63 = atomikosProperties57.getService();
        java.lang.Object obj64 = properties44.getOrDefault((java.lang.Object) atomikosProperties46, (java.lang.Object) atomikosProperties57);
        int int65 = properties44.size();
        java.lang.String str67 = properties44.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        java.util.Properties properties70 = atomikosProperties68.asProperties();
        java.lang.Object obj71 = properties70.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str73 = atomikosProperties72.logBaseDir;
        java.lang.String str74 = atomikosProperties72.logBaseName;
        java.lang.String str75 = atomikosProperties72.getLogBaseDir();
        atomikosProperties72.setMaxActives((int) (byte) -1);
        java.lang.String str78 = atomikosProperties72.getService();
        long long79 = atomikosProperties72.defaultJtaTimeout;
        java.lang.String str80 = atomikosProperties72.logBaseName;
        boolean boolean81 = properties44.remove(obj71, (java.lang.Object) atomikosProperties72);
        java.util.Enumeration<java.lang.Object> objEnumeration82 = properties44.keys();
        boolean boolean83 = properties41.containsKey((java.lang.Object) objEnumeration82);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties84 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long85 = atomikosProperties84.checkpointInterval;
        java.util.Properties properties86 = atomikosProperties84.asProperties();
        properties86.clear();
        boolean boolean88 = properties86.isEmpty();
        java.lang.Object obj89 = properties86.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties90 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long91 = atomikosProperties90.checkpointInterval;
        java.util.Properties properties92 = atomikosProperties90.asProperties();
        properties92.clear();
        boolean boolean94 = properties92.isEmpty();
        java.util.Collection<java.lang.Object> objCollection95 = properties92.values();
        properties86.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties92);
        java.util.Properties properties97 = new java.util.Properties(properties86);
        java.util.Enumeration<java.lang.Object> objEnumeration98 = properties97.elements();
        boolean boolean99 = properties41.containsValue((java.lang.Object) properties97);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertNotNull(obj45);
// flaky:         org.junit.Assert.assertEquals(obj45.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertNotNull(obj71);
// flaky:         org.junit.Assert.assertEquals(obj71.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "tmlog" + "'", str74, "tmlog");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10000L + "'", long79 == 10000L);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "tmlog" + "'", str80, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objEnumeration82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 500L + "'", long85 == 500L);
        org.junit.Assert.assertNotNull(properties86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "{}");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 500L + "'", long91 == 500L);
        org.junit.Assert.assertNotNull(properties92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(objCollection95);
        org.junit.Assert.assertNotNull(objEnumeration98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test6617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6617");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        java.util.Properties properties48 = new java.util.Properties(properties46);
        java.lang.Object obj51 = properties48.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str52 = properties48.toString();
        boolean boolean53 = properties2.containsValue((java.lang.Object) properties48);
        java.util.Set<java.lang.Object> objSet54 = properties48.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        atomikosProperties55.forceShutdownOnVmExit = false;
        atomikosProperties55.setTransactionManagerUniqueName("");
        boolean boolean61 = atomikosProperties55.serialJtaTransactions;
        java.lang.Object obj62 = properties48.get((java.lang.Object) atomikosProperties55);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        boolean boolean67 = atomikosProperties63.isSerialJtaTransactions();
        atomikosProperties63.serialJtaTransactions = true;
        atomikosProperties63.checkpointInterval = (-1L);
        atomikosProperties63.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long75 = atomikosProperties74.checkpointInterval;
        java.util.Properties properties76 = atomikosProperties74.asProperties();
        boolean boolean78 = properties76.containsValue((java.lang.Object) 100L);
        java.lang.String str79 = properties76.toString();
        java.lang.Object obj82 = properties76.setProperty("", "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet83 = properties76.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties84 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long85 = atomikosProperties84.checkpointInterval;
        long long86 = atomikosProperties84.getDefaultJtaTimeout();
        java.util.Properties properties87 = atomikosProperties84.asProperties();
        java.lang.String str88 = properties87.toString();
        boolean boolean89 = properties76.equals((java.lang.Object) properties87);
        java.util.Properties properties90 = new java.util.Properties(properties76);
        boolean boolean91 = properties48.remove((java.lang.Object) true, (java.lang.Object) properties90);
        java.io.InputStream inputStream92 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties48.load(inputStream92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj51, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objSet54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 500L + "'", long75 == 500L);
        org.junit.Assert.assertNotNull(properties76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str79, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(objEntrySet83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 500L + "'", long85 == 500L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10000L + "'", long86 == 10000L);
        org.junit.Assert.assertNotNull(properties87);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str88, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test6618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6618");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long8 = atomikosProperties0.maxTimeout;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        int int11 = properties9.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        boolean boolean14 = atomikosProperties12.isSerialJtaTransactions();
        atomikosProperties12.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        atomikosProperties17.setTransactionManagerUniqueName("");
        int int21 = atomikosProperties17.getMaxActives();
        java.lang.String str22 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setCheckpointInterval((long) 100);
        boolean boolean34 = atomikosProperties31.isForceShutdownOnVmExit();
        atomikosProperties31.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean37 = properties30.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.enableLogging = true;
        boolean boolean42 = properties27.replace((java.lang.Object) boolean37, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection43 = properties27.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet44 = properties27.entrySet();
        atomikosProperties17.set(properties27, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.util.Collection<java.lang.Object> objCollection54 = properties51.values();
        atomikosProperties12.set(properties27, "hi!", (java.lang.Object) objCollection54);
        atomikosProperties12.setCheckpointInterval((long) (short) 10);
        java.lang.String str58 = atomikosProperties12.logBaseDir;
        java.util.Properties properties59 = atomikosProperties12.asProperties();
        java.lang.Object obj60 = properties9.get((java.lang.Object) atomikosProperties12);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertNotNull(objEntrySet44);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNull(obj60);
    }

    @Test
    public void test6619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6619");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties2.keys();
        int int15 = properties2.size();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test6620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6620");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.lang.Object obj11 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setCheckpointInterval((long) 100);
        java.lang.String str38 = atomikosProperties35.getService();
        atomikosProperties35.defaultJtaTimeout = 'a';
        atomikosProperties35.enableLogging = false;
        atomikosProperties35.logBaseName = "tmlog";
        java.lang.Object obj45 = properties8.putIfAbsent((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties35);
        java.lang.String str46 = atomikosProperties35.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties47.setCheckpointInterval((long) 100);
        java.lang.String str50 = atomikosProperties47.getService();
        atomikosProperties47.defaultJtaTimeout = 'a';
        atomikosProperties47.enableLogging = false;
        atomikosProperties47.logBaseName = "tmlog";
        atomikosProperties47.setCheckpointInterval((long) 9);
        java.lang.Object obj59 = properties2.getOrDefault((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties47);
        java.util.Enumeration<?> wildcardEnumeration60 = properties2.propertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objEnumeration5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNotNull(wildcardEnumeration60);
    }

    @Test
    public void test6621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6621");
        java.util.Properties properties0 = new java.util.Properties();
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream1, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test6622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6622");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        atomikosProperties0.forceShutdownOnVmExit = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties10);
    }

    @Test
    public void test6623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6623");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        int int16 = atomikosProperties14.getMaxActives();
        java.lang.String str17 = atomikosProperties14.logBaseDir;
        boolean boolean18 = atomikosProperties14.serialJtaTransactions;
        java.lang.String str19 = atomikosProperties14.transactionManagerUniqueName;
        atomikosProperties14.threadedTwoPhaseCommit = false;
        long long22 = atomikosProperties14.maxTimeout;
        java.util.Properties properties23 = atomikosProperties14.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.logBaseDir;
        java.lang.String str26 = atomikosProperties24.logBaseName;
        java.lang.String str27 = atomikosProperties24.getLogBaseDir();
        boolean boolean28 = atomikosProperties24.isSerialJtaTransactions();
        atomikosProperties24.serialJtaTransactions = true;
        java.lang.String str31 = atomikosProperties24.getService();
        long long32 = atomikosProperties24.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        atomikosProperties33.setTransactionManagerUniqueName("");
        int int37 = atomikosProperties33.getMaxActives();
        java.lang.String str38 = atomikosProperties33.transactionManagerUniqueName;
        atomikosProperties33.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        properties43.clear();
        java.util.Properties properties45 = new java.util.Properties(properties43);
        atomikosProperties33.set(properties43, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj51 = properties43.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties52 = new java.util.Properties(properties43);
        java.lang.Object obj53 = properties52.clone();
        java.util.Set<java.lang.String> strSet54 = properties52.stringPropertyNames();
        boolean boolean55 = properties13.replace((java.lang.Object) atomikosProperties14, (java.lang.Object) long32, (java.lang.Object) strSet54);
        boolean boolean56 = atomikosProperties14.forceShutdownOnVmExit;
        atomikosProperties14.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 300000L + "'", long22 == 300000L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test6624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6624");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str6 = atomikosProperties0.service;
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test6625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6625");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        java.util.Enumeration<java.lang.Object> objEnumeration26 = properties2.keys();
        java.lang.String str27 = properties2.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        properties30.clear();
        boolean boolean32 = properties30.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        boolean boolean37 = properties35.containsValue((java.lang.Object) 100L);
        boolean boolean38 = properties30.contains((java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        boolean boolean43 = properties41.isEmpty();
        java.lang.Object obj44 = properties41.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        properties47.clear();
        boolean boolean49 = properties47.isEmpty();
        java.util.Collection<java.lang.Object> objCollection50 = properties47.values();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.lang.Object obj54 = properties47.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.lang.Object obj55 = properties47.clone();
        boolean boolean56 = properties35.equals((java.lang.Object) properties47);
        properties47.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        properties60.clear();
        boolean boolean62 = properties60.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        atomikosProperties63.setTransactionManagerUniqueName("");
        int int67 = atomikosProperties63.getMaxActives();
        java.lang.String str68 = atomikosProperties63.transactionManagerUniqueName;
        boolean boolean69 = properties60.containsValue((java.lang.Object) atomikosProperties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties70.setCheckpointInterval((long) 100);
        atomikosProperties70.maxActives = (byte) 0;
        atomikosProperties70.setTransactionManagerUniqueName("");
        java.lang.Object obj77 = properties60.get((java.lang.Object) atomikosProperties70);
        java.lang.String str78 = atomikosProperties70.getTransactionManagerUniqueName();
        atomikosProperties70.setService("tmlog");
        long long81 = atomikosProperties70.getCheckpointInterval();
        long long82 = atomikosProperties70.maxTimeout;
        long long83 = atomikosProperties70.getCheckpointInterval();
        java.lang.Object obj84 = properties2.replace((java.lang.Object) properties47, (java.lang.Object) atomikosProperties70);
        long long85 = atomikosProperties70.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(objEnumeration26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str27, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{}");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objCollection50);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 100L + "'", long81 == 100L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 300000L + "'", long82 == 300000L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 100L + "'", long83 == 100L);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 100L + "'", long85 == 100L);
    }

    @Test
    public void test6626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6626");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.util.Properties properties16 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        java.lang.Object obj20 = properties19.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        boolean boolean27 = atomikosProperties21.isEnableLogging();
        atomikosProperties21.transactionManagerUniqueName = "";
        atomikosProperties21.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        java.lang.String str34 = atomikosProperties32.logBaseName;
        java.lang.String str35 = atomikosProperties32.getLogBaseDir();
        atomikosProperties32.setMaxActives((int) (byte) -1);
        java.lang.String str38 = atomikosProperties32.getService();
        java.lang.Object obj39 = properties19.getOrDefault((java.lang.Object) atomikosProperties21, (java.lang.Object) atomikosProperties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        int int42 = atomikosProperties40.getMaxActives();
        java.lang.String str43 = atomikosProperties40.logBaseDir;
        java.lang.Object obj45 = properties19.putIfAbsent((java.lang.Object) atomikosProperties40, (java.lang.Object) "");
        int int46 = properties19.size();
        java.util.Collection<java.lang.Object> objCollection47 = properties19.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        int int50 = atomikosProperties48.getMaxActives();
        java.lang.String str51 = atomikosProperties48.logBaseDir;
        java.lang.String str52 = atomikosProperties48.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        java.lang.String str55 = atomikosProperties53.logBaseName;
        java.lang.String str56 = atomikosProperties53.getLogBaseDir();
        atomikosProperties53.setMaxActives((int) (byte) -1);
        boolean boolean59 = atomikosProperties53.isEnableLogging();
        java.lang.String str60 = atomikosProperties53.getLogBaseName();
        java.lang.Object obj61 = properties19.replace((java.lang.Object) atomikosProperties48, (java.lang.Object) atomikosProperties53);
        boolean boolean62 = atomikosProperties48.threadedTwoPhaseCommit;
        java.lang.String str63 = atomikosProperties48.transactionManagerUniqueName;
        boolean boolean64 = properties16.containsValue((java.lang.Object) atomikosProperties48);
        atomikosProperties48.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties48.enableLogging = true;
        atomikosProperties48.threadedTwoPhaseCommit = true;
        int int71 = atomikosProperties48.getMaxActives();
        boolean boolean72 = atomikosProperties48.isSerialJtaTransactions();
        java.util.Properties properties73 = atomikosProperties48.asProperties();
        java.lang.String str75 = properties73.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tmlog" + "'", str60, "tmlog");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 50 + "'", int71 == 50);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test6627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6627");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        java.lang.String str72 = atomikosProperties66.getService();
        long long73 = atomikosProperties66.defaultJtaTimeout;
        atomikosProperties66.setEnableLogging(true);
        boolean boolean76 = properties53.equals((java.lang.Object) atomikosProperties66);
        boolean boolean77 = atomikosProperties66.isThreadedTwoPhaseCommit();
        atomikosProperties66.setMaxActives((int) (short) 100);
        atomikosProperties66.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        long long82 = atomikosProperties66.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
    }

    @Test
    public void test6628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6628");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        int int6 = atomikosProperties0.maxActives;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setLogBaseDir("hi!");
        atomikosProperties0.maxActives = 0;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
    }

    @Test
    public void test6629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6629");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.serialJtaTransactions;
        long long8 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setCheckpointInterval((long) '4');
        atomikosProperties0.maxTimeout = 50L;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test6630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6630");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setService("{}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test6631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6631");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        long long13 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.setService("hi!");
        atomikosProperties11.serialJtaTransactions = false;
        boolean boolean18 = atomikosProperties11.isForceShutdownOnVmExit();
        boolean boolean19 = properties10.containsKey((java.lang.Object) atomikosProperties11);
        java.lang.String str20 = properties10.toString();
        java.io.InputStream inputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.load(inputStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str20, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test6632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6632");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        boolean boolean34 = atomikosProperties32.isSerialJtaTransactions();
        java.lang.Object obj35 = properties7.get((java.lang.Object) atomikosProperties32);
        atomikosProperties32.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties32.enableLogging = true;
        atomikosProperties32.maxTimeout = (byte) 10;
        int int42 = atomikosProperties32.maxActives;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
    }

    @Test
    public void test6633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6633");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.lang.String str2 = atomikosProperties0.service;
        atomikosProperties0.setService("tmlog");
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        long long6 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str7 = atomikosProperties0.getService();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
    }

    @Test
    public void test6634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6634");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setDefaultJtaTimeout((long) 50);
        boolean boolean16 = properties9.contains((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        atomikosProperties17.setService("");
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        boolean boolean36 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties17.set(properties22, "{}", (java.lang.Object) boolean36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        boolean boolean42 = properties40.containsValue((java.lang.Object) 100L);
        java.lang.String str43 = properties40.toString();
        java.lang.Object obj44 = properties9.put((java.lang.Object) "{}", (java.lang.Object) properties40);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet45 = properties9.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        atomikosProperties46.setTransactionManagerUniqueName("");
        int int50 = atomikosProperties46.getMaxActives();
        java.lang.String str51 = atomikosProperties46.getLogBaseDir();
        java.lang.String str52 = atomikosProperties46.logBaseName;
        boolean boolean53 = atomikosProperties46.threadedTwoPhaseCommit;
        boolean boolean54 = properties9.containsValue((java.lang.Object) atomikosProperties46);
        atomikosProperties46.setMaxActives(0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEntrySet45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test6635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6635");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties2.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties2.entrySet();
        java.lang.String str22 = properties2.getProperty("hi!");
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties2.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        atomikosProperties24.forceShutdownOnVmExit = false;
        atomikosProperties24.threadedTwoPhaseCommit = false;
        atomikosProperties24.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties24.threadedTwoPhaseCommit = false;
        atomikosProperties24.maxTimeout = 50;
        java.lang.Class<?> wildcardClass36 = atomikosProperties24.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        java.util.Properties properties41 = new java.util.Properties(properties39);
        java.lang.Object obj44 = properties41.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str45 = properties41.toString();
        java.lang.Object obj48 = properties41.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet49 = properties41.keySet();
        boolean boolean50 = properties2.remove((java.lang.Object) atomikosProperties24, (java.lang.Object) properties41);
        java.lang.Object obj53 = properties41.setProperty("{}", "tmlog");
        boolean boolean54 = properties41.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        boolean boolean58 = atomikosProperties56.isSerialJtaTransactions();
        java.lang.String str59 = atomikosProperties56.getLogBaseName();
        atomikosProperties56.maxTimeout = (short) 1;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long63 = atomikosProperties62.checkpointInterval;
        java.util.Properties properties64 = atomikosProperties62.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        java.util.Properties properties67 = atomikosProperties65.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties68.setCheckpointInterval((long) 100);
        boolean boolean71 = atomikosProperties68.isForceShutdownOnVmExit();
        atomikosProperties68.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean74 = properties67.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties75.enableLogging = true;
        boolean boolean79 = properties64.replace((java.lang.Object) boolean74, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection80 = properties64.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet81 = properties64.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet82 = properties64.entrySet();
        java.lang.String str84 = properties64.getProperty("hi!");
        java.util.Enumeration<java.lang.Object> objEnumeration85 = properties64.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties86 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str87 = atomikosProperties86.logBaseDir;
        java.lang.String str88 = atomikosProperties86.logBaseName;
        java.lang.String str89 = atomikosProperties86.getLogBaseDir();
        atomikosProperties86.setMaxActives((int) (byte) -1);
        java.lang.String str92 = atomikosProperties86.getService();
        java.lang.String str93 = atomikosProperties86.getService();
        atomikosProperties86.setMaxTimeout((long) (short) 1);
        boolean boolean96 = properties64.equals((java.lang.Object) atomikosProperties86);
        java.util.Properties properties97 = new java.util.Properties(properties64);
        boolean boolean98 = properties41.replace((java.lang.Object) false, (java.lang.Object) atomikosProperties56, (java.lang.Object) properties64);
        java.util.Enumeration<java.lang.Object> objEnumeration99 = properties41.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertEquals("'" + obj44 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj44, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 500L + "'", long63 == 500L);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objCollection80);
        org.junit.Assert.assertNotNull(objEntrySet81);
        org.junit.Assert.assertNotNull(objEntrySet82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(objEnumeration85);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "tmlog" + "'", str88, "tmlog");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(objEnumeration99);
    }

    @Test
    public void test6636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6636");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        java.util.Properties properties15 = atomikosProperties9.asProperties();
        boolean boolean16 = properties2.equals((java.lang.Object) atomikosProperties9);
        atomikosProperties9.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties9.setMaxActives((int) 'a');
        atomikosProperties9.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties9.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test6637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6637");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setDefaultJtaTimeout((long) 50);
        boolean boolean16 = properties9.contains((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        atomikosProperties17.setService("");
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        boolean boolean36 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties17.set(properties22, "{}", (java.lang.Object) boolean36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        boolean boolean42 = properties40.containsValue((java.lang.Object) 100L);
        java.lang.String str43 = properties40.toString();
        java.lang.Object obj44 = properties9.put((java.lang.Object) "{}", (java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        java.lang.Object obj48 = properties47.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        boolean boolean55 = atomikosProperties49.isEnableLogging();
        atomikosProperties49.transactionManagerUniqueName = "";
        atomikosProperties49.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        atomikosProperties60.setMaxActives((int) (byte) -1);
        java.lang.String str66 = atomikosProperties60.getService();
        java.lang.Object obj67 = properties47.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        int int70 = atomikosProperties68.getMaxActives();
        java.lang.String str71 = atomikosProperties68.logBaseDir;
        java.lang.Object obj73 = properties47.putIfAbsent((java.lang.Object) atomikosProperties68, (java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet74 = properties47.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet75 = properties47.entrySet();
        java.lang.Object obj76 = properties40.remove((java.lang.Object) properties47);
        java.lang.Object obj79 = properties47.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}", "{=}");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration80 = properties47.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.springframework.boot.jta.atomikos.AtomikosProperties cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 50 + "'", int70 == 50);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(objSet74);
        org.junit.Assert.assertNotNull(objEntrySet75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test6638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6638");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setCheckpointInterval((long) 0);
        long long6 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
    }

    @Test
    public void test6639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6639");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties2.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties2.entrySet();
        java.lang.String str22 = properties2.getProperty("hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet23 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        java.lang.Object obj29 = properties26.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        java.util.Properties properties32 = atomikosProperties30.asProperties();
        properties32.clear();
        boolean boolean34 = properties32.isEmpty();
        java.util.Collection<java.lang.Object> objCollection35 = properties32.values();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        java.lang.Object obj39 = properties32.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.lang.Object obj40 = properties32.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        java.lang.Object obj44 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties43.elements();
        java.util.Properties properties46 = new java.util.Properties(properties43);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        int int49 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection50 = properties2.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(objEntrySet23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(obj44);
// flaky:         org.junit.Assert.assertEquals(obj44.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(objCollection50);
    }

    @Test
    public void test6640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6640");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str12 = atomikosProperties0.getLogBaseName();
        java.lang.String str13 = atomikosProperties0.transactionManagerUniqueName;
        long long14 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setLogBaseDir("hi!");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
    }

    @Test
    public void test6641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6641");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.setCheckpointInterval((long) 100);
        boolean boolean6 = atomikosProperties3.isForceShutdownOnVmExit();
        atomikosProperties3.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean9 = properties2.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties2.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration11 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        java.lang.String str14 = atomikosProperties12.logBaseName;
        java.lang.String str15 = atomikosProperties12.getLogBaseDir();
        atomikosProperties12.setLogBaseName("");
        boolean boolean18 = atomikosProperties12.threadedTwoPhaseCommit;
        long long19 = atomikosProperties12.getDefaultJtaTimeout();
        atomikosProperties12.setSerialJtaTransactions(true);
        boolean boolean22 = properties2.containsKey((java.lang.Object) atomikosProperties12);
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties2.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
        org.junit.Assert.assertNotNull(objEnumeration11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objEnumeration23);
    }

    @Test
    public void test6642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6642");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean8 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test6643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6643");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties2.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet46 = properties2.entrySet();
        java.util.Properties properties47 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        atomikosProperties48.setService("");
        java.util.Properties properties53 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        java.util.Properties properties57 = atomikosProperties55.asProperties();
        properties57.clear();
        boolean boolean59 = properties57.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        atomikosProperties60.setTransactionManagerUniqueName("");
        int int64 = atomikosProperties60.getMaxActives();
        java.lang.String str65 = atomikosProperties60.transactionManagerUniqueName;
        boolean boolean66 = properties57.containsValue((java.lang.Object) atomikosProperties60);
        boolean boolean67 = atomikosProperties60.forceShutdownOnVmExit;
        atomikosProperties48.set(properties53, "{}", (java.lang.Object) boolean67);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        atomikosProperties69.setTransactionManagerUniqueName("");
        int int73 = atomikosProperties69.getMaxActives();
        atomikosProperties69.logBaseName = "tmlog";
        atomikosProperties69.setEnableLogging(true);
        atomikosProperties69.setMaxActives((int) (byte) 0);
        atomikosProperties69.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str83 = atomikosProperties82.logBaseDir;
        atomikosProperties82.setTransactionManagerUniqueName("");
        long long86 = atomikosProperties82.defaultJtaTimeout;
        boolean boolean87 = atomikosProperties82.isSerialJtaTransactions();
        boolean boolean88 = properties2.replace((java.lang.Object) properties53, (java.lang.Object) "hi!", (java.lang.Object) atomikosProperties82);
        java.util.Enumeration<java.lang.Object> objEnumeration89 = properties53.elements();
        java.util.Properties properties90 = new java.util.Properties(properties53);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objEntrySet46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 50 + "'", int73 == 50);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10000L + "'", long86 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objEnumeration89);
    }

    @Test
    public void test6644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6644");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.transactionManagerUniqueName;
        atomikosProperties6.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        atomikosProperties6.set(properties16, "tmlog", (java.lang.Object) 0.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        java.lang.Object obj26 = properties2.putIfAbsent((java.lang.Object) "tmlog", (java.lang.Object) atomikosProperties22);
        java.lang.String str27 = atomikosProperties22.getLogBaseDir();
        boolean boolean28 = atomikosProperties22.enableLogging;
        java.util.Properties properties29 = atomikosProperties22.asProperties();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(properties29);
    }

    @Test
    public void test6645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6645");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties4.maxActives = ' ';
        java.lang.String str25 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setMaxTimeout(1L);
        boolean boolean28 = atomikosProperties4.isThreadedTwoPhaseCommit();
        long long29 = atomikosProperties4.getMaxTimeout();
        boolean boolean30 = atomikosProperties4.isEnableLogging();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test6646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6646");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        boolean boolean23 = atomikosProperties4.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        java.lang.Object obj29 = properties26.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        java.lang.Object obj34 = properties33.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        atomikosProperties35.setMaxActives((int) (byte) -1);
        boolean boolean41 = atomikosProperties35.isEnableLogging();
        atomikosProperties35.transactionManagerUniqueName = "";
        atomikosProperties35.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        java.lang.String str52 = atomikosProperties46.getService();
        java.lang.Object obj53 = properties33.getOrDefault((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        int int56 = atomikosProperties54.getMaxActives();
        java.lang.String str57 = atomikosProperties54.logBaseDir;
        java.lang.Object obj59 = properties33.putIfAbsent((java.lang.Object) atomikosProperties54, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        boolean boolean64 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.setEnableLogging(false);
        boolean boolean67 = properties26.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        java.util.Properties properties70 = atomikosProperties68.asProperties();
        properties70.clear();
        java.util.Properties properties72 = new java.util.Properties(properties70);
        java.lang.Object obj75 = properties72.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str76 = properties72.toString();
        boolean boolean77 = properties26.containsValue((java.lang.Object) properties72);
        java.util.Set<java.lang.Object> objSet78 = properties72.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long81 = atomikosProperties80.checkpointInterval;
        int int82 = atomikosProperties80.getMaxActives();
        atomikosProperties4.set(properties72, "hi!", (java.lang.Object) atomikosProperties80);
        atomikosProperties80.setCheckpointInterval(32L);
        atomikosProperties80.setEnableLogging(true);
        boolean boolean88 = atomikosProperties80.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj75, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{}" + "'", str76, "{}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objSet78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 50 + "'", int82 == 50);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test6647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6647");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.defaultJtaTimeout = 10;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.maxActives = (short) 10;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test6648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6648");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj28 = properties25.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection29 = properties25.values();
        int int30 = properties25.size();
        java.lang.Object obj31 = properties5.put((java.lang.Object) "{}", (java.lang.Object) properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        java.lang.String str34 = atomikosProperties32.logBaseName;
        java.lang.String str35 = atomikosProperties32.getLogBaseName();
        atomikosProperties32.setDefaultJtaTimeout((long) (byte) 1);
        boolean boolean38 = atomikosProperties32.isSerialJtaTransactions();
        boolean boolean39 = atomikosProperties32.serialJtaTransactions;
        atomikosProperties32.forceShutdownOnVmExit = true;
        java.lang.Object obj42 = properties25.get((java.lang.Object) atomikosProperties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long44 = atomikosProperties43.checkpointInterval;
        int int45 = atomikosProperties43.getMaxActives();
        atomikosProperties43.setCheckpointInterval(1L);
        atomikosProperties43.enableLogging = true;
        java.lang.String str50 = atomikosProperties43.getTransactionManagerUniqueName();
        boolean boolean51 = properties25.equals((java.lang.Object) str50);
        java.lang.Object obj52 = properties25.clone();
        java.util.Collection<java.lang.Object> objCollection53 = properties25.values();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 50 + "'", int45 == 50);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
// flaky:         org.junit.Assert.assertEquals(obj52.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objCollection53);
    }

    @Test
    public void test6649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6649");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.lang.String str2 = atomikosProperties0.service;
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setCheckpointInterval((long) 50);
        java.lang.String str6 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean7 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test6650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6650");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.defaultJtaTimeout = 10000L;
        atomikosProperties0.setMaxTimeout((long) ' ');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test6651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6651");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties7.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        atomikosProperties33.setTransactionManagerUniqueName("");
        int int37 = atomikosProperties33.getMaxActives();
        java.lang.String str38 = atomikosProperties33.transactionManagerUniqueName;
        atomikosProperties33.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        properties43.clear();
        java.util.Properties properties45 = new java.util.Properties(properties43);
        atomikosProperties33.set(properties43, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj51 = properties43.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties52 = new java.util.Properties(properties43);
        java.util.Collection<java.lang.Object> objCollection53 = properties43.values();
        java.util.Properties properties54 = new java.util.Properties(properties43);
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.util.Properties properties56 = new java.util.Properties(properties7);
        java.lang.Object obj59 = properties7.setProperty("{com.atomikos.icatch.{}=false, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}}", "{com.atomikos.icatch.tmlog=0.0}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(objCollection53);
        org.junit.Assert.assertNull(obj59);
    }

    @Test
    public void test6652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6652");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.serialJtaTransactions;
        long long8 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str9 = atomikosProperties0.logBaseName;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
    }

    @Test
    public void test6653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6653");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.logBaseDir;
        atomikosProperties1.setTransactionManagerUniqueName("");
        int int5 = atomikosProperties1.getMaxActives();
        java.lang.String str6 = atomikosProperties1.getLogBaseDir();
        atomikosProperties1.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setCheckpointInterval((long) 100);
        boolean boolean18 = atomikosProperties15.isForceShutdownOnVmExit();
        atomikosProperties15.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean21 = properties14.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.enableLogging = true;
        boolean boolean26 = properties11.replace((java.lang.Object) boolean21, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection27 = properties11.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet28 = properties11.entrySet();
        atomikosProperties1.set(properties11, "hi!", (java.lang.Object) 0L);
        atomikosProperties1.setEnableLogging(false);
        atomikosProperties1.setTransactionManagerUniqueName("tmlog");
        atomikosProperties1.setEnableLogging(false);
        long long38 = atomikosProperties1.checkpointInterval;
        java.lang.Object obj39 = properties0.remove((java.lang.Object) long38);
        java.util.Properties properties40 = new java.util.Properties(properties0);
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties0.elements();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertNotNull(objEntrySet28);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objEnumeration41);
    }

    @Test
    public void test6654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6654");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = 1;
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        boolean boolean16 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean17 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test6655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6655");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        java.lang.Object obj26 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.setCheckpointInterval((long) 100);
        boolean boolean33 = atomikosProperties30.isForceShutdownOnVmExit();
        atomikosProperties30.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean36 = properties29.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        java.lang.Object obj40 = properties39.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        atomikosProperties41.setMaxActives((int) (byte) -1);
        boolean boolean47 = atomikosProperties41.isEnableLogging();
        atomikosProperties41.transactionManagerUniqueName = "";
        atomikosProperties41.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        java.lang.String str55 = atomikosProperties52.getLogBaseDir();
        atomikosProperties52.setMaxActives((int) (byte) -1);
        java.lang.String str58 = atomikosProperties52.getService();
        java.lang.Object obj59 = properties39.getOrDefault((java.lang.Object) atomikosProperties41, (java.lang.Object) atomikosProperties52);
        java.lang.String str60 = atomikosProperties52.service;
        long long61 = atomikosProperties52.maxTimeout;
        long long62 = atomikosProperties52.getMaxTimeout();
        java.lang.Object obj63 = properties2.getOrDefault((java.lang.Object) boolean36, (java.lang.Object) long62);
        java.util.Collection<java.lang.Object> objCollection64 = properties2.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 300000L + "'", long61 == 300000L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 300000L + "'", long62 == 300000L);
        org.junit.Assert.assertEquals("'" + obj63 + "' != '" + 300000L + "'", obj63, 300000L);
        org.junit.Assert.assertNotNull(objCollection64);
    }

    @Test
    public void test6656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6656");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.lang.String str15 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        java.lang.String str19 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str19, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test6657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6657");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.lang.String str15 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        java.lang.String str20 = atomikosProperties18.logBaseName;
        java.lang.String str21 = atomikosProperties18.getLogBaseDir();
        atomikosProperties18.setMaxActives((int) (byte) -1);
        boolean boolean24 = atomikosProperties18.isEnableLogging();
        long long25 = atomikosProperties18.checkpointInterval;
        atomikosProperties18.setCheckpointInterval(10L);
        boolean boolean28 = atomikosProperties18.isForceShutdownOnVmExit();
        atomikosProperties18.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties18.setSerialJtaTransactions(false);
        boolean boolean33 = atomikosProperties18.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        java.lang.Object obj37 = properties36.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        boolean boolean44 = atomikosProperties38.isEnableLogging();
        atomikosProperties38.transactionManagerUniqueName = "";
        atomikosProperties38.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        java.lang.String str55 = atomikosProperties49.getService();
        java.lang.Object obj56 = properties36.getOrDefault((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties49);
        boolean boolean57 = properties2.remove((java.lang.Object) atomikosProperties18, (java.lang.Object) atomikosProperties49);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test6658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6658");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str6 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        java.lang.Object obj14 = properties11.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str15 = properties11.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) 100);
        boolean boolean26 = atomikosProperties23.isForceShutdownOnVmExit();
        java.lang.Object obj27 = properties11.putIfAbsent((java.lang.Object) atomikosProperties16, (java.lang.Object) boolean26);
        java.util.Set<java.lang.String> strSet28 = properties11.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet29 = properties11.keySet();
        java.lang.Object obj30 = properties2.remove((java.lang.Object) properties11);
        java.lang.String str31 = properties2.toString();
        java.lang.String str33 = properties2.getProperty("");
        java.lang.String str35 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj14, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(objSet29);
        org.junit.Assert.assertNull(obj30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str31, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test6659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6659");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setCheckpointInterval((long) (short) -1);
        atomikosProperties0.forceShutdownOnVmExit = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test6660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6660");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        boolean boolean9 = properties7.containsValue((java.lang.Object) 100L);
        boolean boolean10 = properties2.contains((java.lang.Object) properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        properties13.clear();
        boolean boolean15 = properties13.isEmpty();
        java.lang.Object obj16 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        properties19.clear();
        boolean boolean21 = properties19.isEmpty();
        java.util.Collection<java.lang.Object> objCollection22 = properties19.values();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.lang.Object obj26 = properties19.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.lang.Object obj27 = properties19.clone();
        boolean boolean28 = properties7.equals((java.lang.Object) properties19);
        boolean boolean29 = properties7.isEmpty();
        java.util.Set<java.lang.Object> objSet30 = properties7.keySet();
        boolean boolean31 = properties7.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties7.keys();
        int int33 = properties7.size();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
    }

    @Test
    public void test6661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6661");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties2.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties2.keys();
        java.util.Collection<java.lang.Object> objCollection15 = properties2.values();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        atomikosProperties17.setService("");
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        boolean boolean36 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties17.set(properties22, "{}", (java.lang.Object) boolean36);
        java.util.Properties properties38 = new java.util.Properties(properties22);
        java.lang.Object obj39 = properties2.remove((java.lang.Object) properties22);
        java.lang.String str41 = properties22.getProperty("{=}");
        java.io.OutputStream outputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties22.save(outputStream42, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test6662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6662");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        long long11 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setMaxTimeout((long) (short) 10);
        atomikosProperties0.defaultJtaTimeout = 50;
        boolean boolean16 = atomikosProperties0.enableLogging;
        java.lang.String str17 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
    }

    @Test
    public void test6663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6663");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        java.lang.String str3 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 'a';
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        int int10 = atomikosProperties0.maxActives;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test6664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6664");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        atomikosProperties9.setLogBaseDir("{}");
        atomikosProperties9.setCheckpointInterval(500L);
        atomikosProperties9.threadedTwoPhaseCommit = true;
        atomikosProperties9.setEnableLogging(false);
        boolean boolean29 = atomikosProperties9.isEnableLogging();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test6665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6665");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        boolean boolean15 = atomikosProperties11.isSerialJtaTransactions();
        atomikosProperties11.setEnableLogging(false);
        atomikosProperties11.maxTimeout = (-1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        properties22.clear();
        boolean boolean24 = properties22.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        atomikosProperties25.setTransactionManagerUniqueName("");
        int int29 = atomikosProperties25.getMaxActives();
        java.lang.String str30 = atomikosProperties25.transactionManagerUniqueName;
        boolean boolean31 = properties22.containsValue((java.lang.Object) atomikosProperties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setCheckpointInterval((long) 100);
        atomikosProperties32.maxActives = (byte) 0;
        atomikosProperties32.setTransactionManagerUniqueName("");
        java.lang.Object obj39 = properties22.get((java.lang.Object) atomikosProperties32);
        boolean boolean41 = properties22.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long43 = atomikosProperties42.checkpointInterval;
        java.util.Properties properties44 = atomikosProperties42.asProperties();
        properties44.clear();
        boolean boolean46 = properties44.isEmpty();
        java.lang.Object obj47 = properties44.clone();
        java.util.Set<java.lang.Object> objSet48 = properties44.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setCheckpointInterval((long) 100);
        java.lang.String str52 = atomikosProperties49.getService();
        atomikosProperties49.defaultJtaTimeout = 'a';
        atomikosProperties49.enableLogging = false;
        atomikosProperties49.threadedTwoPhaseCommit = false;
        int int59 = atomikosProperties49.maxActives;
        atomikosProperties49.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj62 = properties22.getOrDefault((java.lang.Object) properties44, (java.lang.Object) atomikosProperties49);
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties44.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long65 = atomikosProperties64.checkpointInterval;
        java.util.Properties properties66 = atomikosProperties64.asProperties();
        properties66.clear();
        boolean boolean68 = properties66.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long70 = atomikosProperties69.checkpointInterval;
        java.util.Properties properties71 = atomikosProperties69.asProperties();
        java.lang.Object obj74 = properties71.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection75 = properties71.values();
        boolean boolean76 = properties66.containsKey((java.lang.Object) objCollection75);
        java.util.Enumeration<java.lang.Object> objEnumeration77 = properties66.keys();
        java.lang.String str79 = properties66.getProperty("");
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties66);
        boolean boolean81 = properties44.isEmpty();
        java.lang.Object obj82 = properties2.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) properties44);
        int int83 = properties2.size();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 500L + "'", long65 == 500L);
        org.junit.Assert.assertNotNull(properties66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 500L + "'", long70 == 500L);
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(objCollection75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objEnumeration77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "{}");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test6666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6666");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean13 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        long long18 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
    }

    @Test
    public void test6667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6667");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        java.util.Properties properties10 = new java.util.Properties(properties8);
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str14 = properties10.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        boolean boolean21 = atomikosProperties15.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setCheckpointInterval((long) 100);
        boolean boolean25 = atomikosProperties22.isForceShutdownOnVmExit();
        java.lang.Object obj26 = properties10.putIfAbsent((java.lang.Object) atomikosProperties15, (java.lang.Object) boolean25);
        java.util.Set<java.lang.String> strSet27 = properties10.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet28 = properties10.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        int int31 = atomikosProperties29.getMaxActives();
        atomikosProperties29.setCheckpointInterval(1L);
        long long34 = atomikosProperties29.getMaxTimeout();
        java.lang.Object obj35 = properties10.get((java.lang.Object) atomikosProperties29);
        java.lang.Object obj36 = properties2.remove((java.lang.Object) properties10);
        boolean boolean37 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        java.lang.Object obj43 = properties40.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection44 = properties40.values();
        java.util.Collection<java.lang.Object> objCollection45 = properties40.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        properties48.clear();
        boolean boolean50 = properties48.isEmpty();
        java.lang.Object obj51 = properties48.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        properties54.clear();
        boolean boolean56 = properties54.isEmpty();
        java.util.Collection<java.lang.Object> objCollection57 = properties54.values();
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.util.Enumeration<?> wildcardEnumeration59 = properties54.propertyNames();
        java.util.Properties properties60 = new java.util.Properties(properties54);
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties60);
        int int62 = properties40.size();
        boolean boolean63 = properties40.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties64.setCheckpointInterval((long) 100);
        boolean boolean67 = atomikosProperties64.isForceShutdownOnVmExit();
        atomikosProperties64.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties64.service = "";
        atomikosProperties64.setTransactionManagerUniqueName("{}");
        atomikosProperties64.setMaxActives((int) (short) -1);
        java.lang.Object obj76 = properties2.getOrDefault((java.lang.Object) properties40, (java.lang.Object) (short) -1);
        properties40.clear();
        int int78 = properties40.size();
        java.io.PrintWriter printWriter79 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.list(printWriter79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 300000L + "'", long34 == 300000L);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{}");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(wildcardEnumeration59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + (short) -1 + "'", obj76, (short) -1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test6668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6668");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        java.lang.String str72 = atomikosProperties66.getService();
        long long73 = atomikosProperties66.defaultJtaTimeout;
        atomikosProperties66.setEnableLogging(true);
        boolean boolean76 = properties53.equals((java.lang.Object) atomikosProperties66);
        atomikosProperties66.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test6669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6669");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        int int31 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.util.Set<java.lang.String> strSet36 = properties35.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        java.lang.Object obj40 = properties39.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        atomikosProperties41.setMaxActives((int) (byte) -1);
        boolean boolean47 = atomikosProperties41.isEnableLogging();
        atomikosProperties41.transactionManagerUniqueName = "";
        atomikosProperties41.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        java.lang.String str55 = atomikosProperties52.getLogBaseDir();
        atomikosProperties52.setMaxActives((int) (byte) -1);
        java.lang.String str58 = atomikosProperties52.getService();
        java.lang.Object obj59 = properties39.getOrDefault((java.lang.Object) atomikosProperties41, (java.lang.Object) atomikosProperties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        boolean boolean64 = atomikosProperties60.isSerialJtaTransactions();
        long long65 = atomikosProperties60.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        properties68.clear();
        boolean boolean70 = properties68.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        atomikosProperties71.setTransactionManagerUniqueName("");
        int int75 = atomikosProperties71.getMaxActives();
        java.lang.String str76 = atomikosProperties71.transactionManagerUniqueName;
        boolean boolean77 = properties68.containsValue((java.lang.Object) atomikosProperties71);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties78.setCheckpointInterval((long) 100);
        atomikosProperties78.maxActives = (byte) 0;
        atomikosProperties78.setTransactionManagerUniqueName("");
        java.lang.Object obj85 = properties68.get((java.lang.Object) atomikosProperties78);
        boolean boolean87 = properties68.containsValue((java.lang.Object) 100.0d);
        boolean boolean88 = properties35.replace(obj59, (java.lang.Object) atomikosProperties60, (java.lang.Object) boolean87);
        boolean boolean89 = properties2.remove((java.lang.Object) (byte) 1, (java.lang.Object) atomikosProperties60);
        java.io.InputStream inputStream90 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.loadFromXML(inputStream90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 500L + "'", long65 == 500L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 50 + "'", int75 == 50);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test6670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6670");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        int int9 = atomikosProperties0.maxActives;
        long long10 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setSerialJtaTransactions(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
    }

    @Test
    public void test6671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6671");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.service = "hi!";
        long long8 = atomikosProperties0.getMaxTimeout();
        java.lang.String str9 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long12 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str9, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
    }

    @Test
    public void test6672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6672");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setDefaultJtaTimeout((long) '#');
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
    }

    @Test
    public void test6673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6673");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        java.lang.String str12 = atomikosProperties0.getService();
        atomikosProperties0.setSerialJtaTransactions(false);
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.transactionManagerUniqueName;
        atomikosProperties16.serialJtaTransactions = true;
        atomikosProperties16.transactionManagerUniqueName = "{com.atomikos.icatch.tmlog=0.0}";
        atomikosProperties16.setForceShutdownOnVmExit(true);
        atomikosProperties16.setMaxTimeout((long) 0);
        java.lang.String str27 = atomikosProperties16.getService();
        atomikosProperties16.setCheckpointInterval((long) (short) 10);
        java.lang.String str30 = atomikosProperties16.getTransactionManagerUniqueName();
        boolean boolean31 = properties15.contains((java.lang.Object) str30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        java.lang.Object obj35 = properties34.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        atomikosProperties36.transactionManagerUniqueName = "";
        atomikosProperties36.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setMaxActives((int) (byte) -1);
        java.lang.String str53 = atomikosProperties47.getService();
        java.lang.Object obj54 = properties34.getOrDefault((java.lang.Object) atomikosProperties36, (java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        int int57 = atomikosProperties55.getMaxActives();
        java.lang.String str58 = atomikosProperties55.logBaseDir;
        java.lang.Object obj60 = properties34.putIfAbsent((java.lang.Object) atomikosProperties55, (java.lang.Object) "");
        int int61 = properties34.size();
        java.util.Collection<java.lang.Object> objCollection62 = properties34.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long64 = atomikosProperties63.checkpointInterval;
        int int65 = atomikosProperties63.getMaxActives();
        java.lang.String str66 = atomikosProperties63.logBaseDir;
        java.lang.String str67 = atomikosProperties63.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.logBaseDir;
        java.lang.String str70 = atomikosProperties68.logBaseName;
        java.lang.String str71 = atomikosProperties68.getLogBaseDir();
        atomikosProperties68.setMaxActives((int) (byte) -1);
        boolean boolean74 = atomikosProperties68.isEnableLogging();
        java.lang.String str75 = atomikosProperties68.getLogBaseName();
        java.lang.Object obj76 = properties34.replace((java.lang.Object) atomikosProperties63, (java.lang.Object) atomikosProperties68);
        atomikosProperties63.checkpointInterval = 100L;
        int int79 = atomikosProperties63.maxActives;
        java.util.Properties properties80 = atomikosProperties63.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet81 = properties80.entrySet();
        java.util.Properties properties82 = new java.util.Properties(properties80);
        boolean boolean83 = properties15.containsKey((java.lang.Object) properties80);
        java.io.OutputStream outputStream84 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties80.storeToXML(outputStream84, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{com.atomikos.icatch.tmlog=0.0}" + "'", str30, "{com.atomikos.icatch.tmlog=0.0}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(objCollection62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 500L + "'", long64 == 500L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 50 + "'", int65 == 50);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "tmlog" + "'", str70, "tmlog");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tmlog" + "'", str75, "tmlog");
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 50 + "'", int79 == 50);
        org.junit.Assert.assertNotNull(properties80);
        org.junit.Assert.assertNotNull(objEntrySet81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test6674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6674");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str5 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setCheckpointInterval(10L);
        java.lang.String str8 = atomikosProperties0.getLogBaseName();
        int int9 = atomikosProperties0.maxActives;
        atomikosProperties0.maxTimeout = 10;
        long long12 = atomikosProperties0.getDefaultJtaTimeout();
        long long13 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
    }

    @Test
    public void test6675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6675");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setLogBaseName("hi!");
        long long15 = atomikosProperties0.checkpointInterval;
        long long16 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str17 = atomikosProperties0.transactionManagerUniqueName;
        long long18 = atomikosProperties0.maxTimeout;
        atomikosProperties0.logBaseName = "";
        atomikosProperties0.setLogBaseName("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10L + "'", long15 == 10L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str17, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
    }

    @Test
    public void test6676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6676");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setDefaultJtaTimeout((long) '#');
        java.lang.String str10 = atomikosProperties0.getService();
        java.lang.String str11 = atomikosProperties0.transactionManagerUniqueName;
        int int12 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setDefaultJtaTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        java.lang.Object obj18 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties30);
        java.util.Set<java.lang.String> strSet38 = properties17.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet39 = properties17.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        atomikosProperties41.forceShutdownOnVmExit = false;
        atomikosProperties41.threadedTwoPhaseCommit = false;
        atomikosProperties41.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties41.threadedTwoPhaseCommit = false;
        java.lang.String str51 = atomikosProperties41.transactionManagerUniqueName;
        atomikosProperties41.enableLogging = true;
        atomikosProperties41.threadedTwoPhaseCommit = false;
        atomikosProperties0.set(properties17, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", (java.lang.Object) atomikosProperties41);
        int int57 = properties17.size();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str51, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
    }

    @Test
    public void test6677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6677");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        java.lang.String str7 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test6678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6678");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties4.maxActives = ' ';
        java.lang.String str25 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setCheckpointInterval((long) (byte) 10);
        boolean boolean28 = atomikosProperties4.threadedTwoPhaseCommit;
        java.util.Properties properties29 = atomikosProperties4.asProperties();
        atomikosProperties4.maxTimeout = 0L;
        int int32 = atomikosProperties4.getMaxActives();
        boolean boolean33 = atomikosProperties4.threadedTwoPhaseCommit;
        atomikosProperties4.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}";
        java.lang.String str36 = atomikosProperties4.logBaseName;
        atomikosProperties4.enableLogging = false;
        atomikosProperties4.maxActives = 9;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
    }

    @Test
    public void test6679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6679");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        atomikosProperties9.setLogBaseDir("{}");
        atomikosProperties9.setForceShutdownOnVmExit(false);
        boolean boolean25 = atomikosProperties9.isForceShutdownOnVmExit();
        boolean boolean26 = atomikosProperties9.isSerialJtaTransactions();
        atomikosProperties9.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test6680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6680");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        boolean boolean29 = atomikosProperties23.isThreadedTwoPhaseCommit();
        atomikosProperties23.threadedTwoPhaseCommit = true;
        long long32 = atomikosProperties23.defaultJtaTimeout;
        atomikosProperties23.setSerialJtaTransactions(true);
        atomikosProperties23.maxActives = '4';
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
    }

    @Test
    public void test6681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6681");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.maxActives = (byte) -1;
        boolean boolean25 = atomikosProperties15.threadedTwoPhaseCommit;
        java.lang.Class<?> wildcardClass26 = atomikosProperties15.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test6682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6682");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        java.lang.String str48 = atomikosProperties44.logBaseName;
        atomikosProperties44.setService("{}");
        java.lang.String str51 = atomikosProperties44.getLogBaseDir();
        java.lang.String str52 = atomikosProperties44.logBaseDir;
        boolean boolean53 = atomikosProperties44.serialJtaTransactions;
        long long54 = atomikosProperties44.defaultJtaTimeout;
        atomikosProperties44.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
    }

    @Test
    public void test6683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6683");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str24 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties2.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        atomikosProperties26.setTransactionManagerUniqueName("");
        int int30 = atomikosProperties26.getMaxActives();
        java.lang.String str31 = atomikosProperties26.transactionManagerUniqueName;
        atomikosProperties26.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        properties36.clear();
        java.util.Properties properties38 = new java.util.Properties(properties36);
        atomikosProperties26.set(properties36, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj44 = properties36.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet45 = properties36.stringPropertyNames();
        java.lang.String str47 = properties36.getProperty("hi!");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        boolean boolean54 = properties2.containsValue((java.lang.Object) boolean53);
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties2.keys();
        java.util.Properties properties56 = new java.util.Properties(properties2);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet57 = properties2.entrySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str24, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertNotNull(objEntrySet57);
    }

    @Test
    public void test6684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6684");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        int int4 = properties3.size();
        java.util.Enumeration<java.lang.Object> objEnumeration5 = properties3.keys();
        java.io.PrintWriter printWriter6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties3.list(printWriter6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(objEnumeration5);
    }

    @Test
    public void test6685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6685");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        boolean boolean22 = properties20.containsValue((java.lang.Object) 100L);
        java.lang.String str23 = properties20.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties20.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        properties27.clear();
        boolean boolean29 = properties27.isEmpty();
        java.lang.Object obj30 = properties27.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        java.lang.Object obj35 = properties34.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        atomikosProperties36.transactionManagerUniqueName = "";
        atomikosProperties36.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setMaxActives((int) (byte) -1);
        java.lang.String str53 = atomikosProperties47.getService();
        java.lang.Object obj54 = properties34.getOrDefault((java.lang.Object) atomikosProperties36, (java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        int int57 = atomikosProperties55.getMaxActives();
        java.lang.String str58 = atomikosProperties55.logBaseDir;
        java.lang.Object obj60 = properties34.putIfAbsent((java.lang.Object) atomikosProperties55, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        java.lang.String str64 = atomikosProperties61.getLogBaseDir();
        boolean boolean65 = atomikosProperties61.isSerialJtaTransactions();
        atomikosProperties61.setEnableLogging(false);
        boolean boolean68 = properties27.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties61);
        atomikosProperties61.logBaseName = "{}";
        long long71 = atomikosProperties61.getDefaultJtaTimeout();
        boolean boolean72 = atomikosProperties61.isThreadedTwoPhaseCommit();
        boolean boolean73 = atomikosProperties61.forceShutdownOnVmExit;
        long long74 = atomikosProperties61.getCheckpointInterval();
        boolean boolean75 = properties7.remove((java.lang.Object) objEnumeration24, (java.lang.Object) atomikosProperties61);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration76 = properties7.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Character cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str23, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10000L + "'", long71 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 500L + "'", long74 == 500L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test6686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6686");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        long long10 = atomikosProperties8.getDefaultJtaTimeout();
        java.util.Properties properties11 = atomikosProperties8.asProperties();
        boolean boolean12 = atomikosProperties8.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setCheckpointInterval((long) 100);
        boolean boolean16 = atomikosProperties13.isForceShutdownOnVmExit();
        atomikosProperties13.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties13.service = "";
        atomikosProperties13.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        properties25.clear();
        boolean boolean27 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        java.lang.Object obj33 = properties30.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection34 = properties30.values();
        boolean boolean35 = properties25.containsKey((java.lang.Object) objCollection34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties25.keys();
        boolean boolean37 = properties4.replace((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties13, (java.lang.Object) properties25);
        atomikosProperties13.setDefaultJtaTimeout((long) (-1));
        long long40 = atomikosProperties13.checkpointInterval;
        boolean boolean41 = atomikosProperties13.serialJtaTransactions;
        atomikosProperties13.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L + "'", long40 == 100L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test6687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6687");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long6 = atomikosProperties0.getMaxTimeout();
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        long long8 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        boolean boolean11 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str12 = atomikosProperties0.getLogBaseDir();
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        java.lang.String str14 = atomikosProperties0.getService();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test6688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6688");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        java.util.Properties properties14 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseName();
        atomikosProperties15.setDefaultJtaTimeout((long) (byte) 1);
        boolean boolean21 = atomikosProperties15.isSerialJtaTransactions();
        boolean boolean22 = atomikosProperties15.serialJtaTransactions;
        atomikosProperties15.forceShutdownOnVmExit = true;
        java.lang.Object obj25 = properties14.remove((java.lang.Object) atomikosProperties15);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test6689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6689");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet17 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        long long20 = atomikosProperties18.getDefaultJtaTimeout();
        java.util.Properties properties21 = atomikosProperties18.asProperties();
        java.lang.String str22 = atomikosProperties18.logBaseDir;
        atomikosProperties18.setThreadedTwoPhaseCommit(true);
        atomikosProperties18.enableLogging = false;
        boolean boolean27 = properties2.containsValue((java.lang.Object) atomikosProperties18);
        java.io.InputStream inputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.loadFromXML(inputStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10000L + "'", long20 == 10000L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test6690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6690");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties7.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        atomikosProperties37.setTransactionManagerUniqueName("");
        int int41 = atomikosProperties37.getMaxActives();
        boolean boolean42 = properties35.containsValue((java.lang.Object) int41);
        java.lang.Object obj45 = properties35.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties46 = new java.util.Properties(properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        boolean boolean51 = atomikosProperties47.isSerialJtaTransactions();
        atomikosProperties47.setLogBaseName("");
        atomikosProperties47.setTransactionManagerUniqueName("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        atomikosProperties56.setTransactionManagerUniqueName("");
        int int60 = atomikosProperties56.getMaxActives();
        java.lang.Object obj61 = properties46.replace((java.lang.Object) "tmlog", (java.lang.Object) int60);
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.transactionManagerUniqueName;
        atomikosProperties63.serialJtaTransactions = true;
        long long68 = atomikosProperties63.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long70 = atomikosProperties69.checkpointInterval;
        java.util.Properties properties71 = atomikosProperties69.asProperties();
        properties71.clear();
        java.util.Properties properties73 = new java.util.Properties(properties71);
        java.lang.Object obj76 = properties73.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str77 = properties73.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str79 = atomikosProperties78.logBaseDir;
        java.lang.String str80 = atomikosProperties78.logBaseName;
        java.lang.String str81 = atomikosProperties78.getLogBaseDir();
        atomikosProperties78.setMaxActives((int) (byte) -1);
        boolean boolean84 = atomikosProperties78.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties85.setCheckpointInterval((long) 100);
        boolean boolean88 = atomikosProperties85.isForceShutdownOnVmExit();
        java.lang.Object obj89 = properties73.putIfAbsent((java.lang.Object) atomikosProperties78, (java.lang.Object) boolean88);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet90 = properties73.entrySet();
        java.util.Set<java.lang.String> strSet91 = properties73.stringPropertyNames();
        boolean boolean92 = properties46.remove((java.lang.Object) atomikosProperties63, (java.lang.Object) strSet91);
        java.io.InputStream inputStream93 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties46.loadFromXML(inputStream93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 50 + "'", int41 == 50);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 300000L + "'", long68 == 300000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 500L + "'", long70 == 500L);
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj76, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "{}" + "'", str77, "{}");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "tmlog" + "'", str80, "tmlog");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNotNull(objEntrySet90);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test6691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6691");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties2.keys();
        properties2.clear();
        java.util.Enumeration<?> wildcardEnumeration15 = properties2.propertyNames();
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(writer16, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNotNull(wildcardEnumeration15);
    }

    @Test
    public void test6692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6692");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.checkpointInterval = (-1L);
        java.lang.String str9 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.transactionManagerUniqueName = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}";
        atomikosProperties0.setSerialJtaTransactions(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test6693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6693");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        int int22 = properties21.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.enableLogging = true;
        atomikosProperties23.maxActives = (byte) -1;
        atomikosProperties23.threadedTwoPhaseCommit = false;
        java.lang.String str30 = atomikosProperties23.service;
        atomikosProperties23.maxActives = 10;
        boolean boolean33 = properties21.equals((java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.logBaseDir;
        atomikosProperties34.setTransactionManagerUniqueName("");
        int int38 = atomikosProperties34.getMaxActives();
        java.lang.String str39 = atomikosProperties34.getLogBaseDir();
        atomikosProperties34.setTransactionManagerUniqueName("");
        atomikosProperties34.setDefaultJtaTimeout(0L);
        int int44 = atomikosProperties34.maxActives;
        atomikosProperties34.setEnableLogging(false);
        long long47 = atomikosProperties34.getDefaultJtaTimeout();
        atomikosProperties34.setDefaultJtaTimeout(1L);
        atomikosProperties34.maxActives = (byte) 100;
        boolean boolean52 = atomikosProperties34.enableLogging;
        long long53 = atomikosProperties34.checkpointInterval;
        java.lang.Object obj54 = properties21.get((java.lang.Object) atomikosProperties34);
        atomikosProperties34.setThreadedTwoPhaseCommit(true);
        java.lang.String str57 = atomikosProperties34.logBaseName;
        boolean boolean58 = atomikosProperties34.threadedTwoPhaseCommit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tmlog" + "'", str57, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test6694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6694");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        long long12 = atomikosProperties10.getDefaultJtaTimeout();
        java.util.Properties properties13 = atomikosProperties10.asProperties();
        java.lang.String str14 = properties13.toString();
        boolean boolean15 = properties2.equals((java.lang.Object) properties13);
        java.util.Set<java.lang.String> strSet16 = properties13.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        java.lang.Object obj22 = properties19.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection23 = properties19.values();
        int int24 = properties19.size();
        java.lang.Object obj25 = properties13.remove((java.lang.Object) int24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        properties28.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        atomikosProperties30.setTransactionManagerUniqueName("");
        int int34 = atomikosProperties30.getMaxActives();
        boolean boolean35 = properties28.containsValue((java.lang.Object) int34);
        java.lang.Object obj38 = properties28.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties39 = new java.util.Properties(properties28);
        java.util.Set<java.lang.Object> objSet40 = properties28.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        atomikosProperties41.forceShutdownOnVmExit = false;
        atomikosProperties41.threadedTwoPhaseCommit = false;
        atomikosProperties41.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean49 = atomikosProperties41.isSerialJtaTransactions();
        boolean boolean50 = atomikosProperties41.forceShutdownOnVmExit;
        long long51 = atomikosProperties41.getDefaultJtaTimeout();
        java.lang.String str52 = atomikosProperties41.getLogBaseName();
        boolean boolean53 = properties13.remove((java.lang.Object) properties28, (java.lang.Object) atomikosProperties41);
        java.lang.Object obj54 = properties13.clone();
        java.io.InputStream inputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.loadFromXML(inputStream55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNotNull(properties13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str14, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(obj54);
// flaky:         org.junit.Assert.assertEquals(obj54.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test6695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6695");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) 100);
        boolean boolean20 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties17.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        java.lang.String str31 = atomikosProperties25.getService();
        long long32 = atomikosProperties25.defaultJtaTimeout;
        java.lang.String str33 = atomikosProperties25.logBaseName;
        java.lang.String str34 = atomikosProperties25.logBaseDir;
        java.lang.Class<?> wildcardClass35 = atomikosProperties25.getClass();
        boolean boolean36 = properties2.remove((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        atomikosProperties37.forceShutdownOnVmExit = false;
        boolean boolean41 = atomikosProperties37.isSerialJtaTransactions();
        java.lang.String str42 = atomikosProperties37.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.Object obj46 = properties2.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        atomikosProperties47.setTransactionManagerUniqueName("");
        int int51 = atomikosProperties47.getMaxActives();
        java.lang.String str52 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        java.util.Properties properties57 = atomikosProperties55.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setCheckpointInterval((long) 100);
        boolean boolean64 = atomikosProperties61.isForceShutdownOnVmExit();
        atomikosProperties61.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean67 = properties60.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties68.enableLogging = true;
        boolean boolean72 = properties57.replace((java.lang.Object) boolean67, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection73 = properties57.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet74 = properties57.entrySet();
        atomikosProperties47.set(properties57, "hi!", (java.lang.Object) 0L);
        atomikosProperties47.setEnableLogging(false);
        atomikosProperties47.setTransactionManagerUniqueName("tmlog");
        atomikosProperties47.setEnableLogging(false);
        long long84 = atomikosProperties47.checkpointInterval;
        boolean boolean85 = atomikosProperties47.isThreadedTwoPhaseCommit();
        atomikosProperties47.setForceShutdownOnVmExit(true);
        int int88 = atomikosProperties47.maxActives;
        java.lang.Object obj89 = properties2.get((java.lang.Object) atomikosProperties47);
        atomikosProperties47.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean92 = atomikosProperties47.isEnableLogging();
        atomikosProperties47.setMaxActives((int) 'a');
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertNotNull(objEntrySet74);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 50 + "'", int88 == 50);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test6696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6696");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.lang.String str15 = properties14.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        java.lang.Object obj19 = properties18.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.logBaseDir;
        java.lang.String str22 = atomikosProperties20.logBaseName;
        java.lang.String str23 = atomikosProperties20.getLogBaseDir();
        atomikosProperties20.setMaxActives((int) (byte) -1);
        boolean boolean26 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.transactionManagerUniqueName = "";
        atomikosProperties20.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        java.lang.String str37 = atomikosProperties31.getService();
        java.lang.Object obj38 = properties18.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties31);
        atomikosProperties20.maxActives = ' ';
        java.lang.String str41 = atomikosProperties20.service;
        atomikosProperties20.serialJtaTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        boolean boolean48 = properties46.containsValue((java.lang.Object) 100L);
        java.lang.String str49 = properties46.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        atomikosProperties50.setTransactionManagerUniqueName("");
        int int54 = atomikosProperties50.getMaxActives();
        java.lang.String str55 = atomikosProperties50.transactionManagerUniqueName;
        atomikosProperties50.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        properties60.clear();
        java.util.Properties properties62 = new java.util.Properties(properties60);
        atomikosProperties50.set(properties60, "tmlog", (java.lang.Object) 0.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        java.lang.Object obj70 = properties46.putIfAbsent((java.lang.Object) "tmlog", (java.lang.Object) atomikosProperties66);
        java.lang.String str71 = atomikosProperties66.getLogBaseDir();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = properties14.remove((java.lang.Object) false, (java.lang.Object) str71);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str49, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test6697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6697");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        atomikosProperties29.setService("");
        boolean boolean34 = atomikosProperties29.threadedTwoPhaseCommit;
        java.lang.String str35 = atomikosProperties29.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.serialJtaTransactions = true;
        java.lang.String str43 = atomikosProperties36.getService();
        java.lang.Object obj44 = properties2.putIfAbsent((java.lang.Object) str35, (java.lang.Object) atomikosProperties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        properties47.clear();
        boolean boolean49 = properties47.isEmpty();
        java.lang.Object obj50 = properties47.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long52 = atomikosProperties51.checkpointInterval;
        java.util.Properties properties53 = atomikosProperties51.asProperties();
        properties53.clear();
        boolean boolean55 = properties53.isEmpty();
        java.util.Collection<java.lang.Object> objCollection56 = properties53.values();
        properties47.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties53);
        java.util.Collection<java.lang.Object> objCollection58 = properties47.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        java.util.Properties properties61 = atomikosProperties59.asProperties();
        java.lang.Object obj62 = properties61.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        atomikosProperties63.setMaxActives((int) (byte) -1);
        boolean boolean69 = atomikosProperties63.isEnableLogging();
        atomikosProperties63.transactionManagerUniqueName = "";
        atomikosProperties63.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str75 = atomikosProperties74.logBaseDir;
        java.lang.String str76 = atomikosProperties74.logBaseName;
        java.lang.String str77 = atomikosProperties74.getLogBaseDir();
        atomikosProperties74.setMaxActives((int) (byte) -1);
        java.lang.String str80 = atomikosProperties74.getService();
        java.lang.Object obj81 = properties61.getOrDefault((java.lang.Object) atomikosProperties63, (java.lang.Object) atomikosProperties74);
        boolean boolean82 = atomikosProperties63.isForceShutdownOnVmExit();
        java.lang.Object obj83 = properties2.getOrDefault((java.lang.Object) properties47, (java.lang.Object) boolean82);
        java.util.Properties properties84 = new java.util.Properties(properties47);
        java.io.OutputStream outputStream85 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties84.save(outputStream85, "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objCollection56);
        org.junit.Assert.assertNotNull(objCollection58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertNotNull(obj62);
// flaky:         org.junit.Assert.assertEquals(obj62.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "tmlog" + "'", str76, "tmlog");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + obj83 + "' != '" + false + "'", obj83, false);
    }

    @Test
    public void test6698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6698");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.Object> objSet17 = properties2.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objSet17);
    }

    @Test
    public void test6699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6699");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.lang.String str13 = atomikosProperties0.getLogBaseName();
        long long14 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setService("{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test6700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6700");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        long long10 = atomikosProperties8.getDefaultJtaTimeout();
        java.util.Properties properties11 = atomikosProperties8.asProperties();
        boolean boolean12 = atomikosProperties8.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setCheckpointInterval((long) 100);
        boolean boolean16 = atomikosProperties13.isForceShutdownOnVmExit();
        atomikosProperties13.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties13.service = "";
        atomikosProperties13.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        properties25.clear();
        boolean boolean27 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        java.lang.Object obj33 = properties30.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection34 = properties30.values();
        boolean boolean35 = properties25.containsKey((java.lang.Object) objCollection34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties25.keys();
        boolean boolean37 = properties4.replace((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties13, (java.lang.Object) properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        properties40.clear();
        boolean boolean42 = properties40.isEmpty();
        java.lang.Object obj43 = properties40.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        boolean boolean48 = properties46.isEmpty();
        java.util.Collection<java.lang.Object> objCollection49 = properties46.values();
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.util.Enumeration<?> wildcardEnumeration51 = properties46.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        properties54.clear();
        boolean boolean56 = properties54.isEmpty();
        java.util.Collection<java.lang.Object> objCollection57 = properties54.values();
        boolean boolean58 = properties46.equals((java.lang.Object) properties54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        atomikosProperties59.forceShutdownOnVmExit = false;
        atomikosProperties59.threadedTwoPhaseCommit = false;
        atomikosProperties59.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties59.threadedTwoPhaseCommit = false;
        atomikosProperties59.maxTimeout = 50;
        boolean boolean71 = properties54.equals((java.lang.Object) 50);
        properties25.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.io.PrintWriter printWriter73 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties25.list(printWriter73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{}");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertNotNull(wildcardEnumeration51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test6701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6701");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean12 = atomikosProperties0.isEnableLogging();
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test6702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6702");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        java.lang.String str20 = atomikosProperties12.getTransactionManagerUniqueName();
        atomikosProperties12.setService("tmlog");
        java.lang.String str23 = atomikosProperties12.logBaseName;
        java.lang.String str24 = atomikosProperties12.service;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
    }

    @Test
    public void test6703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6703");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        int int3 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setSerialJtaTransactions(false);
        long long6 = atomikosProperties0.getCheckpointInterval();
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50 + "'", int3 == 50);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test6704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6704");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.checkpointInterval = (-1L);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str11 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.maxActives = (byte) 1;
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setDefaultJtaTimeout(0L);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test6705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6705");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setMaxActives(1);
        int int5 = atomikosProperties0.maxActives;
        atomikosProperties0.enableLogging = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test6706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6706");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties2.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties2.keys();
        java.util.Collection<java.lang.Object> objCollection15 = properties2.values();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        atomikosProperties17.setService("");
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        boolean boolean36 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties17.set(properties22, "{}", (java.lang.Object) boolean36);
        java.util.Properties properties38 = new java.util.Properties(properties22);
        java.lang.Object obj39 = properties2.remove((java.lang.Object) properties22);
        properties2.clear();
        java.util.Enumeration<?> wildcardEnumeration41 = properties2.propertyNames();
        java.io.InputStream inputStream42 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(inputStream42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(wildcardEnumeration41);
    }

    @Test
    public void test6707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6707");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setTransactionManagerUniqueName("");
        atomikosProperties6.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass16 = atomikosProperties6.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        int int19 = atomikosProperties17.getMaxActives();
        java.lang.String str20 = atomikosProperties17.transactionManagerUniqueName;
        long long21 = atomikosProperties17.getCheckpointInterval();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        atomikosProperties27.transactionManagerUniqueName = "";
        atomikosProperties27.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        java.lang.Object obj45 = properties25.getOrDefault((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        int int48 = atomikosProperties46.getMaxActives();
        java.lang.String str49 = atomikosProperties46.logBaseDir;
        java.lang.Object obj51 = properties25.putIfAbsent((java.lang.Object) atomikosProperties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        atomikosProperties52.setService("");
        boolean boolean57 = atomikosProperties52.threadedTwoPhaseCommit;
        java.lang.String str58 = atomikosProperties52.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        boolean boolean63 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.serialJtaTransactions = true;
        java.lang.String str66 = atomikosProperties59.getService();
        java.lang.Object obj67 = properties25.putIfAbsent((java.lang.Object) str58, (java.lang.Object) atomikosProperties59);
        boolean boolean68 = properties3.replace((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties59);
        atomikosProperties17.setSerialJtaTransactions(true);
        atomikosProperties17.setService("tmlog");
        java.util.Properties properties73 = atomikosProperties17.asProperties();
        java.util.Set<java.lang.Object> objSet74 = properties73.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNotNull(objSet74);
    }

    @Test
    public void test6708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6708");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.maxActives = '4';
        boolean boolean48 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean49 = atomikosProperties0.isForceShutdownOnVmExit();
        long long50 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setMaxTimeout((long) (short) 1);
        atomikosProperties0.setCheckpointInterval((long) 11);
        atomikosProperties0.service = "tmlog";
        boolean boolean57 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test6709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6709");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long8 = atomikosProperties0.maxTimeout;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) 100);
        java.lang.String str14 = atomikosProperties11.getService();
        atomikosProperties11.defaultJtaTimeout = 'a';
        atomikosProperties11.enableLogging = false;
        atomikosProperties11.threadedTwoPhaseCommit = false;
        atomikosProperties11.setForceShutdownOnVmExit(false);
        java.lang.Object obj23 = properties9.remove((java.lang.Object) atomikosProperties11);
        int int24 = properties9.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        properties27.clear();
        java.util.Properties properties29 = new java.util.Properties(properties27);
        int int30 = properties29.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties29.entrySet();
        java.util.Set<java.lang.String> strSet32 = properties29.stringPropertyNames();
        boolean boolean33 = properties9.equals((java.lang.Object) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        properties36.clear();
        boolean boolean38 = properties36.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        atomikosProperties39.setTransactionManagerUniqueName("");
        int int43 = atomikosProperties39.getMaxActives();
        java.lang.String str44 = atomikosProperties39.transactionManagerUniqueName;
        boolean boolean45 = properties36.containsValue((java.lang.Object) atomikosProperties39);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setCheckpointInterval((long) 100);
        atomikosProperties46.maxActives = (byte) 0;
        atomikosProperties46.setTransactionManagerUniqueName("");
        java.lang.Object obj53 = properties36.get((java.lang.Object) atomikosProperties46);
        boolean boolean55 = properties36.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        java.util.Properties properties58 = atomikosProperties56.asProperties();
        properties58.clear();
        boolean boolean60 = properties58.isEmpty();
        java.lang.Object obj61 = properties58.clone();
        java.util.Set<java.lang.Object> objSet62 = properties58.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setCheckpointInterval((long) 100);
        java.lang.String str66 = atomikosProperties63.getService();
        atomikosProperties63.defaultJtaTimeout = 'a';
        atomikosProperties63.enableLogging = false;
        atomikosProperties63.threadedTwoPhaseCommit = false;
        int int73 = atomikosProperties63.maxActives;
        atomikosProperties63.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj76 = properties36.getOrDefault((java.lang.Object) properties58, (java.lang.Object) atomikosProperties63);
        boolean boolean78 = properties29.remove(obj76, (java.lang.Object) 9L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objEntrySet31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "{}");
        org.junit.Assert.assertNotNull(objSet62);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 50 + "'", int73 == 50);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test6710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6710");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setCheckpointInterval((long) 100);
        boolean boolean17 = atomikosProperties14.isForceShutdownOnVmExit();
        atomikosProperties14.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean20 = properties13.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet21 = properties13.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties13.elements();
        java.util.Enumeration<?> wildcardEnumeration23 = properties13.propertyNames();
        java.lang.Object obj24 = properties13.clone();
        java.util.Enumeration<?> wildcardEnumeration25 = properties13.propertyNames();
        boolean boolean26 = properties2.containsValue((java.lang.Object) wildcardEnumeration25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        properties29.clear();
        boolean boolean31 = properties29.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        atomikosProperties32.setTransactionManagerUniqueName("");
        int int36 = atomikosProperties32.getMaxActives();
        java.lang.String str37 = atomikosProperties32.transactionManagerUniqueName;
        boolean boolean38 = properties29.containsValue((java.lang.Object) atomikosProperties32);
        atomikosProperties32.service = "tmlog";
        atomikosProperties32.setTransactionManagerUniqueName("");
        java.lang.Object obj43 = properties2.remove((java.lang.Object) atomikosProperties32);
        java.io.OutputStream outputStream44 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.save(outputStream44, "{-1=1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEntrySet21);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(wildcardEnumeration23);
        org.junit.Assert.assertNotNull(obj24);
// flaky:         org.junit.Assert.assertEquals(obj24.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(wildcardEnumeration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test6711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6711");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.setMaxActives((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
    }

    @Test
    public void test6712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6712");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.maxActives = '4';
        boolean boolean48 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean49 = atomikosProperties0.isForceShutdownOnVmExit();
        long long50 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setMaxTimeout((long) (short) 1);
        boolean boolean53 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long54 = atomikosProperties0.checkpointInterval;
        java.lang.String str55 = atomikosProperties0.transactionManagerUniqueName;
        int int56 = atomikosProperties0.getMaxActives();
        int int57 = atomikosProperties0.maxActives;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 500L + "'", long54 == 500L);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
    }

    @Test
    public void test6713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6713");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        java.util.Properties properties48 = new java.util.Properties(properties46);
        java.lang.Object obj51 = properties48.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str52 = properties48.toString();
        boolean boolean53 = properties2.containsValue((java.lang.Object) properties48);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        java.util.Properties properties56 = atomikosProperties54.asProperties();
        properties56.clear();
        java.util.Properties properties58 = new java.util.Properties(properties56);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        atomikosProperties59.setTransactionManagerUniqueName("");
        int int63 = atomikosProperties59.getMaxActives();
        atomikosProperties59.logBaseName = "tmlog";
        int int66 = atomikosProperties59.maxActives;
        boolean boolean67 = properties56.containsValue((java.lang.Object) int66);
        java.util.Properties properties68 = new java.util.Properties(properties56);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties56);
        java.util.Enumeration<?> wildcardEnumeration70 = properties2.propertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj51, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 50 + "'", int63 == 50);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 50 + "'", int66 == 50);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration70);
    }

    @Test
    public void test6714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6714");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        java.lang.String str3 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 'a';
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        int int10 = atomikosProperties0.maxActives;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.setMaxActives(1);
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties0.enableLogging;
        boolean boolean17 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test6715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6715");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        atomikosProperties9.setTransactionManagerUniqueName("");
        int int13 = atomikosProperties9.getMaxActives();
        boolean boolean14 = properties7.containsValue((java.lang.Object) int13);
        java.lang.Object obj17 = properties7.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties18 = new java.util.Properties(properties7);
        int int19 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        properties22.clear();
        boolean boolean24 = properties22.isEmpty();
        java.lang.Object obj25 = properties22.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        java.lang.Object obj30 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        boolean boolean37 = atomikosProperties31.isEnableLogging();
        atomikosProperties31.transactionManagerUniqueName = "";
        atomikosProperties31.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setMaxActives((int) (byte) -1);
        java.lang.String str48 = atomikosProperties42.getService();
        java.lang.Object obj49 = properties29.getOrDefault((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        int int52 = atomikosProperties50.getMaxActives();
        java.lang.String str53 = atomikosProperties50.logBaseDir;
        java.lang.Object obj55 = properties29.putIfAbsent((java.lang.Object) atomikosProperties50, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        java.lang.String str58 = atomikosProperties56.logBaseName;
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        boolean boolean60 = atomikosProperties56.isSerialJtaTransactions();
        atomikosProperties56.setEnableLogging(false);
        boolean boolean63 = properties22.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties56);
        atomikosProperties56.logBaseName = "{}";
        long long66 = atomikosProperties56.getDefaultJtaTimeout();
        atomikosProperties56.setThreadedTwoPhaseCommit(true);
        boolean boolean69 = properties2.replace((java.lang.Object) 100L, (java.lang.Object) properties7, (java.lang.Object) true);
        java.util.Properties properties70 = new java.util.Properties(properties7);
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties72.setCheckpointInterval((long) 100);
        boolean boolean75 = atomikosProperties72.isForceShutdownOnVmExit();
        atomikosProperties72.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long78 = atomikosProperties72.getDefaultJtaTimeout();
        long long79 = atomikosProperties72.getMaxTimeout();
        atomikosProperties72.logBaseName = "tmlog";
        long long82 = atomikosProperties72.getDefaultJtaTimeout();
        long long83 = atomikosProperties72.defaultJtaTimeout;
        atomikosProperties72.checkpointInterval = (byte) 1;
        atomikosProperties72.threadedTwoPhaseCommit = false;
        atomikosProperties72.setTransactionManagerUniqueName("tmlog");
        atomikosProperties72.setMaxTimeout((long) 9);
        java.util.Properties properties92 = atomikosProperties72.asProperties();
        java.lang.Object obj93 = properties92.clone();
        boolean boolean94 = properties7.containsValue(obj93);
        java.util.Collection<java.lang.Object> objCollection95 = properties7.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 10000L + "'", long78 == 10000L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 300000L + "'", long79 == 300000L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10000L + "'", long83 == 10000L);
        org.junit.Assert.assertNotNull(properties92);
        org.junit.Assert.assertNotNull(obj93);
// flaky:         org.junit.Assert.assertEquals(obj93.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=1, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=9, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj93), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=1, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=9, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj93), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=1, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=9, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(objCollection95);
    }

    @Test
    public void test6716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6716");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.transactionManagerUniqueName;
        atomikosProperties21.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        properties31.clear();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        atomikosProperties21.set(properties31, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj39 = properties31.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties40 = new java.util.Properties(properties31);
        int int41 = properties40.size();
        java.lang.String str42 = properties40.toString();
        int int43 = properties40.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        properties47.clear();
        java.util.Properties properties49 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        atomikosProperties50.setTransactionManagerUniqueName("");
        int int54 = atomikosProperties50.getMaxActives();
        atomikosProperties50.logBaseName = "tmlog";
        int int57 = atomikosProperties50.maxActives;
        boolean boolean58 = properties47.containsValue((java.lang.Object) int57);
        java.util.Properties properties59 = new java.util.Properties(properties47);
        atomikosProperties9.set(properties40, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", (java.lang.Object) properties59);
        atomikosProperties9.setThreadedTwoPhaseCommit(false);
        atomikosProperties9.setMaxActives(3);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test6717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6717");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.maxTimeout = 10L;
        atomikosProperties0.setSerialJtaTransactions(true);
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test6718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6718");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        boolean boolean48 = atomikosProperties36.forceShutdownOnVmExit;
        long long49 = atomikosProperties36.getCheckpointInterval();
        boolean boolean50 = atomikosProperties36.enableLogging;
        atomikosProperties36.setSerialJtaTransactions(true);
        atomikosProperties36.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test6719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6719");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.maxActives = (short) -1;
        boolean boolean8 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        long long11 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
    }

    @Test
    public void test6720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6720");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        java.util.Properties properties10 = new java.util.Properties(properties8);
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str14 = properties10.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        boolean boolean21 = atomikosProperties15.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setCheckpointInterval((long) 100);
        boolean boolean25 = atomikosProperties22.isForceShutdownOnVmExit();
        java.lang.Object obj26 = properties10.putIfAbsent((java.lang.Object) atomikosProperties15, (java.lang.Object) boolean25);
        java.util.Set<java.lang.String> strSet27 = properties10.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet28 = properties10.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        int int31 = atomikosProperties29.getMaxActives();
        atomikosProperties29.setCheckpointInterval(1L);
        long long34 = atomikosProperties29.getMaxTimeout();
        java.lang.Object obj35 = properties10.get((java.lang.Object) atomikosProperties29);
        java.lang.Object obj36 = properties2.remove((java.lang.Object) properties10);
        boolean boolean37 = properties10.isEmpty();
        properties10.clear();
        boolean boolean39 = properties10.isEmpty();
        java.io.InputStream inputStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.loadFromXML(inputStream40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 300000L + "'", long34 == 300000L);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test6721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6721");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.service = "hi!";
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setMaxTimeout(500L);
        long long11 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.maxTimeout = 0L;
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test6722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6722");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        properties13.clear();
        boolean boolean15 = properties13.isEmpty();
        java.lang.Object obj16 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        java.lang.Object obj21 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        boolean boolean28 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.transactionManagerUniqueName = "";
        atomikosProperties22.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        java.lang.String str39 = atomikosProperties33.getService();
        java.lang.Object obj40 = properties20.getOrDefault((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        int int43 = atomikosProperties41.getMaxActives();
        java.lang.String str44 = atomikosProperties41.logBaseDir;
        java.lang.Object obj46 = properties20.putIfAbsent((java.lang.Object) atomikosProperties41, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        boolean boolean51 = atomikosProperties47.isSerialJtaTransactions();
        atomikosProperties47.setEnableLogging(false);
        boolean boolean54 = properties13.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        java.util.Properties properties57 = atomikosProperties55.asProperties();
        properties57.clear();
        java.util.Properties properties59 = new java.util.Properties(properties57);
        java.lang.Object obj62 = properties59.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str63 = properties59.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.logBaseDir;
        java.lang.String str66 = atomikosProperties64.logBaseName;
        java.lang.String str67 = atomikosProperties64.getLogBaseDir();
        atomikosProperties64.setMaxActives((int) (byte) -1);
        boolean boolean70 = atomikosProperties64.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setCheckpointInterval((long) 100);
        boolean boolean74 = atomikosProperties71.isForceShutdownOnVmExit();
        java.lang.Object obj75 = properties59.putIfAbsent((java.lang.Object) atomikosProperties64, (java.lang.Object) boolean74);
        atomikosProperties64.setLogBaseDir("{}");
        boolean boolean78 = properties13.containsValue((java.lang.Object) "{}");
        java.util.Set<java.lang.String> strSet79 = properties13.stringPropertyNames();
        java.lang.Object obj80 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str82 = atomikosProperties81.logBaseDir;
        java.lang.String str83 = atomikosProperties81.transactionManagerUniqueName;
        boolean boolean84 = atomikosProperties81.enableLogging;
        java.lang.String str85 = atomikosProperties81.getTransactionManagerUniqueName();
        java.lang.String str86 = atomikosProperties81.getTransactionManagerUniqueName();
        atomikosProperties81.setCheckpointInterval(10L);
        java.lang.String str89 = atomikosProperties81.getLogBaseName();
        int int90 = atomikosProperties81.maxActives;
        java.lang.Object obj91 = properties10.putIfAbsent(obj80, (java.lang.Object) int90);
        java.util.Properties properties92 = new java.util.Properties(properties10);
        java.util.Properties properties93 = new java.util.Properties(properties92);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet94 = properties92.entrySet();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj62, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{}" + "'", str63, "{}");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "tmlog" + "'", str66, "tmlog");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{}");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "tmlog" + "'", str89, "tmlog");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 50 + "'", int90 == 50);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNotNull(objEntrySet94);
    }

    @Test
    public void test6723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6723");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setCheckpointInterval((long) 100);
        boolean boolean17 = atomikosProperties14.isForceShutdownOnVmExit();
        atomikosProperties14.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean20 = properties13.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.enableLogging = true;
        boolean boolean25 = properties10.replace((java.lang.Object) boolean20, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection26 = properties10.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet27 = properties10.entrySet();
        atomikosProperties0.set(properties10, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        boolean boolean34 = properties10.contains((java.lang.Object) atomikosProperties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setCheckpointInterval((long) 100);
        boolean boolean44 = atomikosProperties41.isForceShutdownOnVmExit();
        atomikosProperties41.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean47 = properties40.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.enableLogging = true;
        boolean boolean52 = properties37.replace((java.lang.Object) boolean47, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection53 = properties37.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet54 = properties37.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet55 = properties37.entrySet();
        java.lang.String str57 = properties37.getProperty("hi!");
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties37.keys();
        java.util.Set<java.lang.String> strSet59 = properties37.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        java.util.Properties properties62 = atomikosProperties60.asProperties();
        properties62.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.logBaseDir;
        atomikosProperties64.setTransactionManagerUniqueName("");
        int int68 = atomikosProperties64.getMaxActives();
        boolean boolean69 = properties62.containsValue((java.lang.Object) int68);
        java.lang.Object obj72 = properties62.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties73 = new java.util.Properties(properties62);
        java.util.Set<java.lang.Object> objSet74 = properties62.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long76 = atomikosProperties75.checkpointInterval;
        java.util.Properties properties77 = atomikosProperties75.asProperties();
        boolean boolean79 = properties77.containsValue((java.lang.Object) 100L);
        java.lang.String str80 = properties77.toString();
        java.lang.Object obj83 = properties77.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties84 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str85 = atomikosProperties84.logBaseDir;
        java.lang.String str86 = atomikosProperties84.logBaseName;
        java.lang.String str87 = atomikosProperties84.getLogBaseDir();
        atomikosProperties84.setMaxActives((int) (byte) -1);
        java.util.Properties properties90 = atomikosProperties84.asProperties();
        boolean boolean91 = properties77.equals((java.lang.Object) atomikosProperties84);
        java.util.Set<java.lang.String> strSet92 = properties77.stringPropertyNames();
        boolean boolean93 = properties10.replace((java.lang.Object) strSet59, (java.lang.Object) properties62, (java.lang.Object) strSet92);
        java.util.Properties properties94 = new java.util.Properties(properties10);
        java.io.PrintStream printStream95 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties94.list(printStream95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertNotNull(objEntrySet27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objCollection53);
        org.junit.Assert.assertNotNull(objEntrySet54);
        org.junit.Assert.assertNotNull(objEntrySet55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 50 + "'", int68 == 50);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(objSet74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 500L + "'", long76 == 500L);
        org.junit.Assert.assertNotNull(properties77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str80, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "tmlog" + "'", str86, "tmlog");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(properties90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test6724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6724");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.setService("tmlog");
        java.lang.String str25 = atomikosProperties15.getLogBaseDir();
        long long26 = atomikosProperties15.getCheckpointInterval();
        atomikosProperties15.setLogBaseName("tmlog");
        java.util.Properties properties29 = atomikosProperties15.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        java.util.Properties properties32 = atomikosProperties30.asProperties();
        properties32.clear();
        boolean boolean34 = properties32.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        java.lang.Object obj40 = properties37.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection41 = properties37.values();
        boolean boolean42 = properties32.containsKey((java.lang.Object) objCollection41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.String str46 = atomikosProperties43.getLogBaseName();
        int int47 = atomikosProperties43.getMaxActives();
        atomikosProperties43.setLogBaseDir("hi!");
        java.lang.String str50 = atomikosProperties43.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        atomikosProperties51.setTransactionManagerUniqueName("");
        int int55 = atomikosProperties51.getMaxActives();
        java.lang.String str56 = atomikosProperties51.getLogBaseDir();
        java.lang.String str57 = atomikosProperties51.logBaseName;
        java.lang.Object obj58 = properties32.replace((java.lang.Object) atomikosProperties43, (java.lang.Object) atomikosProperties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        atomikosProperties59.setLogBaseName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        java.util.Properties properties67 = atomikosProperties65.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        java.util.Properties properties70 = atomikosProperties68.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setCheckpointInterval((long) 100);
        boolean boolean74 = atomikosProperties71.isForceShutdownOnVmExit();
        atomikosProperties71.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean77 = properties70.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties78.enableLogging = true;
        boolean boolean82 = properties67.replace((java.lang.Object) boolean77, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection83 = properties67.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet84 = properties67.entrySet();
        java.lang.Object obj85 = properties32.replace((java.lang.Object) "", (java.lang.Object) properties67);
        java.lang.Object obj88 = properties32.setProperty("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}", "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        java.lang.Object obj89 = properties29.get((java.lang.Object) properties32);
        java.io.Reader reader90 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties32.load(reader90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(objCollection41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 50 + "'", int55 == 50);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tmlog" + "'", str57, "tmlog");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objCollection83);
        org.junit.Assert.assertNotNull(objEntrySet84);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test6725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6725");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setDefaultJtaTimeout((long) 50);
        boolean boolean16 = properties9.contains((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        atomikosProperties17.setService("");
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        boolean boolean36 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties17.set(properties22, "{}", (java.lang.Object) boolean36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        boolean boolean42 = properties40.containsValue((java.lang.Object) 100L);
        java.lang.String str43 = properties40.toString();
        java.lang.Object obj44 = properties9.put((java.lang.Object) "{}", (java.lang.Object) properties40);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet45 = properties9.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet46 = properties9.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties9.keys();
        java.lang.String str49 = properties9.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objEntrySet45);
        org.junit.Assert.assertNotNull(objEntrySet46);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test6726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6726");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean17 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str18 = atomikosProperties0.getLogBaseDir();
        long long19 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        long long22 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str18, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
    }

    @Test
    public void test6727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6727");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setLogBaseDir("{}");
        atomikosProperties0.defaultJtaTimeout = 97L;
        long long12 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
    }

    @Test
    public void test6728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6728");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        java.lang.String str40 = atomikosProperties10.logBaseDir;
        atomikosProperties10.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties10.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test6729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6729");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str5 = atomikosProperties0.logBaseName;
        boolean boolean6 = atomikosProperties0.enableLogging;
        atomikosProperties0.logBaseDir = "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}";
        atomikosProperties0.logBaseDir = "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}";
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        properties15.clear();
        boolean boolean17 = properties15.isEmpty();
        java.lang.Object obj18 = properties15.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        atomikosProperties20.forceShutdownOnVmExit = false;
        atomikosProperties20.setTransactionManagerUniqueName("");
        java.lang.Object obj26 = properties15.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties20);
        java.util.Set<java.lang.Object> objSet27 = properties15.keySet();
        java.util.Properties properties28 = new java.util.Properties(properties15);
        java.util.Collection<java.lang.Object> objCollection29 = properties28.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        boolean boolean37 = atomikosProperties31.isEnableLogging();
        atomikosProperties31.transactionManagerUniqueName = "";
        atomikosProperties31.setEnableLogging(false);
        boolean boolean42 = atomikosProperties31.isEnableLogging();
        atomikosProperties31.maxActives = 1;
        java.util.Properties properties45 = atomikosProperties31.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties45.elements();
        atomikosProperties0.set(properties28, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) properties45);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objSet27);
        org.junit.Assert.assertNotNull(objCollection29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNotNull(objEnumeration46);
    }

    @Test
    public void test6730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6730");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        java.util.Properties properties14 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        properties17.clear();
        java.util.Properties properties19 = new java.util.Properties(properties17);
        java.lang.Object obj22 = properties19.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str23 = properties19.toString();
        java.lang.Object obj26 = properties19.setProperty("tmlog", "");
        boolean boolean27 = properties8.equals(obj26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        atomikosProperties28.setTransactionManagerUniqueName("");
        int int32 = atomikosProperties28.getMaxActives();
        atomikosProperties28.logBaseName = "tmlog";
        atomikosProperties28.setEnableLogging(true);
        long long37 = atomikosProperties28.maxTimeout;
        int int38 = atomikosProperties28.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        atomikosProperties39.setTransactionManagerUniqueName("");
        int int43 = atomikosProperties39.getMaxActives();
        java.lang.String str44 = atomikosProperties39.transactionManagerUniqueName;
        atomikosProperties39.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        properties49.clear();
        java.util.Properties properties51 = new java.util.Properties(properties49);
        atomikosProperties39.set(properties49, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj57 = properties49.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet58 = properties49.stringPropertyNames();
        java.lang.Object obj59 = properties8.getOrDefault((java.lang.Object) atomikosProperties28, (java.lang.Object) properties49);
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties49.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.checkpointInterval;
        java.util.Properties properties63 = atomikosProperties61.asProperties();
        java.lang.Object obj64 = properties63.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.logBaseDir;
        java.lang.String str67 = atomikosProperties65.logBaseName;
        java.lang.String str68 = atomikosProperties65.getLogBaseDir();
        atomikosProperties65.setMaxActives((int) (byte) -1);
        boolean boolean71 = atomikosProperties65.isEnableLogging();
        atomikosProperties65.transactionManagerUniqueName = "";
        atomikosProperties65.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str77 = atomikosProperties76.logBaseDir;
        java.lang.String str78 = atomikosProperties76.logBaseName;
        java.lang.String str79 = atomikosProperties76.getLogBaseDir();
        atomikosProperties76.setMaxActives((int) (byte) -1);
        java.lang.String str82 = atomikosProperties76.getService();
        java.lang.Object obj83 = properties63.getOrDefault((java.lang.Object) atomikosProperties65, (java.lang.Object) atomikosProperties76);
        java.lang.String str84 = properties63.toString();
        java.lang.Object obj87 = properties63.setProperty("tmlog", "{}");
        java.lang.Object obj88 = properties63.clone();
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties90 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long91 = atomikosProperties90.checkpointInterval;
        java.lang.String str92 = atomikosProperties90.service;
        boolean boolean93 = atomikosProperties90.isForceShutdownOnVmExit();
        atomikosProperties90.setCheckpointInterval((long) 50);
        java.lang.String str96 = atomikosProperties90.transactionManagerUniqueName;
        boolean boolean97 = properties63.equals((java.lang.Object) atomikosProperties90);
        java.util.Set<java.lang.String> strSet98 = properties63.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj22, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(obj59);
// flaky:         org.junit.Assert.assertEquals(obj59.toString(), "{com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNotNull(obj64);
// flaky:         org.junit.Assert.assertEquals(obj64.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(obj83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str84, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(obj88);
// flaky:         org.junit.Assert.assertEquals(obj88.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 500L + "'", long91 == 500L);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(strSet98);
    }

    @Test
    public void test6731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6731");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str4 = atomikosProperties0.transactionManagerUniqueName;
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test6732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6732");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties2.keys();
        java.lang.String str15 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        java.lang.String str22 = atomikosProperties16.getService();
        long long23 = atomikosProperties16.defaultJtaTimeout;
        java.lang.String str24 = atomikosProperties16.logBaseName;
        java.util.Properties properties25 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) 100);
        boolean boolean29 = atomikosProperties26.isForceShutdownOnVmExit();
        atomikosProperties26.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long32 = atomikosProperties26.getDefaultJtaTimeout();
        long long33 = atomikosProperties26.getMaxTimeout();
        java.lang.String str34 = atomikosProperties26.service;
        atomikosProperties26.serialJtaTransactions = false;
        boolean boolean37 = properties25.containsValue((java.lang.Object) atomikosProperties26);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        java.lang.String str40 = properties25.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10000L + "'", long23 == 10000L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 300000L + "'", long33 == 300000L);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test6733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6733");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        atomikosProperties9.setLogBaseDir("{}");
        atomikosProperties9.setCheckpointInterval(500L);
        atomikosProperties9.threadedTwoPhaseCommit = true;
        java.lang.String str27 = atomikosProperties9.transactionManagerUniqueName;
        atomikosProperties9.forceShutdownOnVmExit = true;
        long long30 = atomikosProperties9.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
    }

    @Test
    public void test6734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6734");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        atomikosProperties0.serialJtaTransactions = false;
        java.lang.String str18 = atomikosProperties0.logBaseName;
        long long19 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.defaultJtaTimeout = (short) 10;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.enableLogging = true;
        boolean boolean26 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test6735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6735");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        java.util.Properties properties16 = new java.util.Properties(properties14);
        java.lang.Object obj19 = properties16.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str20 = properties16.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        boolean boolean23 = atomikosProperties21.isSerialJtaTransactions();
        atomikosProperties21.maxTimeout = 100;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.Object obj27 = properties2.replace((java.lang.Object) properties16, (java.lang.Object) int26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        properties30.clear();
        boolean boolean32 = properties30.isEmpty();
        java.lang.Object obj33 = properties30.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        properties36.clear();
        boolean boolean38 = properties36.isEmpty();
        java.util.Collection<java.lang.Object> objCollection39 = properties36.values();
        properties30.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        java.util.Enumeration<?> wildcardEnumeration41 = properties30.propertyNames();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        boolean boolean43 = properties16.isEmpty();
        java.lang.String str45 = properties16.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean46 = properties16.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "{}");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNotNull(wildcardEnumeration41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test6736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6736");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setTransactionManagerUniqueName("");
        atomikosProperties6.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass16 = atomikosProperties6.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        int int19 = atomikosProperties17.getMaxActives();
        java.lang.String str20 = atomikosProperties17.transactionManagerUniqueName;
        long long21 = atomikosProperties17.getCheckpointInterval();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        atomikosProperties27.transactionManagerUniqueName = "";
        atomikosProperties27.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        java.lang.Object obj45 = properties25.getOrDefault((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        int int48 = atomikosProperties46.getMaxActives();
        java.lang.String str49 = atomikosProperties46.logBaseDir;
        java.lang.Object obj51 = properties25.putIfAbsent((java.lang.Object) atomikosProperties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        atomikosProperties52.setService("");
        boolean boolean57 = atomikosProperties52.threadedTwoPhaseCommit;
        java.lang.String str58 = atomikosProperties52.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        boolean boolean63 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.serialJtaTransactions = true;
        java.lang.String str66 = atomikosProperties59.getService();
        java.lang.Object obj67 = properties25.putIfAbsent((java.lang.Object) str58, (java.lang.Object) atomikosProperties59);
        boolean boolean68 = properties3.replace((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties59);
        atomikosProperties17.setSerialJtaTransactions(true);
        int int71 = atomikosProperties17.getMaxActives();
        boolean boolean72 = atomikosProperties17.serialJtaTransactions;
        atomikosProperties17.serialJtaTransactions = true;
        java.lang.String str75 = atomikosProperties17.getTransactionManagerUniqueName();
        java.lang.String str76 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 50 + "'", int71 == 50);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test6737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6737");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties17 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        java.lang.String str20 = atomikosProperties18.logBaseName;
        java.lang.String str21 = atomikosProperties18.getLogBaseDir();
        atomikosProperties18.setMaxActives((int) (byte) -1);
        atomikosProperties18.enableLogging = true;
        atomikosProperties18.defaultJtaTimeout = 10;
        java.lang.String str28 = atomikosProperties18.transactionManagerUniqueName;
        boolean boolean29 = properties17.containsKey((java.lang.Object) atomikosProperties18);
        atomikosProperties18.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test6738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6738");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        java.lang.String str8 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        java.lang.Object obj14 = properties11.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection15 = properties11.values();
        int int16 = properties11.size();
        java.lang.Object obj17 = null;
        boolean boolean18 = properties11.equals(obj17);
        java.util.Collection<java.lang.Object> objCollection19 = properties11.values();
        java.lang.Object obj20 = properties2.get((java.lang.Object) properties11);
        java.lang.Object obj21 = properties2.clone();
        java.lang.Object obj22 = properties2.clone();
        java.lang.String str23 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties2.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str23, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration24);
    }

    @Test
    public void test6739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6739");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        java.util.Collection<java.lang.Object> objCollection57 = properties17.values();
        properties17.clear();
        java.lang.String str60 = properties17.getProperty("");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet61 = properties17.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet62 = properties17.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties17.elements();
        java.lang.Object obj66 = properties17.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(objEntrySet61);
        org.junit.Assert.assertNotNull(objEntrySet62);
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertNull(obj66);
    }

    @Test
    public void test6740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6740");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        java.lang.String str7 = atomikosProperties0.getLogBaseDir();
        boolean boolean8 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        java.lang.String str11 = atomikosProperties0.service;
        java.lang.String str12 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
    }

    @Test
    public void test6741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6741");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        java.lang.String str9 = properties8.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setTransactionManagerUniqueName("");
        int int14 = atomikosProperties10.getMaxActives();
        atomikosProperties10.logBaseName = "tmlog";
        atomikosProperties10.setEnableLogging(true);
        atomikosProperties10.setMaxActives((int) (byte) 0);
        atomikosProperties10.setMaxActives((int) (short) 1);
        boolean boolean23 = atomikosProperties10.isSerialJtaTransactions();
        java.lang.String str24 = atomikosProperties10.getLogBaseDir();
        boolean boolean25 = atomikosProperties10.isThreadedTwoPhaseCommit();
        atomikosProperties10.setForceShutdownOnVmExit(true);
        boolean boolean28 = properties8.equals((java.lang.Object) atomikosProperties10);
        java.io.PrintStream printStream29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.list(printStream29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(properties8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str9, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test6742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6742");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setLogBaseName("hi!");
        java.lang.String str15 = atomikosProperties0.getService();
        java.lang.String str16 = atomikosProperties0.getTransactionManagerUniqueName();
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.loadFromXML(inputStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str16, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties17);
    }

    @Test
    public void test6743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6743");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str24 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties2.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setCheckpointInterval((long) 100);
        boolean boolean35 = atomikosProperties32.isForceShutdownOnVmExit();
        atomikosProperties32.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean38 = properties31.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.enableLogging = true;
        boolean boolean43 = properties28.replace((java.lang.Object) boolean38, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection44 = properties28.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet45 = properties28.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        properties48.clear();
        boolean boolean50 = properties48.isEmpty();
        java.lang.Object obj51 = properties48.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        java.lang.Object obj55 = properties54.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        java.lang.String str58 = atomikosProperties56.logBaseName;
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        atomikosProperties56.setMaxActives((int) (byte) -1);
        boolean boolean62 = atomikosProperties56.isEnableLogging();
        atomikosProperties56.transactionManagerUniqueName = "";
        atomikosProperties56.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.logBaseDir;
        java.lang.String str69 = atomikosProperties67.logBaseName;
        java.lang.String str70 = atomikosProperties67.getLogBaseDir();
        atomikosProperties67.setMaxActives((int) (byte) -1);
        java.lang.String str73 = atomikosProperties67.getService();
        java.lang.Object obj74 = properties54.getOrDefault((java.lang.Object) atomikosProperties56, (java.lang.Object) atomikosProperties67);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties75.setCheckpointInterval((long) 100);
        java.lang.String str78 = atomikosProperties75.getService();
        atomikosProperties75.defaultJtaTimeout = 'a';
        atomikosProperties75.enableLogging = false;
        atomikosProperties75.logBaseName = "tmlog";
        java.lang.Object obj85 = properties48.putIfAbsent((java.lang.Object) atomikosProperties56, (java.lang.Object) atomikosProperties75);
        java.lang.Object obj86 = properties2.put((java.lang.Object) objEntrySet45, (java.lang.Object) properties48);
        properties48.clear();
        java.io.OutputStream outputStream88 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties48.save(outputStream88, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str24, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(objEntrySet45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{}");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertNotNull(obj55);
// flaky:         org.junit.Assert.assertEquals(obj55.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test6744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6744");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        java.lang.String str15 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        java.util.Properties properties16 = new java.util.Properties(properties2);
        boolean boolean17 = properties16.isEmpty();
        java.lang.Object obj20 = properties16.setProperty("hi!", "{-1=1}");
        java.util.Collection<java.lang.Object> objCollection21 = properties16.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objCollection21);
    }

    @Test
    public void test6745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6745");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        java.lang.String str8 = atomikosProperties6.logBaseName;
        java.lang.String str9 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setMaxActives((int) (byte) -1);
        boolean boolean12 = atomikosProperties6.isEnableLogging();
        atomikosProperties6.transactionManagerUniqueName = "";
        atomikosProperties6.setEnableLogging(false);
        boolean boolean17 = atomikosProperties6.isEnableLogging();
        atomikosProperties6.maxActives = 1;
        atomikosProperties6.defaultJtaTimeout = 300000L;
        java.lang.String str22 = atomikosProperties6.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        boolean boolean27 = atomikosProperties23.isSerialJtaTransactions();
        atomikosProperties23.setLogBaseName("");
        atomikosProperties23.setTransactionManagerUniqueName("tmlog");
        atomikosProperties23.setMaxActives((int) (byte) 1);
        java.lang.Object obj34 = properties2.putIfAbsent((java.lang.Object) str22, (java.lang.Object) (byte) 1);
        java.util.Collection<java.lang.Object> objCollection35 = properties2.values();
        boolean boolean36 = properties2.isEmpty();
        java.lang.String str37 = properties2.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog, tmlog=1}" + "'", str37, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog, tmlog=1}");
    }

    @Test
    public void test6746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6746");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        boolean boolean21 = properties2.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        java.util.Set<java.lang.Object> objSet28 = properties24.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.threadedTwoPhaseCommit = false;
        int int39 = atomikosProperties29.maxActives;
        atomikosProperties29.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj42 = properties2.getOrDefault((java.lang.Object) properties24, (java.lang.Object) atomikosProperties29);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties24.elements();
        java.lang.Object obj46 = properties24.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "");
        boolean boolean47 = properties24.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        atomikosProperties48.setTransactionManagerUniqueName("");
        int int52 = atomikosProperties48.getMaxActives();
        java.lang.String str53 = atomikosProperties48.transactionManagerUniqueName;
        atomikosProperties48.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        java.util.Properties properties58 = atomikosProperties56.asProperties();
        properties58.clear();
        java.util.Properties properties60 = new java.util.Properties(properties58);
        atomikosProperties48.set(properties58, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj66 = properties58.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long68 = atomikosProperties67.checkpointInterval;
        java.util.Properties properties69 = atomikosProperties67.asProperties();
        properties69.clear();
        java.util.Properties properties71 = new java.util.Properties(properties69);
        java.lang.Object obj74 = properties71.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str75 = properties71.toString();
        java.lang.Object obj78 = properties71.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet79 = properties71.keySet();
        java.lang.Object obj80 = properties58.remove((java.lang.Object) properties71);
        boolean boolean81 = properties24.containsKey((java.lang.Object) properties58);
        java.io.OutputStream outputStream82 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties24.save(outputStream82, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj74, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "{}" + "'", str75, "{}");
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(objSet79);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test6747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6747");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        java.lang.String str19 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        properties22.clear();
        java.util.Properties properties24 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        atomikosProperties25.setTransactionManagerUniqueName("");
        int int29 = atomikosProperties25.getMaxActives();
        atomikosProperties25.logBaseName = "tmlog";
        int int32 = atomikosProperties25.maxActives;
        boolean boolean33 = properties22.containsValue((java.lang.Object) int32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.lang.Object obj42 = properties39.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        java.lang.Object obj47 = properties46.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        boolean boolean54 = atomikosProperties48.isEnableLogging();
        atomikosProperties48.transactionManagerUniqueName = "";
        atomikosProperties48.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        atomikosProperties59.setMaxActives((int) (byte) -1);
        java.lang.String str65 = atomikosProperties59.getService();
        java.lang.Object obj66 = properties46.getOrDefault((java.lang.Object) atomikosProperties48, (java.lang.Object) atomikosProperties59);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long68 = atomikosProperties67.checkpointInterval;
        int int69 = atomikosProperties67.getMaxActives();
        java.lang.String str70 = atomikosProperties67.logBaseDir;
        java.lang.Object obj72 = properties46.putIfAbsent((java.lang.Object) atomikosProperties67, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str74 = atomikosProperties73.logBaseDir;
        java.lang.String str75 = atomikosProperties73.logBaseName;
        java.lang.String str76 = atomikosProperties73.getLogBaseDir();
        boolean boolean77 = atomikosProperties73.isSerialJtaTransactions();
        atomikosProperties73.setEnableLogging(false);
        boolean boolean80 = properties39.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties73);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long82 = atomikosProperties81.checkpointInterval;
        java.util.Properties properties83 = atomikosProperties81.asProperties();
        properties83.clear();
        java.util.Properties properties85 = new java.util.Properties(properties83);
        java.lang.Object obj88 = properties85.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str89 = properties85.toString();
        boolean boolean90 = properties39.containsValue((java.lang.Object) properties85);
        java.util.Set<java.lang.Object> objSet91 = properties85.keySet();
        boolean boolean92 = properties2.replace((java.lang.Object) properties22, (java.lang.Object) atomikosProperties34, (java.lang.Object) properties85);
        java.util.Collection<java.lang.Object> objCollection93 = properties2.values();
        java.util.Properties properties94 = new java.util.Properties(properties2);
        java.io.OutputStream outputStream95 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream95, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(obj47);
// flaky:         org.junit.Assert.assertEquals(obj47.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 50 + "'", int69 == 50);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tmlog" + "'", str75, "tmlog");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 500L + "'", long82 == 500L);
        org.junit.Assert.assertNotNull(properties83);
        org.junit.Assert.assertEquals("'" + obj88 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj88, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "{}" + "'", str89, "{}");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objSet91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objCollection93);
    }

    @Test
    public void test6748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6748");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.maxTimeout = 10000L;
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        java.lang.String str17 = atomikosProperties0.logBaseName;
        boolean boolean18 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test6749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6749");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        java.util.Properties properties10 = new java.util.Properties(properties8);
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str14 = properties10.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        boolean boolean21 = atomikosProperties15.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setCheckpointInterval((long) 100);
        boolean boolean25 = atomikosProperties22.isForceShutdownOnVmExit();
        java.lang.Object obj26 = properties10.putIfAbsent((java.lang.Object) atomikosProperties15, (java.lang.Object) boolean25);
        java.util.Set<java.lang.String> strSet27 = properties10.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet28 = properties10.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        int int31 = atomikosProperties29.getMaxActives();
        atomikosProperties29.setCheckpointInterval(1L);
        long long34 = atomikosProperties29.getMaxTimeout();
        java.lang.Object obj35 = properties10.get((java.lang.Object) atomikosProperties29);
        java.lang.Object obj36 = properties2.remove((java.lang.Object) properties10);
        boolean boolean37 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        java.lang.Object obj43 = properties40.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection44 = properties40.values();
        java.util.Collection<java.lang.Object> objCollection45 = properties40.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        properties48.clear();
        boolean boolean50 = properties48.isEmpty();
        java.lang.Object obj51 = properties48.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        properties54.clear();
        boolean boolean56 = properties54.isEmpty();
        java.util.Collection<java.lang.Object> objCollection57 = properties54.values();
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.util.Enumeration<?> wildcardEnumeration59 = properties54.propertyNames();
        java.util.Properties properties60 = new java.util.Properties(properties54);
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties60);
        int int62 = properties40.size();
        boolean boolean63 = properties40.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties64.setCheckpointInterval((long) 100);
        boolean boolean67 = atomikosProperties64.isForceShutdownOnVmExit();
        atomikosProperties64.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties64.service = "";
        atomikosProperties64.setTransactionManagerUniqueName("{}");
        atomikosProperties64.setMaxActives((int) (short) -1);
        java.lang.Object obj76 = properties2.getOrDefault((java.lang.Object) properties40, (java.lang.Object) (short) -1);
        java.util.Set<java.lang.Object> objSet77 = properties40.keySet();
        properties40.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long80 = atomikosProperties79.checkpointInterval;
        atomikosProperties79.forceShutdownOnVmExit = false;
        atomikosProperties79.threadedTwoPhaseCommit = false;
        atomikosProperties79.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties79.threadedTwoPhaseCommit = false;
        atomikosProperties79.setDefaultJtaTimeout(500L);
        java.lang.String str91 = atomikosProperties79.getLogBaseName();
        atomikosProperties79.threadedTwoPhaseCommit = true;
        boolean boolean94 = properties40.containsKey((java.lang.Object) atomikosProperties79);
        atomikosProperties79.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 300000L + "'", long34 == 300000L);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{}");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(wildcardEnumeration59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + (short) -1 + "'", obj76, (short) -1);
        org.junit.Assert.assertNotNull(objSet77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 500L + "'", long80 == 500L);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "tmlog" + "'", str91, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test6750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6750");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.maxTimeout = 10000L;
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        java.lang.String str17 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        properties20.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        atomikosProperties22.setTransactionManagerUniqueName("");
        int int26 = atomikosProperties22.getMaxActives();
        boolean boolean27 = properties20.containsValue((java.lang.Object) int26);
        java.lang.Object obj30 = properties20.setProperty("", "");
        java.util.Properties properties31 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        java.lang.String str34 = atomikosProperties32.logBaseName;
        java.lang.String str35 = atomikosProperties32.getLogBaseDir();
        atomikosProperties32.setMaxActives((int) (byte) -1);
        boolean boolean38 = atomikosProperties32.isEnableLogging();
        atomikosProperties32.transactionManagerUniqueName = "";
        atomikosProperties32.threadedTwoPhaseCommit = true;
        java.util.Properties properties43 = atomikosProperties32.asProperties();
        atomikosProperties32.maxTimeout = 10L;
        java.lang.Object obj46 = properties20.remove((java.lang.Object) atomikosProperties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        boolean boolean54 = atomikosProperties48.isEnableLogging();
        atomikosProperties48.transactionManagerUniqueName = "";
        atomikosProperties48.setDefaultJtaTimeout((long) (-1));
        atomikosProperties0.set(properties20, "tmlog", (java.lang.Object) atomikosProperties48);
        java.io.OutputStream outputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.storeToXML(outputStream60, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test6751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6751");
        java.util.Properties properties0 = new java.util.Properties();
        java.io.InputStream inputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(inputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test6752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6752");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection20 = properties10.values();
        java.util.Properties properties21 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        atomikosProperties29.forceShutdownOnVmExit = false;
        atomikosProperties29.setTransactionManagerUniqueName("");
        java.lang.Object obj35 = properties24.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties29);
        java.util.Set<java.lang.Object> objSet36 = properties24.keySet();
        java.lang.String str38 = properties24.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        boolean boolean43 = properties41.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        java.lang.Object obj49 = properties46.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        atomikosProperties50.setLogBaseName("");
        java.lang.Object obj56 = properties41.replace((java.lang.Object) properties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        java.util.Properties properties59 = atomikosProperties57.asProperties();
        java.lang.Object obj60 = properties59.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        java.lang.String str64 = atomikosProperties61.getLogBaseDir();
        atomikosProperties61.setMaxActives((int) (byte) -1);
        boolean boolean67 = atomikosProperties61.isEnableLogging();
        atomikosProperties61.transactionManagerUniqueName = "";
        atomikosProperties61.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str73 = atomikosProperties72.logBaseDir;
        java.lang.String str74 = atomikosProperties72.logBaseName;
        java.lang.String str75 = atomikosProperties72.getLogBaseDir();
        atomikosProperties72.setMaxActives((int) (byte) -1);
        java.lang.String str78 = atomikosProperties72.getService();
        java.lang.Object obj79 = properties59.getOrDefault((java.lang.Object) atomikosProperties61, (java.lang.Object) atomikosProperties72);
        int int80 = properties59.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet81 = properties59.entrySet();
        java.lang.Object obj82 = properties41.remove((java.lang.Object) objEntrySet81);
        java.lang.Object obj83 = properties24.remove((java.lang.Object) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties84 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str85 = atomikosProperties84.logBaseDir;
        atomikosProperties84.setTransactionManagerUniqueName("");
        int int88 = atomikosProperties84.getMaxActives();
        atomikosProperties84.logBaseName = "tmlog";
        java.lang.String str91 = atomikosProperties84.getLogBaseDir();
        boolean boolean92 = atomikosProperties84.serialJtaTransactions;
        java.lang.Object obj93 = properties10.putIfAbsent((java.lang.Object) properties24, (java.lang.Object) atomikosProperties84);
        java.io.Writer writer94 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties24.store(writer94, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objSet36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNotNull(obj60);
// flaky:         org.junit.Assert.assertEquals(obj60.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "tmlog" + "'", str74, "tmlog");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertNotNull(objEntrySet81);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 50 + "'", int88 == 50);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNull(obj93);
    }

    @Test
    public void test6753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6753");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.maxTimeout = 9;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test6754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6754");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        java.util.Collection<java.lang.Object> objCollection12 = properties9.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        atomikosProperties13.setTransactionManagerUniqueName("");
        int int17 = atomikosProperties13.getMaxActives();
        java.lang.String str18 = atomikosProperties13.transactionManagerUniqueName;
        atomikosProperties13.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        properties23.clear();
        java.util.Properties properties25 = new java.util.Properties(properties23);
        atomikosProperties13.set(properties23, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj31 = properties23.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet32 = properties23.stringPropertyNames();
        java.lang.String str34 = properties23.getProperty("hi!");
        java.lang.Object obj35 = properties2.putIfAbsent((java.lang.Object) objCollection12, (java.lang.Object) "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        java.lang.Object obj39 = properties38.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        boolean boolean46 = atomikosProperties40.isEnableLogging();
        atomikosProperties40.transactionManagerUniqueName = "";
        atomikosProperties40.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        java.lang.String str57 = atomikosProperties51.getService();
        java.lang.Object obj58 = properties38.getOrDefault((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties51);
        int int59 = properties38.size();
        boolean boolean60 = properties2.containsValue((java.lang.Object) properties38);
        java.lang.Object obj62 = properties38.get((java.lang.Object) 300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long64 = atomikosProperties63.checkpointInterval;
        atomikosProperties63.forceShutdownOnVmExit = false;
        atomikosProperties63.threadedTwoPhaseCommit = false;
        atomikosProperties63.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties63.threadedTwoPhaseCommit = false;
        atomikosProperties63.setDefaultJtaTimeout(500L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.logBaseDir;
        java.lang.String str77 = atomikosProperties75.logBaseName;
        atomikosProperties75.setService("");
        boolean boolean80 = atomikosProperties75.threadedTwoPhaseCommit;
        int int81 = atomikosProperties75.getMaxActives();
        boolean boolean82 = atomikosProperties75.isSerialJtaTransactions();
        atomikosProperties75.setService("hi!");
        java.lang.Object obj85 = properties38.put((java.lang.Object) 500L, (java.lang.Object) "hi!");
        java.util.Set<java.lang.Object> objSet86 = properties38.keySet();
        java.util.Set<java.lang.Object> objSet87 = properties38.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 500L + "'", long64 == 500L);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tmlog" + "'", str77, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 50 + "'", int81 == 50);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNotNull(objSet86);
        org.junit.Assert.assertNotNull(objSet87);
    }

    @Test
    public void test6755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6755");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.setCheckpointInterval((long) 100);
        boolean boolean6 = atomikosProperties3.isForceShutdownOnVmExit();
        atomikosProperties3.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean9 = properties2.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        atomikosProperties10.setService("");
        java.util.Properties properties15 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        properties19.clear();
        boolean boolean21 = properties19.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        atomikosProperties22.setTransactionManagerUniqueName("");
        int int26 = atomikosProperties22.getMaxActives();
        java.lang.String str27 = atomikosProperties22.transactionManagerUniqueName;
        boolean boolean28 = properties19.containsValue((java.lang.Object) atomikosProperties22);
        boolean boolean29 = atomikosProperties22.forceShutdownOnVmExit;
        atomikosProperties10.set(properties15, "{}", (java.lang.Object) boolean29);
        java.util.Properties properties31 = new java.util.Properties(properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        atomikosProperties32.setTransactionManagerUniqueName("");
        int int36 = atomikosProperties32.getMaxActives();
        java.lang.String str37 = atomikosProperties32.transactionManagerUniqueName;
        atomikosProperties32.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        properties42.clear();
        java.util.Properties properties44 = new java.util.Properties(properties42);
        atomikosProperties32.set(properties42, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj50 = properties42.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties51 = new java.util.Properties(properties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        properties54.clear();
        boolean boolean56 = properties54.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        java.util.Properties properties59 = atomikosProperties57.asProperties();
        boolean boolean61 = properties59.containsValue((java.lang.Object) 100L);
        boolean boolean62 = properties54.contains((java.lang.Object) properties59);
        java.lang.Object obj63 = properties15.put((java.lang.Object) properties42, (java.lang.Object) properties54);
        java.lang.Object obj65 = properties2.put((java.lang.Object) properties15, (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Collection<java.lang.Object> objCollection66 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long68 = atomikosProperties67.checkpointInterval;
        java.util.Properties properties69 = atomikosProperties67.asProperties();
        properties69.clear();
        boolean boolean71 = properties69.isEmpty();
        java.lang.Object obj72 = properties69.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long74 = atomikosProperties73.checkpointInterval;
        java.util.Properties properties75 = atomikosProperties73.asProperties();
        properties75.clear();
        boolean boolean77 = properties75.isEmpty();
        java.util.Collection<java.lang.Object> objCollection78 = properties75.values();
        properties69.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties75);
        java.util.Properties properties80 = new java.util.Properties(properties69);
        java.lang.Object obj81 = properties80.clone();
        java.lang.Object obj83 = properties2.putIfAbsent((java.lang.Object) properties80, (java.lang.Object) true);
        java.util.Collection<java.lang.Object> objCollection84 = properties2.values();
        int int85 = properties2.size();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(objCollection66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "{}");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 500L + "'", long74 == 500L);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objCollection78);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "{}");
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNotNull(objCollection84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 11 + "'", int85 == 11);
    }

    @Test
    public void test6756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6756");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.logBaseName = "{}";
        atomikosProperties0.maxActives = 0;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.tmlog=0.0}";
        atomikosProperties0.setCheckpointInterval(2L);
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test6757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6757");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.checkpointInterval = '#';
        atomikosProperties0.setLogBaseDir("tmlog");
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test6758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6758");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.checkpointInterval = (-1L);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.defaultJtaTimeout = 9;
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.service = "{com.atomikos.icatch.tmlog=0.0}";
        boolean boolean16 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test6759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6759");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.lang.String str2 = atomikosProperties0.service;
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test6760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6760");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setMaxActives((int) (byte) 0);
        atomikosProperties0.service = "hi!";
        java.lang.String str13 = atomikosProperties0.getService();
        long long14 = atomikosProperties0.getCheckpointInterval();
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        boolean boolean16 = properties15.isEmpty();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test6761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6761");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        boolean boolean21 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean22 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str23 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean24 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.forceShutdownOnVmExit = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test6762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6762");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long12 = atomikosProperties0.checkpointInterval;
        long long13 = atomikosProperties0.maxTimeout;
        boolean boolean14 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test6763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6763");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseName = "";
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        java.lang.String str16 = atomikosProperties10.getService();
        long long17 = atomikosProperties10.defaultJtaTimeout;
        java.lang.String str18 = atomikosProperties10.logBaseName;
        java.util.Properties properties19 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        int int22 = atomikosProperties20.getMaxActives();
        java.lang.String str23 = atomikosProperties20.transactionManagerUniqueName;
        long long24 = atomikosProperties20.getCheckpointInterval();
        boolean boolean25 = atomikosProperties20.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        int int28 = atomikosProperties26.getMaxActives();
        atomikosProperties26.setCheckpointInterval(1L);
        atomikosProperties26.setService("{}");
        boolean boolean33 = atomikosProperties26.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setCheckpointInterval((long) 100);
        boolean boolean37 = atomikosProperties34.isForceShutdownOnVmExit();
        atomikosProperties34.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long40 = atomikosProperties34.getDefaultJtaTimeout();
        long long41 = atomikosProperties34.getMaxTimeout();
        atomikosProperties34.logBaseName = "tmlog";
        long long44 = atomikosProperties34.getDefaultJtaTimeout();
        atomikosProperties34.setForceShutdownOnVmExit(true);
        java.lang.String str47 = atomikosProperties34.getLogBaseName();
        boolean boolean48 = properties19.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) boolean33, (java.lang.Object) str47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        atomikosProperties50.setMaxActives((int) (byte) -1);
        boolean boolean56 = atomikosProperties50.isEnableLogging();
        long long57 = atomikosProperties50.checkpointInterval;
        atomikosProperties50.setCheckpointInterval(10L);
        atomikosProperties0.set(properties19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties50);
        int int61 = properties19.size();
        int int62 = properties19.size();
        java.lang.String str64 = properties19.getProperty("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 300000L + "'", long41 == 300000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test6764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6764");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        int int14 = properties2.size();
        boolean boolean15 = properties2.isEmpty();
        java.lang.String str17 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        java.lang.String str20 = atomikosProperties18.logBaseName;
        java.lang.String str21 = atomikosProperties18.getLogBaseDir();
        atomikosProperties18.setMaxActives((int) (byte) -1);
        boolean boolean24 = atomikosProperties18.isEnableLogging();
        long long25 = atomikosProperties18.checkpointInterval;
        atomikosProperties18.setCheckpointInterval(10L);
        boolean boolean28 = atomikosProperties18.isForceShutdownOnVmExit();
        atomikosProperties18.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties18.setSerialJtaTransactions(false);
        boolean boolean33 = atomikosProperties18.forceShutdownOnVmExit;
        java.lang.Object obj34 = properties2.get((java.lang.Object) atomikosProperties18);
        atomikosProperties18.maxActives = (short) 10;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test6765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6765");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        int int5 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseDir = "{}";
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        long long13 = atomikosProperties0.checkpointInterval;
        long long14 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test6766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6766");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        java.lang.String str3 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 'a';
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setCheckpointInterval((long) 9);
        boolean boolean12 = atomikosProperties0.enableLogging;
        boolean boolean13 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test6767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6767");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.tmlog=0.0}";
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setMaxActives((int) (byte) -1);
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setService("{}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
    }

    @Test
    public void test6768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6768");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.defaultJtaTimeout;
        long long11 = atomikosProperties0.maxTimeout;
        java.lang.String str12 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.enableLogging = false;
        boolean boolean17 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test6769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6769");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        java.lang.Object obj49 = properties48.clone();
        java.lang.Object obj50 = properties44.replace((java.lang.Object) true, obj49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long52 = atomikosProperties51.checkpointInterval;
        java.util.Properties properties53 = atomikosProperties51.asProperties();
        boolean boolean55 = properties53.containsValue((java.lang.Object) 100L);
        java.lang.String str56 = properties53.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties53.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.checkpointInterval;
        java.util.Properties properties63 = atomikosProperties61.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties64.setCheckpointInterval((long) 100);
        boolean boolean67 = atomikosProperties64.isForceShutdownOnVmExit();
        atomikosProperties64.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean70 = properties63.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.enableLogging = true;
        boolean boolean75 = properties60.replace((java.lang.Object) boolean70, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection76 = properties60.values();
        boolean boolean77 = properties53.contains((java.lang.Object) properties60);
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties60);
        boolean boolean79 = properties60.isEmpty();
        java.lang.Object obj80 = properties60.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration81 = properties60.elements();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNotNull(obj49);
// flaky:         org.junit.Assert.assertEquals(obj49.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objCollection76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(obj80);
// flaky:         org.junit.Assert.assertEquals(obj80.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration81);
    }

    @Test
    public void test6770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6770");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.threadedTwoPhaseCommit = true;
        atomikosProperties31.setService("{}");
        java.lang.String str49 = atomikosProperties31.logBaseDir;
        boolean boolean50 = atomikosProperties31.enableLogging;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test6771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6771");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.lang.Object obj15 = properties2.remove((java.lang.Object) atomikosProperties13);
        java.lang.String str16 = atomikosProperties13.logBaseName;
        long long17 = atomikosProperties13.checkpointInterval;
        atomikosProperties13.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
    }

    @Test
    public void test6772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6772");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str6 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        java.lang.Object obj14 = properties11.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str15 = properties11.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) 100);
        boolean boolean26 = atomikosProperties23.isForceShutdownOnVmExit();
        java.lang.Object obj27 = properties11.putIfAbsent((java.lang.Object) atomikosProperties16, (java.lang.Object) boolean26);
        java.util.Set<java.lang.String> strSet28 = properties11.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet29 = properties11.keySet();
        java.lang.Object obj30 = properties2.remove((java.lang.Object) properties11);
        boolean boolean31 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties2.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        java.lang.Object obj38 = properties35.clone();
        java.util.Set<java.lang.Object> objSet39 = properties35.keySet();
        boolean boolean42 = properties35.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long44 = atomikosProperties43.checkpointInterval;
        java.util.Properties properties45 = atomikosProperties43.asProperties();
        atomikosProperties43.threadedTwoPhaseCommit = false;
        boolean boolean48 = properties35.containsKey((java.lang.Object) atomikosProperties43);
        java.util.Set<java.lang.String> strSet49 = properties35.stringPropertyNames();
        java.lang.Object obj50 = properties2.remove((java.lang.Object) properties35);
        boolean boolean51 = properties35.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        properties54.clear();
        java.util.Properties properties56 = new java.util.Properties(properties54);
        int int57 = properties56.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        properties60.clear();
        boolean boolean62 = properties60.isEmpty();
        java.util.Collection<java.lang.Object> objCollection63 = properties60.values();
        boolean boolean64 = properties56.containsKey((java.lang.Object) objCollection63);
        int int65 = properties56.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties66.enableLogging = true;
        boolean boolean69 = atomikosProperties66.forceShutdownOnVmExit;
        atomikosProperties66.setSerialJtaTransactions(false);
        java.lang.String str72 = atomikosProperties66.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long74 = atomikosProperties73.checkpointInterval;
        boolean boolean75 = atomikosProperties73.isSerialJtaTransactions();
        atomikosProperties73.maxTimeout = 100;
        int int78 = atomikosProperties73.getMaxActives();
        atomikosProperties73.setEnableLogging(false);
        atomikosProperties73.logBaseDir = "{}";
        java.lang.Object obj83 = properties56.replace((java.lang.Object) atomikosProperties66, (java.lang.Object) atomikosProperties73);
        boolean boolean84 = atomikosProperties73.isSerialJtaTransactions();
        java.lang.Object obj85 = properties35.remove((java.lang.Object) boolean84);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj14, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(objSet29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objCollection63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 500L + "'", long74 == 500L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 50 + "'", int78 == 50);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(obj85);
    }

    @Test
    public void test6773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6773");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.lang.String str16 = properties2.getProperty("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        long long19 = atomikosProperties17.getDefaultJtaTimeout();
        java.util.Properties properties20 = atomikosProperties17.asProperties();
        java.util.Set<java.lang.Object> objSet21 = properties20.keySet();
        java.util.Properties properties22 = new java.util.Properties(properties20);
        java.util.Collection<java.lang.Object> objCollection23 = properties22.values();
        java.lang.Object obj24 = properties2.remove((java.lang.Object) properties22);
        java.util.Set<java.lang.Object> objSet25 = properties2.keySet();
        java.io.OutputStream outputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream26, "{-1=1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(objSet21);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(objSet25);
    }

    @Test
    public void test6774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6774");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        long long12 = atomikosProperties10.getDefaultJtaTimeout();
        java.util.Properties properties13 = atomikosProperties10.asProperties();
        java.lang.String str14 = properties13.toString();
        boolean boolean15 = properties2.equals((java.lang.Object) properties13);
        java.util.Set<java.lang.String> strSet16 = properties13.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        java.lang.Object obj22 = properties19.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection23 = properties19.values();
        int int24 = properties19.size();
        java.lang.Object obj25 = properties13.remove((java.lang.Object) int24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        properties28.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        atomikosProperties30.setTransactionManagerUniqueName("");
        int int34 = atomikosProperties30.getMaxActives();
        boolean boolean35 = properties28.containsValue((java.lang.Object) int34);
        java.lang.Object obj38 = properties28.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties39 = new java.util.Properties(properties28);
        java.util.Set<java.lang.Object> objSet40 = properties28.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        atomikosProperties41.forceShutdownOnVmExit = false;
        atomikosProperties41.threadedTwoPhaseCommit = false;
        atomikosProperties41.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean49 = atomikosProperties41.isSerialJtaTransactions();
        boolean boolean50 = atomikosProperties41.forceShutdownOnVmExit;
        long long51 = atomikosProperties41.getDefaultJtaTimeout();
        java.lang.String str52 = atomikosProperties41.getLogBaseName();
        boolean boolean53 = properties13.remove((java.lang.Object) properties28, (java.lang.Object) atomikosProperties41);
        java.io.Reader reader54 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties28.load(reader54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNotNull(properties13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str14, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test6775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6775");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Collection<java.lang.Object> objCollection14 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        atomikosProperties15.forceShutdownOnVmExit = false;
        atomikosProperties15.threadedTwoPhaseCommit = false;
        atomikosProperties15.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties15.threadedTwoPhaseCommit = false;
        java.lang.String str25 = atomikosProperties15.transactionManagerUniqueName;
        atomikosProperties15.enableLogging = true;
        java.lang.String str28 = atomikosProperties15.transactionManagerUniqueName;
        java.lang.Object obj29 = properties2.remove((java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        boolean boolean34 = atomikosProperties30.isSerialJtaTransactions();
        atomikosProperties30.setLogBaseName("");
        long long37 = atomikosProperties30.getMaxTimeout();
        java.lang.String str38 = atomikosProperties30.getService();
        atomikosProperties30.setCheckpointInterval((long) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        properties43.clear();
        boolean boolean45 = properties43.isEmpty();
        java.lang.Object obj46 = properties43.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        atomikosProperties48.forceShutdownOnVmExit = false;
        atomikosProperties48.setTransactionManagerUniqueName("");
        java.lang.Object obj54 = properties43.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties48);
        int int55 = properties43.size();
        java.lang.Object obj56 = properties2.put((java.lang.Object) atomikosProperties30, (java.lang.Object) int55);
        java.lang.String str57 = atomikosProperties30.getLogBaseName();
        java.util.Properties properties58 = atomikosProperties30.asProperties();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objCollection14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str25, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str28, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(properties58);
    }

    @Test
    public void test6776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6776");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        java.lang.String str3 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 'a';
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.lang.String str12 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.service = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}";
        long long16 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L + "'", long16 == 100L);
    }

    @Test
    public void test6777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6777");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        long long20 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties12.asProperties();
        atomikosProperties12.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNotNull(properties21);
    }

    @Test
    public void test6778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6778");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long6 = atomikosProperties0.getMaxTimeout();
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        long long8 = atomikosProperties0.defaultJtaTimeout;
        long long9 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
    }

    @Test
    public void test6779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6779");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.transactionManagerUniqueName;
        long long14 = atomikosProperties10.getCheckpointInterval();
        boolean boolean15 = atomikosProperties10.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        int int18 = atomikosProperties16.getMaxActives();
        atomikosProperties16.setCheckpointInterval(1L);
        atomikosProperties16.setService("{}");
        boolean boolean23 = atomikosProperties16.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) 100);
        boolean boolean27 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long30 = atomikosProperties24.getDefaultJtaTimeout();
        long long31 = atomikosProperties24.getMaxTimeout();
        atomikosProperties24.logBaseName = "tmlog";
        long long34 = atomikosProperties24.getDefaultJtaTimeout();
        atomikosProperties24.setForceShutdownOnVmExit(true);
        java.lang.String str37 = atomikosProperties24.getLogBaseName();
        boolean boolean38 = properties9.replace((java.lang.Object) atomikosProperties10, (java.lang.Object) boolean23, (java.lang.Object) str37);
        java.lang.String str39 = atomikosProperties10.getService();
        boolean boolean40 = atomikosProperties10.enableLogging;
        boolean boolean41 = atomikosProperties10.serialJtaTransactions;
        long long42 = atomikosProperties10.getMaxTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 300000L + "'", long42 == 300000L);
    }

    @Test
    public void test6780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6780");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        java.util.Set<java.lang.String> strSet17 = properties16.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        java.lang.Object obj21 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        boolean boolean28 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.transactionManagerUniqueName = "";
        atomikosProperties22.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        java.lang.String str39 = atomikosProperties33.getService();
        java.lang.Object obj40 = properties20.getOrDefault((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        long long46 = atomikosProperties41.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        properties49.clear();
        boolean boolean51 = properties49.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        atomikosProperties52.setTransactionManagerUniqueName("");
        int int56 = atomikosProperties52.getMaxActives();
        java.lang.String str57 = atomikosProperties52.transactionManagerUniqueName;
        boolean boolean58 = properties49.containsValue((java.lang.Object) atomikosProperties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.setCheckpointInterval((long) 100);
        atomikosProperties59.maxActives = (byte) 0;
        atomikosProperties59.setTransactionManagerUniqueName("");
        java.lang.Object obj66 = properties49.get((java.lang.Object) atomikosProperties59);
        boolean boolean68 = properties49.containsValue((java.lang.Object) 100.0d);
        boolean boolean69 = properties16.replace(obj40, (java.lang.Object) atomikosProperties41, (java.lang.Object) boolean68);
        java.lang.Object obj70 = properties16.clone();
        java.lang.Object obj73 = properties16.setProperty("tmlog", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean74 = properties8.containsKey((java.lang.Object) "tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.logBaseDir;
        java.lang.String str77 = atomikosProperties75.logBaseName;
        java.lang.String str78 = atomikosProperties75.getLogBaseDir();
        atomikosProperties75.setMaxActives((int) (byte) -1);
        boolean boolean81 = atomikosProperties75.isEnableLogging();
        long long82 = atomikosProperties75.checkpointInterval;
        atomikosProperties75.setCheckpointInterval(10L);
        boolean boolean85 = atomikosProperties75.isForceShutdownOnVmExit();
        atomikosProperties75.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties75.setLogBaseName("hi!");
        java.lang.String str90 = atomikosProperties75.getService();
        boolean boolean91 = atomikosProperties75.threadedTwoPhaseCommit;
        java.util.Properties properties92 = atomikosProperties75.asProperties();
        java.lang.Object obj93 = properties8.get((java.lang.Object) atomikosProperties75);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(obj70);
// flaky:         org.junit.Assert.assertEquals(obj70.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tmlog" + "'", str77, "tmlog");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 500L + "'", long82 == 500L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(properties92);
        org.junit.Assert.assertNull(obj93);
    }

    @Test
    public void test6781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6781");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.service = "hi!";
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setMaxTimeout(10000L);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        java.lang.String str14 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setLogBaseDir("{}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test6782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6782");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.lang.String str15 = properties14.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        java.lang.Object obj19 = properties18.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.logBaseDir;
        java.lang.String str22 = atomikosProperties20.logBaseName;
        java.lang.String str23 = atomikosProperties20.getLogBaseDir();
        atomikosProperties20.setMaxActives((int) (byte) -1);
        boolean boolean26 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.transactionManagerUniqueName = "";
        atomikosProperties20.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        java.lang.String str37 = atomikosProperties31.getService();
        java.lang.Object obj38 = properties18.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties31);
        int int39 = properties18.size();
        java.lang.String str40 = properties18.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties18.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        atomikosProperties42.setTransactionManagerUniqueName("");
        int int46 = atomikosProperties42.getMaxActives();
        java.lang.String str47 = atomikosProperties42.transactionManagerUniqueName;
        atomikosProperties42.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        properties52.clear();
        java.util.Properties properties54 = new java.util.Properties(properties52);
        atomikosProperties42.set(properties52, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj60 = properties52.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet61 = properties52.stringPropertyNames();
        java.lang.String str63 = properties52.getProperty("hi!");
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        java.util.Set<java.lang.String> strSet65 = properties18.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        properties68.clear();
        boolean boolean70 = properties68.isEmpty();
        java.lang.Object obj71 = properties68.clone();
        java.util.Set<java.lang.Object> objSet72 = properties68.keySet();
        java.lang.Object obj73 = properties14.replace((java.lang.Object) properties18, (java.lang.Object) objSet72);
        boolean boolean74 = properties18.isEmpty();
        java.io.InputStream inputStream75 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.load(inputStream75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str40, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 50 + "'", int46 == 50);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "{}");
        org.junit.Assert.assertNotNull(objSet72);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test6783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6783");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        boolean boolean9 = properties7.containsValue((java.lang.Object) 100L);
        boolean boolean10 = properties2.contains((java.lang.Object) properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        properties13.clear();
        boolean boolean15 = properties13.isEmpty();
        java.lang.Object obj16 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        properties19.clear();
        boolean boolean21 = properties19.isEmpty();
        java.util.Collection<java.lang.Object> objCollection22 = properties19.values();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.lang.Object obj26 = properties19.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.lang.Object obj27 = properties19.clone();
        boolean boolean28 = properties7.equals((java.lang.Object) properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        properties31.clear();
        boolean boolean33 = properties31.isEmpty();
        java.lang.Object obj34 = properties31.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        properties37.clear();
        boolean boolean39 = properties37.isEmpty();
        java.util.Collection<java.lang.Object> objCollection40 = properties37.values();
        properties31.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties37);
        java.util.Enumeration<?> wildcardEnumeration42 = properties31.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties31.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet44 = properties31.entrySet();
        java.lang.String str46 = properties31.getProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Object obj47 = properties7.remove((java.lang.Object) properties31);
        java.lang.String str49 = properties7.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        boolean boolean54 = properties52.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        java.util.Properties properties57 = atomikosProperties55.asProperties();
        java.lang.Object obj60 = properties57.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        java.lang.String str64 = atomikosProperties61.getLogBaseDir();
        atomikosProperties61.setLogBaseName("");
        java.lang.Object obj67 = properties52.replace((java.lang.Object) properties57, (java.lang.Object) "");
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties57);
        java.util.Properties properties69 = new java.util.Properties(properties7);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objCollection40);
        org.junit.Assert.assertNotNull(wildcardEnumeration42);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNotNull(objEntrySet44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj67);
    }

    @Test
    public void test6784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6784");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.defaultJtaTimeout = 100L;
        atomikosProperties0.maxActives = (short) 1;
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test6785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6785");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.lang.Object obj20 = properties19.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.setCheckpointInterval((long) 100);
        boolean boolean38 = atomikosProperties35.isForceShutdownOnVmExit();
        atomikosProperties35.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean41 = properties34.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.enableLogging = true;
        boolean boolean46 = properties31.replace((java.lang.Object) boolean41, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection47 = properties31.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet48 = properties31.entrySet();
        atomikosProperties21.set(properties31, "hi!", (java.lang.Object) 0L);
        atomikosProperties21.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        java.util.Properties properties56 = atomikosProperties54.asProperties();
        java.lang.Object obj59 = properties56.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection60 = properties56.values();
        java.util.Collection<java.lang.Object> objCollection61 = properties56.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long63 = atomikosProperties62.checkpointInterval;
        java.util.Properties properties64 = atomikosProperties62.asProperties();
        properties64.clear();
        boolean boolean66 = properties64.isEmpty();
        java.lang.Object obj67 = properties64.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        java.util.Properties properties70 = atomikosProperties68.asProperties();
        properties70.clear();
        boolean boolean72 = properties70.isEmpty();
        java.util.Collection<java.lang.Object> objCollection73 = properties70.values();
        properties64.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties70);
        java.util.Enumeration<?> wildcardEnumeration75 = properties70.propertyNames();
        java.util.Properties properties76 = new java.util.Properties(properties70);
        properties56.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties76);
        java.lang.Object obj79 = null;
        atomikosProperties21.set(properties76, "{}", obj79);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str82 = atomikosProperties81.logBaseDir;
        atomikosProperties81.forceShutdownOnVmExit = true;
        java.lang.Object obj85 = properties19.put((java.lang.Object) "{}", (java.lang.Object) atomikosProperties81);
        java.util.Enumeration<?> wildcardEnumeration86 = properties19.propertyNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertNotNull(objEntrySet48);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objCollection60);
        org.junit.Assert.assertNotNull(objCollection61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 500L + "'", long63 == 500L);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "{}");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertNotNull(wildcardEnumeration75);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNotNull(wildcardEnumeration86);
    }

    @Test
    public void test6786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6786");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        int int6 = atomikosProperties0.maxActives;
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.maxTimeout = ' ';
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
    }

    @Test
    public void test6787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6787");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.setCheckpointInterval(0L);
        atomikosProperties0.setMaxActives((int) (byte) 1);
        java.lang.String str16 = atomikosProperties0.getLogBaseName();
        long long17 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test6788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6788");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        boolean boolean23 = atomikosProperties4.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        java.lang.Object obj29 = properties26.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        java.lang.Object obj34 = properties33.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        atomikosProperties35.setMaxActives((int) (byte) -1);
        boolean boolean41 = atomikosProperties35.isEnableLogging();
        atomikosProperties35.transactionManagerUniqueName = "";
        atomikosProperties35.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        java.lang.String str52 = atomikosProperties46.getService();
        java.lang.Object obj53 = properties33.getOrDefault((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        int int56 = atomikosProperties54.getMaxActives();
        java.lang.String str57 = atomikosProperties54.logBaseDir;
        java.lang.Object obj59 = properties33.putIfAbsent((java.lang.Object) atomikosProperties54, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        boolean boolean64 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.setEnableLogging(false);
        boolean boolean67 = properties26.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        java.util.Properties properties70 = atomikosProperties68.asProperties();
        properties70.clear();
        java.util.Properties properties72 = new java.util.Properties(properties70);
        java.lang.Object obj75 = properties72.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str76 = properties72.toString();
        boolean boolean77 = properties26.containsValue((java.lang.Object) properties72);
        java.util.Set<java.lang.Object> objSet78 = properties72.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long81 = atomikosProperties80.checkpointInterval;
        int int82 = atomikosProperties80.getMaxActives();
        atomikosProperties4.set(properties72, "hi!", (java.lang.Object) atomikosProperties80);
        java.util.Set<java.lang.String> strSet84 = properties72.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str86 = atomikosProperties85.logBaseDir;
        atomikosProperties85.setTransactionManagerUniqueName("");
        int int89 = atomikosProperties85.getMaxActives();
        java.lang.String str90 = atomikosProperties85.getLogBaseDir();
        boolean boolean91 = properties72.containsKey((java.lang.Object) atomikosProperties85);
        java.util.Properties properties92 = atomikosProperties85.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration93 = properties92.elements();
        java.util.Properties properties94 = new java.util.Properties(properties92);
        java.util.Collection<java.lang.Object> objCollection95 = properties92.values();
        java.util.Set<java.lang.String> strSet96 = properties92.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj75, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{}" + "'", str76, "{}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objSet78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 50 + "'", int82 == 50);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 50 + "'", int89 == 50);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(properties92);
        org.junit.Assert.assertNotNull(objEnumeration93);
        org.junit.Assert.assertNotNull(objCollection95);
        org.junit.Assert.assertNotNull(strSet96);
    }

    @Test
    public void test6789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6789");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        int int14 = properties2.size();
        java.lang.Object obj15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = properties2.containsValue(obj15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test6790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6790");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties4.maxActives = ' ';
        java.lang.String str25 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setCheckpointInterval((long) (byte) 10);
        boolean boolean28 = atomikosProperties4.threadedTwoPhaseCommit;
        java.util.Properties properties29 = atomikosProperties4.asProperties();
        atomikosProperties4.maxTimeout = 0L;
        int int32 = atomikosProperties4.getMaxActives();
        boolean boolean33 = atomikosProperties4.threadedTwoPhaseCommit;
        atomikosProperties4.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        java.lang.String str36 = atomikosProperties4.getLogBaseName();
        java.lang.String str37 = atomikosProperties4.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test6791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6791");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        atomikosProperties29.setService("");
        boolean boolean34 = atomikosProperties29.threadedTwoPhaseCommit;
        java.lang.String str35 = atomikosProperties29.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.serialJtaTransactions = true;
        java.lang.String str43 = atomikosProperties36.getService();
        java.lang.Object obj44 = properties2.putIfAbsent((java.lang.Object) str35, (java.lang.Object) atomikosProperties36);
        java.util.Set<java.lang.Object> objSet45 = properties2.keySet();
        java.io.OutputStream outputStream46 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(outputStream46, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objSet45);
    }

    @Test
    public void test6792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6792");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection20 = properties10.values();
        java.util.Properties properties21 = new java.util.Properties(properties10);
        java.util.Enumeration<?> wildcardEnumeration22 = properties10.propertyNames();
        java.util.Enumeration<?> wildcardEnumeration23 = properties10.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        java.lang.Object obj27 = properties26.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        java.lang.String str30 = atomikosProperties28.logBaseName;
        java.lang.String str31 = atomikosProperties28.getLogBaseDir();
        atomikosProperties28.setMaxActives((int) (byte) -1);
        boolean boolean34 = atomikosProperties28.isEnableLogging();
        atomikosProperties28.transactionManagerUniqueName = "";
        atomikosProperties28.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        java.lang.String str41 = atomikosProperties39.logBaseName;
        java.lang.String str42 = atomikosProperties39.getLogBaseDir();
        atomikosProperties39.setMaxActives((int) (byte) -1);
        java.lang.String str45 = atomikosProperties39.getService();
        java.lang.Object obj46 = properties26.getOrDefault((java.lang.Object) atomikosProperties28, (java.lang.Object) atomikosProperties39);
        boolean boolean47 = properties10.containsValue(obj46);
        java.util.Enumeration<?> wildcardEnumeration48 = properties10.propertyNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertNotNull(wildcardEnumeration22);
        org.junit.Assert.assertNotNull(wildcardEnumeration23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNotNull(obj27);
// flaky:         org.junit.Assert.assertEquals(obj27.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration48);
    }

    @Test
    public void test6793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6793");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.enableLogging = true;
        java.lang.String str13 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean16 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str21 = atomikosProperties0.transactionManagerUniqueName;
        java.lang.Class<?> wildcardClass22 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str21, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test6794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6794");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseName = "";
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        java.lang.String str16 = atomikosProperties10.getService();
        long long17 = atomikosProperties10.defaultJtaTimeout;
        java.lang.String str18 = atomikosProperties10.logBaseName;
        java.util.Properties properties19 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        int int22 = atomikosProperties20.getMaxActives();
        java.lang.String str23 = atomikosProperties20.transactionManagerUniqueName;
        long long24 = atomikosProperties20.getCheckpointInterval();
        boolean boolean25 = atomikosProperties20.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        int int28 = atomikosProperties26.getMaxActives();
        atomikosProperties26.setCheckpointInterval(1L);
        atomikosProperties26.setService("{}");
        boolean boolean33 = atomikosProperties26.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setCheckpointInterval((long) 100);
        boolean boolean37 = atomikosProperties34.isForceShutdownOnVmExit();
        atomikosProperties34.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long40 = atomikosProperties34.getDefaultJtaTimeout();
        long long41 = atomikosProperties34.getMaxTimeout();
        atomikosProperties34.logBaseName = "tmlog";
        long long44 = atomikosProperties34.getDefaultJtaTimeout();
        atomikosProperties34.setForceShutdownOnVmExit(true);
        java.lang.String str47 = atomikosProperties34.getLogBaseName();
        boolean boolean48 = properties19.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) boolean33, (java.lang.Object) str47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        atomikosProperties50.setMaxActives((int) (byte) -1);
        boolean boolean56 = atomikosProperties50.isEnableLogging();
        long long57 = atomikosProperties50.checkpointInterval;
        atomikosProperties50.setCheckpointInterval(10L);
        atomikosProperties0.set(properties19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties50);
        int int61 = properties19.size();
        java.io.OutputStream outputStream62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.storeToXML(outputStream62, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 300000L + "'", long41 == 300000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
    }

    @Test
    public void test6795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6795");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties10.transactionManagerUniqueName = "hi!";
        atomikosProperties10.maxTimeout = 2;
        int int44 = atomikosProperties10.maxActives;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test6796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6796");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.lang.Object obj15 = properties2.remove((java.lang.Object) atomikosProperties13);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        java.lang.Object obj17 = properties2.clone();
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.io.Writer writer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(writer19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{}");
        org.junit.Assert.assertNotNull(objCollection18);
    }

    @Test
    public void test6797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6797");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.service = "";
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str11 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str11, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test6798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6798");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        java.lang.Object obj15 = properties12.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str16 = properties12.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setMaxActives((int) (byte) -1);
        boolean boolean23 = atomikosProperties17.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) 100);
        boolean boolean27 = atomikosProperties24.isForceShutdownOnVmExit();
        java.lang.Object obj28 = properties12.putIfAbsent((java.lang.Object) atomikosProperties17, (java.lang.Object) boolean27);
        java.util.Set<java.lang.String> strSet29 = properties12.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet30 = properties12.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties12.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        atomikosProperties32.forceShutdownOnVmExit = false;
        atomikosProperties32.threadedTwoPhaseCommit = false;
        atomikosProperties32.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties32.threadedTwoPhaseCommit = false;
        atomikosProperties32.setDefaultJtaTimeout(500L);
        java.lang.Object obj44 = properties4.putIfAbsent((java.lang.Object) properties12, (java.lang.Object) 500L);
        java.lang.Object obj45 = properties4.clone();
        java.lang.Object obj46 = properties4.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(obj46);
    }

    @Test
    public void test6799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6799");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        java.lang.Object obj29 = properties28.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        long long37 = atomikosProperties30.defaultJtaTimeout;
        java.lang.String str38 = atomikosProperties30.logBaseName;
        boolean boolean39 = properties2.remove(obj29, (java.lang.Object) atomikosProperties30);
        java.lang.String str40 = atomikosProperties30.transactionManagerUniqueName;
        java.lang.String str41 = atomikosProperties30.getLogBaseName();
        atomikosProperties30.setTransactionManagerUniqueName("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(obj29);
// flaky:         org.junit.Assert.assertEquals(obj29.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
    }

    @Test
    public void test6800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6800");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setTransactionManagerUniqueName("");
        atomikosProperties6.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass16 = atomikosProperties6.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        int int19 = atomikosProperties17.getMaxActives();
        java.lang.String str20 = atomikosProperties17.transactionManagerUniqueName;
        long long21 = atomikosProperties17.getCheckpointInterval();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        atomikosProperties27.transactionManagerUniqueName = "";
        atomikosProperties27.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        java.lang.Object obj45 = properties25.getOrDefault((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        int int48 = atomikosProperties46.getMaxActives();
        java.lang.String str49 = atomikosProperties46.logBaseDir;
        java.lang.Object obj51 = properties25.putIfAbsent((java.lang.Object) atomikosProperties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        atomikosProperties52.setService("");
        boolean boolean57 = atomikosProperties52.threadedTwoPhaseCommit;
        java.lang.String str58 = atomikosProperties52.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        boolean boolean63 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.serialJtaTransactions = true;
        java.lang.String str66 = atomikosProperties59.getService();
        java.lang.Object obj67 = properties25.putIfAbsent((java.lang.Object) str58, (java.lang.Object) atomikosProperties59);
        boolean boolean68 = properties3.replace((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties59);
        java.util.Properties properties69 = new java.util.Properties(properties3);
        java.util.Properties properties70 = new java.util.Properties(properties3);
        int int71 = properties3.size();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
    }

    @Test
    public void test6801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6801");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        long long10 = atomikosProperties8.getDefaultJtaTimeout();
        java.util.Properties properties11 = atomikosProperties8.asProperties();
        boolean boolean12 = atomikosProperties8.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setCheckpointInterval((long) 100);
        boolean boolean16 = atomikosProperties13.isForceShutdownOnVmExit();
        atomikosProperties13.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties13.service = "";
        atomikosProperties13.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        properties25.clear();
        boolean boolean27 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        java.lang.Object obj33 = properties30.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection34 = properties30.values();
        boolean boolean35 = properties25.containsKey((java.lang.Object) objCollection34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties25.keys();
        boolean boolean37 = properties4.replace((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties13, (java.lang.Object) properties25);
        java.lang.String str38 = atomikosProperties8.transactionManagerUniqueName;
        atomikosProperties8.service = "hi!";
        atomikosProperties8.serialJtaTransactions = true;
        boolean boolean43 = atomikosProperties8.serialJtaTransactions;
        boolean boolean44 = atomikosProperties8.serialJtaTransactions;
        atomikosProperties8.logBaseDir = "{=}";
        atomikosProperties8.enableLogging = false;
        boolean boolean49 = atomikosProperties8.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test6802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6802");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setCheckpointInterval((long) 100);
        boolean boolean17 = atomikosProperties14.isForceShutdownOnVmExit();
        atomikosProperties14.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean20 = properties13.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.enableLogging = true;
        boolean boolean25 = properties10.replace((java.lang.Object) boolean20, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection26 = properties10.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet27 = properties10.entrySet();
        atomikosProperties0.set(properties10, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.enableLogging = true;
        boolean boolean35 = atomikosProperties32.forceShutdownOnVmExit;
        long long36 = atomikosProperties32.getMaxTimeout();
        atomikosProperties32.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        java.lang.Object obj39 = properties10.replace((java.lang.Object) '4', (java.lang.Object) atomikosProperties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        boolean boolean44 = atomikosProperties40.isSerialJtaTransactions();
        atomikosProperties40.serialJtaTransactions = true;
        java.lang.String str47 = atomikosProperties40.getService();
        atomikosProperties40.setMaxTimeout((long) (short) 0);
        boolean boolean50 = properties10.containsKey((java.lang.Object) (short) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long52 = atomikosProperties51.checkpointInterval;
        java.util.Properties properties53 = atomikosProperties51.asProperties();
        properties53.clear();
        boolean boolean55 = properties53.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        java.util.Properties properties58 = atomikosProperties56.asProperties();
        java.lang.Object obj61 = properties58.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection62 = properties58.values();
        boolean boolean63 = properties53.containsKey((java.lang.Object) objCollection62);
        java.util.Enumeration<java.lang.Object> objEnumeration64 = properties53.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        java.util.Properties properties67 = atomikosProperties65.asProperties();
        properties67.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        atomikosProperties69.setTransactionManagerUniqueName("");
        int int73 = atomikosProperties69.getMaxActives();
        boolean boolean74 = properties67.containsValue((java.lang.Object) int73);
        java.lang.Object obj77 = properties67.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties78 = new java.util.Properties(properties67);
        java.lang.Object obj81 = properties67.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str83 = atomikosProperties82.logBaseDir;
        java.lang.String str84 = atomikosProperties82.logBaseName;
        java.lang.String str85 = atomikosProperties82.getLogBaseDir();
        boolean boolean86 = atomikosProperties82.isSerialJtaTransactions();
        long long87 = atomikosProperties82.checkpointInterval;
        atomikosProperties82.setMaxTimeout((long) (byte) 10);
        long long90 = atomikosProperties82.maxTimeout;
        boolean boolean91 = atomikosProperties82.isForceShutdownOnVmExit();
        atomikosProperties82.defaultJtaTimeout = 50;
        java.lang.Object obj94 = properties67.get((java.lang.Object) atomikosProperties82);
        boolean boolean95 = properties53.containsValue((java.lang.Object) atomikosProperties82);
        java.util.Enumeration<?> wildcardEnumeration96 = properties53.propertyNames();
        java.lang.Object obj97 = properties10.get((java.lang.Object) wildcardEnumeration96);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertNotNull(objEntrySet27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(objCollection62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objEnumeration64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 50 + "'", int73 == 50);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertEquals("'" + obj81 + "' != '" + "tmlog" + "'", obj81, "tmlog");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "tmlog" + "'", str84, "tmlog");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 500L + "'", long87 == 500L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 10L + "'", long90 == 10L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration96);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test6803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6803");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        int int14 = properties2.size();
        java.lang.String str16 = properties2.getProperty("tmlog");
        java.util.Collection<java.lang.Object> objCollection17 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        properties20.clear();
        java.util.Properties properties22 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        atomikosProperties23.logBaseName = "tmlog";
        int int30 = atomikosProperties23.maxActives;
        boolean boolean31 = properties20.containsValue((java.lang.Object) int30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        atomikosProperties33.setThreadedTwoPhaseCommit(false);
        boolean boolean38 = properties20.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setCheckpointInterval((long) 100);
        atomikosProperties39.maxActives = (byte) 0;
        java.lang.Object obj44 = properties20.remove((java.lang.Object) atomikosProperties39);
        boolean boolean45 = properties2.containsKey((java.lang.Object) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        properties48.clear();
        boolean boolean50 = properties48.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        atomikosProperties51.setTransactionManagerUniqueName("");
        int int55 = atomikosProperties51.getMaxActives();
        java.lang.String str56 = atomikosProperties51.transactionManagerUniqueName;
        boolean boolean57 = properties48.containsValue((java.lang.Object) atomikosProperties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties58.setCheckpointInterval((long) 100);
        atomikosProperties58.maxActives = (byte) 0;
        atomikosProperties58.setTransactionManagerUniqueName("");
        java.lang.Object obj65 = properties48.get((java.lang.Object) atomikosProperties58);
        java.lang.String str66 = atomikosProperties58.getTransactionManagerUniqueName();
        atomikosProperties58.setService("tmlog");
        java.lang.String str69 = atomikosProperties58.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str71 = atomikosProperties70.logBaseDir;
        java.lang.String str72 = atomikosProperties70.logBaseName;
        java.lang.String str73 = atomikosProperties70.getLogBaseDir();
        atomikosProperties70.setMaxActives((int) (byte) -1);
        java.lang.String str76 = atomikosProperties70.getService();
        atomikosProperties70.setEnableLogging(false);
        long long79 = atomikosProperties70.checkpointInterval;
        java.lang.Object obj80 = properties20.getOrDefault((java.lang.Object) str69, (java.lang.Object) atomikosProperties70);
        atomikosProperties70.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 50 + "'", int55 == 50);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tmlog" + "'", str72, "tmlog");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 500L + "'", long79 == 500L);
        org.junit.Assert.assertNotNull(obj80);
    }

    @Test
    public void test6804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6804");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        int int14 = properties2.size();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties2.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        atomikosProperties16.maxActives = (byte) 0;
        atomikosProperties16.setTransactionManagerUniqueName("");
        atomikosProperties16.setCheckpointInterval((long) 1);
        atomikosProperties16.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean27 = properties2.contains((java.lang.Object) atomikosProperties16);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.save(outputStream28, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test6805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6805");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        java.lang.String str27 = properties2.getProperty("tmlog");
        boolean boolean28 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.getLogBaseDir();
        java.lang.String str35 = atomikosProperties29.logBaseName;
        atomikosProperties29.setSerialJtaTransactions(true);
        java.lang.String str38 = atomikosProperties29.logBaseName;
        long long39 = atomikosProperties29.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        java.lang.String str46 = atomikosProperties40.getService();
        atomikosProperties40.setSerialJtaTransactions(false);
        long long49 = atomikosProperties40.defaultJtaTimeout;
        atomikosProperties40.setDefaultJtaTimeout((long) 'a');
        java.lang.String str52 = atomikosProperties40.getService();
        java.lang.Object obj53 = properties2.replace((java.lang.Object) long39, (java.lang.Object) atomikosProperties40);
        atomikosProperties40.service = "";
        atomikosProperties40.serialJtaTransactions = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(obj53);
    }

    @Test
    public void test6806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6806");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties2.elements();
        java.util.Properties properties5 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        java.lang.Object obj16 = properties13.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection17 = properties13.values();
        boolean boolean18 = properties8.containsKey((java.lang.Object) objCollection17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseName();
        int int23 = atomikosProperties19.getMaxActives();
        atomikosProperties19.setLogBaseDir("hi!");
        java.lang.String str26 = atomikosProperties19.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        atomikosProperties27.setTransactionManagerUniqueName("");
        int int31 = atomikosProperties27.getMaxActives();
        java.lang.String str32 = atomikosProperties27.getLogBaseDir();
        java.lang.String str33 = atomikosProperties27.logBaseName;
        java.lang.Object obj34 = properties8.replace((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties27);
        boolean boolean35 = properties8.isEmpty();
        java.lang.Object obj36 = properties8.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet37 = properties8.entrySet();
        java.lang.Object obj38 = properties8.clone();
        java.util.Set<java.lang.String> strSet39 = properties8.stringPropertyNames();
        boolean boolean40 = properties5.containsValue((java.lang.Object) properties8);
        boolean boolean41 = properties5.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties5.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertNotNull(objEntrySet37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
    }

    @Test
    public void test6807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6807");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        atomikosProperties23.setMaxActives((int) (byte) -1);
        java.lang.String str29 = atomikosProperties23.getService();
        long long30 = atomikosProperties23.defaultJtaTimeout;
        java.lang.String str31 = atomikosProperties23.logBaseName;
        java.lang.String str32 = atomikosProperties23.logBaseDir;
        java.lang.Class<?> wildcardClass33 = atomikosProperties23.getClass();
        java.lang.Object obj34 = properties21.put((java.lang.Object) false, (java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.serialJtaTransactions = true;
        atomikosProperties35.checkpointInterval = (-1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        java.lang.Object obj47 = properties21.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties44);
        atomikosProperties44.transactionManagerUniqueName = "tmlog";
        boolean boolean50 = atomikosProperties44.isEnableLogging();
        java.lang.String str51 = atomikosProperties44.logBaseName;
        atomikosProperties44.threadedTwoPhaseCommit = true;
        atomikosProperties44.forceShutdownOnVmExit = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
    }

    @Test
    public void test6808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6808");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setDefaultJtaTimeout((long) 50);
        boolean boolean16 = properties9.contains((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        atomikosProperties17.setService("");
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        boolean boolean36 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties17.set(properties22, "{}", (java.lang.Object) boolean36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        boolean boolean42 = properties40.containsValue((java.lang.Object) 100L);
        java.lang.String str43 = properties40.toString();
        java.lang.Object obj44 = properties9.put((java.lang.Object) "{}", (java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        java.lang.Object obj48 = properties47.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        boolean boolean55 = atomikosProperties49.isEnableLogging();
        atomikosProperties49.transactionManagerUniqueName = "";
        atomikosProperties49.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        atomikosProperties60.setMaxActives((int) (byte) -1);
        java.lang.String str66 = atomikosProperties60.getService();
        java.lang.Object obj67 = properties47.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        int int70 = atomikosProperties68.getMaxActives();
        java.lang.String str71 = atomikosProperties68.logBaseDir;
        java.lang.Object obj73 = properties47.putIfAbsent((java.lang.Object) atomikosProperties68, (java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet74 = properties47.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet75 = properties47.entrySet();
        java.lang.Object obj76 = properties40.remove((java.lang.Object) properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str78 = atomikosProperties77.logBaseDir;
        java.lang.String str79 = atomikosProperties77.logBaseName;
        java.lang.String str80 = atomikosProperties77.getLogBaseDir();
        atomikosProperties77.setMaxActives((int) (byte) -1);
        boolean boolean83 = atomikosProperties77.isEnableLogging();
        long long84 = atomikosProperties77.checkpointInterval;
        atomikosProperties77.setCheckpointInterval(10L);
        boolean boolean87 = atomikosProperties77.isForceShutdownOnVmExit();
        atomikosProperties77.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties77.setSerialJtaTransactions(false);
        boolean boolean92 = atomikosProperties77.forceShutdownOnVmExit;
        java.lang.Object obj93 = properties40.get((java.lang.Object) boolean92);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet94 = properties40.entrySet();
        properties40.clear();
        java.lang.Object obj96 = null;
        boolean boolean97 = properties40.equals(obj96);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 50 + "'", int70 == 50);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(objSet74);
        org.junit.Assert.assertNotNull(objEntrySet75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNotNull(objEntrySet94);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test6809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6809");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        long long10 = atomikosProperties8.getDefaultJtaTimeout();
        java.util.Properties properties11 = atomikosProperties8.asProperties();
        boolean boolean12 = atomikosProperties8.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setCheckpointInterval((long) 100);
        boolean boolean16 = atomikosProperties13.isForceShutdownOnVmExit();
        atomikosProperties13.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties13.service = "";
        atomikosProperties13.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        properties25.clear();
        boolean boolean27 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        java.lang.Object obj33 = properties30.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection34 = properties30.values();
        boolean boolean35 = properties25.containsKey((java.lang.Object) objCollection34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties25.keys();
        boolean boolean37 = properties4.replace((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties13, (java.lang.Object) properties25);
        java.lang.Object obj38 = properties4.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        atomikosProperties39.setTransactionManagerUniqueName("");
        int int43 = atomikosProperties39.getMaxActives();
        java.lang.String str44 = atomikosProperties39.transactionManagerUniqueName;
        atomikosProperties39.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        properties49.clear();
        java.util.Properties properties51 = new java.util.Properties(properties49);
        atomikosProperties39.set(properties49, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj57 = properties49.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet58 = properties49.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        java.util.Properties properties61 = atomikosProperties59.asProperties();
        boolean boolean63 = properties61.containsValue((java.lang.Object) 100L);
        java.lang.String str64 = properties61.toString();
        java.lang.Object obj67 = properties61.setProperty("", "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet68 = properties61.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        atomikosProperties69.setTransactionManagerUniqueName("");
        int int73 = atomikosProperties69.getMaxActives();
        java.lang.String str74 = atomikosProperties69.transactionManagerUniqueName;
        atomikosProperties69.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long78 = atomikosProperties77.checkpointInterval;
        java.util.Properties properties79 = atomikosProperties77.asProperties();
        properties79.clear();
        java.util.Properties properties81 = new java.util.Properties(properties79);
        atomikosProperties69.set(properties79, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj87 = properties79.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties88 = new java.util.Properties(properties79);
        int int89 = properties88.size();
        java.lang.String str90 = properties88.toString();
        java.lang.Object obj91 = properties49.putIfAbsent((java.lang.Object) properties61, (java.lang.Object) properties88);
        properties4.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        java.util.Enumeration<java.lang.Object> objEnumeration93 = properties49.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str64, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(objEntrySet68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 50 + "'", int73 == 50);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 500L + "'", long78 == 500L);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "{}" + "'", str90, "{}");
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNotNull(objEnumeration93);
    }

    @Test
    public void test6810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6810");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        boolean boolean48 = atomikosProperties36.forceShutdownOnVmExit;
        long long49 = atomikosProperties36.getCheckpointInterval();
        boolean boolean50 = atomikosProperties36.enableLogging;
        atomikosProperties36.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test6811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6811");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.enableLogging;
        atomikosProperties0.setTransactionManagerUniqueName("{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test6812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6812");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        boolean boolean46 = atomikosProperties44.isSerialJtaTransactions();
        java.lang.String str47 = atomikosProperties44.getLogBaseName();
        long long48 = atomikosProperties44.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.lang.Object obj54 = properties51.clone();
        java.util.Set<java.lang.Object> objSet55 = properties51.keySet();
        boolean boolean58 = properties51.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        java.lang.Object obj59 = properties15.replace((java.lang.Object) long48, (java.lang.Object) properties51);
        java.util.Set<java.lang.String> strSet60 = properties15.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.transactionManagerUniqueName;
        boolean boolean64 = atomikosProperties61.enableLogging;
        atomikosProperties61.setCheckpointInterval((long) 100);
        int int67 = atomikosProperties61.getMaxActives();
        long long68 = atomikosProperties61.getDefaultJtaTimeout();
        atomikosProperties61.setDefaultJtaTimeout((long) 9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        java.lang.String str73 = atomikosProperties71.logBaseName;
        java.lang.String str74 = atomikosProperties71.getLogBaseDir();
        long long75 = atomikosProperties71.getDefaultJtaTimeout();
        atomikosProperties71.defaultJtaTimeout = 50;
        java.lang.String str78 = atomikosProperties71.getTransactionManagerUniqueName();
        atomikosProperties71.threadedTwoPhaseCommit = false;
        atomikosProperties71.forceShutdownOnVmExit = false;
        atomikosProperties71.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        long long85 = atomikosProperties71.defaultJtaTimeout;
        java.lang.Object obj86 = properties15.getOrDefault((java.lang.Object) atomikosProperties61, (java.lang.Object) long85);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties87 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long88 = atomikosProperties87.checkpointInterval;
        int int89 = atomikosProperties87.getMaxActives();
        java.lang.String str90 = atomikosProperties87.getLogBaseDir();
        boolean boolean91 = atomikosProperties87.isForceShutdownOnVmExit();
        atomikosProperties87.setCheckpointInterval((long) (short) -1);
        boolean boolean94 = atomikosProperties87.enableLogging;
        boolean boolean95 = properties15.contains((java.lang.Object) atomikosProperties87);
        java.lang.Object obj96 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = properties15.containsKey(obj96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10000L + "'", long68 == 10000L);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tmlog" + "'", str73, "tmlog");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10000L + "'", long75 == 10000L);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 50L + "'", long85 == 50L);
        org.junit.Assert.assertEquals("'" + obj86 + "' != '" + 50L + "'", obj86, 50L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 500L + "'", long88 == 500L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 50 + "'", int89 == 50);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test6813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6813");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.tmlog=0.0}";
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean12 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long15 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
    }

    @Test
    public void test6814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6814");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        java.lang.String str29 = atomikosProperties13.transactionManagerUniqueName;
        java.lang.String str30 = atomikosProperties13.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        atomikosProperties31.setService("");
        boolean boolean36 = atomikosProperties31.threadedTwoPhaseCommit;
        int int37 = atomikosProperties31.getMaxActives();
        boolean boolean38 = atomikosProperties31.isForceShutdownOnVmExit();
        boolean boolean39 = atomikosProperties31.isEnableLogging();
        java.util.Properties properties40 = atomikosProperties31.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        boolean boolean45 = properties43.containsValue((java.lang.Object) 100L);
        java.lang.String str46 = properties43.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setMaxActives((int) (byte) -1);
        boolean boolean53 = atomikosProperties47.isEnableLogging();
        atomikosProperties47.transactionManagerUniqueName = "";
        atomikosProperties47.setEnableLogging(false);
        boolean boolean58 = atomikosProperties47.isEnableLogging();
        atomikosProperties47.maxActives = 1;
        java.util.Properties properties61 = atomikosProperties47.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str63 = atomikosProperties62.logBaseDir;
        atomikosProperties62.setTransactionManagerUniqueName("");
        int int66 = atomikosProperties62.getMaxActives();
        java.lang.String str67 = atomikosProperties62.getLogBaseDir();
        java.lang.String str68 = atomikosProperties62.logBaseName;
        boolean boolean69 = atomikosProperties62.threadedTwoPhaseCommit;
        java.lang.String str70 = atomikosProperties62.logBaseDir;
        atomikosProperties62.enableLogging = false;
        java.lang.Object obj73 = properties43.getOrDefault((java.lang.Object) atomikosProperties47, (java.lang.Object) false);
        atomikosProperties47.setEnableLogging(false);
        boolean boolean76 = properties40.equals((java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str79 = atomikosProperties78.logBaseDir;
        java.lang.String str80 = atomikosProperties78.transactionManagerUniqueName;
        atomikosProperties78.maxTimeout = 10L;
        atomikosProperties78.setSerialJtaTransactions(true);
        atomikosProperties13.set(properties40, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties78);
        java.io.OutputStream outputStream86 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties40.storeToXML(outputStream86, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str46, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 50 + "'", int66 == 50);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + false + "'", obj73, false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test6815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6815");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        int int14 = properties2.size();
        boolean boolean15 = properties2.isEmpty();
        java.lang.String str17 = properties2.getProperty("{=}");
        java.io.PrintStream printStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test6816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6816");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        java.lang.Object obj7 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.logBaseName;
        java.lang.String str11 = atomikosProperties8.getLogBaseDir();
        atomikosProperties8.setMaxActives((int) (byte) -1);
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        atomikosProperties8.transactionManagerUniqueName = "";
        atomikosProperties8.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        java.lang.String str25 = atomikosProperties19.getService();
        java.lang.Object obj26 = properties6.getOrDefault((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties19);
        int int27 = properties6.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        boolean boolean33 = atomikosProperties29.isSerialJtaTransactions();
        atomikosProperties29.serialJtaTransactions = true;
        java.lang.String str36 = atomikosProperties29.getService();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) str36);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.checkpointInterval = '4';
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str36);
    }

    @Test
    public void test6817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6817");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.serialJtaTransactions = true;
        boolean boolean9 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
        atomikosProperties0.setMaxActives((int) ' ');
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test6818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6818");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.lang.String str10 = atomikosProperties0.getService();
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties11.save(outputStream12, "{com.atomikos.icatch.tmlog=0.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test6819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6819");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean22 = properties2.contains((java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        atomikosProperties23.logBaseName = "tmlog";
        atomikosProperties23.setEnableLogging(true);
        atomikosProperties23.setMaxActives((int) (byte) 0);
        atomikosProperties23.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        properties38.clear();
        boolean boolean40 = properties38.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        java.lang.Object obj46 = properties43.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection47 = properties43.values();
        boolean boolean48 = properties38.containsKey((java.lang.Object) objCollection47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties38.keys();
        java.lang.String str51 = properties38.getProperty("");
        java.lang.Object obj52 = properties2.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) properties38);
        java.util.Properties properties53 = new java.util.Properties(properties38);
        java.io.Writer writer54 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties38.store(writer54, "{=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
    }

    @Test
    public void test6820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6820");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setDefaultJtaTimeout((long) 50);
        boolean boolean16 = properties9.contains((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        atomikosProperties17.setTransactionManagerUniqueName("");
        int int21 = atomikosProperties17.getMaxActives();
        java.lang.String str22 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setTransactionManagerUniqueName("");
        atomikosProperties17.setDefaultJtaTimeout(0L);
        int int27 = atomikosProperties17.maxActives;
        atomikosProperties17.setEnableLogging(false);
        java.util.Properties properties30 = atomikosProperties17.asProperties();
        boolean boolean31 = properties9.equals((java.lang.Object) atomikosProperties17);
        java.lang.String str32 = atomikosProperties17.logBaseDir;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test6821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6821");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        boolean boolean30 = properties2.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test6822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6822");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet19 = properties10.stringPropertyNames();
        java.util.Collection<java.lang.Object> objCollection20 = properties10.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        atomikosProperties21.setService("");
        java.util.Properties properties26 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        properties30.clear();
        boolean boolean32 = properties30.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        atomikosProperties33.setTransactionManagerUniqueName("");
        int int37 = atomikosProperties33.getMaxActives();
        java.lang.String str38 = atomikosProperties33.transactionManagerUniqueName;
        boolean boolean39 = properties30.containsValue((java.lang.Object) atomikosProperties33);
        boolean boolean40 = atomikosProperties33.forceShutdownOnVmExit;
        atomikosProperties21.set(properties26, "{}", (java.lang.Object) boolean40);
        java.util.Properties properties42 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.logBaseDir;
        java.lang.String str46 = atomikosProperties44.logBaseName;
        java.lang.String str47 = atomikosProperties44.getLogBaseDir();
        atomikosProperties44.setMaxActives((int) (byte) -1);
        java.lang.String str50 = atomikosProperties44.getService();
        long long51 = atomikosProperties44.defaultJtaTimeout;
        java.lang.String str52 = atomikosProperties44.logBaseName;
        java.lang.String str53 = atomikosProperties44.logBaseDir;
        java.lang.Class<?> wildcardClass54 = atomikosProperties44.getClass();
        java.lang.Object obj55 = properties42.put((java.lang.Object) false, (java.lang.Object) atomikosProperties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        java.lang.String str58 = atomikosProperties56.logBaseName;
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        boolean boolean60 = atomikosProperties56.isSerialJtaTransactions();
        atomikosProperties56.serialJtaTransactions = true;
        atomikosProperties56.checkpointInterval = (-1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        java.util.Properties properties67 = atomikosProperties65.asProperties();
        java.lang.Object obj68 = properties42.putIfAbsent((java.lang.Object) atomikosProperties56, (java.lang.Object) atomikosProperties65);
        java.util.Properties properties69 = atomikosProperties65.asProperties();
        boolean boolean70 = properties10.contains((java.lang.Object) atomikosProperties65);
        java.io.OutputStream outputStream71 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.save(outputStream71, "{com.atomikos.icatch.tmlog=0.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test6823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6823");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        atomikosProperties9.setTransactionManagerUniqueName("");
        int int13 = atomikosProperties9.getMaxActives();
        boolean boolean14 = properties7.containsValue((java.lang.Object) int13);
        java.lang.Object obj17 = properties7.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties18 = new java.util.Properties(properties7);
        int int19 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        properties22.clear();
        boolean boolean24 = properties22.isEmpty();
        java.lang.Object obj25 = properties22.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        java.lang.Object obj30 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        boolean boolean37 = atomikosProperties31.isEnableLogging();
        atomikosProperties31.transactionManagerUniqueName = "";
        atomikosProperties31.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setMaxActives((int) (byte) -1);
        java.lang.String str48 = atomikosProperties42.getService();
        java.lang.Object obj49 = properties29.getOrDefault((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        int int52 = atomikosProperties50.getMaxActives();
        java.lang.String str53 = atomikosProperties50.logBaseDir;
        java.lang.Object obj55 = properties29.putIfAbsent((java.lang.Object) atomikosProperties50, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        java.lang.String str58 = atomikosProperties56.logBaseName;
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        boolean boolean60 = atomikosProperties56.isSerialJtaTransactions();
        atomikosProperties56.setEnableLogging(false);
        boolean boolean63 = properties22.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties56);
        atomikosProperties56.logBaseName = "{}";
        long long66 = atomikosProperties56.getDefaultJtaTimeout();
        atomikosProperties56.setThreadedTwoPhaseCommit(true);
        boolean boolean69 = properties2.replace((java.lang.Object) 100L, (java.lang.Object) properties7, (java.lang.Object) true);
        java.util.Enumeration<java.lang.Object> objEnumeration70 = properties7.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        java.lang.String str73 = atomikosProperties71.logBaseName;
        java.lang.String str74 = atomikosProperties71.getLogBaseDir();
        boolean boolean75 = atomikosProperties71.isSerialJtaTransactions();
        atomikosProperties71.serialJtaTransactions = true;
        atomikosProperties71.checkpointInterval = (-1L);
        atomikosProperties71.threadedTwoPhaseCommit = true;
        int int82 = atomikosProperties71.maxActives;
        atomikosProperties71.checkpointInterval = 500L;
        int int85 = atomikosProperties71.maxActives;
        java.lang.Object obj86 = properties7.remove((java.lang.Object) atomikosProperties71);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objEnumeration70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tmlog" + "'", str73, "tmlog");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 50 + "'", int82 == 50);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 50 + "'", int85 == 50);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test6824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6824");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties29.defaultJtaTimeout = (byte) 10;
        atomikosProperties29.setService("hi!");
        java.lang.String str44 = atomikosProperties29.getService();
        atomikosProperties29.setForceShutdownOnVmExit(false);
        atomikosProperties29.setEnableLogging(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
    }

    @Test
    public void test6825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6825");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long6 = atomikosProperties0.getMaxTimeout();
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        long long8 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setMaxActives((int) (short) -1);
        boolean boolean12 = atomikosProperties0.enableLogging;
        long long13 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
    }

    @Test
    public void test6826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6826");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        java.lang.Object obj7 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.logBaseName;
        java.lang.String str11 = atomikosProperties8.getLogBaseDir();
        atomikosProperties8.setMaxActives((int) (byte) -1);
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        atomikosProperties8.transactionManagerUniqueName = "";
        atomikosProperties8.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        java.lang.String str25 = atomikosProperties19.getService();
        java.lang.Object obj26 = properties6.getOrDefault((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties19);
        int int27 = properties6.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        boolean boolean33 = atomikosProperties29.isSerialJtaTransactions();
        atomikosProperties29.serialJtaTransactions = true;
        java.lang.String str36 = atomikosProperties29.getService();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) str36);
        java.lang.Object obj38 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        java.lang.String str41 = atomikosProperties39.logBaseName;
        java.lang.String str42 = atomikosProperties39.getLogBaseName();
        int int43 = atomikosProperties39.getMaxActives();
        long long44 = atomikosProperties39.maxTimeout;
        int int45 = atomikosProperties39.maxActives;
        boolean boolean46 = properties6.containsKey((java.lang.Object) int45);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setMaxActives((int) (byte) -1);
        boolean boolean53 = atomikosProperties47.isEnableLogging();
        long long54 = atomikosProperties47.checkpointInterval;
        atomikosProperties47.setCheckpointInterval(10L);
        atomikosProperties47.serialJtaTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        java.util.Properties properties61 = atomikosProperties59.asProperties();
        properties61.clear();
        boolean boolean63 = properties61.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.logBaseDir;
        atomikosProperties64.setTransactionManagerUniqueName("");
        int int68 = atomikosProperties64.getMaxActives();
        java.lang.String str69 = atomikosProperties64.transactionManagerUniqueName;
        boolean boolean70 = properties61.containsValue((java.lang.Object) atomikosProperties64);
        boolean boolean71 = properties61.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long73 = atomikosProperties72.checkpointInterval;
        java.lang.Object obj74 = properties61.remove((java.lang.Object) atomikosProperties72);
        java.util.Enumeration<java.lang.Object> objEnumeration75 = properties61.elements();
        java.lang.Object obj76 = properties6.put((java.lang.Object) false, (java.lang.Object) properties61);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str78 = atomikosProperties77.logBaseDir;
        java.lang.String str79 = atomikosProperties77.logBaseName;
        atomikosProperties77.setService("");
        boolean boolean82 = atomikosProperties77.threadedTwoPhaseCommit;
        int int83 = atomikosProperties77.getMaxActives();
        boolean boolean84 = properties6.equals((java.lang.Object) atomikosProperties77);
        java.io.PrintStream printStream85 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.list(printStream85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 300000L + "'", long44 == 300000L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 50 + "'", int45 == 50);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 500L + "'", long54 == 500L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 50 + "'", int68 == 50);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 500L + "'", long73 == 500L);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(objEnumeration75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 50 + "'", int83 == 50);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test6827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6827");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        atomikosProperties0.setMaxActives((int) (byte) 1);
        java.lang.String str11 = atomikosProperties0.getLogBaseName();
        boolean boolean12 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test6828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6828");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties4.maxActives = ' ';
        java.lang.String str25 = atomikosProperties4.service;
        boolean boolean26 = atomikosProperties4.forceShutdownOnVmExit;
        int int27 = atomikosProperties4.getMaxActives();
        boolean boolean28 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.maxActives = '4';
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test6829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6829");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.enableLogging = true;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test6830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6830");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        java.util.Set<java.lang.Object> objSet6 = properties2.keySet();
        boolean boolean9 = properties2.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        java.util.Properties properties12 = atomikosProperties10.asProperties();
        atomikosProperties10.threadedTwoPhaseCommit = false;
        boolean boolean15 = properties2.containsKey((java.lang.Object) atomikosProperties10);
        java.util.Set<java.lang.String> strSet16 = properties2.stringPropertyNames();
        java.io.Writer writer17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(writer17, "{-1=1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test6831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6831");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.lang.Object obj13 = properties2.clone();
        java.io.OutputStream outputStream14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(outputStream14, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.hi!=0, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
    }

    @Test
    public void test6832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6832");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.lang.String str15 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        atomikosProperties17.setTransactionManagerUniqueName("");
        int int21 = atomikosProperties17.getMaxActives();
        java.lang.String str22 = atomikosProperties17.transactionManagerUniqueName;
        atomikosProperties17.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        properties27.clear();
        java.util.Properties properties29 = new java.util.Properties(properties27);
        atomikosProperties17.set(properties27, "tmlog", (java.lang.Object) 0.0d);
        java.lang.String str33 = properties27.toString();
        boolean boolean34 = properties27.isEmpty();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.lang.Object obj38 = properties27.setProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Object obj39 = properties27.clone();
        properties27.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setCheckpointInterval((long) 100);
        boolean boolean44 = atomikosProperties41.isForceShutdownOnVmExit();
        atomikosProperties41.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long47 = atomikosProperties41.getDefaultJtaTimeout();
        long long48 = atomikosProperties41.getMaxTimeout();
        atomikosProperties41.logBaseName = "tmlog";
        long long51 = atomikosProperties41.getDefaultJtaTimeout();
        long long52 = atomikosProperties41.defaultJtaTimeout;
        java.lang.String str53 = atomikosProperties41.getLogBaseName();
        java.lang.String str54 = atomikosProperties41.transactionManagerUniqueName;
        atomikosProperties41.defaultJtaTimeout = 9L;
        boolean boolean58 = properties27.remove((java.lang.Object) atomikosProperties41, (java.lang.Object) 0.0d);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{com.atomikos.icatch.tmlog=0.0}" + "'", str33, "{com.atomikos.icatch.tmlog=0.0}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "{com.atomikos.icatch.tmlog=0.0, {com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}={com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{com.atomikos.icatch.tmlog=0.0, {com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}={com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{com.atomikos.icatch.tmlog=0.0, {com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}={com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}}");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 300000L + "'", long48 == 300000L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test6833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6833");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet2 = properties1.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet3 = properties1.entrySet();
        java.io.Reader reader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(reader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(objSet2);
        org.junit.Assert.assertNotNull(objEntrySet3);
    }

    @Test
    public void test6834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6834");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.setLogBaseName("hi!");
        java.lang.String str47 = atomikosProperties31.getService();
        atomikosProperties31.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties31.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.hi!=0, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test6835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6835");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        boolean boolean23 = atomikosProperties4.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        java.lang.Object obj29 = properties26.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        java.lang.Object obj34 = properties33.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        atomikosProperties35.setMaxActives((int) (byte) -1);
        boolean boolean41 = atomikosProperties35.isEnableLogging();
        atomikosProperties35.transactionManagerUniqueName = "";
        atomikosProperties35.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        java.lang.String str52 = atomikosProperties46.getService();
        java.lang.Object obj53 = properties33.getOrDefault((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        int int56 = atomikosProperties54.getMaxActives();
        java.lang.String str57 = atomikosProperties54.logBaseDir;
        java.lang.Object obj59 = properties33.putIfAbsent((java.lang.Object) atomikosProperties54, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        boolean boolean64 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.setEnableLogging(false);
        boolean boolean67 = properties26.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        java.util.Properties properties70 = atomikosProperties68.asProperties();
        properties70.clear();
        java.util.Properties properties72 = new java.util.Properties(properties70);
        java.lang.Object obj75 = properties72.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str76 = properties72.toString();
        boolean boolean77 = properties26.containsValue((java.lang.Object) properties72);
        java.util.Set<java.lang.Object> objSet78 = properties72.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long81 = atomikosProperties80.checkpointInterval;
        int int82 = atomikosProperties80.getMaxActives();
        atomikosProperties4.set(properties72, "hi!", (java.lang.Object) atomikosProperties80);
        atomikosProperties80.setCheckpointInterval(32L);
        atomikosProperties80.setEnableLogging(true);
        java.lang.String str88 = atomikosProperties80.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj75, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{}" + "'", str76, "{}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objSet78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 50 + "'", int82 == 50);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test6836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6836");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        long long45 = atomikosProperties31.defaultJtaTimeout;
        atomikosProperties31.setTransactionManagerUniqueName("hi!");
        java.lang.String str48 = atomikosProperties31.service;
        atomikosProperties31.setTransactionManagerUniqueName("{}");
        atomikosProperties31.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.hi!=0, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties31.setSerialJtaTransactions(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test6837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6837");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        atomikosProperties9.setTransactionManagerUniqueName("");
        int int13 = atomikosProperties9.getMaxActives();
        boolean boolean14 = properties7.containsValue((java.lang.Object) int13);
        java.lang.Object obj17 = properties7.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties18 = new java.util.Properties(properties7);
        int int19 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        properties22.clear();
        boolean boolean24 = properties22.isEmpty();
        java.lang.Object obj25 = properties22.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        java.lang.Object obj30 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        boolean boolean37 = atomikosProperties31.isEnableLogging();
        atomikosProperties31.transactionManagerUniqueName = "";
        atomikosProperties31.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setMaxActives((int) (byte) -1);
        java.lang.String str48 = atomikosProperties42.getService();
        java.lang.Object obj49 = properties29.getOrDefault((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        int int52 = atomikosProperties50.getMaxActives();
        java.lang.String str53 = atomikosProperties50.logBaseDir;
        java.lang.Object obj55 = properties29.putIfAbsent((java.lang.Object) atomikosProperties50, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        java.lang.String str58 = atomikosProperties56.logBaseName;
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        boolean boolean60 = atomikosProperties56.isSerialJtaTransactions();
        atomikosProperties56.setEnableLogging(false);
        boolean boolean63 = properties22.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties56);
        atomikosProperties56.logBaseName = "{}";
        long long66 = atomikosProperties56.getDefaultJtaTimeout();
        atomikosProperties56.setThreadedTwoPhaseCommit(true);
        boolean boolean69 = properties2.replace((java.lang.Object) 100L, (java.lang.Object) properties7, (java.lang.Object) true);
        java.util.Properties properties70 = new java.util.Properties(properties7);
        java.util.Enumeration<?> wildcardEnumeration71 = properties70.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration72 = properties70.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration71);
        org.junit.Assert.assertNotNull(objEnumeration72);
    }

    @Test
    public void test6838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6838");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        boolean boolean23 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.enableLogging = true;
        atomikosProperties4.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        java.lang.String str28 = atomikosProperties4.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test6839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6839");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxTimeout(1L);
        java.lang.String str6 = atomikosProperties0.service;
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test6840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6840");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        properties13.clear();
        boolean boolean15 = properties13.isEmpty();
        java.lang.Object obj16 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        java.lang.Object obj21 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        boolean boolean28 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.transactionManagerUniqueName = "";
        atomikosProperties22.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        java.lang.String str39 = atomikosProperties33.getService();
        java.lang.Object obj40 = properties20.getOrDefault((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        int int43 = atomikosProperties41.getMaxActives();
        java.lang.String str44 = atomikosProperties41.logBaseDir;
        java.lang.Object obj46 = properties20.putIfAbsent((java.lang.Object) atomikosProperties41, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        boolean boolean51 = atomikosProperties47.isSerialJtaTransactions();
        atomikosProperties47.setEnableLogging(false);
        boolean boolean54 = properties13.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        java.util.Properties properties57 = atomikosProperties55.asProperties();
        properties57.clear();
        java.util.Properties properties59 = new java.util.Properties(properties57);
        java.lang.Object obj62 = properties59.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str63 = properties59.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.logBaseDir;
        java.lang.String str66 = atomikosProperties64.logBaseName;
        java.lang.String str67 = atomikosProperties64.getLogBaseDir();
        atomikosProperties64.setMaxActives((int) (byte) -1);
        boolean boolean70 = atomikosProperties64.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setCheckpointInterval((long) 100);
        boolean boolean74 = atomikosProperties71.isForceShutdownOnVmExit();
        java.lang.Object obj75 = properties59.putIfAbsent((java.lang.Object) atomikosProperties64, (java.lang.Object) boolean74);
        atomikosProperties64.setLogBaseDir("{}");
        boolean boolean78 = properties13.containsValue((java.lang.Object) "{}");
        java.util.Set<java.lang.String> strSet79 = properties13.stringPropertyNames();
        java.lang.Object obj80 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str82 = atomikosProperties81.logBaseDir;
        java.lang.String str83 = atomikosProperties81.transactionManagerUniqueName;
        boolean boolean84 = atomikosProperties81.enableLogging;
        java.lang.String str85 = atomikosProperties81.getTransactionManagerUniqueName();
        java.lang.String str86 = atomikosProperties81.getTransactionManagerUniqueName();
        atomikosProperties81.setCheckpointInterval(10L);
        java.lang.String str89 = atomikosProperties81.getLogBaseName();
        int int90 = atomikosProperties81.maxActives;
        java.lang.Object obj91 = properties10.putIfAbsent(obj80, (java.lang.Object) int90);
        java.util.Properties properties92 = new java.util.Properties(properties10);
        int int93 = properties92.size();
        java.util.Set<java.lang.String> strSet94 = properties92.stringPropertyNames();
        java.io.OutputStream outputStream95 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties92.storeToXML(outputStream95, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj62, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{}" + "'", str63, "{}");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "tmlog" + "'", str66, "tmlog");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{}");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "tmlog" + "'", str89, "tmlog");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 50 + "'", int90 == 50);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(strSet94);
    }

    @Test
    public void test6841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6841");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.defaultJtaTimeout = (byte) 100;
        boolean boolean13 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test6842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6842");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        java.util.Set<java.lang.Object> objSet6 = properties2.keySet();
        java.util.Enumeration<?> wildcardEnumeration7 = properties2.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.logBaseName;
        java.lang.String str11 = atomikosProperties8.getLogBaseDir();
        boolean boolean12 = atomikosProperties8.isSerialJtaTransactions();
        atomikosProperties8.setEnableLogging(false);
        boolean boolean15 = atomikosProperties8.serialJtaTransactions;
        long long16 = atomikosProperties8.defaultJtaTimeout;
        java.lang.String str17 = atomikosProperties8.logBaseName;
        java.lang.String str18 = atomikosProperties8.logBaseName;
        java.lang.String str19 = atomikosProperties8.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        atomikosProperties20.forceShutdownOnVmExit = false;
        atomikosProperties20.threadedTwoPhaseCommit = false;
        long long26 = atomikosProperties20.getMaxTimeout();
        java.lang.String str27 = atomikosProperties20.transactionManagerUniqueName;
        boolean boolean28 = atomikosProperties20.isEnableLogging();
        java.lang.Object obj29 = properties2.replace((java.lang.Object) atomikosProperties8, (java.lang.Object) boolean28);
        atomikosProperties8.setLogBaseName("{}");
        atomikosProperties8.setMaxActives((int) (short) 0);
        atomikosProperties8.threadedTwoPhaseCommit = true;
        atomikosProperties8.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test6843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6843");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = 1;
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setCheckpointInterval(0L);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test6844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6844");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        java.lang.String str48 = atomikosProperties44.logBaseName;
        atomikosProperties44.setService("{}");
        java.lang.String str51 = atomikosProperties44.getTransactionManagerUniqueName();
        long long52 = atomikosProperties44.defaultJtaTimeout;
        java.lang.String str53 = atomikosProperties44.getLogBaseName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
    }

    @Test
    public void test6845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6845");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.maxActives = (byte) -1;
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.maxTimeout = 2L;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test6846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6846");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setTransactionManagerUniqueName("");
        atomikosProperties6.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass16 = atomikosProperties6.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        int int19 = atomikosProperties17.getMaxActives();
        java.lang.String str20 = atomikosProperties17.transactionManagerUniqueName;
        long long21 = atomikosProperties17.getCheckpointInterval();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        atomikosProperties27.transactionManagerUniqueName = "";
        atomikosProperties27.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        java.lang.Object obj45 = properties25.getOrDefault((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        int int48 = atomikosProperties46.getMaxActives();
        java.lang.String str49 = atomikosProperties46.logBaseDir;
        java.lang.Object obj51 = properties25.putIfAbsent((java.lang.Object) atomikosProperties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        atomikosProperties52.setService("");
        boolean boolean57 = atomikosProperties52.threadedTwoPhaseCommit;
        java.lang.String str58 = atomikosProperties52.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        boolean boolean63 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.serialJtaTransactions = true;
        java.lang.String str66 = atomikosProperties59.getService();
        java.lang.Object obj67 = properties25.putIfAbsent((java.lang.Object) str58, (java.lang.Object) atomikosProperties59);
        boolean boolean68 = properties3.replace((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties59);
        atomikosProperties17.setSerialJtaTransactions(true);
        java.lang.String str71 = atomikosProperties17.transactionManagerUniqueName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test6847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6847");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        properties6.clear();
        boolean boolean8 = properties6.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        java.lang.Object obj14 = properties11.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection15 = properties11.values();
        boolean boolean16 = properties6.containsKey((java.lang.Object) objCollection15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseName();
        int int21 = atomikosProperties17.getMaxActives();
        atomikosProperties17.setLogBaseDir("hi!");
        java.lang.String str24 = atomikosProperties17.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        atomikosProperties25.setTransactionManagerUniqueName("");
        int int29 = atomikosProperties25.getMaxActives();
        java.lang.String str30 = atomikosProperties25.getLogBaseDir();
        java.lang.String str31 = atomikosProperties25.logBaseName;
        java.lang.Object obj32 = properties6.replace((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties25);
        boolean boolean33 = properties6.isEmpty();
        java.lang.Object obj34 = properties6.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties6.entrySet();
        java.lang.Object obj36 = properties6.clone();
        boolean boolean37 = properties2.equals((java.lang.Object) properties6);
        boolean boolean38 = properties6.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        java.lang.String str41 = atomikosProperties39.logBaseName;
        java.lang.String str42 = atomikosProperties39.getLogBaseDir();
        atomikosProperties39.setMaxActives((int) (byte) -1);
        long long45 = atomikosProperties39.maxTimeout;
        boolean boolean46 = atomikosProperties39.isEnableLogging();
        boolean boolean47 = properties6.containsValue((java.lang.Object) boolean46);
        java.lang.String str49 = properties6.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        java.io.Writer writer50 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.store(writer50, "{com.atomikos.icatch.tmlog=0.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 300000L + "'", long45 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test6848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6848");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        int int5 = properties4.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        boolean boolean12 = properties4.containsKey((java.lang.Object) objCollection11);
        java.util.Properties properties13 = new java.util.Properties(properties4);
        boolean boolean14 = properties4.isEmpty();
        java.lang.Object obj15 = null;
        boolean boolean16 = properties4.equals(obj15);
        java.util.Collection<java.lang.Object> objCollection17 = properties4.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        java.lang.String str20 = atomikosProperties18.logBaseName;
        java.lang.String str21 = atomikosProperties18.getLogBaseDir();
        atomikosProperties18.setMaxActives((int) (byte) -1);
        java.lang.String str24 = atomikosProperties18.getService();
        java.lang.String str25 = atomikosProperties18.getService();
        atomikosProperties18.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean28 = properties4.contains((java.lang.Object) atomikosProperties18);
        java.lang.String str29 = atomikosProperties18.getLogBaseDir();
        boolean boolean30 = atomikosProperties18.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test6849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6849");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        java.lang.Object obj57 = properties2.clone();
        java.util.Properties properties58 = new java.util.Properties(properties2);
        java.util.Set<java.lang.Object> objSet59 = properties58.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(objSet59);
    }

    @Test
    public void test6850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6850");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        boolean boolean23 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.enableLogging = true;
        atomikosProperties4.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        java.util.Properties properties28 = atomikosProperties4.asProperties();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(properties28);
    }

    @Test
    public void test6851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6851");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        int int9 = properties2.size();
        java.util.Properties properties10 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        atomikosProperties11.setTransactionManagerUniqueName("");
        int int15 = atomikosProperties11.getMaxActives();
        java.lang.String str16 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setCheckpointInterval((long) 100);
        boolean boolean28 = atomikosProperties25.isForceShutdownOnVmExit();
        atomikosProperties25.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean31 = properties24.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.enableLogging = true;
        boolean boolean36 = properties21.replace((java.lang.Object) boolean31, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection37 = properties21.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet38 = properties21.entrySet();
        atomikosProperties11.set(properties21, "hi!", (java.lang.Object) 0L);
        atomikosProperties11.setEnableLogging(false);
        atomikosProperties11.setTransactionManagerUniqueName("tmlog");
        atomikosProperties11.setEnableLogging(false);
        long long48 = atomikosProperties11.checkpointInterval;
        java.lang.Object obj49 = properties10.remove((java.lang.Object) long48);
        java.util.Properties properties50 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long52 = atomikosProperties51.checkpointInterval;
        java.util.Properties properties53 = atomikosProperties51.asProperties();
        boolean boolean55 = properties53.containsValue((java.lang.Object) 100L);
        java.lang.String str56 = properties53.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        atomikosProperties57.setTransactionManagerUniqueName("");
        int int61 = atomikosProperties57.getMaxActives();
        java.lang.String str62 = atomikosProperties57.transactionManagerUniqueName;
        atomikosProperties57.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        java.util.Properties properties67 = atomikosProperties65.asProperties();
        properties67.clear();
        java.util.Properties properties69 = new java.util.Properties(properties67);
        atomikosProperties57.set(properties67, "tmlog", (java.lang.Object) 0.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str74 = atomikosProperties73.logBaseDir;
        java.lang.String str75 = atomikosProperties73.logBaseName;
        java.lang.String str76 = atomikosProperties73.getLogBaseDir();
        java.lang.Object obj77 = properties53.putIfAbsent((java.lang.Object) "tmlog", (java.lang.Object) atomikosProperties73);
        boolean boolean78 = atomikosProperties73.isEnableLogging();
        java.lang.Object obj79 = properties2.getOrDefault((java.lang.Object) properties50, (java.lang.Object) atomikosProperties73);
        java.util.Set<java.lang.String> strSet80 = properties2.stringPropertyNames();
        java.io.OutputStream outputStream81 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream81, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertNotNull(objEntrySet38);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 50 + "'", int61 == 50);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tmlog" + "'", str75, "tmlog");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertNotNull(strSet80);
    }

    @Test
    public void test6852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6852");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.logBaseName = "";
        atomikosProperties0.transactionManagerUniqueName = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}";
        atomikosProperties0.checkpointInterval = 50L;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test6853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6853");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        long long9 = atomikosProperties0.maxTimeout;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean11 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}";
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean16 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test6854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6854");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties2.keys();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        boolean boolean21 = atomikosProperties15.isEnableLogging();
        long long22 = atomikosProperties15.checkpointInterval;
        atomikosProperties15.setCheckpointInterval(10L);
        boolean boolean25 = atomikosProperties15.isForceShutdownOnVmExit();
        atomikosProperties15.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean28 = atomikosProperties15.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setMaxActives((int) (byte) -1);
        boolean boolean35 = atomikosProperties29.isEnableLogging();
        atomikosProperties29.transactionManagerUniqueName = "";
        atomikosProperties29.threadedTwoPhaseCommit = true;
        java.util.Properties properties40 = atomikosProperties29.asProperties();
        java.lang.String str41 = atomikosProperties29.logBaseName;
        boolean boolean42 = atomikosProperties29.threadedTwoPhaseCommit;
        atomikosProperties29.forceShutdownOnVmExit = false;
        atomikosProperties29.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Object obj47 = properties2.putIfAbsent((java.lang.Object) boolean28, (java.lang.Object) atomikosProperties29);
        boolean boolean48 = properties2.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test6855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6855");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setLogBaseDir("hi!");
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        boolean boolean10 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.forceShutdownOnVmExit = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test6856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6856");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long8 = atomikosProperties0.getMaxTimeout();
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test6857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6857");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.lang.String str12 = atomikosProperties0.logBaseName;
        boolean boolean13 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test6858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6858");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        java.util.Properties properties14 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        java.lang.Object obj18 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties30);
        int int38 = properties17.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet39 = properties17.entrySet();
        java.util.Enumeration<?> wildcardEnumeration40 = properties17.propertyNames();
        java.lang.Object obj41 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long43 = atomikosProperties42.checkpointInterval;
        java.util.Properties properties44 = atomikosProperties42.asProperties();
        properties44.clear();
        java.util.Properties properties46 = new java.util.Properties(properties44);
        java.lang.Object obj49 = properties46.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.transactionManagerUniqueName;
        boolean boolean53 = atomikosProperties50.enableLogging;
        java.lang.String str54 = atomikosProperties50.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str56 = atomikosProperties55.logBaseDir;
        java.lang.String str57 = atomikosProperties55.logBaseName;
        java.lang.String str58 = atomikosProperties55.getLogBaseDir();
        atomikosProperties55.setMaxActives((int) (byte) -1);
        boolean boolean61 = atomikosProperties55.isEnableLogging();
        atomikosProperties55.transactionManagerUniqueName = "";
        int int64 = atomikosProperties55.maxActives;
        boolean boolean65 = properties46.remove((java.lang.Object) atomikosProperties50, (java.lang.Object) atomikosProperties55);
        boolean boolean66 = properties8.remove((java.lang.Object) properties17, (java.lang.Object) properties46);
        java.util.Properties properties67 = new java.util.Properties(properties8);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(objEntrySet39);
        org.junit.Assert.assertNotNull(wildcardEnumeration40);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj49, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tmlog" + "'", str57, "tmlog");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test6859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6859");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        java.lang.String str15 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        java.util.Properties properties16 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setMaxActives((int) (byte) -1);
        java.util.Properties properties23 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.setCheckpointInterval((long) 100);
        atomikosProperties36.maxActives = (byte) 0;
        atomikosProperties36.setTransactionManagerUniqueName("");
        java.lang.Object obj43 = properties26.get((java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseDir = "{}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        boolean boolean50 = atomikosProperties46.isSerialJtaTransactions();
        atomikosProperties46.setEnableLogging(false);
        boolean boolean53 = atomikosProperties46.serialJtaTransactions;
        long long54 = atomikosProperties46.defaultJtaTimeout;
        java.lang.String str55 = atomikosProperties46.logBaseName;
        java.lang.Object obj56 = properties23.put((java.lang.Object) atomikosProperties36, (java.lang.Object) atomikosProperties46);
        java.util.Set<java.lang.String> strSet57 = properties23.stringPropertyNames();
        java.util.Set<java.lang.String> strSet58 = properties23.stringPropertyNames();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties16.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(objEnumeration60);
    }

    @Test
    public void test6860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6860");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        atomikosProperties36.threadedTwoPhaseCommit = true;
        atomikosProperties36.setCheckpointInterval((long) 100);
        atomikosProperties36.setLogBaseName("");
        atomikosProperties36.service = "{}";
        long long56 = atomikosProperties36.maxTimeout;
        atomikosProperties36.setForceShutdownOnVmExit(true);
        atomikosProperties36.defaultJtaTimeout = 100L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 300000L + "'", long56 == 300000L);
    }

    @Test
    public void test6861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6861");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.lang.Object obj15 = properties2.remove((java.lang.Object) atomikosProperties13);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        java.lang.Object obj17 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        int int20 = atomikosProperties18.getMaxActives();
        java.lang.String str21 = atomikosProperties18.logBaseDir;
        boolean boolean22 = atomikosProperties18.serialJtaTransactions;
        java.lang.String str23 = atomikosProperties18.transactionManagerUniqueName;
        atomikosProperties18.threadedTwoPhaseCommit = false;
        long long26 = atomikosProperties18.maxTimeout;
        java.lang.Object obj27 = properties2.get((java.lang.Object) long26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        atomikosProperties28.setTransactionManagerUniqueName("");
        int int32 = atomikosProperties28.getMaxActives();
        atomikosProperties28.logBaseName = "tmlog";
        long long35 = atomikosProperties28.checkpointInterval;
        atomikosProperties28.logBaseDir = "";
        long long38 = atomikosProperties28.getDefaultJtaTimeout();
        boolean boolean39 = properties2.containsKey((java.lang.Object) long38);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet40 = properties2.entrySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{}");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objEntrySet40);
    }

    @Test
    public void test6862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6862");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str5 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean9 = atomikosProperties0.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        java.util.Properties properties12 = atomikosProperties10.asProperties();
        properties12.clear();
        boolean boolean14 = properties12.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        java.lang.Object obj20 = properties17.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection21 = properties17.values();
        boolean boolean22 = properties12.containsKey((java.lang.Object) objCollection21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseName();
        int int27 = atomikosProperties23.getMaxActives();
        atomikosProperties23.setLogBaseDir("hi!");
        java.lang.String str30 = atomikosProperties23.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        atomikosProperties31.setTransactionManagerUniqueName("");
        int int35 = atomikosProperties31.getMaxActives();
        java.lang.String str36 = atomikosProperties31.getLogBaseDir();
        java.lang.String str37 = atomikosProperties31.logBaseName;
        java.lang.Object obj38 = properties12.replace((java.lang.Object) atomikosProperties23, (java.lang.Object) atomikosProperties31);
        boolean boolean39 = properties12.isEmpty();
        java.lang.Object obj40 = properties12.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet41 = properties12.entrySet();
        java.lang.Object obj42 = properties12.clone();
        java.util.Set<java.lang.String> strSet43 = properties12.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.enableLogging = true;
        boolean boolean47 = atomikosProperties44.forceShutdownOnVmExit;
        long long48 = atomikosProperties44.getMaxTimeout();
        atomikosProperties44.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties44.logBaseName = "{}";
        java.lang.Object obj53 = properties12.remove((java.lang.Object) "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties12.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        java.util.Properties properties58 = atomikosProperties56.asProperties();
        properties58.clear();
        java.util.Properties properties60 = new java.util.Properties(properties58);
        java.lang.Object obj63 = properties60.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long65 = atomikosProperties64.checkpointInterval;
        long long66 = atomikosProperties64.getDefaultJtaTimeout();
        java.util.Properties properties67 = atomikosProperties64.asProperties();
        boolean boolean68 = atomikosProperties64.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.setCheckpointInterval((long) 100);
        boolean boolean72 = atomikosProperties69.isForceShutdownOnVmExit();
        atomikosProperties69.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties69.service = "";
        atomikosProperties69.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long80 = atomikosProperties79.checkpointInterval;
        java.util.Properties properties81 = atomikosProperties79.asProperties();
        properties81.clear();
        boolean boolean83 = properties81.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties84 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long85 = atomikosProperties84.checkpointInterval;
        java.util.Properties properties86 = atomikosProperties84.asProperties();
        java.lang.Object obj89 = properties86.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection90 = properties86.values();
        boolean boolean91 = properties81.containsKey((java.lang.Object) objCollection90);
        java.util.Enumeration<java.lang.Object> objEnumeration92 = properties81.keys();
        boolean boolean93 = properties60.replace((java.lang.Object) atomikosProperties64, (java.lang.Object) atomikosProperties69, (java.lang.Object) properties81);
        java.lang.Object obj94 = properties81.clone();
        atomikosProperties0.set(properties12, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}", obj94);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{}");
        org.junit.Assert.assertNotNull(objEntrySet41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 300000L + "'", long48 == 300000L);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objEnumeration54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertEquals("'" + obj63 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj63, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 500L + "'", long65 == 500L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 500L + "'", long80 == 500L);
        org.junit.Assert.assertNotNull(properties81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 500L + "'", long85 == 500L);
        org.junit.Assert.assertNotNull(properties86);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNotNull(objCollection90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objEnumeration92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(obj94);
        org.junit.Assert.assertEquals(obj94.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj94), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj94), "{}");
    }

    @Test
    public void test6863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6863");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        atomikosProperties0.serialJtaTransactions = true;
        long long12 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
    }

    @Test
    public void test6864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6864");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean22 = properties2.contains((java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        properties29.clear();
        boolean boolean31 = properties29.isEmpty();
        java.lang.Object obj32 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        java.lang.Object obj37 = properties36.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        boolean boolean44 = atomikosProperties38.isEnableLogging();
        atomikosProperties38.transactionManagerUniqueName = "";
        atomikosProperties38.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        java.lang.String str55 = atomikosProperties49.getService();
        java.lang.Object obj56 = properties36.getOrDefault((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        int int59 = atomikosProperties57.getMaxActives();
        java.lang.String str60 = atomikosProperties57.logBaseDir;
        java.lang.Object obj62 = properties36.putIfAbsent((java.lang.Object) atomikosProperties57, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        boolean boolean67 = atomikosProperties63.isSerialJtaTransactions();
        atomikosProperties63.setEnableLogging(false);
        boolean boolean70 = properties29.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties63);
        atomikosProperties63.logBaseName = "{}";
        long long73 = atomikosProperties63.getDefaultJtaTimeout();
        atomikosProperties63.setThreadedTwoPhaseCommit(true);
        java.lang.Object obj76 = properties2.getOrDefault(obj26, (java.lang.Object) atomikosProperties63);
        boolean boolean77 = atomikosProperties63.forceShutdownOnVmExit;
        atomikosProperties63.setCheckpointInterval((long) (short) 1);
        atomikosProperties63.setMaxTimeout(9L);
        atomikosProperties63.setService("{-1=1}");
        java.lang.String str84 = atomikosProperties63.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test6865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6865");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long12 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setEnableLogging(true);
        boolean boolean15 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test6866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6866");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        java.lang.String str7 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.defaultJtaTimeout = 10;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        long long12 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
    }

    @Test
    public void test6867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6867");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        boolean boolean20 = properties8.equals((java.lang.Object) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        atomikosProperties21.forceShutdownOnVmExit = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.maxTimeout = 50;
        boolean boolean33 = properties16.equals((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.logBaseDir;
        atomikosProperties34.setTransactionManagerUniqueName("");
        int int38 = atomikosProperties34.getMaxActives();
        java.lang.String str39 = atomikosProperties34.transactionManagerUniqueName;
        boolean boolean40 = properties16.containsValue((java.lang.Object) atomikosProperties34);
        java.util.Properties properties41 = new java.util.Properties(properties16);
        java.lang.String str42 = properties16.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
    }

    @Test
    public void test6868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6868");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        int int14 = properties2.size();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties2.elements();
        int int16 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        boolean boolean21 = properties19.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        java.lang.Object obj27 = properties24.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        java.lang.String str30 = atomikosProperties28.logBaseName;
        java.lang.String str31 = atomikosProperties28.getLogBaseDir();
        atomikosProperties28.setLogBaseName("");
        java.lang.Object obj34 = properties19.replace((java.lang.Object) properties24, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        atomikosProperties36.transactionManagerUniqueName = "";
        atomikosProperties36.setEnableLogging(false);
        boolean boolean47 = atomikosProperties36.isEnableLogging();
        boolean boolean48 = properties24.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean47);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet49 = properties24.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        atomikosProperties50.setTransactionManagerUniqueName("");
        int int54 = atomikosProperties50.getMaxActives();
        java.lang.String str55 = atomikosProperties50.transactionManagerUniqueName;
        atomikosProperties50.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        properties60.clear();
        java.util.Properties properties62 = new java.util.Properties(properties60);
        atomikosProperties50.set(properties60, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj68 = properties60.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties69 = new java.util.Properties(properties60);
        java.util.Collection<java.lang.Object> objCollection70 = properties60.values();
        java.util.Properties properties71 = new java.util.Properties(properties60);
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties71);
        java.util.Properties properties73 = new java.util.Properties(properties24);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties73);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long76 = atomikosProperties75.checkpointInterval;
        java.util.Properties properties77 = atomikosProperties75.asProperties();
        properties77.clear();
        java.util.Properties properties79 = new java.util.Properties(properties77);
        int int80 = properties79.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet81 = properties79.entrySet();
        java.util.Properties properties82 = new java.util.Properties(properties79);
        properties73.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties79);
        java.lang.Object obj86 = properties73.setProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{=}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objEntrySet49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(objCollection70);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 500L + "'", long76 == 500L);
        org.junit.Assert.assertNotNull(properties77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(objEntrySet81);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test6869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6869");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        java.lang.Object obj7 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.logBaseName;
        java.lang.String str11 = atomikosProperties8.getLogBaseDir();
        atomikosProperties8.setMaxActives((int) (byte) -1);
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        atomikosProperties8.transactionManagerUniqueName = "";
        atomikosProperties8.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        java.lang.String str25 = atomikosProperties19.getService();
        java.lang.Object obj26 = properties6.getOrDefault((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        boolean boolean31 = atomikosProperties27.isSerialJtaTransactions();
        long long32 = atomikosProperties27.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        atomikosProperties38.setTransactionManagerUniqueName("");
        int int42 = atomikosProperties38.getMaxActives();
        java.lang.String str43 = atomikosProperties38.transactionManagerUniqueName;
        boolean boolean44 = properties35.containsValue((java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        atomikosProperties45.maxActives = (byte) 0;
        atomikosProperties45.setTransactionManagerUniqueName("");
        java.lang.Object obj52 = properties35.get((java.lang.Object) atomikosProperties45);
        boolean boolean54 = properties35.containsValue((java.lang.Object) 100.0d);
        boolean boolean55 = properties2.replace(obj26, (java.lang.Object) atomikosProperties27, (java.lang.Object) boolean54);
        java.lang.Object obj56 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        java.lang.String str59 = atomikosProperties57.logBaseName;
        java.lang.String str60 = atomikosProperties57.getLogBaseDir();
        boolean boolean61 = atomikosProperties57.isSerialJtaTransactions();
        long long62 = atomikosProperties57.checkpointInterval;
        boolean boolean63 = atomikosProperties57.enableLogging;
        java.lang.Object obj64 = properties2.get((java.lang.Object) boolean63);
        java.lang.Class<?> wildcardClass65 = properties2.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
// flaky:         org.junit.Assert.assertEquals(obj56.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test6870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6870");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setCheckpointInterval((long) 9);
        java.lang.String str12 = atomikosProperties0.getService();
        boolean boolean13 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setService("");
        long long16 = atomikosProperties0.maxTimeout;
        long long17 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 9L + "'", long17 == 9L);
    }

    @Test
    public void test6871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6871");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        boolean boolean29 = atomikosProperties23.isThreadedTwoPhaseCommit();
        atomikosProperties23.threadedTwoPhaseCommit = true;
        long long32 = atomikosProperties23.defaultJtaTimeout;
        boolean boolean33 = atomikosProperties23.isSerialJtaTransactions();
        int int34 = atomikosProperties23.maxActives;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
    }

    @Test
    public void test6872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6872");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        int int4 = atomikosProperties0.maxActives;
        atomikosProperties0.setCheckpointInterval(97L);
        long long7 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
    }

    @Test
    public void test6873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6873");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        java.lang.Object obj26 = properties2.clone();
        java.util.Enumeration<?> wildcardEnumeration27 = properties2.propertyNames();
        java.util.Set<java.lang.Object> objSet28 = properties2.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(wildcardEnumeration27);
        org.junit.Assert.assertNotNull(objSet28);
    }

    @Test
    public void test6874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6874");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.defaultJtaTimeout = 'a';
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.enableLogging = true;
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        java.lang.String str12 = properties10.getProperty("{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        properties15.clear();
        boolean boolean17 = properties15.isEmpty();
        java.lang.Object obj18 = properties15.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        properties21.clear();
        boolean boolean23 = properties21.isEmpty();
        java.util.Collection<java.lang.Object> objCollection24 = properties21.values();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties26 = new java.util.Properties(properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        int int29 = atomikosProperties27.getMaxActives();
        java.lang.String str30 = atomikosProperties27.logBaseDir;
        boolean boolean31 = atomikosProperties27.serialJtaTransactions;
        java.lang.String str32 = atomikosProperties27.transactionManagerUniqueName;
        atomikosProperties27.threadedTwoPhaseCommit = false;
        long long35 = atomikosProperties27.maxTimeout;
        java.util.Properties properties36 = atomikosProperties27.asProperties();
        java.lang.Object obj37 = properties26.get((java.lang.Object) properties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        boolean boolean42 = properties40.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long44 = atomikosProperties43.checkpointInterval;
        java.util.Properties properties45 = atomikosProperties43.asProperties();
        java.lang.Object obj48 = properties45.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setLogBaseName("");
        java.lang.Object obj55 = properties40.replace((java.lang.Object) properties45, (java.lang.Object) "");
        java.lang.String str57 = properties40.getProperty("tmlog");
        boolean boolean58 = properties36.contains((java.lang.Object) "tmlog");
        java.util.Collection<java.lang.Object> objCollection59 = properties36.values();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties36);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 300000L + "'", long35 == 300000L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objCollection59);
    }

    @Test
    public void test6875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6875");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.maxActives = (byte) 0;
        atomikosProperties0.checkpointInterval = (-1L);
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str15 = atomikosProperties0.logBaseName;
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
    }

    @Test
    public void test6876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6876");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.checkpointInterval = (-1L);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        long long11 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test6877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6877");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        atomikosProperties9.setLogBaseDir("{}");
        atomikosProperties9.setForceShutdownOnVmExit(false);
        atomikosProperties9.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test6878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6878");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        long long4 = atomikosProperties0.maxTimeout;
        java.lang.String str5 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.defaultJtaTimeout = ' ';
        atomikosProperties0.setLogBaseDir("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        int int10 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 300000L + "'", long4 == 300000L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
    }

    @Test
    public void test6879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6879");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setCheckpointInterval((long) 100);
        boolean boolean12 = atomikosProperties9.isForceShutdownOnVmExit();
        atomikosProperties9.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties9.service = "";
        atomikosProperties9.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties9.logBaseDir = "{}";
        atomikosProperties9.maxActives = '#';
        boolean boolean23 = properties2.containsKey((java.lang.Object) '#');
        java.lang.String str25 = properties2.getProperty("tmlog");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test6880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6880");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        boolean boolean21 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean22 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        int int25 = atomikosProperties0.maxActives;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
    }

    @Test
    public void test6881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6881");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties2.propertyNames();
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        int int15 = properties2.size();
        boolean boolean16 = properties2.isEmpty();
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.save(outputStream17, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test6882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6882");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        java.util.Collection<java.lang.Object> objCollection12 = properties9.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        atomikosProperties13.setTransactionManagerUniqueName("");
        int int17 = atomikosProperties13.getMaxActives();
        java.lang.String str18 = atomikosProperties13.transactionManagerUniqueName;
        atomikosProperties13.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        properties23.clear();
        java.util.Properties properties25 = new java.util.Properties(properties23);
        atomikosProperties13.set(properties23, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj31 = properties23.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet32 = properties23.stringPropertyNames();
        java.lang.String str34 = properties23.getProperty("hi!");
        java.lang.Object obj35 = properties2.putIfAbsent((java.lang.Object) objCollection12, (java.lang.Object) "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        java.lang.Object obj39 = properties38.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        boolean boolean46 = atomikosProperties40.isEnableLogging();
        atomikosProperties40.transactionManagerUniqueName = "";
        atomikosProperties40.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        java.lang.String str57 = atomikosProperties51.getService();
        java.lang.Object obj58 = properties38.getOrDefault((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties51);
        int int59 = properties38.size();
        boolean boolean60 = properties2.containsValue((java.lang.Object) properties38);
        java.lang.Object obj63 = properties2.setProperty("{com.atomikos.icatch.tmlog=0.0}", "");
        boolean boolean64 = properties2.isEmpty();
        java.lang.String str65 = properties2.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.tmlog=0.0}=, com.atomikos.icatch.log_base_name=tmlog, []=hi!}" + "'", str65, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.tmlog=0.0}=, com.atomikos.icatch.log_base_name=tmlog, []=hi!}");
    }

    @Test
    public void test6883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6883");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        java.lang.Object obj15 = properties12.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str16 = properties12.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setMaxActives((int) (byte) -1);
        boolean boolean23 = atomikosProperties17.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) 100);
        boolean boolean27 = atomikosProperties24.isForceShutdownOnVmExit();
        java.lang.Object obj28 = properties12.putIfAbsent((java.lang.Object) atomikosProperties17, (java.lang.Object) boolean27);
        java.util.Set<java.lang.String> strSet29 = properties12.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet30 = properties12.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties12.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        atomikosProperties32.forceShutdownOnVmExit = false;
        atomikosProperties32.threadedTwoPhaseCommit = false;
        atomikosProperties32.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties32.threadedTwoPhaseCommit = false;
        atomikosProperties32.setDefaultJtaTimeout(500L);
        java.lang.Object obj44 = properties4.putIfAbsent((java.lang.Object) properties12, (java.lang.Object) 500L);
        properties4.clear();
        int int46 = properties4.size();
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties4.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objEnumeration47);
    }

    @Test
    public void test6884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6884");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        java.util.Properties properties48 = new java.util.Properties(properties46);
        java.lang.Object obj51 = properties48.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str52 = properties48.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        java.lang.String str55 = atomikosProperties53.logBaseName;
        java.lang.String str56 = atomikosProperties53.getLogBaseDir();
        atomikosProperties53.setMaxActives((int) (byte) -1);
        boolean boolean59 = atomikosProperties53.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setCheckpointInterval((long) 100);
        boolean boolean63 = atomikosProperties60.isForceShutdownOnVmExit();
        java.lang.Object obj64 = properties48.putIfAbsent((java.lang.Object) atomikosProperties53, (java.lang.Object) boolean63);
        atomikosProperties53.setLogBaseDir("{}");
        boolean boolean67 = properties2.containsValue((java.lang.Object) "{}");
        java.util.Set<java.lang.String> strSet68 = properties2.stringPropertyNames();
        java.lang.Object obj69 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties70.enableLogging = true;
        atomikosProperties70.setThreadedTwoPhaseCommit(true);
        atomikosProperties70.setCheckpointInterval((long) (byte) 100);
        atomikosProperties70.setCheckpointInterval((long) 50);
        java.util.Properties properties79 = atomikosProperties70.asProperties();
        atomikosProperties70.setMaxActives(50);
        atomikosProperties70.serialJtaTransactions = true;
        boolean boolean84 = properties2.containsValue((java.lang.Object) atomikosProperties70);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj51, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{}");
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test6885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6885");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        long long20 = atomikosProperties12.checkpointInterval;
        boolean boolean21 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties12.transactionManagerUniqueName = "tmlog";
        java.util.Properties properties24 = atomikosProperties12.asProperties();
        boolean boolean25 = atomikosProperties12.forceShutdownOnVmExit;
        boolean boolean26 = atomikosProperties12.enableLogging;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test6886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6886");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.setCheckpointInterval((long) 100);
        boolean boolean6 = atomikosProperties3.isForceShutdownOnVmExit();
        atomikosProperties3.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean9 = properties2.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        java.util.Properties properties12 = atomikosProperties10.asProperties();
        java.lang.Object obj13 = properties12.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        atomikosProperties14.setMaxActives((int) (byte) -1);
        boolean boolean20 = atomikosProperties14.isEnableLogging();
        atomikosProperties14.transactionManagerUniqueName = "";
        atomikosProperties14.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        java.lang.String str31 = atomikosProperties25.getService();
        java.lang.Object obj32 = properties12.getOrDefault((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties25);
        int int33 = properties12.size();
        java.lang.String str34 = properties12.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties12.keys();
        boolean boolean36 = properties2.contains((java.lang.Object) objEnumeration35);
        java.lang.Object obj39 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.tmlog=0.0}=, com.atomikos.icatch.log_base_name=tmlog, []=hi!}", "{}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str34, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test6887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6887");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setTransactionManagerUniqueName("");
        atomikosProperties6.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass16 = atomikosProperties6.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        int int19 = atomikosProperties17.getMaxActives();
        java.lang.String str20 = atomikosProperties17.transactionManagerUniqueName;
        long long21 = atomikosProperties17.getCheckpointInterval();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        atomikosProperties27.transactionManagerUniqueName = "";
        atomikosProperties27.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        java.lang.Object obj45 = properties25.getOrDefault((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        int int48 = atomikosProperties46.getMaxActives();
        java.lang.String str49 = atomikosProperties46.logBaseDir;
        java.lang.Object obj51 = properties25.putIfAbsent((java.lang.Object) atomikosProperties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        atomikosProperties52.setService("");
        boolean boolean57 = atomikosProperties52.threadedTwoPhaseCommit;
        java.lang.String str58 = atomikosProperties52.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        boolean boolean63 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.serialJtaTransactions = true;
        java.lang.String str66 = atomikosProperties59.getService();
        java.lang.Object obj67 = properties25.putIfAbsent((java.lang.Object) str58, (java.lang.Object) atomikosProperties59);
        boolean boolean68 = properties3.replace((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties59);
        atomikosProperties59.checkpointInterval = (byte) 100;
        java.lang.String str71 = atomikosProperties59.getService();
        atomikosProperties59.serialJtaTransactions = true;
        boolean boolean74 = atomikosProperties59.enableLogging;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test6888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6888");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long13 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
    }

    @Test
    public void test6889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6889");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties2.elements();
        java.util.Set<java.lang.Object> objSet11 = properties2.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        java.lang.String str14 = atomikosProperties12.logBaseName;
        java.lang.String str15 = atomikosProperties12.getLogBaseDir();
        atomikosProperties12.setMaxActives((int) (byte) -1);
        java.util.Properties properties18 = atomikosProperties12.asProperties();
        java.util.Collection<java.lang.Object> objCollection19 = properties18.values();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties18.keys();
        java.lang.String str21 = properties18.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        boolean boolean28 = atomikosProperties22.isEnableLogging();
        long long29 = atomikosProperties22.checkpointInterval;
        atomikosProperties22.setCheckpointInterval(10L);
        atomikosProperties22.serialJtaTransactions = false;
        atomikosProperties22.setCheckpointInterval(0L);
        atomikosProperties22.setMaxActives((int) (byte) 1);
        java.lang.String str38 = atomikosProperties22.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        java.lang.Object obj42 = properties41.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.String str46 = atomikosProperties43.getLogBaseDir();
        atomikosProperties43.setMaxActives((int) (byte) -1);
        boolean boolean49 = atomikosProperties43.isEnableLogging();
        atomikosProperties43.transactionManagerUniqueName = "";
        atomikosProperties43.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str55 = atomikosProperties54.logBaseDir;
        java.lang.String str56 = atomikosProperties54.logBaseName;
        java.lang.String str57 = atomikosProperties54.getLogBaseDir();
        atomikosProperties54.setMaxActives((int) (byte) -1);
        java.lang.String str60 = atomikosProperties54.getService();
        java.lang.Object obj61 = properties41.getOrDefault((java.lang.Object) atomikosProperties43, (java.lang.Object) atomikosProperties54);
        int int62 = properties41.size();
        java.lang.String str64 = properties41.getProperty("");
        java.util.Enumeration<java.lang.Object> objEnumeration65 = properties41.keys();
        boolean boolean66 = properties18.remove((java.lang.Object) str38, (java.lang.Object) properties41);
        java.lang.Object obj67 = properties2.get((java.lang.Object) properties18);
        java.io.OutputStream outputStream68 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(outputStream68, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objSet11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(objEnumeration20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str21, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tmlog" + "'", str56, "tmlog");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(objEnumeration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj67);
    }

    @Test
    public void test6890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6890");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        java.lang.String str12 = properties10.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.store(outputStream13, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test6891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6891");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Set<java.lang.Object> objSet20 = properties10.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        properties23.clear();
        boolean boolean25 = properties23.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        boolean boolean30 = properties28.containsValue((java.lang.Object) 100L);
        boolean boolean31 = properties23.contains((java.lang.Object) properties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        properties34.clear();
        boolean boolean36 = properties34.isEmpty();
        java.lang.Object obj37 = properties34.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        properties40.clear();
        boolean boolean42 = properties40.isEmpty();
        java.util.Collection<java.lang.Object> objCollection43 = properties40.values();
        properties34.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties40);
        java.lang.Object obj47 = properties40.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.lang.Object obj48 = properties40.clone();
        boolean boolean49 = properties28.equals((java.lang.Object) properties40);
        boolean boolean50 = properties28.isEmpty();
        java.util.Enumeration<?> wildcardEnumeration51 = properties28.propertyNames();
        boolean boolean52 = properties10.containsKey((java.lang.Object) properties28);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objSet20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{}");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test6892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6892");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        long long4 = atomikosProperties0.getCheckpointInterval();
        boolean boolean5 = atomikosProperties0.isSerialJtaTransactions();
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        java.lang.String str9 = atomikosProperties0.service;
        int int10 = atomikosProperties0.maxActives;
        java.lang.Class<?> wildcardClass11 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}" + "'", str9, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test6893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6893");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.lang.String str14 = atomikosProperties7.getLogBaseName();
        java.lang.String str15 = atomikosProperties7.getTransactionManagerUniqueName();
        boolean boolean16 = atomikosProperties7.forceShutdownOnVmExit;
        long long17 = atomikosProperties7.maxTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
    }

    @Test
    public void test6894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6894");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.threadedTwoPhaseCommit = true;
        atomikosProperties31.service = "tmlog";
        java.lang.String str49 = atomikosProperties31.logBaseName;
        atomikosProperties31.setForceShutdownOnVmExit(false);
        atomikosProperties31.logBaseDir = "";
        atomikosProperties31.setLogBaseDir("");
        int int56 = atomikosProperties31.getMaxActives();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
    }

    @Test
    public void test6895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6895");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        java.util.Properties properties48 = new java.util.Properties(properties46);
        java.lang.Object obj51 = properties48.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str52 = properties48.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        java.lang.String str55 = atomikosProperties53.logBaseName;
        java.lang.String str56 = atomikosProperties53.getLogBaseDir();
        atomikosProperties53.setMaxActives((int) (byte) -1);
        boolean boolean59 = atomikosProperties53.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.setCheckpointInterval((long) 100);
        boolean boolean63 = atomikosProperties60.isForceShutdownOnVmExit();
        java.lang.Object obj64 = properties48.putIfAbsent((java.lang.Object) atomikosProperties53, (java.lang.Object) boolean63);
        atomikosProperties53.setLogBaseDir("{}");
        boolean boolean67 = properties2.containsValue((java.lang.Object) "{}");
        properties2.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet69 = properties2.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet70 = properties2.entrySet();
        java.io.InputStream inputStream71 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.loadFromXML(inputStream71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj51, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objEntrySet69);
        org.junit.Assert.assertNotNull(objEntrySet70);
    }

    @Test
    public void test6896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6896");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        int int6 = atomikosProperties0.getMaxActives();
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        long long8 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.defaultJtaTimeout = (byte) 10;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
    }

    @Test
    public void test6897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6897");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.lang.Object obj15 = properties2.setProperty("", "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        properties18.clear();
        boolean boolean20 = properties18.isEmpty();
        java.lang.Object obj21 = properties18.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        java.lang.Object obj25 = properties24.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setMaxActives((int) (byte) -1);
        boolean boolean32 = atomikosProperties26.isEnableLogging();
        atomikosProperties26.transactionManagerUniqueName = "";
        atomikosProperties26.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        java.lang.String str43 = atomikosProperties37.getService();
        java.lang.Object obj44 = properties24.getOrDefault((java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        java.lang.String str48 = atomikosProperties45.getService();
        atomikosProperties45.defaultJtaTimeout = 'a';
        atomikosProperties45.enableLogging = false;
        atomikosProperties45.logBaseName = "tmlog";
        java.lang.Object obj55 = properties18.putIfAbsent((java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties45);
        java.lang.String str56 = atomikosProperties45.service;
        java.lang.Object obj57 = properties2.remove((java.lang.Object) atomikosProperties45);
        atomikosProperties45.setThreadedTwoPhaseCommit(false);
        atomikosProperties45.setSerialJtaTransactions(false);
        boolean boolean62 = atomikosProperties45.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{}");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test6898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6898");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.threadedTwoPhaseCommit = true;
        atomikosProperties31.setService("{}");
        java.lang.String str49 = atomikosProperties31.logBaseName;
        atomikosProperties31.setEnableLogging(false);
        long long52 = atomikosProperties31.maxTimeout;
        java.lang.Class<?> wildcardClass53 = atomikosProperties31.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test6899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6899");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        java.lang.Object obj19 = properties18.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.logBaseDir;
        java.lang.String str22 = atomikosProperties20.logBaseName;
        java.lang.String str23 = atomikosProperties20.getLogBaseDir();
        atomikosProperties20.setMaxActives((int) (byte) -1);
        boolean boolean26 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.transactionManagerUniqueName = "";
        atomikosProperties20.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        java.lang.String str37 = atomikosProperties31.getService();
        java.lang.Object obj38 = properties18.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        int int41 = atomikosProperties39.getMaxActives();
        java.lang.String str42 = atomikosProperties39.logBaseDir;
        java.lang.Object obj44 = properties18.putIfAbsent((java.lang.Object) atomikosProperties39, (java.lang.Object) "");
        int int45 = properties18.size();
        java.util.Collection<java.lang.Object> objCollection46 = properties18.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        int int49 = atomikosProperties47.getMaxActives();
        java.lang.String str50 = atomikosProperties47.logBaseDir;
        java.lang.String str51 = atomikosProperties47.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        java.lang.String str55 = atomikosProperties52.getLogBaseDir();
        atomikosProperties52.setMaxActives((int) (byte) -1);
        boolean boolean58 = atomikosProperties52.isEnableLogging();
        java.lang.String str59 = atomikosProperties52.getLogBaseName();
        java.lang.Object obj60 = properties18.replace((java.lang.Object) atomikosProperties47, (java.lang.Object) atomikosProperties52);
        long long61 = atomikosProperties47.defaultJtaTimeout;
        atomikosProperties47.setTransactionManagerUniqueName("hi!");
        atomikosProperties47.enableLogging = true;
        boolean boolean66 = properties14.contains((java.lang.Object) atomikosProperties47);
        java.util.Enumeration<?> wildcardEnumeration67 = properties14.propertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 50 + "'", int41 == 50);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 50 + "'", int49 == 50);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration67);
    }

    @Test
    public void test6900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6900");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long8 = atomikosProperties0.maxTimeout;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        int int11 = properties9.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        atomikosProperties16.setTransactionManagerUniqueName("");
        int int20 = atomikosProperties16.getMaxActives();
        boolean boolean21 = properties14.containsValue((java.lang.Object) int20);
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        java.io.OutputStream outputStream23 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.store(outputStream23, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test6901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6901");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet24 = properties2.entrySet();
        java.util.Enumeration<?> wildcardEnumeration25 = properties2.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        properties28.clear();
        boolean boolean30 = properties28.isEmpty();
        java.lang.Object obj31 = properties28.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        properties34.clear();
        boolean boolean36 = properties34.isEmpty();
        java.util.Collection<java.lang.Object> objCollection37 = properties34.values();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.lang.Object obj41 = properties34.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.lang.Object obj42 = properties34.clone();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = atomikosProperties44.isForceShutdownOnVmExit();
        atomikosProperties44.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long50 = atomikosProperties44.getDefaultJtaTimeout();
        long long51 = atomikosProperties44.getMaxTimeout();
        java.lang.String str52 = atomikosProperties44.service;
        java.lang.String str53 = atomikosProperties44.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        java.util.Properties properties56 = atomikosProperties54.asProperties();
        properties56.clear();
        boolean boolean58 = properties56.isEmpty();
        java.lang.Object obj59 = properties56.clone();
        java.util.Set<java.lang.Object> objSet60 = properties56.keySet();
        boolean boolean63 = properties56.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long65 = atomikosProperties64.checkpointInterval;
        java.util.Properties properties66 = atomikosProperties64.asProperties();
        atomikosProperties64.threadedTwoPhaseCommit = false;
        boolean boolean69 = properties56.containsKey((java.lang.Object) atomikosProperties64);
        java.lang.Object obj70 = properties34.put((java.lang.Object) str53, (java.lang.Object) properties56);
        java.lang.Class<?> wildcardClass71 = properties34.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(objEntrySet24);
        org.junit.Assert.assertNotNull(wildcardEnumeration25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 300000L + "'", long51 == 300000L);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str53, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertNotNull(objSet60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 500L + "'", long65 == 500L);
        org.junit.Assert.assertNotNull(properties66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test6902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6902");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        long long6 = atomikosProperties0.checkpointInterval;
        boolean boolean7 = atomikosProperties0.serialJtaTransactions;
        boolean boolean8 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setCheckpointInterval((long) 100);
        boolean boolean18 = atomikosProperties15.isForceShutdownOnVmExit();
        atomikosProperties15.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean21 = properties14.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.enableLogging = true;
        boolean boolean26 = properties11.replace((java.lang.Object) boolean21, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection27 = properties11.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        boolean boolean31 = atomikosProperties29.isSerialJtaTransactions();
        atomikosProperties29.setForceShutdownOnVmExit(false);
        java.lang.Object obj34 = properties11.put((java.lang.Object) (-1L), (java.lang.Object) false);
        java.util.Set<java.lang.String> strSet35 = properties11.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties43.setCheckpointInterval((long) 100);
        boolean boolean46 = atomikosProperties43.isForceShutdownOnVmExit();
        atomikosProperties43.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean49 = properties42.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.enableLogging = true;
        boolean boolean54 = properties39.replace((java.lang.Object) boolean49, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection55 = properties39.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet56 = properties39.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet57 = properties39.entrySet();
        java.lang.String str59 = properties39.getProperty("hi!");
        java.util.Enumeration<?> wildcardEnumeration60 = properties39.propertyNames();
        atomikosProperties0.set(properties11, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) properties39);
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties11.elements();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objCollection55);
        org.junit.Assert.assertNotNull(objEntrySet56);
        org.junit.Assert.assertNotNull(objEntrySet57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(wildcardEnumeration60);
        org.junit.Assert.assertNotNull(objEnumeration62);
    }

    @Test
    public void test6903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6903");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.maxActives = (byte) 0;
        atomikosProperties0.checkpointInterval = (-1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        boolean boolean18 = properties16.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        java.lang.Object obj24 = properties21.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setLogBaseName("");
        java.lang.Object obj31 = properties16.replace((java.lang.Object) properties21, (java.lang.Object) "");
        java.lang.String str32 = properties21.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setCheckpointInterval((long) 100);
        boolean boolean37 = atomikosProperties34.isForceShutdownOnVmExit();
        atomikosProperties34.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long40 = atomikosProperties34.getDefaultJtaTimeout();
        long long41 = atomikosProperties34.getMaxTimeout();
        java.lang.String str42 = atomikosProperties34.service;
        java.lang.String str43 = atomikosProperties34.getLogBaseDir();
        atomikosProperties0.set(properties21, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties34);
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.{}=false, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}}";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(obj31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str32, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 300000L + "'", long41 == 300000L);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test6904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6904");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        atomikosProperties9.setLogBaseDir("{}");
        atomikosProperties9.setForceShutdownOnVmExit(false);
        atomikosProperties9.serialJtaTransactions = true;
        long long27 = atomikosProperties9.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
    }

    @Test
    public void test6905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6905");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        int int14 = properties2.size();
        java.lang.String str16 = properties2.getProperty("tmlog");
        java.util.Collection<java.lang.Object> objCollection17 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        properties20.clear();
        java.util.Properties properties22 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        atomikosProperties23.logBaseName = "tmlog";
        int int30 = atomikosProperties23.maxActives;
        boolean boolean31 = properties20.containsValue((java.lang.Object) int30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        atomikosProperties33.setThreadedTwoPhaseCommit(false);
        boolean boolean38 = properties20.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setCheckpointInterval((long) 100);
        atomikosProperties39.maxActives = (byte) 0;
        java.lang.Object obj44 = properties20.remove((java.lang.Object) atomikosProperties39);
        boolean boolean45 = properties2.containsKey((java.lang.Object) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        boolean boolean52 = atomikosProperties46.isEnableLogging();
        long long53 = atomikosProperties46.checkpointInterval;
        atomikosProperties46.setCheckpointInterval(10L);
        boolean boolean56 = atomikosProperties46.isForceShutdownOnVmExit();
        atomikosProperties46.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties46.setLogBaseName("hi!");
        boolean boolean61 = atomikosProperties46.isThreadedTwoPhaseCommit();
        boolean boolean62 = atomikosProperties46.isEnableLogging();
        boolean boolean63 = properties20.containsKey((java.lang.Object) atomikosProperties46);
        java.util.Set<java.lang.Object> objSet64 = properties20.keySet();
        java.io.PrintStream printStream65 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.list(printStream65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objSet64);
    }

    @Test
    public void test6906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6906");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str5 = atomikosProperties0.logBaseName;
        long long6 = atomikosProperties0.getMaxTimeout();
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean8 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setEnableLogging(true);
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.lang.Object obj12 = properties11.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test6907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6907");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        boolean boolean29 = properties2.isEmpty();
        java.lang.Object obj30 = properties2.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties2.entrySet();
        java.lang.Object obj32 = properties2.clone();
        java.util.Set<java.lang.String> strSet33 = properties2.stringPropertyNames();
        java.lang.Object obj36 = properties2.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean37 = properties2.isEmpty();
        java.lang.String str39 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertNotNull(objEntrySet31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test6908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6908");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties4.maxActives = ' ';
        java.lang.String str25 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setMaxTimeout(1L);
        boolean boolean28 = atomikosProperties4.isThreadedTwoPhaseCommit();
        boolean boolean29 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.maxActives = 0;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test6909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6909");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str5 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog, tmlog=1}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test6910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6910");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        long long8 = atomikosProperties0.getMaxTimeout();
        long long9 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        long long13 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.maxActives = ' ';
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
    }

    @Test
    public void test6911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6911");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str5 = atomikosProperties0.logBaseName;
        long long6 = atomikosProperties0.getMaxTimeout();
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean8 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean11 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.Class<?> wildcardClass14 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test6912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6912");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setDefaultJtaTimeout(0L);
        int int10 = atomikosProperties0.maxActives;
        atomikosProperties0.setEnableLogging(false);
        long long13 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setDefaultJtaTimeout(1L);
        atomikosProperties0.maxActives = (byte) 100;
        boolean boolean18 = atomikosProperties0.enableLogging;
        java.lang.String str19 = atomikosProperties0.getTransactionManagerUniqueName();
        long long20 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}";
        java.lang.String str23 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}" + "'", str23, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
    }

    @Test
    public void test6913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6913");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long6 = atomikosProperties0.getMaxTimeout();
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        long long8 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.{}=false, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test6914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6914");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        long long48 = atomikosProperties36.defaultJtaTimeout;
        java.lang.String str49 = atomikosProperties36.service;
        java.lang.String str50 = atomikosProperties36.logBaseDir;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test6915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6915");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties2.propertyNames();
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.util.Collection<java.lang.Object> objCollection15 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        atomikosProperties16.forceShutdownOnVmExit = false;
        atomikosProperties16.threadedTwoPhaseCommit = false;
        long long22 = atomikosProperties16.getMaxTimeout();
        long long23 = atomikosProperties16.getCheckpointInterval();
        atomikosProperties16.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Object obj26 = properties2.get((java.lang.Object) atomikosProperties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        long long34 = atomikosProperties27.checkpointInterval;
        atomikosProperties27.setCheckpointInterval(10L);
        boolean boolean37 = atomikosProperties27.isForceShutdownOnVmExit();
        atomikosProperties27.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties27.setLogBaseName("hi!");
        boolean boolean42 = atomikosProperties27.isThreadedTwoPhaseCommit();
        boolean boolean43 = atomikosProperties27.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        java.lang.Object obj49 = properties46.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection50 = properties46.values();
        java.util.Collection<java.lang.Object> objCollection51 = properties46.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        properties54.clear();
        boolean boolean56 = properties54.isEmpty();
        java.lang.Object obj57 = properties54.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        properties60.clear();
        boolean boolean62 = properties60.isEmpty();
        java.util.Collection<java.lang.Object> objCollection63 = properties60.values();
        properties54.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties60);
        java.util.Enumeration<?> wildcardEnumeration65 = properties60.propertyNames();
        java.util.Properties properties66 = new java.util.Properties(properties60);
        properties46.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties66);
        java.lang.String str68 = properties46.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long71 = atomikosProperties70.checkpointInterval;
        java.util.Properties properties72 = atomikosProperties70.asProperties();
        properties72.clear();
        boolean boolean74 = properties72.isEmpty();
        java.lang.Object obj75 = properties72.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long77 = atomikosProperties76.checkpointInterval;
        java.util.Properties properties78 = atomikosProperties76.asProperties();
        properties78.clear();
        boolean boolean80 = properties78.isEmpty();
        java.util.Collection<java.lang.Object> objCollection81 = properties78.values();
        properties72.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties78);
        atomikosProperties27.set(properties46, "tmlog", (java.lang.Object) properties72);
        boolean boolean84 = properties2.contains((java.lang.Object) properties46);
        boolean boolean85 = properties46.isEmpty();
        java.io.PrintWriter printWriter86 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties46.list(printWriter86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 300000L + "'", long22 == 300000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(objCollection50);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{}");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objCollection63);
        org.junit.Assert.assertNotNull(wildcardEnumeration65);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str68, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 500L + "'", long71 == 500L);
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "{}");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 500L + "'", long77 == 500L);
        org.junit.Assert.assertNotNull(properties78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(objCollection81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test6916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6916");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        java.lang.String str9 = atomikosProperties0.service;
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str11 = atomikosProperties0.getService();
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        long long14 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
        org.junit.Assert.assertNotNull(properties15);
    }

    @Test
    public void test6917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6917");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.service = "{com.atomikos.icatch.tmlog=0.0}";
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.maxActives = 11;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test6918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6918");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        boolean boolean13 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str14 = atomikosProperties0.logBaseName;
        java.lang.String str15 = atomikosProperties0.service;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test6919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6919");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        long long11 = atomikosProperties0.checkpointInterval;
        long long12 = atomikosProperties0.getDefaultJtaTimeout();
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test6920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6920");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        java.lang.String str20 = atomikosProperties12.getTransactionManagerUniqueName();
        atomikosProperties12.setService("tmlog");
        long long23 = atomikosProperties12.getCheckpointInterval();
        long long24 = atomikosProperties12.maxTimeout;
        atomikosProperties12.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
        int int27 = atomikosProperties12.getMaxActives();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 300000L + "'", long24 == 300000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test6921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6921");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.forceShutdownOnVmExit;
        int int48 = atomikosProperties36.getMaxActives();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
    }

    @Test
    public void test6922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6922");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.save(outputStream8, "{com.atomikos.icatch.{}=false, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties7);
    }

    @Test
    public void test6923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6923");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval(1L);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setCheckpointInterval((long) (short) 0);
        java.lang.String str11 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
    }

    @Test
    public void test6924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6924");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str5 = atomikosProperties0.logBaseName;
        long long6 = atomikosProperties0.getMaxTimeout();
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.maxActives = 'a';
        boolean boolean10 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test6925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6925");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        boolean boolean25 = atomikosProperties15.serialJtaTransactions;
        java.lang.String str26 = atomikosProperties15.service;
        java.lang.String str27 = atomikosProperties15.service;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test6926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6926");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties29.defaultJtaTimeout = (byte) 10;
        atomikosProperties29.setService("hi!");
        atomikosProperties29.enableLogging = false;
        long long46 = atomikosProperties29.getDefaultJtaTimeout();
        java.lang.Class<?> wildcardClass47 = atomikosProperties29.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test6927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6927");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        long long4 = atomikosProperties0.getCheckpointInterval();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str10 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test6928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6928");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection6 = properties2.values();
        java.util.Collection<java.lang.Object> objCollection7 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        int int11 = properties10.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        atomikosProperties12.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        properties22.clear();
        java.util.Properties properties24 = new java.util.Properties(properties22);
        atomikosProperties12.set(properties22, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj30 = properties22.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet31 = properties22.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        boolean boolean36 = properties34.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        java.lang.Object obj42 = properties39.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.String str46 = atomikosProperties43.getLogBaseDir();
        atomikosProperties43.setLogBaseName("");
        java.lang.Object obj49 = properties34.replace((java.lang.Object) properties39, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        java.lang.Object obj53 = properties52.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str55 = atomikosProperties54.logBaseDir;
        java.lang.String str56 = atomikosProperties54.logBaseName;
        java.lang.String str57 = atomikosProperties54.getLogBaseDir();
        atomikosProperties54.setMaxActives((int) (byte) -1);
        boolean boolean60 = atomikosProperties54.isEnableLogging();
        atomikosProperties54.transactionManagerUniqueName = "";
        atomikosProperties54.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.logBaseDir;
        java.lang.String str67 = atomikosProperties65.logBaseName;
        java.lang.String str68 = atomikosProperties65.getLogBaseDir();
        atomikosProperties65.setMaxActives((int) (byte) -1);
        java.lang.String str71 = atomikosProperties65.getService();
        java.lang.Object obj72 = properties52.getOrDefault((java.lang.Object) atomikosProperties54, (java.lang.Object) atomikosProperties65);
        int int73 = properties52.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet74 = properties52.entrySet();
        java.lang.Object obj75 = properties34.remove((java.lang.Object) objEntrySet74);
        java.util.Properties properties76 = new java.util.Properties(properties34);
        java.lang.String str78 = properties76.getProperty("hi!");
        properties76.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet80 = properties76.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties81.setCheckpointInterval((long) 100);
        boolean boolean84 = atomikosProperties81.isForceShutdownOnVmExit();
        atomikosProperties81.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long87 = atomikosProperties81.getDefaultJtaTimeout();
        atomikosProperties81.checkpointInterval = (short) 10;
        atomikosProperties81.setLogBaseName("{}");
        boolean boolean92 = properties10.replace((java.lang.Object) properties22, (java.lang.Object) properties76, (java.lang.Object) atomikosProperties81);
        java.util.Set<java.lang.Object> objSet93 = properties76.keySet();
        boolean boolean94 = properties2.containsKey((java.lang.Object) objSet93);
        java.util.Collection<java.lang.Object> objCollection95 = properties2.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNotNull(obj53);
// flaky:         org.junit.Assert.assertEquals(obj53.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tmlog" + "'", str56, "tmlog");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertNotNull(objEntrySet74);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(objEntrySet80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 10000L + "'", long87 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objSet93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(objCollection95);
    }

    @Test
    public void test6929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6929");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        atomikosProperties19.maxActives = (byte) 0;
        atomikosProperties19.setTransactionManagerUniqueName("");
        java.lang.Object obj26 = properties9.get((java.lang.Object) atomikosProperties19);
        atomikosProperties19.logBaseDir = "{}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        boolean boolean33 = atomikosProperties29.isSerialJtaTransactions();
        atomikosProperties29.setEnableLogging(false);
        boolean boolean36 = atomikosProperties29.serialJtaTransactions;
        long long37 = atomikosProperties29.defaultJtaTimeout;
        java.lang.String str38 = atomikosProperties29.logBaseName;
        java.lang.Object obj39 = properties6.put((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties29);
        atomikosProperties29.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        int int42 = atomikosProperties29.maxActives;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
    }

    @Test
    public void test6930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6930");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = atomikosProperties5.isEnableLogging();
        atomikosProperties5.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties5.threadedTwoPhaseCommit;
        boolean boolean16 = atomikosProperties5.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test6931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6931");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        atomikosProperties29.setService("");
        boolean boolean34 = atomikosProperties29.threadedTwoPhaseCommit;
        java.lang.String str35 = atomikosProperties29.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.serialJtaTransactions = true;
        java.lang.String str43 = atomikosProperties36.getService();
        java.lang.Object obj44 = properties2.putIfAbsent((java.lang.Object) str35, (java.lang.Object) atomikosProperties36);
        atomikosProperties36.setSerialJtaTransactions(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test6932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6932");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        boolean boolean48 = atomikosProperties45.isForceShutdownOnVmExit();
        atomikosProperties45.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long51 = atomikosProperties45.getDefaultJtaTimeout();
        long long52 = atomikosProperties45.getMaxTimeout();
        atomikosProperties45.logBaseName = "tmlog";
        long long55 = atomikosProperties45.getDefaultJtaTimeout();
        atomikosProperties45.maxActives = 9;
        boolean boolean58 = properties2.containsKey((java.lang.Object) atomikosProperties45);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet59 = properties2.entrySet();
        int int60 = properties2.size();
        properties2.clear();
        java.lang.Object obj62 = properties2.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet63 = properties2.entrySet();
        java.util.Set<java.lang.Object> objSet64 = properties2.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objEntrySet59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertNotNull(objEntrySet63);
        org.junit.Assert.assertNotNull(objSet64);
    }

    @Test
    public void test6933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6933");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        java.lang.String str29 = atomikosProperties13.transactionManagerUniqueName;
        boolean boolean30 = atomikosProperties13.enableLogging;
        atomikosProperties13.setEnableLogging(false);
        atomikosProperties13.setCheckpointInterval((long) (short) 0);
        atomikosProperties13.maxTimeout = (byte) 10;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test6934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6934");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection6 = properties2.values();
        java.util.Collection<java.lang.Object> objCollection7 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        boolean boolean12 = properties10.isEmpty();
        java.lang.Object obj13 = properties10.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Enumeration<?> wildcardEnumeration21 = properties16.propertyNames();
        java.util.Properties properties22 = new java.util.Properties(properties16);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        int int24 = properties2.size();
        boolean boolean25 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setMaxActives((int) (byte) -1);
        java.lang.String str32 = atomikosProperties26.getService();
        atomikosProperties26.setDefaultJtaTimeout((long) (-1));
        int int35 = atomikosProperties26.maxActives;
        long long36 = atomikosProperties26.maxTimeout;
        atomikosProperties26.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        atomikosProperties43.setTransactionManagerUniqueName("");
        int int47 = atomikosProperties43.getMaxActives();
        boolean boolean48 = properties41.containsValue((java.lang.Object) int47);
        java.lang.Object obj51 = properties41.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties52 = new java.util.Properties(properties41);
        int int53 = properties41.size();
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties41.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str56 = atomikosProperties55.logBaseDir;
        java.lang.String str57 = atomikosProperties55.logBaseName;
        java.lang.String str58 = atomikosProperties55.getLogBaseDir();
        atomikosProperties55.setMaxActives((int) (byte) -1);
        boolean boolean61 = atomikosProperties55.isEnableLogging();
        long long62 = atomikosProperties55.checkpointInterval;
        atomikosProperties55.setCheckpointInterval(10L);
        boolean boolean65 = atomikosProperties55.isForceShutdownOnVmExit();
        atomikosProperties55.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean68 = atomikosProperties55.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        java.lang.String str71 = atomikosProperties69.logBaseName;
        java.lang.String str72 = atomikosProperties69.getLogBaseDir();
        boolean boolean73 = atomikosProperties69.isSerialJtaTransactions();
        atomikosProperties69.setEnableLogging(false);
        boolean boolean76 = atomikosProperties69.serialJtaTransactions;
        long long77 = atomikosProperties69.defaultJtaTimeout;
        java.lang.String str78 = atomikosProperties69.logBaseName;
        java.lang.String str79 = atomikosProperties69.getLogBaseName();
        atomikosProperties69.setLogBaseName("");
        java.lang.Object obj82 = properties41.put((java.lang.Object) boolean68, (java.lang.Object) atomikosProperties69);
        java.util.Enumeration<java.lang.Object> objEnumeration83 = properties41.elements();
        java.util.Collection<java.lang.Object> objCollection84 = properties41.values();
        java.lang.Object obj85 = properties2.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) properties41);
        boolean boolean86 = atomikosProperties26.serialJtaTransactions;
        atomikosProperties26.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        java.lang.String str89 = atomikosProperties26.service;
        atomikosProperties26.checkpointInterval = (byte) 10;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(wildcardEnumeration21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objEnumeration54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tmlog" + "'", str57, "tmlog");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tmlog" + "'", str71, "tmlog");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(objEnumeration83);
        org.junit.Assert.assertNotNull(objCollection84);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test6935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6935");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Set<java.lang.String> strSet14 = properties2.stringPropertyNames();
        java.util.Set<java.lang.String> strSet15 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseName();
        int int20 = atomikosProperties16.getMaxActives();
        atomikosProperties16.checkpointInterval = '#';
        atomikosProperties16.setLogBaseDir("tmlog");
        atomikosProperties16.setTransactionManagerUniqueName("{}");
        long long27 = atomikosProperties16.getMaxTimeout();
        java.lang.Object obj28 = properties2.get((java.lang.Object) long27);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 300000L + "'", long27 == 300000L);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test6936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6936");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection6 = properties2.values();
        java.util.Collection<java.lang.Object> objCollection7 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        boolean boolean12 = properties10.isEmpty();
        java.lang.Object obj13 = properties10.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Enumeration<?> wildcardEnumeration21 = properties16.propertyNames();
        java.util.Properties properties22 = new java.util.Properties(properties16);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Properties properties24 = new java.util.Properties(properties22);
        java.lang.String str25 = properties22.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(wildcardEnumeration21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{}" + "'", str25, "{}");
    }

    @Test
    public void test6937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6937");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        atomikosProperties0.serialJtaTransactions = false;
        long long12 = atomikosProperties0.defaultJtaTimeout;
        long long13 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties14.store(writer15, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertNotNull(properties14);
    }

    @Test
    public void test6938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6938");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        int int6 = atomikosProperties0.maxActives;
        boolean boolean7 = atomikosProperties0.serialJtaTransactions;
        int int8 = atomikosProperties0.getMaxActives();
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test6939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6939");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.tmlog=0.0}";
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        boolean boolean11 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test6940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6940");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        long long14 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean15 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.service = "{com.atomikos.icatch.{}=false, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 50L + "'", long14 == 50L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test6941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6941");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        boolean boolean21 = properties2.containsValue((java.lang.Object) 100.0d);
        java.lang.String str23 = properties2.getProperty("hi!");
        java.lang.String str24 = properties2.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
    }

    @Test
    public void test6942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6942");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        atomikosProperties12.logBaseDir = "{}";
        atomikosProperties12.maxActives = (-1);
        atomikosProperties12.enableLogging = false;
        java.lang.String str26 = atomikosProperties12.getLogBaseName();
        atomikosProperties12.threadedTwoPhaseCommit = true;
        atomikosProperties12.service = "{com.atomikos.icatch.tmlog=0.0}";
        atomikosProperties12.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
    }

    @Test
    public void test6943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6943");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        atomikosProperties9.setTransactionManagerUniqueName("");
        int int13 = atomikosProperties9.getMaxActives();
        boolean boolean14 = properties7.containsValue((java.lang.Object) int13);
        java.lang.Object obj17 = properties7.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties18 = new java.util.Properties(properties7);
        int int19 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        properties22.clear();
        boolean boolean24 = properties22.isEmpty();
        java.lang.Object obj25 = properties22.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        java.lang.Object obj30 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        boolean boolean37 = atomikosProperties31.isEnableLogging();
        atomikosProperties31.transactionManagerUniqueName = "";
        atomikosProperties31.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setMaxActives((int) (byte) -1);
        java.lang.String str48 = atomikosProperties42.getService();
        java.lang.Object obj49 = properties29.getOrDefault((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        int int52 = atomikosProperties50.getMaxActives();
        java.lang.String str53 = atomikosProperties50.logBaseDir;
        java.lang.Object obj55 = properties29.putIfAbsent((java.lang.Object) atomikosProperties50, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        java.lang.String str58 = atomikosProperties56.logBaseName;
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        boolean boolean60 = atomikosProperties56.isSerialJtaTransactions();
        atomikosProperties56.setEnableLogging(false);
        boolean boolean63 = properties22.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties56);
        atomikosProperties56.logBaseName = "{}";
        long long66 = atomikosProperties56.getDefaultJtaTimeout();
        atomikosProperties56.setThreadedTwoPhaseCommit(true);
        boolean boolean69 = properties2.replace((java.lang.Object) 100L, (java.lang.Object) properties7, (java.lang.Object) true);
        java.util.Properties properties70 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setCheckpointInterval((long) 100);
        boolean boolean74 = atomikosProperties71.isForceShutdownOnVmExit();
        atomikosProperties71.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long77 = atomikosProperties71.getDefaultJtaTimeout();
        long long78 = atomikosProperties71.getMaxTimeout();
        long long79 = atomikosProperties71.getMaxTimeout();
        boolean boolean80 = properties7.containsValue((java.lang.Object) long79);
        java.util.Enumeration<java.lang.Object> objEnumeration81 = properties7.keys();
        properties7.clear();
        java.lang.Object obj83 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = properties7.remove(obj83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 300000L + "'", long78 == 300000L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 300000L + "'", long79 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objEnumeration81);
    }

    @Test
    public void test6944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6944");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.getOrDefault((java.lang.Object) 0.0f, (java.lang.Object) 0.0d);
        java.util.Enumeration<?> wildcardEnumeration4 = properties0.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        int int7 = atomikosProperties5.getMaxActives();
        java.lang.String str8 = atomikosProperties5.transactionManagerUniqueName;
        long long9 = atomikosProperties5.getCheckpointInterval();
        java.util.Properties properties10 = atomikosProperties5.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        atomikosProperties11.setService("");
        java.util.Properties properties16 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        properties20.clear();
        boolean boolean22 = properties20.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        java.lang.String str28 = atomikosProperties23.transactionManagerUniqueName;
        boolean boolean29 = properties20.containsValue((java.lang.Object) atomikosProperties23);
        boolean boolean30 = atomikosProperties23.forceShutdownOnVmExit;
        atomikosProperties11.set(properties16, "{}", (java.lang.Object) boolean30);
        java.util.Properties properties32 = new java.util.Properties(properties16);
        java.util.Collection<java.lang.Object> objCollection33 = properties32.values();
        boolean boolean34 = properties10.containsValue((java.lang.Object) properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        long long40 = atomikosProperties35.checkpointInterval;
        atomikosProperties35.setMaxTimeout((long) (byte) 10);
        long long43 = atomikosProperties35.maxTimeout;
        boolean boolean44 = atomikosProperties35.isForceShutdownOnVmExit();
        boolean boolean45 = atomikosProperties35.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        java.lang.String str52 = atomikosProperties46.getService();
        long long53 = atomikosProperties46.defaultJtaTimeout;
        java.lang.String str54 = atomikosProperties46.logBaseName;
        java.lang.String str55 = atomikosProperties46.logBaseDir;
        atomikosProperties46.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean58 = atomikosProperties46.threadedTwoPhaseCommit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.transactionManagerUniqueName = "{}";
        boolean boolean62 = properties10.replace((java.lang.Object) boolean45, (java.lang.Object) boolean58, (java.lang.Object) atomikosProperties59);
        java.util.Collection<java.lang.Object> objCollection63 = properties10.values();
        boolean boolean64 = properties0.containsValue((java.lang.Object) objCollection63);
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 0.0d + "'", obj3, 0.0d);
        org.junit.Assert.assertNotNull(wildcardEnumeration4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10000L + "'", long53 == 10000L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objCollection63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test6945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6945");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        long long11 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
    }

    @Test
    public void test6946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6946");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        java.lang.String str12 = atomikosProperties0.getService();
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setLogBaseName("{=}");
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties17);
    }

    @Test
    public void test6947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6947");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        boolean boolean20 = properties8.equals((java.lang.Object) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        properties23.clear();
        boolean boolean25 = properties23.isEmpty();
        java.lang.Object obj26 = properties23.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        atomikosProperties28.forceShutdownOnVmExit = false;
        atomikosProperties28.setTransactionManagerUniqueName("");
        java.lang.Object obj34 = properties23.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        boolean boolean40 = properties38.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        java.lang.Object obj46 = properties43.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setLogBaseName("");
        java.lang.Object obj53 = properties38.replace((java.lang.Object) properties43, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        java.util.Properties properties56 = atomikosProperties54.asProperties();
        java.lang.Object obj57 = properties56.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.logBaseDir;
        java.lang.String str60 = atomikosProperties58.logBaseName;
        java.lang.String str61 = atomikosProperties58.getLogBaseDir();
        atomikosProperties58.setMaxActives((int) (byte) -1);
        boolean boolean64 = atomikosProperties58.isEnableLogging();
        atomikosProperties58.transactionManagerUniqueName = "";
        atomikosProperties58.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        java.lang.String str71 = atomikosProperties69.logBaseName;
        java.lang.String str72 = atomikosProperties69.getLogBaseDir();
        atomikosProperties69.setMaxActives((int) (byte) -1);
        java.lang.String str75 = atomikosProperties69.getService();
        java.lang.Object obj76 = properties56.getOrDefault((java.lang.Object) atomikosProperties58, (java.lang.Object) atomikosProperties69);
        boolean boolean77 = properties23.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties38, (java.lang.Object) atomikosProperties69);
        java.util.Collection<java.lang.Object> objCollection78 = properties38.values();
        java.lang.Object obj79 = properties38.clone();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        java.lang.String str83 = properties38.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}", "{=}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{}");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertNotNull(obj57);
// flaky:         org.junit.Assert.assertEquals(obj57.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tmlog" + "'", str60, "tmlog");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tmlog" + "'", str71, "tmlog");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objCollection78);
        org.junit.Assert.assertNotNull(obj79);
// flaky:         org.junit.Assert.assertEquals(obj79.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "{=}" + "'", str83, "{=}");
    }

    @Test
    public void test6948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6948");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.lang.String str15 = properties14.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        java.lang.Object obj19 = properties18.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.logBaseDir;
        java.lang.String str22 = atomikosProperties20.logBaseName;
        java.lang.String str23 = atomikosProperties20.getLogBaseDir();
        atomikosProperties20.setMaxActives((int) (byte) -1);
        boolean boolean26 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.transactionManagerUniqueName = "";
        atomikosProperties20.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        java.lang.String str37 = atomikosProperties31.getService();
        java.lang.Object obj38 = properties18.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties31);
        int int39 = properties18.size();
        java.lang.String str40 = properties18.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties18.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        atomikosProperties42.setTransactionManagerUniqueName("");
        int int46 = atomikosProperties42.getMaxActives();
        java.lang.String str47 = atomikosProperties42.transactionManagerUniqueName;
        atomikosProperties42.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        properties52.clear();
        java.util.Properties properties54 = new java.util.Properties(properties52);
        atomikosProperties42.set(properties52, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj60 = properties52.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet61 = properties52.stringPropertyNames();
        java.lang.String str63 = properties52.getProperty("hi!");
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        java.util.Set<java.lang.String> strSet65 = properties18.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        properties68.clear();
        boolean boolean70 = properties68.isEmpty();
        java.lang.Object obj71 = properties68.clone();
        java.util.Set<java.lang.Object> objSet72 = properties68.keySet();
        java.lang.Object obj73 = properties14.replace((java.lang.Object) properties18, (java.lang.Object) objSet72);
        boolean boolean74 = properties18.isEmpty();
        java.io.OutputStream outputStream75 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.storeToXML(outputStream75, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str40, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 50 + "'", int46 == 50);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "{}");
        org.junit.Assert.assertNotNull(objSet72);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test6949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6949");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setDefaultJtaTimeout((long) 50);
        boolean boolean16 = properties9.contains((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        atomikosProperties17.setService("");
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        boolean boolean36 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties17.set(properties22, "{}", (java.lang.Object) boolean36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        boolean boolean42 = properties40.containsValue((java.lang.Object) 100L);
        java.lang.String str43 = properties40.toString();
        java.lang.Object obj44 = properties9.put((java.lang.Object) "{}", (java.lang.Object) properties40);
        java.util.Properties properties45 = new java.util.Properties(properties9);
        int int46 = properties9.size();
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties9.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.service;
        atomikosProperties48.transactionManagerUniqueName = "{com.atomikos.icatch.tmlog=0.0}";
        boolean boolean54 = properties9.equals((java.lang.Object) "{com.atomikos.icatch.tmlog=0.0}");
        java.lang.Object obj55 = properties9.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 11 + "'", int46 == 11);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj55);
// flaky:         org.junit.Assert.assertEquals(obj55.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test6950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6950");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        atomikosProperties14.setMaxActives((int) (byte) -1);
        java.lang.String str20 = atomikosProperties14.getService();
        long long21 = atomikosProperties14.defaultJtaTimeout;
        java.lang.String str22 = atomikosProperties14.logBaseName;
        java.util.Properties properties23 = atomikosProperties14.asProperties();
        atomikosProperties14.setMaxActives(0);
        atomikosProperties14.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties14.defaultJtaTimeout = (short) 0;
        atomikosProperties14.maxTimeout = 100L;
        boolean boolean32 = properties13.contains((java.lang.Object) atomikosProperties14);
        boolean boolean33 = atomikosProperties14.isEnableLogging();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test6951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6951");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str12 = atomikosProperties0.transactionManagerUniqueName;
        long long13 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = 50L;
        boolean boolean16 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test6952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6952");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        atomikosProperties12.logBaseDir = "{}";
        atomikosProperties12.maxActives = (-1);
        atomikosProperties12.setTransactionManagerUniqueName("tmlog");
        atomikosProperties12.setSerialJtaTransactions(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test6953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6953");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean15 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.maxActives = 100;
        atomikosProperties0.checkpointInterval = 1;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test6954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6954");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setTransactionManagerUniqueName("");
        atomikosProperties6.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass16 = atomikosProperties6.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        int int19 = atomikosProperties17.getMaxActives();
        java.lang.String str20 = atomikosProperties17.transactionManagerUniqueName;
        long long21 = atomikosProperties17.getCheckpointInterval();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        atomikosProperties27.transactionManagerUniqueName = "";
        atomikosProperties27.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        java.lang.Object obj45 = properties25.getOrDefault((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        int int48 = atomikosProperties46.getMaxActives();
        java.lang.String str49 = atomikosProperties46.logBaseDir;
        java.lang.Object obj51 = properties25.putIfAbsent((java.lang.Object) atomikosProperties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        atomikosProperties52.setService("");
        boolean boolean57 = atomikosProperties52.threadedTwoPhaseCommit;
        java.lang.String str58 = atomikosProperties52.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        boolean boolean63 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.serialJtaTransactions = true;
        java.lang.String str66 = atomikosProperties59.getService();
        java.lang.Object obj67 = properties25.putIfAbsent((java.lang.Object) str58, (java.lang.Object) atomikosProperties59);
        boolean boolean68 = properties3.replace((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties59);
        atomikosProperties17.setSerialJtaTransactions(true);
        atomikosProperties17.setService("tmlog");
        java.lang.String str73 = atomikosProperties17.transactionManagerUniqueName;
        java.lang.String str74 = atomikosProperties17.transactionManagerUniqueName;
        atomikosProperties17.setLogBaseDir("tmlog");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test6955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6955");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        boolean boolean29 = properties2.isEmpty();
        java.lang.Object obj30 = properties2.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setCheckpointInterval((long) 100);
        boolean boolean35 = atomikosProperties32.isForceShutdownOnVmExit();
        atomikosProperties32.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties32.service = "";
        atomikosProperties32.threadedTwoPhaseCommit = true;
        atomikosProperties32.service = "{}";
        java.lang.String str44 = atomikosProperties32.logBaseName;
        boolean boolean45 = atomikosProperties32.isThreadedTwoPhaseCommit();
        boolean boolean46 = properties2.containsValue((java.lang.Object) atomikosProperties32);
        atomikosProperties32.setLogBaseDir("{com.atomikos.icatch.tmlog=0.0}");
        atomikosProperties32.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Class<?> wildcardClass51 = atomikosProperties32.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertNotNull(objEntrySet31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test6956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6956");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        boolean boolean34 = atomikosProperties32.isSerialJtaTransactions();
        java.lang.Object obj35 = properties7.get((java.lang.Object) atomikosProperties32);
        long long36 = atomikosProperties32.getDefaultJtaTimeout();
        int int37 = atomikosProperties32.getMaxActives();
        long long38 = atomikosProperties32.checkpointInterval;
        java.lang.String str39 = atomikosProperties32.logBaseDir;
        atomikosProperties32.transactionManagerUniqueName = "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test6957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6957");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        java.util.Properties properties14 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        properties17.clear();
        java.util.Properties properties19 = new java.util.Properties(properties17);
        java.lang.Object obj22 = properties19.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str23 = properties19.toString();
        java.lang.Object obj26 = properties19.setProperty("tmlog", "");
        boolean boolean27 = properties8.equals(obj26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        atomikosProperties28.setTransactionManagerUniqueName("");
        int int32 = atomikosProperties28.getMaxActives();
        atomikosProperties28.logBaseName = "tmlog";
        atomikosProperties28.setEnableLogging(true);
        long long37 = atomikosProperties28.maxTimeout;
        int int38 = atomikosProperties28.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        atomikosProperties39.setTransactionManagerUniqueName("");
        int int43 = atomikosProperties39.getMaxActives();
        java.lang.String str44 = atomikosProperties39.transactionManagerUniqueName;
        atomikosProperties39.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        properties49.clear();
        java.util.Properties properties51 = new java.util.Properties(properties49);
        atomikosProperties39.set(properties49, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj57 = properties49.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet58 = properties49.stringPropertyNames();
        java.lang.Object obj59 = properties8.getOrDefault((java.lang.Object) atomikosProperties28, (java.lang.Object) properties49);
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties49.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.checkpointInterval;
        java.util.Properties properties63 = atomikosProperties61.asProperties();
        java.lang.Object obj64 = properties63.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.logBaseDir;
        java.lang.String str67 = atomikosProperties65.logBaseName;
        java.lang.String str68 = atomikosProperties65.getLogBaseDir();
        atomikosProperties65.setMaxActives((int) (byte) -1);
        boolean boolean71 = atomikosProperties65.isEnableLogging();
        atomikosProperties65.transactionManagerUniqueName = "";
        atomikosProperties65.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str77 = atomikosProperties76.logBaseDir;
        java.lang.String str78 = atomikosProperties76.logBaseName;
        java.lang.String str79 = atomikosProperties76.getLogBaseDir();
        atomikosProperties76.setMaxActives((int) (byte) -1);
        java.lang.String str82 = atomikosProperties76.getService();
        java.lang.Object obj83 = properties63.getOrDefault((java.lang.Object) atomikosProperties65, (java.lang.Object) atomikosProperties76);
        java.lang.String str84 = properties63.toString();
        java.lang.Object obj87 = properties63.setProperty("tmlog", "{}");
        java.lang.Object obj88 = properties63.clone();
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties63);
        java.lang.Object obj92 = properties63.setProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj22, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(obj59);
// flaky:         org.junit.Assert.assertEquals(obj59.toString(), "{com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNotNull(obj64);
// flaky:         org.junit.Assert.assertEquals(obj64.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(obj83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str84, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(obj88);
// flaky:         org.junit.Assert.assertEquals(obj88.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test6958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6958");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.serialJtaTransactions = false;
        java.lang.String str8 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setSerialJtaTransactions(true);
        boolean boolean11 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test6959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6959");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties4.maxActives = ' ';
        java.lang.String str25 = atomikosProperties4.service;
        atomikosProperties4.serialJtaTransactions = false;
        long long28 = atomikosProperties4.checkpointInterval;
        boolean boolean29 = atomikosProperties4.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test6960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6960");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) -1);
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        properties19.clear();
        java.util.Properties properties21 = new java.util.Properties(properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        atomikosProperties22.setTransactionManagerUniqueName("");
        int int26 = atomikosProperties22.getMaxActives();
        atomikosProperties22.logBaseName = "tmlog";
        int int29 = atomikosProperties22.maxActives;
        boolean boolean30 = properties19.containsValue((java.lang.Object) int29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        java.lang.String str34 = atomikosProperties32.logBaseName;
        atomikosProperties32.setThreadedTwoPhaseCommit(false);
        boolean boolean37 = properties19.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        properties19.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet39 = properties19.entrySet();
        java.util.Set<java.lang.Object> objSet40 = properties19.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties19.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet42 = properties19.entrySet();
        properties19.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        boolean boolean49 = properties47.containsValue((java.lang.Object) 100L);
        java.lang.String str50 = properties47.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties47.elements();
        boolean boolean52 = properties47.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setCheckpointInterval((long) 100);
        boolean boolean56 = atomikosProperties53.isForceShutdownOnVmExit();
        atomikosProperties53.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties53.service = "";
        atomikosProperties53.setTransactionManagerUniqueName("{}");
        java.lang.Object obj63 = properties47.get((java.lang.Object) "{}");
        java.lang.Object obj64 = properties47.clone();
        atomikosProperties0.set(properties19, "hi!", (java.lang.Object) properties47);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objEntrySet39);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNotNull(objEntrySet42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str50, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(obj64);
// flaky:         org.junit.Assert.assertEquals(obj64.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test6961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6961");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Set<java.lang.Object> objSet20 = properties19.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.transactionManagerUniqueName;
        boolean boolean24 = atomikosProperties21.enableLogging;
        boolean boolean25 = atomikosProperties21.isThreadedTwoPhaseCommit();
        java.lang.Object obj26 = properties19.remove((java.lang.Object) boolean25);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objSet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test6962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6962");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.service = "";
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
    }

    @Test
    public void test6963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6963");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        java.lang.String str46 = atomikosProperties0.logBaseDir;
        java.lang.String str47 = atomikosProperties0.getService();
        boolean boolean48 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setMaxActives(3);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test6964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6964");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        boolean boolean21 = properties2.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        java.util.Set<java.lang.Object> objSet28 = properties24.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.threadedTwoPhaseCommit = false;
        int int39 = atomikosProperties29.maxActives;
        atomikosProperties29.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj42 = properties2.getOrDefault((java.lang.Object) properties24, (java.lang.Object) atomikosProperties29);
        boolean boolean43 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties2.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        properties47.clear();
        java.util.Properties properties49 = new java.util.Properties(properties47);
        int int50 = properties49.size();
        boolean boolean51 = properties49.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        java.lang.String str55 = atomikosProperties52.getLogBaseDir();
        long long56 = atomikosProperties52.getDefaultJtaTimeout();
        atomikosProperties52.defaultJtaTimeout = 50;
        java.lang.String str59 = atomikosProperties52.getTransactionManagerUniqueName();
        atomikosProperties52.threadedTwoPhaseCommit = false;
        atomikosProperties52.setLogBaseDir("{}");
        atomikosProperties52.setLogBaseDir("{}");
        boolean boolean66 = atomikosProperties52.threadedTwoPhaseCommit;
        java.util.Properties properties67 = atomikosProperties52.asProperties();
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties67);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties67);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties70.setCheckpointInterval((long) 100);
        boolean boolean73 = atomikosProperties70.isForceShutdownOnVmExit();
        atomikosProperties70.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long76 = atomikosProperties70.getDefaultJtaTimeout();
        long long77 = atomikosProperties70.getMaxTimeout();
        long long78 = atomikosProperties70.getMaxTimeout();
        long long79 = atomikosProperties70.checkpointInterval;
        java.lang.String str80 = atomikosProperties70.transactionManagerUniqueName;
        java.lang.String str81 = atomikosProperties70.getTransactionManagerUniqueName();
        atomikosProperties70.setDefaultJtaTimeout((long) (short) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties84 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long85 = atomikosProperties84.checkpointInterval;
        java.util.Properties properties86 = atomikosProperties84.asProperties();
        java.util.Set<java.lang.Object> objSet87 = properties86.keySet();
        java.util.Properties properties88 = new java.util.Properties(properties86);
        java.lang.String str90 = properties88.getProperty("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = properties2.remove((java.lang.Object) atomikosProperties70, (java.lang.Object) str90);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objEnumeration44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10000L + "'", long76 == 10000L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 300000L + "'", long77 == 300000L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 300000L + "'", long78 == 300000L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 100L + "'", long79 == 100L);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 500L + "'", long85 == 500L);
        org.junit.Assert.assertNotNull(properties86);
        org.junit.Assert.assertNotNull(objSet87);
        org.junit.Assert.assertNull(str90);
    }

    @Test
    public void test6965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6965");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.lang.Object obj17 = properties14.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test6966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6966");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.serialJtaTransactions = true;
        boolean boolean9 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean12 = atomikosProperties0.enableLogging;
        java.lang.String str13 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
    }

    @Test
    public void test6967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6967");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties2.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet46 = properties2.entrySet();
        java.util.Properties properties47 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        boolean boolean54 = atomikosProperties48.isEnableLogging();
        long long55 = atomikosProperties48.checkpointInterval;
        atomikosProperties48.setCheckpointInterval(10L);
        boolean boolean58 = atomikosProperties48.isForceShutdownOnVmExit();
        atomikosProperties48.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean61 = atomikosProperties48.forceShutdownOnVmExit;
        atomikosProperties48.setEnableLogging(false);
        java.lang.Object obj64 = properties47.get((java.lang.Object) atomikosProperties48);
        boolean boolean65 = properties47.isEmpty();
        java.io.PrintWriter printWriter66 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties47.list(printWriter66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objEntrySet46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test6968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6968");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        properties13.clear();
        boolean boolean15 = properties13.isEmpty();
        java.util.Collection<java.lang.Object> objCollection16 = properties13.values();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Enumeration<?> wildcardEnumeration18 = properties7.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties7.keys();
        java.util.Collection<java.lang.Object> objCollection20 = properties7.values();
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setCheckpointInterval((long) 100);
        atomikosProperties22.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        properties29.clear();
        boolean boolean31 = properties29.isEmpty();
        java.lang.Object obj32 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        java.lang.Object obj37 = properties36.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        boolean boolean44 = atomikosProperties38.isEnableLogging();
        atomikosProperties38.transactionManagerUniqueName = "";
        atomikosProperties38.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        java.lang.String str55 = atomikosProperties49.getService();
        java.lang.Object obj56 = properties36.getOrDefault((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        int int59 = atomikosProperties57.getMaxActives();
        java.lang.String str60 = atomikosProperties57.logBaseDir;
        java.lang.Object obj62 = properties36.putIfAbsent((java.lang.Object) atomikosProperties57, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        boolean boolean67 = atomikosProperties63.isSerialJtaTransactions();
        atomikosProperties63.setEnableLogging(false);
        boolean boolean70 = properties29.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long72 = atomikosProperties71.checkpointInterval;
        java.util.Properties properties73 = atomikosProperties71.asProperties();
        properties73.clear();
        java.util.Properties properties75 = new java.util.Properties(properties73);
        java.lang.Object obj78 = properties75.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str79 = properties75.toString();
        boolean boolean80 = properties29.containsValue((java.lang.Object) properties75);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long83 = atomikosProperties82.checkpointInterval;
        boolean boolean84 = atomikosProperties82.isSerialJtaTransactions();
        atomikosProperties82.transactionManagerUniqueName = "";
        atomikosProperties22.set(properties75, "{}", (java.lang.Object) "");
        int int88 = properties75.size();
        java.util.Enumeration<java.lang.Object> objEnumeration89 = properties75.keys();
        java.util.Enumeration<?> wildcardEnumeration90 = properties75.propertyNames();
        java.lang.Object obj91 = properties4.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) properties75);
        java.io.Writer writer92 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties75.store(writer92, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(wildcardEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 500L + "'", long72 == 500L);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertEquals("'" + obj78 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj78, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{}" + "'", str79, "{}");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 500L + "'", long83 == 500L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(objEnumeration89);
        org.junit.Assert.assertNotNull(wildcardEnumeration90);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test6969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6969");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        int int9 = atomikosProperties0.maxActives;
        long long10 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setEnableLogging(false);
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        java.util.Properties properties16 = new java.util.Properties(properties15);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNotNull(properties15);
    }

    @Test
    public void test6970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6970");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        int int5 = properties4.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        boolean boolean12 = properties4.containsKey((java.lang.Object) objCollection11);
        java.util.Properties properties13 = new java.util.Properties(properties4);
        java.io.Writer writer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.store(writer14, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6971");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties2.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet46 = properties2.entrySet();
        java.util.Properties properties47 = new java.util.Properties(properties2);
        java.util.Set<java.lang.String> strSet48 = properties2.stringPropertyNames();
        java.io.PrintStream printStream49 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printStream49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objEntrySet46);
        org.junit.Assert.assertNotNull(strSet48);
    }

    @Test
    public void test6972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6972");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str5 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setMaxTimeout((long) 1);
        atomikosProperties0.defaultJtaTimeout = (byte) 10;
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.hi!=0, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test6973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6973");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties2.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties2.entrySet();
        java.lang.String str22 = properties2.getProperty("hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet23 = properties2.entrySet();
        java.util.Collection<java.lang.Object> objCollection24 = properties2.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(objEntrySet23);
        org.junit.Assert.assertNotNull(objCollection24);
    }

    @Test
    public void test6974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6974");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        int int5 = properties4.size();
        boolean boolean6 = properties4.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.logBaseDir;
        java.lang.String str9 = atomikosProperties7.logBaseName;
        java.lang.String str10 = atomikosProperties7.getLogBaseDir();
        atomikosProperties7.setMaxActives((int) (byte) -1);
        java.lang.String str13 = atomikosProperties7.getService();
        atomikosProperties7.setEnableLogging(false);
        java.lang.Object obj16 = properties4.remove((java.lang.Object) false);
        java.io.InputStream inputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.loadFromXML(inputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test6975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6975");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.lang.Object obj13 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean23 = properties21.containsValue((java.lang.Object) 100L);
        boolean boolean24 = properties16.contains((java.lang.Object) properties21);
        java.util.Set<java.lang.String> strSet25 = properties21.stringPropertyNames();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj30 = properties27.getOrDefault((java.lang.Object) 0.0f, (java.lang.Object) 0.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        boolean boolean35 = properties33.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        java.lang.Object obj41 = properties38.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setLogBaseName("");
        java.lang.Object obj48 = properties33.replace((java.lang.Object) properties38, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        atomikosProperties50.setMaxActives((int) (byte) -1);
        boolean boolean56 = atomikosProperties50.isEnableLogging();
        atomikosProperties50.transactionManagerUniqueName = "";
        atomikosProperties50.setEnableLogging(false);
        boolean boolean61 = atomikosProperties50.isEnableLogging();
        boolean boolean62 = properties38.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean61);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet63 = properties38.entrySet();
        boolean boolean64 = properties27.containsValue((java.lang.Object) objEntrySet63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.logBaseDir;
        java.lang.String str67 = atomikosProperties65.logBaseName;
        java.lang.String str68 = atomikosProperties65.getLogBaseDir();
        boolean boolean69 = atomikosProperties65.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long71 = atomikosProperties70.checkpointInterval;
        int int72 = atomikosProperties70.getMaxActives();
        atomikosProperties70.setCheckpointInterval(1L);
        atomikosProperties70.setService("{}");
        atomikosProperties70.logBaseName = "tmlog";
        atomikosProperties70.enableLogging = false;
        atomikosProperties70.setService("{com.atomikos.icatch.tmlog=0.0}");
        boolean boolean83 = properties21.replace((java.lang.Object) boolean64, (java.lang.Object) atomikosProperties65, (java.lang.Object) atomikosProperties70);
        java.lang.String str84 = atomikosProperties65.transactionManagerUniqueName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + 0.0d + "'", obj30, 0.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objEntrySet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 500L + "'", long71 == 500L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test6976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6976");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setMaxActives((int) (byte) 0);
        atomikosProperties0.service = "hi!";
        boolean boolean13 = atomikosProperties0.serialJtaTransactions;
        int int14 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test6977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6977");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        java.util.Properties properties16 = new java.util.Properties(properties14);
        java.lang.Object obj19 = properties16.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str20 = properties16.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        boolean boolean23 = atomikosProperties21.isSerialJtaTransactions();
        atomikosProperties21.maxTimeout = 100;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.Object obj27 = properties2.replace((java.lang.Object) properties16, (java.lang.Object) int26);
        java.util.Properties properties28 = new java.util.Properties(properties2);
        java.io.OutputStream outputStream29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream29, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test6978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6978");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setDefaultJtaTimeout((long) 50);
        boolean boolean16 = properties9.contains((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        atomikosProperties17.setService("");
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        boolean boolean36 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties17.set(properties22, "{}", (java.lang.Object) boolean36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        boolean boolean42 = properties40.containsValue((java.lang.Object) 100L);
        java.lang.String str43 = properties40.toString();
        java.lang.Object obj44 = properties9.put((java.lang.Object) "{}", (java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        java.lang.Object obj48 = properties47.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        boolean boolean55 = atomikosProperties49.isEnableLogging();
        atomikosProperties49.transactionManagerUniqueName = "";
        atomikosProperties49.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        atomikosProperties60.setMaxActives((int) (byte) -1);
        java.lang.String str66 = atomikosProperties60.getService();
        java.lang.Object obj67 = properties47.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        int int70 = atomikosProperties68.getMaxActives();
        java.lang.String str71 = atomikosProperties68.logBaseDir;
        java.lang.Object obj73 = properties47.putIfAbsent((java.lang.Object) atomikosProperties68, (java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet74 = properties47.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet75 = properties47.entrySet();
        java.lang.Object obj76 = properties40.remove((java.lang.Object) properties47);
        java.lang.Object obj79 = properties47.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}", "{=}");
        java.lang.String str82 = properties47.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 50 + "'", int70 == 50);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(objSet74);
        org.junit.Assert.assertNotNull(objEntrySet75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "{=}" + "'", str82, "{=}");
    }

    @Test
    public void test6979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6979");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = 9;
        long long12 = atomikosProperties0.getCheckpointInterval();
        boolean boolean13 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str14 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setService("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test6980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6980");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        java.lang.String str30 = properties2.getProperty("tmlog");
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties2.elements();
        java.io.OutputStream outputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(outputStream32, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(objEnumeration31);
    }

    @Test
    public void test6981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6981");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        atomikosProperties44.threadedTwoPhaseCommit = true;
        atomikosProperties44.setService("{-1=1}");
        atomikosProperties44.setEnableLogging(false);
        atomikosProperties44.setEnableLogging(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test6982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6982");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        java.lang.Object obj16 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        atomikosProperties17.setTransactionManagerUniqueName("");
        int int21 = atomikosProperties17.getMaxActives();
        java.lang.String str22 = atomikosProperties17.getLogBaseDir();
        java.lang.String str23 = atomikosProperties17.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.logBaseDir;
        java.lang.String str26 = atomikosProperties24.logBaseName;
        java.lang.String str27 = atomikosProperties24.getLogBaseDir();
        boolean boolean28 = atomikosProperties24.isSerialJtaTransactions();
        atomikosProperties24.setEnableLogging(false);
        boolean boolean31 = atomikosProperties24.isForceShutdownOnVmExit();
        java.lang.Object obj32 = properties2.getOrDefault((java.lang.Object) str23, (java.lang.Object) boolean31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        java.lang.String str56 = atomikosProperties48.service;
        long long57 = atomikosProperties48.maxTimeout;
        long long58 = atomikosProperties48.getDefaultJtaTimeout();
        atomikosProperties48.setThreadedTwoPhaseCommit(false);
        atomikosProperties48.logBaseName = "{}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setCheckpointInterval((long) 100);
        java.lang.String str66 = atomikosProperties63.getService();
        atomikosProperties63.defaultJtaTimeout = 'a';
        atomikosProperties63.enableLogging = false;
        atomikosProperties63.logBaseName = "tmlog";
        atomikosProperties63.setCheckpointInterval((long) 9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long76 = atomikosProperties75.checkpointInterval;
        long long77 = atomikosProperties75.getDefaultJtaTimeout();
        atomikosProperties75.setService("hi!");
        atomikosProperties75.serialJtaTransactions = false;
        atomikosProperties75.logBaseDir = "{}";
        boolean boolean84 = properties2.replace((java.lang.Object) "{}", (java.lang.Object) atomikosProperties63, (java.lang.Object) atomikosProperties75);
        java.util.Properties properties85 = new java.util.Properties(properties2);
        int int86 = properties2.size();
        boolean boolean87 = properties2.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "tmlog" + "'", obj16, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + false + "'", obj32, false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 300000L + "'", long57 == 300000L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 500L + "'", long76 == 500L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test6983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6983");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.defaultJtaTimeout = 300000L;
        long long8 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
    }

    @Test
    public void test6984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6984");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        int int3 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setSerialJtaTransactions(false);
        long long6 = atomikosProperties0.getCheckpointInterval();
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        long long8 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 50 + "'", int3 == 50);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
    }

    @Test
    public void test6985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6985");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties2.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties2.entrySet();
        boolean boolean21 = properties2.isEmpty();
        java.lang.Object obj24 = properties2.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.io.OutputStream outputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(outputStream25, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test6986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6986");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.maxTimeout = 10000L;
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        long long15 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxActives = (short) 1;
        atomikosProperties0.logBaseName = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}";
        boolean boolean20 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.util.Properties properties21 = atomikosProperties0.asProperties();
        java.lang.String str22 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}" + "'", str22, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
    }

    @Test
    public void test6987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6987");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        long long11 = atomikosProperties0.checkpointInterval;
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.enableLogging = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test6988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6988");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.util.Properties properties16 = new java.util.Properties(properties10);
        java.lang.String str18 = properties16.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties16);
        properties19.clear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test6989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6989");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.lang.Object obj15 = properties2.setProperty("", "");
        java.util.Collection<java.lang.Object> objCollection16 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        atomikosProperties17.forceShutdownOnVmExit = false;
        boolean boolean21 = atomikosProperties17.isSerialJtaTransactions();
        java.lang.String str22 = atomikosProperties17.logBaseName;
        long long23 = atomikosProperties17.getMaxTimeout();
        long long24 = atomikosProperties17.getDefaultJtaTimeout();
        boolean boolean25 = atomikosProperties17.forceShutdownOnVmExit;
        atomikosProperties17.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean28 = atomikosProperties17.threadedTwoPhaseCommit;
        atomikosProperties17.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        atomikosProperties31.setTransactionManagerUniqueName("");
        int int35 = atomikosProperties31.getMaxActives();
        atomikosProperties31.logBaseName = "tmlog";
        atomikosProperties31.setEnableLogging(true);
        atomikosProperties31.setMaxActives((int) (byte) 0);
        atomikosProperties31.setMaxActives((int) (short) 1);
        java.lang.String str44 = atomikosProperties31.transactionManagerUniqueName;
        atomikosProperties31.setMaxTimeout(1L);
        java.lang.String str47 = atomikosProperties31.service;
        int int48 = atomikosProperties31.maxActives;
        java.lang.Object obj49 = properties2.putIfAbsent((java.lang.Object) atomikosProperties17, (java.lang.Object) int48);
        int int50 = properties2.size();
        java.io.PrintWriter printWriter51 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printWriter51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 300000L + "'", long23 == 300000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10000L + "'", long24 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test6990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6990");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        java.lang.String str23 = atomikosProperties15.service;
        long long24 = atomikosProperties15.maxTimeout;
        long long25 = atomikosProperties15.getDefaultJtaTimeout();
        atomikosProperties15.setThreadedTwoPhaseCommit(false);
        long long28 = atomikosProperties15.maxTimeout;
        boolean boolean29 = atomikosProperties15.isSerialJtaTransactions();
        atomikosProperties15.setEnableLogging(false);
        atomikosProperties15.defaultJtaTimeout = 0L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 300000L + "'", long24 == 300000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 10000L + "'", long25 == 10000L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 300000L + "'", long28 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test6991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6991");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties29.defaultJtaTimeout = (byte) 10;
        atomikosProperties29.setService("hi!");
        java.lang.String str44 = atomikosProperties29.getService();
        atomikosProperties29.setCheckpointInterval(300000L);
        boolean boolean47 = atomikosProperties29.isEnableLogging();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test6992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6992");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties2.keys();
        properties2.clear();
        java.util.Enumeration<?> wildcardEnumeration15 = properties2.propertyNames();
        java.util.Properties properties16 = new java.util.Properties(properties2);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNotNull(wildcardEnumeration15);
    }

    @Test
    public void test6993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6993");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.checkpointInterval = (-1L);
        java.lang.String str9 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.transactionManagerUniqueName = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}";
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setMaxActives((int) (short) 10);
        long long16 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
    }

    @Test
    public void test6994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6994");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long8 = atomikosProperties0.maxTimeout;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        atomikosProperties0.checkpointInterval = (short) -1;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test6995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6995");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        int int14 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        java.lang.Object obj18 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties30);
        int int38 = properties17.size();
        java.lang.String str39 = properties17.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties17.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.enableLogging = true;
        atomikosProperties41.maxActives = (byte) -1;
        java.lang.Object obj46 = properties2.putIfAbsent((java.lang.Object) properties17, (java.lang.Object) (byte) -1);
        java.util.Enumeration<java.lang.Object> objEnumeration47 = properties2.keys();
        java.util.Set<java.lang.Object> objSet48 = properties2.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str39, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(objEnumeration47);
        org.junit.Assert.assertNotNull(objSet48);
    }

    @Test
    public void test6996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6996");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        java.util.Properties properties15 = atomikosProperties9.asProperties();
        boolean boolean16 = properties2.equals((java.lang.Object) atomikosProperties9);
        java.lang.Object obj17 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        atomikosProperties18.setTransactionManagerUniqueName("");
        long long22 = atomikosProperties18.defaultJtaTimeout;
        java.lang.Object obj23 = null;
        java.lang.Object obj24 = properties2.getOrDefault((java.lang.Object) long22, obj23);
        java.lang.Object obj27 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test6997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6997");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.logBaseDir;
        atomikosProperties1.setTransactionManagerUniqueName("");
        int int5 = atomikosProperties1.getMaxActives();
        java.lang.String str6 = atomikosProperties1.getLogBaseDir();
        atomikosProperties1.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setCheckpointInterval((long) 100);
        boolean boolean18 = atomikosProperties15.isForceShutdownOnVmExit();
        atomikosProperties15.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean21 = properties14.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.enableLogging = true;
        boolean boolean26 = properties11.replace((java.lang.Object) boolean21, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection27 = properties11.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet28 = properties11.entrySet();
        atomikosProperties1.set(properties11, "hi!", (java.lang.Object) 0L);
        atomikosProperties1.setEnableLogging(false);
        atomikosProperties1.setTransactionManagerUniqueName("tmlog");
        atomikosProperties1.setEnableLogging(false);
        long long38 = atomikosProperties1.checkpointInterval;
        java.lang.Object obj39 = properties0.remove((java.lang.Object) long38);
        java.lang.String str40 = properties0.toString();
        java.io.OutputStream outputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.storeToXML(outputStream41, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertNotNull(objEntrySet28);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{}" + "'", str40, "{}");
    }

    @Test
    public void test6998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6998");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        long long45 = atomikosProperties31.defaultJtaTimeout;
        atomikosProperties31.setTransactionManagerUniqueName("hi!");
        java.lang.String str48 = atomikosProperties31.getLogBaseName();
        boolean boolean49 = atomikosProperties31.threadedTwoPhaseCommit;
        boolean boolean50 = atomikosProperties31.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test6999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test6999");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties2.elements();
        java.util.Collection<java.lang.Object> objCollection13 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet14 = properties2.entrySet();
        java.util.Set<java.lang.Object> objSet15 = properties2.keySet();
        properties2.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(objEntrySet14);
        org.junit.Assert.assertNotNull(objSet15);
    }

    @Test
    public void test7000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test7000");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        boolean boolean21 = properties2.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        java.util.Set<java.lang.Object> objSet28 = properties24.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.threadedTwoPhaseCommit = false;
        int int39 = atomikosProperties29.maxActives;
        atomikosProperties29.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj42 = properties2.getOrDefault((java.lang.Object) properties24, (java.lang.Object) atomikosProperties29);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties24.elements();
        java.lang.Object obj44 = properties24.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties24.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        properties48.clear();
        boolean boolean50 = properties48.isEmpty();
        java.lang.Object obj51 = properties48.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        properties54.clear();
        boolean boolean56 = properties54.isEmpty();
        java.util.Collection<java.lang.Object> objCollection57 = properties54.values();
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.lang.String str59 = properties48.toString();
        java.lang.Object obj60 = properties24.get((java.lang.Object) str59);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{}");
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{}");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(obj60);
    }
}
