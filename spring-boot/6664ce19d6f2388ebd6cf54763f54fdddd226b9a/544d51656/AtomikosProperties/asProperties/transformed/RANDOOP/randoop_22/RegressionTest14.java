import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest14 {

    public static boolean debug = false;

    @Test
    public void test7001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7001");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setCheckpointInterval((long) 1);
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        int int11 = atomikosProperties0.getMaxActives();
        java.lang.String str12 = atomikosProperties0.logBaseName;
        boolean boolean13 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test7002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7002");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        boolean boolean20 = properties8.equals((java.lang.Object) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        atomikosProperties21.forceShutdownOnVmExit = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.maxTimeout = 50;
        boolean boolean33 = properties16.equals((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.logBaseDir;
        atomikosProperties34.setTransactionManagerUniqueName("");
        int int38 = atomikosProperties34.getMaxActives();
        java.lang.String str39 = atomikosProperties34.transactionManagerUniqueName;
        boolean boolean40 = properties16.containsValue((java.lang.Object) atomikosProperties34);
        java.util.Collection<java.lang.Object> objCollection41 = properties16.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objCollection41);
    }

    @Test
    public void test7003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7003");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.serialJtaTransactions = true;
        boolean boolean9 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.forceShutdownOnVmExit = true;
        boolean boolean12 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean13 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.maxTimeout = 10L;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test7004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7004");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet17 = properties2.stringPropertyNames();
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(outputStream19, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objCollection18);
    }

    @Test
    public void test7005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7005");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str12 = atomikosProperties0.logBaseName;
        atomikosProperties0.setMaxTimeout(1L);
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
    }

    @Test
    public void test7006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7006");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        int int5 = properties2.size();
        java.util.Set<java.lang.String> strSet6 = properties2.stringPropertyNames();
        int int7 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.logBaseName;
        java.lang.String str11 = atomikosProperties8.getLogBaseName();
        int int12 = atomikosProperties8.getMaxActives();
        atomikosProperties8.setLogBaseDir("hi!");
        java.lang.String str15 = atomikosProperties8.logBaseName;
        boolean boolean16 = atomikosProperties8.isEnableLogging();
        atomikosProperties8.forceShutdownOnVmExit = true;
        atomikosProperties8.defaultJtaTimeout = 52;
        boolean boolean21 = atomikosProperties8.forceShutdownOnVmExit;
        atomikosProperties8.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        boolean boolean28 = properties26.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        java.lang.Object obj34 = properties31.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        atomikosProperties35.setLogBaseName("");
        java.lang.Object obj41 = properties26.replace((java.lang.Object) properties31, (java.lang.Object) "");
        java.lang.String str43 = properties26.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet44 = properties26.entrySet();
        java.lang.String str45 = properties26.toString();
        java.util.Set<java.lang.Object> objSet46 = properties26.keySet();
        java.lang.Object obj47 = properties2.replace((java.lang.Object) false, (java.lang.Object) properties26);
        java.io.OutputStream outputStream48 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.save(outputStream48, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(objEntrySet44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str45, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objSet46);
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test7007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7007");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.tmlog=0.0}";
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setMaxTimeout((long) 0);
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test7008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7008");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.defaultJtaTimeout = 2;
        atomikosProperties0.setMaxTimeout((-1L));
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
    }

    @Test
    public void test7009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7009");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str11 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}";
        java.lang.String str14 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setDefaultJtaTimeout(52L);
        boolean boolean17 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test7010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7010");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet17 = properties2.stringPropertyNames();
        java.lang.Object obj20 = properties2.setProperty("{=}", "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test7011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7011");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setCheckpointInterval((-1L));
        boolean boolean5 = atomikosProperties0.serialJtaTransactions;
        boolean boolean6 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.setService("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test7012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7012");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setLogBaseDir("hi!");
        java.lang.String str5 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str6 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test7013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7013");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties2.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties2.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet15 = properties2.entrySet();
        java.lang.String str16 = properties2.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objEntrySet15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
    }

    @Test
    public void test7014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7014");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        int int6 = atomikosProperties0.getMaxActives();
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        java.lang.String str8 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.logBaseDir = "tmlog";
        boolean boolean11 = atomikosProperties0.enableLogging;
        java.lang.String str12 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
    }

    @Test
    public void test7015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7015");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.threadedTwoPhaseCommit = true;
        atomikosProperties31.service = "tmlog";
        java.lang.String str49 = atomikosProperties31.logBaseName;
        boolean boolean50 = atomikosProperties31.forceShutdownOnVmExit;
        java.lang.String str51 = atomikosProperties31.service;
        long long52 = atomikosProperties31.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
    }

    @Test
    public void test7016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7016");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        boolean boolean13 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.serialJtaTransactions = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test7017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7017");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        java.lang.Object obj12 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        atomikosProperties14.forceShutdownOnVmExit = false;
        atomikosProperties14.setTransactionManagerUniqueName("");
        java.lang.Object obj20 = properties9.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties14);
        java.util.Set<java.lang.Object> objSet21 = properties9.keySet();
        java.lang.String str23 = properties9.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) 100);
        boolean boolean27 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties24.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        java.lang.String str34 = atomikosProperties32.logBaseName;
        java.lang.String str35 = atomikosProperties32.getLogBaseDir();
        atomikosProperties32.setMaxActives((int) (byte) -1);
        java.lang.String str38 = atomikosProperties32.getService();
        long long39 = atomikosProperties32.defaultJtaTimeout;
        java.lang.String str40 = atomikosProperties32.logBaseName;
        java.lang.String str41 = atomikosProperties32.logBaseDir;
        java.lang.Class<?> wildcardClass42 = atomikosProperties32.getClass();
        boolean boolean43 = properties9.remove((java.lang.Object) atomikosProperties24, (java.lang.Object) atomikosProperties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        atomikosProperties44.forceShutdownOnVmExit = false;
        boolean boolean48 = atomikosProperties44.isSerialJtaTransactions();
        java.lang.String str49 = atomikosProperties44.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.Object obj53 = properties9.getOrDefault((java.lang.Object) atomikosProperties44, (java.lang.Object) atomikosProperties50);
        atomikosProperties50.setCheckpointInterval((long) 'a');
        atomikosProperties50.forceShutdownOnVmExit = false;
        java.lang.Object obj58 = properties3.replace((java.lang.Object) "", (java.lang.Object) atomikosProperties50);
        java.util.Properties properties59 = atomikosProperties50.asProperties();
        int int60 = atomikosProperties50.maxActives;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objSet21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
    }

    @Test
    public void test7018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7018");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        atomikosProperties13.setService("");
        boolean boolean18 = atomikosProperties13.threadedTwoPhaseCommit;
        int int19 = atomikosProperties13.getMaxActives();
        atomikosProperties13.logBaseName = "";
        boolean boolean22 = properties2.contains((java.lang.Object) atomikosProperties13);
        java.util.Set<java.lang.Object> objSet23 = properties2.keySet();
        java.util.Collection<java.lang.Object> objCollection24 = properties2.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objSet23);
        org.junit.Assert.assertNotNull(objCollection24);
    }

    @Test
    public void test7019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7019");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection20 = properties10.values();
        java.util.Properties properties21 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        atomikosProperties29.forceShutdownOnVmExit = false;
        atomikosProperties29.setTransactionManagerUniqueName("");
        java.lang.Object obj35 = properties24.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties29);
        java.util.Set<java.lang.Object> objSet36 = properties24.keySet();
        java.lang.String str38 = properties24.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        boolean boolean43 = properties41.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        java.lang.Object obj49 = properties46.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        atomikosProperties50.setLogBaseName("");
        java.lang.Object obj56 = properties41.replace((java.lang.Object) properties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        java.util.Properties properties59 = atomikosProperties57.asProperties();
        java.lang.Object obj60 = properties59.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        java.lang.String str64 = atomikosProperties61.getLogBaseDir();
        atomikosProperties61.setMaxActives((int) (byte) -1);
        boolean boolean67 = atomikosProperties61.isEnableLogging();
        atomikosProperties61.transactionManagerUniqueName = "";
        atomikosProperties61.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str73 = atomikosProperties72.logBaseDir;
        java.lang.String str74 = atomikosProperties72.logBaseName;
        java.lang.String str75 = atomikosProperties72.getLogBaseDir();
        atomikosProperties72.setMaxActives((int) (byte) -1);
        java.lang.String str78 = atomikosProperties72.getService();
        java.lang.Object obj79 = properties59.getOrDefault((java.lang.Object) atomikosProperties61, (java.lang.Object) atomikosProperties72);
        int int80 = properties59.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet81 = properties59.entrySet();
        java.lang.Object obj82 = properties41.remove((java.lang.Object) objEntrySet81);
        java.lang.Object obj83 = properties24.remove((java.lang.Object) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties84 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str85 = atomikosProperties84.logBaseDir;
        atomikosProperties84.setTransactionManagerUniqueName("");
        int int88 = atomikosProperties84.getMaxActives();
        atomikosProperties84.logBaseName = "tmlog";
        java.lang.String str91 = atomikosProperties84.getLogBaseDir();
        boolean boolean92 = atomikosProperties84.serialJtaTransactions;
        java.lang.Object obj93 = properties10.putIfAbsent((java.lang.Object) properties24, (java.lang.Object) atomikosProperties84);
        int int94 = properties10.size();
        properties10.clear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objSet36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNotNull(obj60);
// flaky:         org.junit.Assert.assertEquals(obj60.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "tmlog" + "'", str74, "tmlog");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertNotNull(objEntrySet81);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 50 + "'", int88 == 50);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
    }

    @Test
    public void test7020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7020");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        atomikosProperties13.setTransactionManagerUniqueName("");
        int int17 = atomikosProperties13.getMaxActives();
        java.lang.String str18 = atomikosProperties13.transactionManagerUniqueName;
        atomikosProperties13.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        properties23.clear();
        java.util.Properties properties25 = new java.util.Properties(properties23);
        atomikosProperties13.set(properties23, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj31 = properties23.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties32 = new java.util.Properties(properties23);
        java.util.Collection<java.lang.Object> objCollection33 = properties23.values();
        java.util.Properties properties34 = new java.util.Properties(properties23);
        java.lang.Object obj37 = properties23.setProperty("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Object obj38 = properties2.get((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(objCollection33);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test7021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7021");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        java.util.Properties properties15 = atomikosProperties9.asProperties();
        boolean boolean16 = properties2.equals((java.lang.Object) atomikosProperties9);
        java.lang.Object obj17 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        atomikosProperties18.setTransactionManagerUniqueName("");
        long long22 = atomikosProperties18.defaultJtaTimeout;
        java.lang.Object obj23 = null;
        java.lang.Object obj24 = properties2.getOrDefault((java.lang.Object) long22, obj23);
        int int25 = properties2.size();
        boolean boolean26 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration27 = properties2.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objEnumeration27);
    }

    @Test
    public void test7022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7022");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.threadedTwoPhaseCommit = true;
        atomikosProperties31.service = "tmlog";
        atomikosProperties31.setCheckpointInterval((long) (byte) 100);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long52 = atomikosProperties51.checkpointInterval;
        java.util.Properties properties53 = atomikosProperties51.asProperties();
        java.lang.Object obj56 = properties53.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        java.util.Properties properties59 = atomikosProperties57.asProperties();
        properties59.clear();
        java.util.Properties properties61 = new java.util.Properties(properties59);
        java.lang.Object obj64 = properties61.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str65 = properties61.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        boolean boolean72 = atomikosProperties66.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties73.setCheckpointInterval((long) 100);
        boolean boolean76 = atomikosProperties73.isForceShutdownOnVmExit();
        java.lang.Object obj77 = properties61.putIfAbsent((java.lang.Object) atomikosProperties66, (java.lang.Object) boolean76);
        java.util.Set<java.lang.String> strSet78 = properties61.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet79 = properties61.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long81 = atomikosProperties80.checkpointInterval;
        int int82 = atomikosProperties80.getMaxActives();
        atomikosProperties80.setCheckpointInterval(1L);
        long long85 = atomikosProperties80.getMaxTimeout();
        java.lang.Object obj86 = properties61.get((java.lang.Object) atomikosProperties80);
        java.lang.Object obj87 = properties53.remove((java.lang.Object) properties61);
        int int88 = properties61.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties90 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long91 = atomikosProperties90.checkpointInterval;
        long long92 = atomikosProperties90.getDefaultJtaTimeout();
        atomikosProperties90.logBaseName = "tmlog";
        atomikosProperties90.forceShutdownOnVmExit = true;
        boolean boolean97 = atomikosProperties90.serialJtaTransactions;
        atomikosProperties31.set(properties61, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) boolean97);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertEquals("'" + obj64 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj64, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{}" + "'", str65, "{}");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(objSet79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 50 + "'", int82 == 50);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 300000L + "'", long85 == 300000L);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 500L + "'", long91 == 500L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 10000L + "'", long92 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test7023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7023");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.defaultJtaTimeout = (byte) -1;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test7024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7024");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        long long48 = atomikosProperties36.checkpointInterval;
        long long49 = atomikosProperties36.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 300000L + "'", long49 == 300000L);
    }

    @Test
    public void test7025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7025");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        java.lang.String str12 = atomikosProperties0.getService();
        atomikosProperties0.setSerialJtaTransactions(false);
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        boolean boolean19 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test7026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7026");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.checkpointInterval = '#';
        atomikosProperties0.setLogBaseDir("hi!");
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.tmlog=0.0}";
        java.lang.String str11 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        boolean boolean14 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setLogBaseName("tmlog");
        boolean boolean17 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test7027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7027");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        java.lang.String str29 = atomikosProperties13.transactionManagerUniqueName;
        boolean boolean30 = atomikosProperties13.forceShutdownOnVmExit;
        java.lang.String str31 = atomikosProperties13.logBaseDir;
        long long32 = atomikosProperties13.getMaxTimeout();
        long long33 = atomikosProperties13.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 300000L + "'", long32 == 300000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
    }

    @Test
    public void test7028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7028");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties2.elements();
        java.util.Properties properties5 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        java.lang.Object obj16 = properties13.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection17 = properties13.values();
        boolean boolean18 = properties8.containsKey((java.lang.Object) objCollection17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseName();
        int int23 = atomikosProperties19.getMaxActives();
        atomikosProperties19.setLogBaseDir("hi!");
        java.lang.String str26 = atomikosProperties19.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        atomikosProperties27.setTransactionManagerUniqueName("");
        int int31 = atomikosProperties27.getMaxActives();
        java.lang.String str32 = atomikosProperties27.getLogBaseDir();
        java.lang.String str33 = atomikosProperties27.logBaseName;
        java.lang.Object obj34 = properties8.replace((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties27);
        boolean boolean35 = properties8.isEmpty();
        java.lang.Object obj36 = properties8.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet37 = properties8.entrySet();
        java.lang.Object obj38 = properties8.clone();
        java.util.Set<java.lang.String> strSet39 = properties8.stringPropertyNames();
        boolean boolean40 = properties5.containsValue((java.lang.Object) properties8);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet41 = properties5.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties5.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertNotNull(objEntrySet37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objEntrySet41);
        org.junit.Assert.assertNotNull(objEnumeration42);
    }

    @Test
    public void test7029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7029");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        java.util.Enumeration<java.lang.Object> objEnumeration26 = properties2.keys();
        java.lang.Object obj29 = properties2.setProperty("{}", "");
        java.lang.Object obj32 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        java.lang.String str56 = atomikosProperties48.service;
        long long57 = atomikosProperties48.maxTimeout;
        long long58 = atomikosProperties48.getMaxTimeout();
        atomikosProperties48.transactionManagerUniqueName = "";
        atomikosProperties48.setEnableLogging(true);
        atomikosProperties48.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        java.util.Properties properties67 = atomikosProperties65.asProperties();
        properties67.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        java.lang.String str71 = atomikosProperties69.logBaseName;
        java.lang.String str72 = atomikosProperties69.getLogBaseDir();
        atomikosProperties69.setMaxActives((int) (byte) -1);
        boolean boolean75 = atomikosProperties69.isEnableLogging();
        long long76 = atomikosProperties69.checkpointInterval;
        atomikosProperties69.setCheckpointInterval(10L);
        boolean boolean79 = atomikosProperties69.serialJtaTransactions;
        boolean boolean80 = properties67.equals((java.lang.Object) boolean79);
        java.util.Properties properties81 = new java.util.Properties(properties67);
        java.util.Collection<java.lang.Object> objCollection82 = properties67.values();
        java.lang.Object obj83 = properties2.put((java.lang.Object) atomikosProperties48, (java.lang.Object) properties67);
        java.io.PrintStream printStream84 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties67.list(printStream84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(objEnumeration26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 300000L + "'", long57 == 300000L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 300000L + "'", long58 == 300000L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tmlog" + "'", str71, "tmlog");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 500L + "'", long76 == 500L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objCollection82);
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test7030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7030");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.maxActives = (byte) 0;
        java.lang.String str12 = atomikosProperties0.logBaseName;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
    }

    @Test
    public void test7031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7031");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        int int5 = properties4.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        boolean boolean12 = properties4.containsKey((java.lang.Object) objCollection11);
        int int13 = properties4.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        atomikosProperties14.setTransactionManagerUniqueName("");
        int int18 = atomikosProperties14.getMaxActives();
        java.lang.String str19 = atomikosProperties14.transactionManagerUniqueName;
        atomikosProperties14.setMaxActives((int) 'a');
        atomikosProperties14.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.logBaseDir;
        java.lang.String str26 = atomikosProperties24.logBaseName;
        java.lang.String str27 = atomikosProperties24.getLogBaseDir();
        atomikosProperties24.setMaxActives((int) (byte) -1);
        boolean boolean30 = atomikosProperties24.isEnableLogging();
        atomikosProperties24.transactionManagerUniqueName = "";
        atomikosProperties24.setEnableLogging(false);
        boolean boolean35 = atomikosProperties24.isEnableLogging();
        atomikosProperties24.maxActives = 1;
        java.util.Properties properties38 = atomikosProperties24.asProperties();
        java.util.Set<java.lang.Object> objSet39 = properties38.keySet();
        java.lang.Object obj40 = properties4.replace((java.lang.Object) false, (java.lang.Object) properties38);
        java.io.InputStream inputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.load(inputStream41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test7032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7032");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.maxTimeout = 10L;
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}";
        java.lang.String str9 = atomikosProperties0.getLogBaseDir();
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
    }

    @Test
    public void test7033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7033");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection6 = properties2.values();
        java.util.Collection<java.lang.Object> objCollection7 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        boolean boolean12 = properties10.isEmpty();
        java.lang.Object obj13 = properties10.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Enumeration<?> wildcardEnumeration21 = properties16.propertyNames();
        java.util.Properties properties22 = new java.util.Properties(properties16);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        int int24 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        properties27.clear();
        boolean boolean29 = properties27.isEmpty();
        java.lang.Object obj30 = properties2.remove((java.lang.Object) boolean29);
        java.io.InputStream inputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.loadFromXML(inputStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(wildcardEnumeration21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test7034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7034");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        long long11 = atomikosProperties0.checkpointInterval;
        long long12 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        properties13.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties13.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(objEnumeration15);
    }

    @Test
    public void test7035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7035");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean22 = properties2.contains((java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        properties29.clear();
        boolean boolean31 = properties29.isEmpty();
        java.lang.Object obj32 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        java.lang.Object obj37 = properties36.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        boolean boolean44 = atomikosProperties38.isEnableLogging();
        atomikosProperties38.transactionManagerUniqueName = "";
        atomikosProperties38.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        java.lang.String str55 = atomikosProperties49.getService();
        java.lang.Object obj56 = properties36.getOrDefault((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        int int59 = atomikosProperties57.getMaxActives();
        java.lang.String str60 = atomikosProperties57.logBaseDir;
        java.lang.Object obj62 = properties36.putIfAbsent((java.lang.Object) atomikosProperties57, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        boolean boolean67 = atomikosProperties63.isSerialJtaTransactions();
        atomikosProperties63.setEnableLogging(false);
        boolean boolean70 = properties29.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties63);
        atomikosProperties63.logBaseName = "{}";
        long long73 = atomikosProperties63.getDefaultJtaTimeout();
        atomikosProperties63.setThreadedTwoPhaseCommit(true);
        java.lang.Object obj76 = properties2.getOrDefault(obj26, (java.lang.Object) atomikosProperties63);
        atomikosProperties63.setDefaultJtaTimeout((long) (byte) 0);
        atomikosProperties63.setThreadedTwoPhaseCommit(false);
        atomikosProperties63.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties63.setService("{=}");
        atomikosProperties63.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertNotNull(obj76);
    }

    @Test
    public void test7036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7036");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.transactionManagerUniqueName = "{=}";
        atomikosProperties0.setService("{=}");
        long long6 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
    }

    @Test
    public void test7037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7037");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        long long13 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
    }

    @Test
    public void test7038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7038");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        java.lang.String str72 = atomikosProperties66.getService();
        long long73 = atomikosProperties66.defaultJtaTimeout;
        atomikosProperties66.setEnableLogging(true);
        boolean boolean76 = properties53.equals((java.lang.Object) atomikosProperties66);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str78 = atomikosProperties77.logBaseDir;
        java.lang.String str79 = atomikosProperties77.logBaseName;
        java.lang.String str80 = atomikosProperties77.getLogBaseDir();
        atomikosProperties77.setMaxActives((int) (byte) -1);
        java.lang.String str83 = atomikosProperties77.getService();
        atomikosProperties77.setDefaultJtaTimeout((long) (-1));
        int int86 = atomikosProperties77.maxActives;
        long long87 = atomikosProperties77.maxTimeout;
        long long88 = atomikosProperties77.getDefaultJtaTimeout();
        java.lang.Object obj89 = properties53.remove((java.lang.Object) atomikosProperties77);
        atomikosProperties77.service = "tmlog";
        atomikosProperties77.setMaxTimeout((long) (byte) 0);
        atomikosProperties77.serialJtaTransactions = true;
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 300000L + "'", long87 == 300000L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test7039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7039");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setService("{com.atomikos.icatch.tmlog=0.0}");
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setLogBaseName("{=}");
        atomikosProperties0.maxActives = 9;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7040");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties10.transactionManagerUniqueName = "hi!";
        long long42 = atomikosProperties10.getMaxTimeout();
        atomikosProperties10.setCheckpointInterval((long) (-1));
        java.lang.String str45 = atomikosProperties10.getService();
        atomikosProperties10.maxTimeout = 32;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        java.util.Properties properties50 = atomikosProperties48.asProperties();
        properties50.clear();
        java.util.Properties properties52 = new java.util.Properties(properties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        atomikosProperties53.setTransactionManagerUniqueName("");
        int int57 = atomikosProperties53.getMaxActives();
        atomikosProperties53.logBaseName = "tmlog";
        int int60 = atomikosProperties53.maxActives;
        boolean boolean61 = properties50.containsValue((java.lang.Object) int60);
        java.util.Properties properties62 = new java.util.Properties(properties50);
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties62.keys();
        properties62.clear();
        java.lang.String str66 = properties62.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        atomikosProperties68.forceShutdownOnVmExit = false;
        atomikosProperties68.threadedTwoPhaseCommit = false;
        atomikosProperties68.maxActives = (short) -1;
        atomikosProperties68.maxTimeout = (short) 10;
        atomikosProperties10.set(properties62, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", (java.lang.Object) (short) 10);
        java.lang.Object obj81 = properties62.setProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 300000L + "'", long42 == 300000L);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNull(obj81);
    }

    @Test
    public void test7041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7041");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.getOrDefault((java.lang.Object) 0.0f, (java.lang.Object) 0.0d);
        java.util.Enumeration<?> wildcardEnumeration4 = properties0.propertyNames();
        java.lang.Class<?> wildcardClass5 = properties0.getClass();
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 0.0d + "'", obj3, 0.0d);
        org.junit.Assert.assertNotNull(wildcardEnumeration4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test7042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7042");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.enableLogging = true;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str9 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
    }

    @Test
    public void test7043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7043");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        java.util.Set<java.lang.Object> objSet6 = properties2.keySet();
        java.util.Enumeration<?> wildcardEnumeration7 = properties2.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.logBaseName;
        java.lang.String str11 = atomikosProperties8.getLogBaseDir();
        boolean boolean12 = atomikosProperties8.isSerialJtaTransactions();
        atomikosProperties8.setEnableLogging(false);
        boolean boolean15 = atomikosProperties8.serialJtaTransactions;
        long long16 = atomikosProperties8.defaultJtaTimeout;
        java.lang.String str17 = atomikosProperties8.logBaseName;
        java.lang.String str18 = atomikosProperties8.logBaseName;
        java.lang.String str19 = atomikosProperties8.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        atomikosProperties20.forceShutdownOnVmExit = false;
        atomikosProperties20.threadedTwoPhaseCommit = false;
        long long26 = atomikosProperties20.getMaxTimeout();
        java.lang.String str27 = atomikosProperties20.transactionManagerUniqueName;
        boolean boolean28 = atomikosProperties20.isEnableLogging();
        java.lang.Object obj29 = properties2.replace((java.lang.Object) atomikosProperties8, (java.lang.Object) boolean28);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet30 = properties2.entrySet();
        java.io.OutputStream outputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.save(outputStream31, "{com.atomikos.icatch.{}=false, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(objEntrySet30);
    }

    @Test
    public void test7044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7044");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties6.keys();
        java.lang.String str9 = properties6.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        long long17 = atomikosProperties10.checkpointInterval;
        atomikosProperties10.setCheckpointInterval(10L);
        atomikosProperties10.serialJtaTransactions = false;
        atomikosProperties10.setCheckpointInterval(0L);
        atomikosProperties10.setMaxActives((int) (byte) 1);
        java.lang.String str26 = atomikosProperties10.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        java.lang.Object obj30 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        boolean boolean37 = atomikosProperties31.isEnableLogging();
        atomikosProperties31.transactionManagerUniqueName = "";
        atomikosProperties31.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setMaxActives((int) (byte) -1);
        java.lang.String str48 = atomikosProperties42.getService();
        java.lang.Object obj49 = properties29.getOrDefault((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties42);
        int int50 = properties29.size();
        java.lang.String str52 = properties29.getProperty("");
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties29.keys();
        boolean boolean54 = properties6.remove((java.lang.Object) str26, (java.lang.Object) properties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str56 = atomikosProperties55.logBaseDir;
        atomikosProperties55.setTransactionManagerUniqueName("");
        int int59 = atomikosProperties55.getMaxActives();
        java.lang.String str60 = atomikosProperties55.getLogBaseDir();
        boolean boolean61 = atomikosProperties55.isEnableLogging();
        long long62 = atomikosProperties55.getDefaultJtaTimeout();
        atomikosProperties55.service = "";
        int int65 = atomikosProperties55.maxActives;
        atomikosProperties55.transactionManagerUniqueName = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}";
        boolean boolean68 = properties29.equals((java.lang.Object) atomikosProperties55);
        atomikosProperties55.setCheckpointInterval((long) (byte) 1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(objEnumeration8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str9, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10000L + "'", long62 == 10000L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 50 + "'", int65 == 50);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test7045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7045");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.checkpointInterval = 100L;
        int int47 = atomikosProperties31.maxActives;
        java.lang.String str48 = atomikosProperties31.getService();
        atomikosProperties31.threadedTwoPhaseCommit = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertNull(str48);
    }

    @Test
    public void test7046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7046");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties2.propertyNames();
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        int int15 = properties2.size();
        java.lang.String str17 = properties2.getProperty("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties18.enableLogging = true;
        boolean boolean21 = atomikosProperties18.forceShutdownOnVmExit;
        long long22 = atomikosProperties18.getMaxTimeout();
        atomikosProperties18.setCheckpointInterval((long) 0);
        long long25 = atomikosProperties18.checkpointInterval;
        boolean boolean26 = properties2.containsKey((java.lang.Object) long25);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 300000L + "'", long22 == 300000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test7047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7047");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        java.lang.Object obj7 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.logBaseName;
        java.lang.String str11 = atomikosProperties8.getLogBaseDir();
        atomikosProperties8.setMaxActives((int) (byte) -1);
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        atomikosProperties8.transactionManagerUniqueName = "";
        atomikosProperties8.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        java.lang.String str25 = atomikosProperties19.getService();
        java.lang.Object obj26 = properties6.getOrDefault((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        boolean boolean31 = atomikosProperties27.isSerialJtaTransactions();
        long long32 = atomikosProperties27.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        atomikosProperties38.setTransactionManagerUniqueName("");
        int int42 = atomikosProperties38.getMaxActives();
        java.lang.String str43 = atomikosProperties38.transactionManagerUniqueName;
        boolean boolean44 = properties35.containsValue((java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        atomikosProperties45.maxActives = (byte) 0;
        atomikosProperties45.setTransactionManagerUniqueName("");
        java.lang.Object obj52 = properties35.get((java.lang.Object) atomikosProperties45);
        boolean boolean54 = properties35.containsValue((java.lang.Object) 100.0d);
        boolean boolean55 = properties2.replace(obj26, (java.lang.Object) atomikosProperties27, (java.lang.Object) boolean54);
        java.lang.Object obj56 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        java.lang.String str59 = atomikosProperties57.logBaseName;
        java.lang.String str60 = atomikosProperties57.getLogBaseDir();
        boolean boolean61 = atomikosProperties57.isSerialJtaTransactions();
        long long62 = atomikosProperties57.checkpointInterval;
        boolean boolean63 = atomikosProperties57.enableLogging;
        java.lang.Object obj64 = properties2.get((java.lang.Object) boolean63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        java.util.Properties properties67 = atomikosProperties65.asProperties();
        properties67.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        atomikosProperties69.setTransactionManagerUniqueName("");
        int int73 = atomikosProperties69.getMaxActives();
        boolean boolean74 = properties67.containsValue((java.lang.Object) int73);
        java.lang.Object obj77 = properties67.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties78 = new java.util.Properties(properties67);
        java.lang.Object obj79 = properties2.get((java.lang.Object) properties67);
        java.util.Set<java.lang.String> strSet80 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str82 = atomikosProperties81.logBaseDir;
        java.lang.String str83 = atomikosProperties81.logBaseName;
        java.lang.String str84 = atomikosProperties81.getLogBaseDir();
        boolean boolean85 = atomikosProperties81.isSerialJtaTransactions();
        atomikosProperties81.serialJtaTransactions = true;
        atomikosProperties81.setLogBaseName("{}");
        long long90 = atomikosProperties81.maxTimeout;
        atomikosProperties81.defaultJtaTimeout = 300000L;
        java.lang.Object obj93 = properties2.remove((java.lang.Object) atomikosProperties81);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
// flaky:         org.junit.Assert.assertEquals(obj56.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 50 + "'", int73 == 50);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "tmlog" + "'", str83, "tmlog");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 300000L + "'", long90 == 300000L);
        org.junit.Assert.assertNull(obj93);
    }

    @Test
    public void test7048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7048");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        boolean boolean49 = properties47.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        java.lang.Object obj55 = properties52.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        java.lang.String str58 = atomikosProperties56.logBaseName;
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        atomikosProperties56.setLogBaseName("");
        java.lang.Object obj62 = properties47.replace((java.lang.Object) properties52, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long64 = atomikosProperties63.checkpointInterval;
        java.util.Properties properties65 = atomikosProperties63.asProperties();
        java.lang.Object obj66 = properties65.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.logBaseDir;
        java.lang.String str69 = atomikosProperties67.logBaseName;
        java.lang.String str70 = atomikosProperties67.getLogBaseDir();
        atomikosProperties67.setMaxActives((int) (byte) -1);
        boolean boolean73 = atomikosProperties67.isEnableLogging();
        atomikosProperties67.transactionManagerUniqueName = "";
        atomikosProperties67.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str79 = atomikosProperties78.logBaseDir;
        java.lang.String str80 = atomikosProperties78.logBaseName;
        java.lang.String str81 = atomikosProperties78.getLogBaseDir();
        atomikosProperties78.setMaxActives((int) (byte) -1);
        java.lang.String str84 = atomikosProperties78.getService();
        java.lang.Object obj85 = properties65.getOrDefault((java.lang.Object) atomikosProperties67, (java.lang.Object) atomikosProperties78);
        int int86 = properties65.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet87 = properties65.entrySet();
        java.lang.Object obj88 = properties47.remove((java.lang.Object) objEntrySet87);
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.util.Set<java.lang.String> strSet90 = properties44.stringPropertyNames();
        java.lang.Object obj91 = properties44.clone();
        boolean boolean92 = properties44.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 500L + "'", long64 == 500L);
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertNotNull(obj66);
// flaky:         org.junit.Assert.assertEquals(obj66.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "tmlog" + "'", str80, "tmlog");
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertNotNull(objEntrySet87);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(obj91);
// flaky:         org.junit.Assert.assertEquals(obj91.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test7049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7049");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.maxActives = 0;
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str19 = atomikosProperties0.getLogBaseDir();
        boolean boolean20 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test7050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7050");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        atomikosProperties9.setTransactionManagerUniqueName("");
        int int13 = atomikosProperties9.getMaxActives();
        boolean boolean14 = properties7.containsValue((java.lang.Object) int13);
        java.lang.Object obj17 = properties7.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties18 = new java.util.Properties(properties7);
        int int19 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        properties22.clear();
        boolean boolean24 = properties22.isEmpty();
        java.lang.Object obj25 = properties22.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        java.lang.Object obj30 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        boolean boolean37 = atomikosProperties31.isEnableLogging();
        atomikosProperties31.transactionManagerUniqueName = "";
        atomikosProperties31.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setMaxActives((int) (byte) -1);
        java.lang.String str48 = atomikosProperties42.getService();
        java.lang.Object obj49 = properties29.getOrDefault((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        int int52 = atomikosProperties50.getMaxActives();
        java.lang.String str53 = atomikosProperties50.logBaseDir;
        java.lang.Object obj55 = properties29.putIfAbsent((java.lang.Object) atomikosProperties50, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        java.lang.String str58 = atomikosProperties56.logBaseName;
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        boolean boolean60 = atomikosProperties56.isSerialJtaTransactions();
        atomikosProperties56.setEnableLogging(false);
        boolean boolean63 = properties22.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties56);
        atomikosProperties56.logBaseName = "{}";
        long long66 = atomikosProperties56.getDefaultJtaTimeout();
        atomikosProperties56.setThreadedTwoPhaseCommit(true);
        boolean boolean69 = properties2.replace((java.lang.Object) 100L, (java.lang.Object) properties7, (java.lang.Object) true);
        java.util.Properties properties70 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setCheckpointInterval((long) 100);
        boolean boolean74 = atomikosProperties71.isForceShutdownOnVmExit();
        atomikosProperties71.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long77 = atomikosProperties71.getDefaultJtaTimeout();
        long long78 = atomikosProperties71.getMaxTimeout();
        long long79 = atomikosProperties71.getMaxTimeout();
        boolean boolean80 = properties7.containsValue((java.lang.Object) long79);
        java.util.Enumeration<java.lang.Object> objEnumeration81 = properties7.keys();
        java.util.Set<java.lang.Object> objSet82 = properties7.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 300000L + "'", long78 == 300000L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 300000L + "'", long79 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objEnumeration81);
        org.junit.Assert.assertNotNull(objSet82);
    }

    @Test
    public void test7051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7051");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        int int9 = atomikosProperties0.maxActives;
        long long10 = atomikosProperties0.maxTimeout;
        java.lang.String str11 = atomikosProperties0.getService();
        atomikosProperties0.maxActives = (byte) 0;
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        properties18.clear();
        boolean boolean20 = properties18.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        java.lang.Object obj26 = properties23.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection27 = properties23.values();
        boolean boolean28 = properties18.containsKey((java.lang.Object) objCollection27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseName();
        int int33 = atomikosProperties29.getMaxActives();
        atomikosProperties29.setLogBaseDir("hi!");
        java.lang.String str36 = atomikosProperties29.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        atomikosProperties37.setTransactionManagerUniqueName("");
        int int41 = atomikosProperties37.getMaxActives();
        java.lang.String str42 = atomikosProperties37.getLogBaseDir();
        java.lang.String str43 = atomikosProperties37.logBaseName;
        java.lang.Object obj44 = properties18.replace((java.lang.Object) atomikosProperties29, (java.lang.Object) atomikosProperties37);
        boolean boolean45 = properties18.isEmpty();
        java.lang.Object obj46 = properties18.clone();
        boolean boolean47 = properties14.equals(obj46);
        boolean boolean48 = properties14.isEmpty();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "tmlog" + "'", str36, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 50 + "'", int41 == 50);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test7052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7052");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.tmlog=0.0}=, com.atomikos.icatch.log_base_name=tmlog, []=hi!}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test7053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7053");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        java.lang.Object obj7 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.logBaseName;
        java.lang.String str11 = atomikosProperties8.getLogBaseDir();
        atomikosProperties8.setMaxActives((int) (byte) -1);
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        atomikosProperties8.transactionManagerUniqueName = "";
        atomikosProperties8.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        java.lang.String str25 = atomikosProperties19.getService();
        java.lang.Object obj26 = properties6.getOrDefault((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        boolean boolean31 = atomikosProperties27.isSerialJtaTransactions();
        long long32 = atomikosProperties27.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        atomikosProperties38.setTransactionManagerUniqueName("");
        int int42 = atomikosProperties38.getMaxActives();
        java.lang.String str43 = atomikosProperties38.transactionManagerUniqueName;
        boolean boolean44 = properties35.containsValue((java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        atomikosProperties45.maxActives = (byte) 0;
        atomikosProperties45.setTransactionManagerUniqueName("");
        java.lang.Object obj52 = properties35.get((java.lang.Object) atomikosProperties45);
        boolean boolean54 = properties35.containsValue((java.lang.Object) 100.0d);
        boolean boolean55 = properties2.replace(obj26, (java.lang.Object) atomikosProperties27, (java.lang.Object) boolean54);
        java.lang.Object obj56 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        java.lang.String str59 = atomikosProperties57.logBaseName;
        java.lang.String str60 = atomikosProperties57.getLogBaseDir();
        boolean boolean61 = atomikosProperties57.isSerialJtaTransactions();
        long long62 = atomikosProperties57.checkpointInterval;
        boolean boolean63 = atomikosProperties57.enableLogging;
        java.lang.Object obj64 = properties2.get((java.lang.Object) boolean63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        java.util.Properties properties67 = atomikosProperties65.asProperties();
        properties67.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        atomikosProperties69.setTransactionManagerUniqueName("");
        int int73 = atomikosProperties69.getMaxActives();
        boolean boolean74 = properties67.containsValue((java.lang.Object) int73);
        java.lang.Object obj77 = properties67.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties78 = new java.util.Properties(properties67);
        java.lang.Object obj79 = properties2.get((java.lang.Object) properties67);
        boolean boolean80 = properties2.isEmpty();
        java.lang.String str81 = properties2.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str83 = atomikosProperties82.logBaseDir;
        atomikosProperties82.setTransactionManagerUniqueName("");
        int int86 = atomikosProperties82.getMaxActives();
        atomikosProperties82.logBaseName = "tmlog";
        int int89 = atomikosProperties82.maxActives;
        long long90 = atomikosProperties82.maxTimeout;
        atomikosProperties82.serialJtaTransactions = true;
        boolean boolean93 = properties2.contains((java.lang.Object) true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
// flaky:         org.junit.Assert.assertEquals(obj56.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 50 + "'", int73 == 50);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str81, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 50 + "'", int86 == 50);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 50 + "'", int89 == 50);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 300000L + "'", long90 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test7054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7054");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        atomikosProperties0.enableLogging = true;
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7055");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        boolean boolean3 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str6 = atomikosProperties0.logBaseName;
        long long7 = atomikosProperties0.getCheckpointInterval();
        long long8 = atomikosProperties0.getDefaultJtaTimeout();
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7056");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.io.OutputStream outputStream17 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(outputStream17, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test7057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7057");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        boolean boolean21 = properties2.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        java.util.Set<java.lang.Object> objSet28 = properties24.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.threadedTwoPhaseCommit = false;
        int int39 = atomikosProperties29.maxActives;
        atomikosProperties29.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj42 = properties2.getOrDefault((java.lang.Object) properties24, (java.lang.Object) atomikosProperties29);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties24.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        boolean boolean48 = properties46.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        java.lang.Object obj54 = properties51.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection55 = properties51.values();
        boolean boolean56 = properties46.containsKey((java.lang.Object) objCollection55);
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties46.keys();
        java.lang.String str59 = properties46.getProperty("");
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        boolean boolean61 = properties24.isEmpty();
        java.util.Properties properties62 = new java.util.Properties(properties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.enableLogging = true;
        atomikosProperties63.maxActives = (byte) -1;
        boolean boolean68 = atomikosProperties63.isForceShutdownOnVmExit();
        int int69 = atomikosProperties63.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long71 = atomikosProperties70.checkpointInterval;
        java.util.Properties properties72 = atomikosProperties70.asProperties();
        boolean boolean74 = properties72.containsValue((java.lang.Object) 100L);
        java.lang.String str75 = properties72.toString();
        java.lang.Object obj78 = properties72.setProperty("", "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet79 = properties72.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long81 = atomikosProperties80.checkpointInterval;
        long long82 = atomikosProperties80.getDefaultJtaTimeout();
        java.util.Properties properties83 = atomikosProperties80.asProperties();
        java.lang.String str84 = properties83.toString();
        boolean boolean85 = properties72.equals((java.lang.Object) properties83);
        java.util.Set<java.lang.String> strSet86 = properties83.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties87 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long88 = atomikosProperties87.checkpointInterval;
        java.util.Properties properties89 = atomikosProperties87.asProperties();
        java.lang.Object obj92 = properties89.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection93 = properties89.values();
        int int94 = properties89.size();
        java.lang.Object obj95 = properties83.remove((java.lang.Object) int94);
        java.util.Enumeration<java.lang.Object> objEnumeration96 = properties83.keys();
        java.lang.Object obj97 = properties62.getOrDefault((java.lang.Object) atomikosProperties63, (java.lang.Object) objEnumeration96);
        java.util.Properties properties98 = new java.util.Properties(properties62);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 500L + "'", long71 == 500L);
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str75, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(objEntrySet79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertNotNull(properties83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str84, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 500L + "'", long88 == 500L);
        org.junit.Assert.assertNotNull(properties89);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNotNull(objCollection93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertNotNull(objEnumeration96);
        org.junit.Assert.assertNotNull(obj97);
    }

    @Test
    public void test7058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7058");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = 1;
        atomikosProperties0.defaultJtaTimeout = 300000L;
        long long16 = atomikosProperties0.getCheckpointInterval();
        boolean boolean17 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str18 = atomikosProperties0.getLogBaseName();
        boolean boolean19 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test7059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7059");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        long long5 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setMaxTimeout((long) (byte) 10);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.setLogBaseName("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
    }

    @Test
    public void test7060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7060");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection6 = properties2.values();
        java.util.Collection<java.lang.Object> objCollection7 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        boolean boolean12 = properties10.isEmpty();
        java.lang.Object obj13 = properties10.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Enumeration<?> wildcardEnumeration21 = properties16.propertyNames();
        java.util.Properties properties22 = new java.util.Properties(properties16);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        int int24 = properties2.size();
        boolean boolean25 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setMaxActives((int) (byte) -1);
        java.lang.String str32 = atomikosProperties26.getService();
        atomikosProperties26.setDefaultJtaTimeout((long) (-1));
        int int35 = atomikosProperties26.maxActives;
        long long36 = atomikosProperties26.maxTimeout;
        atomikosProperties26.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        atomikosProperties43.setTransactionManagerUniqueName("");
        int int47 = atomikosProperties43.getMaxActives();
        boolean boolean48 = properties41.containsValue((java.lang.Object) int47);
        java.lang.Object obj51 = properties41.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties52 = new java.util.Properties(properties41);
        int int53 = properties41.size();
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties41.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str56 = atomikosProperties55.logBaseDir;
        java.lang.String str57 = atomikosProperties55.logBaseName;
        java.lang.String str58 = atomikosProperties55.getLogBaseDir();
        atomikosProperties55.setMaxActives((int) (byte) -1);
        boolean boolean61 = atomikosProperties55.isEnableLogging();
        long long62 = atomikosProperties55.checkpointInterval;
        atomikosProperties55.setCheckpointInterval(10L);
        boolean boolean65 = atomikosProperties55.isForceShutdownOnVmExit();
        atomikosProperties55.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean68 = atomikosProperties55.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        java.lang.String str71 = atomikosProperties69.logBaseName;
        java.lang.String str72 = atomikosProperties69.getLogBaseDir();
        boolean boolean73 = atomikosProperties69.isSerialJtaTransactions();
        atomikosProperties69.setEnableLogging(false);
        boolean boolean76 = atomikosProperties69.serialJtaTransactions;
        long long77 = atomikosProperties69.defaultJtaTimeout;
        java.lang.String str78 = atomikosProperties69.logBaseName;
        java.lang.String str79 = atomikosProperties69.getLogBaseName();
        atomikosProperties69.setLogBaseName("");
        java.lang.Object obj82 = properties41.put((java.lang.Object) boolean68, (java.lang.Object) atomikosProperties69);
        java.util.Enumeration<java.lang.Object> objEnumeration83 = properties41.elements();
        java.util.Collection<java.lang.Object> objCollection84 = properties41.values();
        java.lang.Object obj85 = properties2.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) properties41);
        boolean boolean86 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration87 = properties2.elements();
        java.io.OutputStream outputStream88 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.save(outputStream88, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(wildcardEnumeration21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objEnumeration54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tmlog" + "'", str57, "tmlog");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tmlog" + "'", str71, "tmlog");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(objEnumeration83);
        org.junit.Assert.assertNotNull(objCollection84);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objEnumeration87);
    }

    @Test
    public void test7061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7061");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        atomikosProperties29.setService("");
        boolean boolean34 = atomikosProperties29.threadedTwoPhaseCommit;
        java.lang.String str35 = atomikosProperties29.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.serialJtaTransactions = true;
        java.lang.String str43 = atomikosProperties36.getService();
        java.lang.Object obj44 = properties2.putIfAbsent((java.lang.Object) str35, (java.lang.Object) atomikosProperties36);
        java.lang.String str46 = properties2.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        boolean boolean50 = atomikosProperties47.isEnableLogging();
        atomikosProperties47.setSerialJtaTransactions(true);
        java.lang.String str53 = atomikosProperties47.service;
        atomikosProperties47.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        java.lang.String str58 = atomikosProperties56.logBaseName;
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        atomikosProperties56.setMaxActives((int) (byte) -1);
        boolean boolean62 = atomikosProperties56.isEnableLogging();
        atomikosProperties56.transactionManagerUniqueName = "";
        atomikosProperties56.setEnableLogging(false);
        atomikosProperties56.setLogBaseName("");
        boolean boolean69 = atomikosProperties56.isForceShutdownOnVmExit();
        atomikosProperties56.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj72 = properties2.replace((java.lang.Object) atomikosProperties47, (java.lang.Object) false);
        int int73 = properties2.size();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 11 + "'", int73 == 11);
    }

    @Test
    public void test7062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7062");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.maxTimeout = 10L;
        atomikosProperties0.maxTimeout = (byte) 0;
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test7063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7063");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        java.util.Collection<java.lang.Object> objCollection12 = properties9.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        atomikosProperties13.setTransactionManagerUniqueName("");
        int int17 = atomikosProperties13.getMaxActives();
        java.lang.String str18 = atomikosProperties13.transactionManagerUniqueName;
        atomikosProperties13.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        properties23.clear();
        java.util.Properties properties25 = new java.util.Properties(properties23);
        atomikosProperties13.set(properties23, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj31 = properties23.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet32 = properties23.stringPropertyNames();
        java.lang.String str34 = properties23.getProperty("hi!");
        java.lang.Object obj35 = properties2.putIfAbsent((java.lang.Object) objCollection12, (java.lang.Object) "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        java.lang.Object obj39 = properties38.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        boolean boolean46 = atomikosProperties40.isEnableLogging();
        atomikosProperties40.transactionManagerUniqueName = "";
        atomikosProperties40.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        java.lang.String str57 = atomikosProperties51.getService();
        java.lang.Object obj58 = properties38.getOrDefault((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties51);
        int int59 = properties38.size();
        boolean boolean60 = properties2.containsValue((java.lang.Object) properties38);
        java.lang.Object obj63 = properties2.setProperty("{com.atomikos.icatch.tmlog=0.0}", "");
        int int64 = properties2.size();
        java.util.Enumeration<java.lang.Object> objEnumeration65 = properties2.elements();
        java.util.Properties properties66 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties66.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 11 + "'", int64 == 11);
        org.junit.Assert.assertNotNull(objEnumeration65);
        org.junit.Assert.assertNotNull(objEnumeration67);
    }

    @Test
    public void test7064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7064");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        properties13.clear();
        boolean boolean15 = properties13.isEmpty();
        java.lang.Object obj16 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        java.lang.Object obj21 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        boolean boolean28 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.transactionManagerUniqueName = "";
        atomikosProperties22.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        java.lang.String str39 = atomikosProperties33.getService();
        java.lang.Object obj40 = properties20.getOrDefault((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        int int43 = atomikosProperties41.getMaxActives();
        java.lang.String str44 = atomikosProperties41.logBaseDir;
        java.lang.Object obj46 = properties20.putIfAbsent((java.lang.Object) atomikosProperties41, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        boolean boolean51 = atomikosProperties47.isSerialJtaTransactions();
        atomikosProperties47.setEnableLogging(false);
        boolean boolean54 = properties13.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        java.util.Properties properties57 = atomikosProperties55.asProperties();
        properties57.clear();
        java.util.Properties properties59 = new java.util.Properties(properties57);
        java.lang.Object obj62 = properties59.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str63 = properties59.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.logBaseDir;
        java.lang.String str66 = atomikosProperties64.logBaseName;
        java.lang.String str67 = atomikosProperties64.getLogBaseDir();
        atomikosProperties64.setMaxActives((int) (byte) -1);
        boolean boolean70 = atomikosProperties64.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setCheckpointInterval((long) 100);
        boolean boolean74 = atomikosProperties71.isForceShutdownOnVmExit();
        java.lang.Object obj75 = properties59.putIfAbsent((java.lang.Object) atomikosProperties64, (java.lang.Object) boolean74);
        atomikosProperties64.setLogBaseDir("{}");
        boolean boolean78 = properties13.containsValue((java.lang.Object) "{}");
        java.util.Set<java.lang.String> strSet79 = properties13.stringPropertyNames();
        java.lang.Object obj80 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str82 = atomikosProperties81.logBaseDir;
        java.lang.String str83 = atomikosProperties81.transactionManagerUniqueName;
        boolean boolean84 = atomikosProperties81.enableLogging;
        java.lang.String str85 = atomikosProperties81.getTransactionManagerUniqueName();
        java.lang.String str86 = atomikosProperties81.getTransactionManagerUniqueName();
        atomikosProperties81.setCheckpointInterval(10L);
        java.lang.String str89 = atomikosProperties81.getLogBaseName();
        int int90 = atomikosProperties81.maxActives;
        java.lang.Object obj91 = properties10.putIfAbsent(obj80, (java.lang.Object) int90);
        java.io.OutputStream outputStream92 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.storeToXML(outputStream92, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj62, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{}" + "'", str63, "{}");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "tmlog" + "'", str66, "tmlog");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{}");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "tmlog" + "'", str89, "tmlog");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 50 + "'", int90 == 50);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test7065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7065");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        atomikosProperties9.setTransactionManagerUniqueName("");
        int int13 = atomikosProperties9.getMaxActives();
        boolean boolean14 = properties7.containsValue((java.lang.Object) int13);
        java.lang.Object obj17 = properties7.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties18 = new java.util.Properties(properties7);
        int int19 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        properties22.clear();
        boolean boolean24 = properties22.isEmpty();
        java.lang.Object obj25 = properties22.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        java.lang.Object obj30 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        boolean boolean37 = atomikosProperties31.isEnableLogging();
        atomikosProperties31.transactionManagerUniqueName = "";
        atomikosProperties31.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setMaxActives((int) (byte) -1);
        java.lang.String str48 = atomikosProperties42.getService();
        java.lang.Object obj49 = properties29.getOrDefault((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        int int52 = atomikosProperties50.getMaxActives();
        java.lang.String str53 = atomikosProperties50.logBaseDir;
        java.lang.Object obj55 = properties29.putIfAbsent((java.lang.Object) atomikosProperties50, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        java.lang.String str58 = atomikosProperties56.logBaseName;
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        boolean boolean60 = atomikosProperties56.isSerialJtaTransactions();
        atomikosProperties56.setEnableLogging(false);
        boolean boolean63 = properties22.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties56);
        atomikosProperties56.logBaseName = "{}";
        long long66 = atomikosProperties56.getDefaultJtaTimeout();
        atomikosProperties56.setThreadedTwoPhaseCommit(true);
        boolean boolean69 = properties2.replace((java.lang.Object) 100L, (java.lang.Object) properties7, (java.lang.Object) true);
        java.util.Enumeration<java.lang.Object> objEnumeration70 = properties7.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        java.lang.String str73 = atomikosProperties71.logBaseName;
        java.lang.String str74 = atomikosProperties71.getLogBaseDir();
        atomikosProperties71.setMaxActives((int) (byte) -1);
        boolean boolean77 = atomikosProperties71.isEnableLogging();
        long long78 = atomikosProperties71.checkpointInterval;
        atomikosProperties71.setCheckpointInterval(10L);
        boolean boolean81 = atomikosProperties71.isForceShutdownOnVmExit();
        atomikosProperties71.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean84 = atomikosProperties71.forceShutdownOnVmExit;
        atomikosProperties71.setEnableLogging(false);
        int int87 = atomikosProperties71.maxActives;
        boolean boolean88 = properties7.equals((java.lang.Object) int87);
        properties7.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objEnumeration70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tmlog" + "'", str73, "tmlog");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 500L + "'", long78 == 500L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test7066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7066");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str12 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7067");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        long long12 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str11, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
    }

    @Test
    public void test7068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7068");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.logBaseDir = "hi!";
        atomikosProperties0.enableLogging = true;
        java.lang.String str9 = atomikosProperties0.getLogBaseName();
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7069");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        java.lang.String str8 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        int int11 = atomikosProperties9.getMaxActives();
        java.lang.String str12 = atomikosProperties9.transactionManagerUniqueName;
        long long13 = atomikosProperties9.getCheckpointInterval();
        java.lang.String str14 = atomikosProperties9.transactionManagerUniqueName;
        long long15 = atomikosProperties9.maxTimeout;
        int int16 = atomikosProperties9.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        atomikosProperties17.setTransactionManagerUniqueName("");
        int int21 = atomikosProperties17.getMaxActives();
        java.lang.String str22 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setTransactionManagerUniqueName("");
        atomikosProperties17.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties17.setCheckpointInterval((long) 9);
        atomikosProperties17.setLogBaseDir("{}");
        long long31 = atomikosProperties17.checkpointInterval;
        java.lang.String str32 = atomikosProperties17.getTransactionManagerUniqueName();
        boolean boolean33 = atomikosProperties17.isEnableLogging();
        java.lang.Object obj34 = properties2.replace((java.lang.Object) atomikosProperties9, (java.lang.Object) atomikosProperties17);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 9L + "'", long31 == 9L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test7070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7070");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = atomikosProperties5.forceShutdownOnVmExit;
        java.util.Properties properties13 = atomikosProperties5.asProperties();
        atomikosProperties5.setMaxActives((int) (byte) 10);
        atomikosProperties5.forceShutdownOnVmExit = false;
        atomikosProperties5.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(properties13);
    }

    @Test
    public void test7071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7071");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.logBaseName = "{}";
        atomikosProperties0.maxActives = 0;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.tmlog=0.0}";
        atomikosProperties0.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test7072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7072");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        boolean boolean10 = atomikosProperties0.threadedTwoPhaseCommit;
        long long11 = atomikosProperties0.maxTimeout;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str16 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test7073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7073");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.transactionManagerUniqueName;
        atomikosProperties21.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        properties31.clear();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        atomikosProperties21.set(properties31, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj39 = properties31.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties40 = new java.util.Properties(properties31);
        int int41 = properties40.size();
        java.lang.String str42 = properties40.toString();
        int int43 = properties40.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        properties47.clear();
        java.util.Properties properties49 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        atomikosProperties50.setTransactionManagerUniqueName("");
        int int54 = atomikosProperties50.getMaxActives();
        atomikosProperties50.logBaseName = "tmlog";
        int int57 = atomikosProperties50.maxActives;
        boolean boolean58 = properties47.containsValue((java.lang.Object) int57);
        java.util.Properties properties59 = new java.util.Properties(properties47);
        atomikosProperties9.set(properties40, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", (java.lang.Object) properties59);
        long long61 = atomikosProperties9.getDefaultJtaTimeout();
        boolean boolean62 = atomikosProperties9.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test7074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7074");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        int int6 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
    }

    @Test
    public void test7075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7075");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str5 = atomikosProperties0.logBaseName;
        long long6 = atomikosProperties0.getMaxTimeout();
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives((int) (byte) 100);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7076");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        boolean boolean15 = atomikosProperties11.isSerialJtaTransactions();
        atomikosProperties11.setEnableLogging(false);
        atomikosProperties11.maxTimeout = (-1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        properties22.clear();
        boolean boolean24 = properties22.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        atomikosProperties25.setTransactionManagerUniqueName("");
        int int29 = atomikosProperties25.getMaxActives();
        java.lang.String str30 = atomikosProperties25.transactionManagerUniqueName;
        boolean boolean31 = properties22.containsValue((java.lang.Object) atomikosProperties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setCheckpointInterval((long) 100);
        atomikosProperties32.maxActives = (byte) 0;
        atomikosProperties32.setTransactionManagerUniqueName("");
        java.lang.Object obj39 = properties22.get((java.lang.Object) atomikosProperties32);
        boolean boolean41 = properties22.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long43 = atomikosProperties42.checkpointInterval;
        java.util.Properties properties44 = atomikosProperties42.asProperties();
        properties44.clear();
        boolean boolean46 = properties44.isEmpty();
        java.lang.Object obj47 = properties44.clone();
        java.util.Set<java.lang.Object> objSet48 = properties44.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setCheckpointInterval((long) 100);
        java.lang.String str52 = atomikosProperties49.getService();
        atomikosProperties49.defaultJtaTimeout = 'a';
        atomikosProperties49.enableLogging = false;
        atomikosProperties49.threadedTwoPhaseCommit = false;
        int int59 = atomikosProperties49.maxActives;
        atomikosProperties49.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj62 = properties22.getOrDefault((java.lang.Object) properties44, (java.lang.Object) atomikosProperties49);
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties44.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long65 = atomikosProperties64.checkpointInterval;
        java.util.Properties properties66 = atomikosProperties64.asProperties();
        properties66.clear();
        boolean boolean68 = properties66.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long70 = atomikosProperties69.checkpointInterval;
        java.util.Properties properties71 = atomikosProperties69.asProperties();
        java.lang.Object obj74 = properties71.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection75 = properties71.values();
        boolean boolean76 = properties66.containsKey((java.lang.Object) objCollection75);
        java.util.Enumeration<java.lang.Object> objEnumeration77 = properties66.keys();
        java.lang.String str79 = properties66.getProperty("");
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties66);
        boolean boolean81 = properties44.isEmpty();
        java.lang.Object obj82 = properties2.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) properties44);
        java.io.PrintWriter printWriter83 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties44.list(printWriter83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{}");
        org.junit.Assert.assertNotNull(objSet48);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 500L + "'", long65 == 500L);
        org.junit.Assert.assertNotNull(properties66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 500L + "'", long70 == 500L);
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(objCollection75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objEnumeration77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertEquals(obj82.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "{}");
    }

    @Test
    public void test7077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7077");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setLogBaseDir("{}");
        atomikosProperties0.setLogBaseDir("{}");
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        properties18.clear();
        java.util.Properties properties20 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        atomikosProperties21.logBaseName = "tmlog";
        int int28 = atomikosProperties21.maxActives;
        boolean boolean29 = properties18.containsValue((java.lang.Object) int28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        atomikosProperties31.setThreadedTwoPhaseCommit(false);
        boolean boolean36 = properties18.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        properties18.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        atomikosProperties38.setDefaultJtaTimeout((long) (-1));
        int int47 = atomikosProperties38.maxActives;
        atomikosProperties38.setDefaultJtaTimeout(1L);
        java.lang.String str50 = atomikosProperties38.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.enableLogging = true;
        boolean boolean54 = atomikosProperties51.forceShutdownOnVmExit;
        java.lang.Object obj55 = properties18.replace((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        java.lang.String str59 = atomikosProperties57.logBaseName;
        java.lang.String str60 = atomikosProperties57.getLogBaseDir();
        atomikosProperties57.setMaxActives((int) (byte) -1);
        boolean boolean63 = atomikosProperties57.isEnableLogging();
        long long64 = atomikosProperties57.checkpointInterval;
        atomikosProperties57.setCheckpointInterval(10L);
        atomikosProperties57.serialJtaTransactions = false;
        atomikosProperties57.setCheckpointInterval(0L);
        atomikosProperties57.setMaxActives((int) (byte) 1);
        atomikosProperties57.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties57.setLogBaseDir("tmlog");
        boolean boolean77 = atomikosProperties57.isEnableLogging();
        atomikosProperties0.set(properties18, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}", (java.lang.Object) atomikosProperties57);
        java.util.Set<java.lang.Object> objSet79 = properties18.keySet();
        java.util.Set<java.lang.Object> objSet80 = properties18.keySet();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 500L + "'", long64 == 500L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objSet79);
        org.junit.Assert.assertNotNull(objSet80);
    }

    @Test
    public void test7078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7078");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}", "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test7079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7079");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        java.lang.Object obj16 = properties15.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setMaxActives((int) (byte) -1);
        boolean boolean23 = atomikosProperties17.isEnableLogging();
        atomikosProperties17.transactionManagerUniqueName = "";
        atomikosProperties17.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        java.lang.String str30 = atomikosProperties28.logBaseName;
        java.lang.String str31 = atomikosProperties28.getLogBaseDir();
        atomikosProperties28.setMaxActives((int) (byte) -1);
        java.lang.String str34 = atomikosProperties28.getService();
        java.lang.Object obj35 = properties15.getOrDefault((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        int int38 = atomikosProperties36.getMaxActives();
        java.lang.String str39 = atomikosProperties36.logBaseDir;
        java.lang.Object obj41 = properties15.putIfAbsent((java.lang.Object) atomikosProperties36, (java.lang.Object) "");
        int int42 = properties15.size();
        java.util.Collection<java.lang.Object> objCollection43 = properties15.values();
        boolean boolean45 = properties2.remove((java.lang.Object) properties15, (java.lang.Object) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setCheckpointInterval((long) 100);
        java.lang.String str49 = atomikosProperties46.getService();
        atomikosProperties46.defaultJtaTimeout = 'a';
        atomikosProperties46.enableLogging = false;
        atomikosProperties46.threadedTwoPhaseCommit = false;
        atomikosProperties46.setMaxActives(10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.logBaseDir;
        atomikosProperties58.setTransactionManagerUniqueName("");
        int int62 = atomikosProperties58.getMaxActives();
        java.lang.String str63 = atomikosProperties58.transactionManagerUniqueName;
        atomikosProperties58.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        properties68.clear();
        java.util.Properties properties70 = new java.util.Properties(properties68);
        atomikosProperties58.set(properties68, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj76 = properties68.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet77 = properties68.stringPropertyNames();
        boolean boolean78 = properties2.remove((java.lang.Object) 10, (java.lang.Object) strSet77);
        java.util.Properties properties79 = new java.util.Properties(properties2);
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str82 = atomikosProperties81.logBaseDir;
        atomikosProperties81.setTransactionManagerUniqueName("");
        int int85 = atomikosProperties81.getMaxActives();
        java.lang.String str86 = atomikosProperties81.getLogBaseDir();
        atomikosProperties81.setTransactionManagerUniqueName("");
        atomikosProperties81.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties81.setCheckpointInterval((long) 9);
        atomikosProperties81.setLogBaseDir("{}");
        boolean boolean95 = atomikosProperties81.isSerialJtaTransactions();
        boolean boolean96 = properties2.equals((java.lang.Object) atomikosProperties81);
        atomikosProperties81.setCheckpointInterval((long) 10);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 50 + "'", int62 == 50);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 50 + "'", int85 == 50);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test7080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7080");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxTimeout = (-1L);
        long long9 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test7081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7081");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        int int6 = atomikosProperties0.maxActives;
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 10);
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str14 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test7082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7082");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setDefaultJtaTimeout((long) '#');
        java.lang.String str10 = atomikosProperties0.getService();
        java.lang.String str11 = atomikosProperties0.transactionManagerUniqueName;
        int int12 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setDefaultJtaTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        java.lang.Object obj18 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties30);
        java.util.Set<java.lang.String> strSet38 = properties17.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet39 = properties17.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        atomikosProperties41.forceShutdownOnVmExit = false;
        atomikosProperties41.threadedTwoPhaseCommit = false;
        atomikosProperties41.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties41.threadedTwoPhaseCommit = false;
        java.lang.String str51 = atomikosProperties41.transactionManagerUniqueName;
        atomikosProperties41.enableLogging = true;
        atomikosProperties41.threadedTwoPhaseCommit = false;
        atomikosProperties0.set(properties17, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", (java.lang.Object) atomikosProperties41);
        atomikosProperties41.setCheckpointInterval(35L);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str51, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test7083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7083");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        java.util.Collection<java.lang.Object> objCollection57 = properties17.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet58 = properties17.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        java.util.Properties properties61 = atomikosProperties59.asProperties();
        properties61.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        atomikosProperties63.setTransactionManagerUniqueName("");
        int int67 = atomikosProperties63.getMaxActives();
        boolean boolean68 = properties61.containsValue((java.lang.Object) int67);
        java.lang.Object obj71 = properties61.setProperty("", "");
        java.util.Properties properties72 = new java.util.Properties(properties61);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str74 = atomikosProperties73.logBaseDir;
        java.lang.String str75 = atomikosProperties73.logBaseName;
        java.lang.String str76 = atomikosProperties73.getLogBaseDir();
        atomikosProperties73.setMaxActives((int) (byte) -1);
        boolean boolean79 = atomikosProperties73.isEnableLogging();
        atomikosProperties73.transactionManagerUniqueName = "";
        atomikosProperties73.threadedTwoPhaseCommit = true;
        java.util.Properties properties84 = atomikosProperties73.asProperties();
        atomikosProperties73.maxTimeout = 10L;
        java.lang.Object obj87 = properties61.remove((java.lang.Object) atomikosProperties73);
        atomikosProperties73.serialJtaTransactions = false;
        boolean boolean90 = properties17.containsKey((java.lang.Object) atomikosProperties73);
        java.lang.String str91 = atomikosProperties73.logBaseName;
        atomikosProperties73.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        long long94 = atomikosProperties73.checkpointInterval;
        long long95 = atomikosProperties73.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(objEntrySet58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tmlog" + "'", str75, "tmlog");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(properties84);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "tmlog" + "'", str91, "tmlog");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 500L + "'", long94 == 500L);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 10000L + "'", long95 == 10000L);
    }

    @Test
    public void test7084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7084");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long8 = atomikosProperties0.maxTimeout;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) 100);
        java.lang.String str14 = atomikosProperties11.getService();
        atomikosProperties11.defaultJtaTimeout = 'a';
        atomikosProperties11.enableLogging = false;
        atomikosProperties11.threadedTwoPhaseCommit = false;
        atomikosProperties11.setForceShutdownOnVmExit(false);
        java.lang.Object obj23 = properties9.remove((java.lang.Object) atomikosProperties11);
        int int24 = properties9.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        properties27.clear();
        java.util.Properties properties29 = new java.util.Properties(properties27);
        int int30 = properties29.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties29.entrySet();
        java.util.Set<java.lang.String> strSet32 = properties29.stringPropertyNames();
        boolean boolean33 = properties9.equals((java.lang.Object) properties29);
        java.io.Writer writer34 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties29.store(writer34, "{com.atomikos.icatch.{}=false, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objEntrySet31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test7085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7085");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.maxActives = '4';
        atomikosProperties0.maxTimeout = 10;
        boolean boolean50 = atomikosProperties0.isSerialJtaTransactions();
        long long51 = atomikosProperties0.checkpointInterval;
        boolean boolean52 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str53 = atomikosProperties0.logBaseDir;
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test7086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7086");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        int int31 = properties2.size();
        java.util.Properties properties32 = new java.util.Properties(properties2);
        java.io.PrintWriter printWriter33 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printWriter33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
    }

    @Test
    public void test7087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7087");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        int int66 = properties53.size();
        java.util.Properties properties67 = new java.util.Properties(properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.logBaseDir;
        atomikosProperties68.setTransactionManagerUniqueName("");
        int int72 = atomikosProperties68.getMaxActives();
        java.lang.String str73 = atomikosProperties68.getLogBaseDir();
        atomikosProperties68.setTransactionManagerUniqueName("");
        atomikosProperties68.setDefaultJtaTimeout(0L);
        boolean boolean78 = atomikosProperties68.isForceShutdownOnVmExit();
        atomikosProperties68.setMaxActives((int) (short) 100);
        atomikosProperties68.maxActives = (short) 100;
        atomikosProperties68.enableLogging = true;
        long long85 = atomikosProperties68.checkpointInterval;
        atomikosProperties68.threadedTwoPhaseCommit = false;
        boolean boolean88 = properties53.contains((java.lang.Object) atomikosProperties68);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 500L + "'", long85 == 500L);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test7088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7088");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        java.lang.String str7 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.defaultJtaTimeout = 10;
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test7089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7089");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties29.defaultJtaTimeout = (byte) 10;
        atomikosProperties29.setService("hi!");
        java.lang.String str44 = atomikosProperties29.getService();
        atomikosProperties29.setForceShutdownOnVmExit(false);
        int int47 = atomikosProperties29.maxActives;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
    }

    @Test
    public void test7090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7090");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.lang.Object obj15 = properties8.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.lang.Object obj16 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        java.lang.Object obj20 = properties19.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration21 = properties19.elements();
        java.util.Properties properties22 = new java.util.Properties(properties19);
        properties8.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        boolean boolean26 = atomikosProperties24.isSerialJtaTransactions();
        atomikosProperties24.maxTimeout = 100;
        int int29 = atomikosProperties24.getMaxActives();
        atomikosProperties24.setEnableLogging(false);
        atomikosProperties24.logBaseDir = "{}";
        atomikosProperties24.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        boolean boolean36 = atomikosProperties24.serialJtaTransactions;
        boolean boolean37 = properties22.equals((java.lang.Object) boolean36);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test7091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7091");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setDefaultJtaTimeout(0L);
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 100);
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.forceShutdownOnVmExit = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test7092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7092");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.lang.Object obj15 = properties2.remove((java.lang.Object) atomikosProperties13);
        java.lang.String str16 = atomikosProperties13.logBaseName;
        atomikosProperties13.setEnableLogging(true);
        long long19 = atomikosProperties13.getCheckpointInterval();
        atomikosProperties13.transactionManagerUniqueName = "";
        boolean boolean22 = atomikosProperties13.serialJtaTransactions;
        atomikosProperties13.setCheckpointInterval((long) 11);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test7093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7093");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.serialJtaTransactions;
        long long8 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str9 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7094");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long8 = atomikosProperties0.maxTimeout;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) 100);
        java.lang.String str14 = atomikosProperties11.getService();
        atomikosProperties11.defaultJtaTimeout = 'a';
        atomikosProperties11.enableLogging = false;
        atomikosProperties11.threadedTwoPhaseCommit = false;
        atomikosProperties11.setForceShutdownOnVmExit(false);
        java.lang.Object obj23 = properties9.remove((java.lang.Object) atomikosProperties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.logBaseDir;
        java.lang.String str26 = atomikosProperties24.logBaseName;
        java.lang.String str27 = atomikosProperties24.getLogBaseDir();
        atomikosProperties24.setMaxActives((int) (byte) -1);
        boolean boolean30 = atomikosProperties24.isEnableLogging();
        atomikosProperties24.transactionManagerUniqueName = "";
        atomikosProperties24.setEnableLogging(false);
        boolean boolean35 = atomikosProperties24.isEnableLogging();
        atomikosProperties24.maxActives = 1;
        java.util.Properties properties38 = atomikosProperties24.asProperties();
        boolean boolean39 = atomikosProperties24.serialJtaTransactions;
        java.lang.Object obj40 = properties9.remove((java.lang.Object) atomikosProperties24);
        java.util.Properties properties41 = atomikosProperties24.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties41.elements();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNotNull(objEnumeration42);
    }

    @Test
    public void test7095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7095");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        java.lang.String str27 = properties2.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        properties30.clear();
        boolean boolean32 = properties30.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        atomikosProperties33.setTransactionManagerUniqueName("");
        int int37 = atomikosProperties33.getMaxActives();
        java.lang.String str38 = atomikosProperties33.transactionManagerUniqueName;
        boolean boolean39 = properties30.containsValue((java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) 100);
        atomikosProperties40.maxActives = (byte) 0;
        atomikosProperties40.setTransactionManagerUniqueName("");
        java.lang.Object obj47 = properties30.get((java.lang.Object) atomikosProperties40);
        boolean boolean49 = properties30.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        properties52.clear();
        boolean boolean54 = properties52.isEmpty();
        java.lang.Object obj55 = properties52.clone();
        java.util.Set<java.lang.Object> objSet56 = properties52.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) 100);
        java.lang.String str60 = atomikosProperties57.getService();
        atomikosProperties57.defaultJtaTimeout = 'a';
        atomikosProperties57.enableLogging = false;
        atomikosProperties57.threadedTwoPhaseCommit = false;
        int int67 = atomikosProperties57.maxActives;
        atomikosProperties57.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj70 = properties30.getOrDefault((java.lang.Object) properties52, (java.lang.Object) atomikosProperties57);
        java.lang.Object obj71 = properties2.remove((java.lang.Object) atomikosProperties57);
        long long72 = atomikosProperties57.checkpointInterval;
        boolean boolean73 = atomikosProperties57.forceShutdownOnVmExit;
        long long74 = atomikosProperties57.checkpointInterval;
        boolean boolean75 = atomikosProperties57.serialJtaTransactions;
        boolean boolean76 = atomikosProperties57.enableLogging;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{}");
        org.junit.Assert.assertNotNull(objSet56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 100L + "'", long72 == 100L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 100L + "'", long74 == 100L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test7096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7096");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.lang.String str12 = atomikosProperties0.logBaseName;
        boolean boolean13 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.enableLogging = false;
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test7097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7097");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.maxTimeout = 10000L;
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.maxActives = 1;
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        java.util.Properties properties18 = new java.util.Properties(properties17);
        java.lang.String str19 = properties18.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{}" + "'", str19, "{}");
    }

    @Test
    public void test7098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7098");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.logBaseName = "{}";
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test7099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7099");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.serialJtaTransactions = true;
        boolean boolean9 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test7100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7100");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        java.lang.Object obj15 = properties12.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str16 = properties12.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setMaxActives((int) (byte) -1);
        boolean boolean23 = atomikosProperties17.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) 100);
        boolean boolean27 = atomikosProperties24.isForceShutdownOnVmExit();
        java.lang.Object obj28 = properties12.putIfAbsent((java.lang.Object) atomikosProperties17, (java.lang.Object) boolean27);
        java.util.Set<java.lang.String> strSet29 = properties12.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet30 = properties12.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties12.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        atomikosProperties32.forceShutdownOnVmExit = false;
        atomikosProperties32.threadedTwoPhaseCommit = false;
        atomikosProperties32.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties32.threadedTwoPhaseCommit = false;
        atomikosProperties32.setDefaultJtaTimeout(500L);
        java.lang.Object obj44 = properties4.putIfAbsent((java.lang.Object) properties12, (java.lang.Object) 500L);
        java.util.Collection<java.lang.Object> objCollection45 = properties12.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        atomikosProperties46.setTransactionManagerUniqueName("");
        int int50 = atomikosProperties46.getMaxActives();
        java.lang.String str51 = atomikosProperties46.transactionManagerUniqueName;
        atomikosProperties46.logBaseName = "";
        java.lang.Object obj54 = properties12.remove((java.lang.Object) atomikosProperties46);
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties12.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objEnumeration55);
    }

    @Test
    public void test7101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7101");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        java.io.Writer writer45 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties44.store(writer45, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test7102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7102");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        boolean boolean29 = properties2.isEmpty();
        java.lang.Object obj30 = properties2.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet31 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setCheckpointInterval((long) 100);
        boolean boolean35 = atomikosProperties32.isForceShutdownOnVmExit();
        atomikosProperties32.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties32.service = "";
        atomikosProperties32.threadedTwoPhaseCommit = true;
        atomikosProperties32.service = "{}";
        java.lang.String str44 = atomikosProperties32.logBaseName;
        boolean boolean45 = atomikosProperties32.isThreadedTwoPhaseCommit();
        boolean boolean46 = properties2.containsValue((java.lang.Object) atomikosProperties32);
        atomikosProperties32.setLogBaseDir("{com.atomikos.icatch.tmlog=0.0}");
        atomikosProperties32.logBaseDir = "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean51 = atomikosProperties32.forceShutdownOnVmExit;
        atomikosProperties32.setMaxActives((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertNotNull(objEntrySet31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test7103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7103");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties2.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties2.entrySet();
        java.lang.String str22 = properties2.getProperty("hi!");
        java.util.Enumeration<java.lang.Object> objEnumeration23 = properties2.keys();
        java.util.Set<java.lang.String> strSet24 = properties2.stringPropertyNames();
        java.io.InputStream inputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.loadFromXML(inputStream25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(objEnumeration23);
        org.junit.Assert.assertNotNull(strSet24);
    }

    @Test
    public void test7104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7104");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.setCheckpointInterval((long) 100);
        boolean boolean6 = atomikosProperties3.isForceShutdownOnVmExit();
        atomikosProperties3.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean9 = properties2.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties2.entrySet();
        java.lang.String str11 = properties2.toString();
        java.util.Collection<java.lang.Object> objCollection12 = properties2.values();
        java.lang.String str14 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean15 = properties2.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str11, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test7105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7105");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setEnableLogging(true);
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet6 = properties5.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNotNull(objSet6);
    }

    @Test
    public void test7106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7106");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        int int5 = properties4.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        boolean boolean12 = properties4.containsKey((java.lang.Object) objCollection11);
        int int13 = properties4.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.enableLogging = true;
        boolean boolean17 = atomikosProperties14.forceShutdownOnVmExit;
        atomikosProperties14.setSerialJtaTransactions(false);
        java.lang.String str20 = atomikosProperties14.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        boolean boolean23 = atomikosProperties21.isSerialJtaTransactions();
        atomikosProperties21.maxTimeout = 100;
        int int26 = atomikosProperties21.getMaxActives();
        atomikosProperties21.setEnableLogging(false);
        atomikosProperties21.logBaseDir = "{}";
        java.lang.Object obj31 = properties4.replace((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties21);
        atomikosProperties14.setMaxActives(9);
        atomikosProperties14.setMaxActives((int) (byte) -1);
        atomikosProperties14.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test7107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7107");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        long long12 = atomikosProperties10.getDefaultJtaTimeout();
        java.util.Properties properties13 = atomikosProperties10.asProperties();
        java.lang.String str14 = properties13.toString();
        boolean boolean15 = properties2.equals((java.lang.Object) properties13);
        java.util.Set<java.lang.String> strSet16 = properties13.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        properties19.clear();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj22 = properties19.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        atomikosProperties24.forceShutdownOnVmExit = false;
        atomikosProperties24.setTransactionManagerUniqueName("");
        java.lang.Object obj30 = properties19.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties24);
        java.util.Set<java.lang.Object> objSet31 = properties19.keySet();
        java.lang.String str33 = properties19.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties34 = new java.util.Properties(properties19);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties34.elements();
        java.lang.Object obj36 = properties13.get((java.lang.Object) properties34);
        java.lang.Object obj37 = null;
        boolean boolean38 = properties13.equals(obj37);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNotNull(properties13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str14, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(objEnumeration35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test7108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7108");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Collection<java.lang.Object> objCollection13 = properties2.values();
        java.lang.String str15 = properties2.getProperty("hi!");
        int int16 = properties2.size();
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties2.elements();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(objEnumeration17);
    }

    @Test
    public void test7109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7109");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties10.transactionManagerUniqueName = "hi!";
        atomikosProperties10.maxTimeout = 2;
        long long44 = atomikosProperties10.maxTimeout;
        java.lang.String str45 = atomikosProperties10.service;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2L + "'", long44 == 2L);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test7110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7110");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        long long10 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setService("");
        atomikosProperties0.serialJtaTransactions = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
    }

    @Test
    public void test7111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7111");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setLogBaseName("");
        boolean boolean13 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setSerialJtaTransactions(true);
        long long16 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
    }

    @Test
    public void test7112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7112");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        boolean boolean23 = atomikosProperties4.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        java.lang.Object obj29 = properties26.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        java.lang.Object obj34 = properties33.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        atomikosProperties35.setMaxActives((int) (byte) -1);
        boolean boolean41 = atomikosProperties35.isEnableLogging();
        atomikosProperties35.transactionManagerUniqueName = "";
        atomikosProperties35.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        java.lang.String str52 = atomikosProperties46.getService();
        java.lang.Object obj53 = properties33.getOrDefault((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        int int56 = atomikosProperties54.getMaxActives();
        java.lang.String str57 = atomikosProperties54.logBaseDir;
        java.lang.Object obj59 = properties33.putIfAbsent((java.lang.Object) atomikosProperties54, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        boolean boolean64 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.setEnableLogging(false);
        boolean boolean67 = properties26.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        java.util.Properties properties70 = atomikosProperties68.asProperties();
        properties70.clear();
        java.util.Properties properties72 = new java.util.Properties(properties70);
        java.lang.Object obj75 = properties72.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str76 = properties72.toString();
        boolean boolean77 = properties26.containsValue((java.lang.Object) properties72);
        java.util.Set<java.lang.Object> objSet78 = properties72.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long81 = atomikosProperties80.checkpointInterval;
        int int82 = atomikosProperties80.getMaxActives();
        atomikosProperties4.set(properties72, "hi!", (java.lang.Object) atomikosProperties80);
        java.util.Set<java.lang.String> strSet84 = properties72.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str86 = atomikosProperties85.logBaseDir;
        atomikosProperties85.setTransactionManagerUniqueName("");
        int int89 = atomikosProperties85.getMaxActives();
        java.lang.String str90 = atomikosProperties85.getLogBaseDir();
        boolean boolean91 = properties72.containsKey((java.lang.Object) atomikosProperties85);
        java.util.Properties properties92 = atomikosProperties85.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration93 = properties92.elements();
        int int94 = properties92.size();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj75, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{}" + "'", str76, "{}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objSet78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 50 + "'", int82 == 50);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 50 + "'", int89 == 50);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(properties92);
        org.junit.Assert.assertNotNull(objEnumeration93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
    }

    @Test
    public void test7113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7113");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean6 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test7114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7114");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        long long5 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setMaxTimeout((long) (byte) 10);
        long long8 = atomikosProperties0.maxTimeout;
        boolean boolean9 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.defaultJtaTimeout = 50;
        long long12 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setLogBaseName("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}");
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.serialJtaTransactions = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
    }

    @Test
    public void test7115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7115");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.setService("{}");
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        java.lang.Object obj14 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        boolean boolean21 = atomikosProperties15.isEnableLogging();
        atomikosProperties15.transactionManagerUniqueName = "";
        atomikosProperties15.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setMaxActives((int) (byte) -1);
        java.lang.String str32 = atomikosProperties26.getService();
        java.lang.Object obj33 = properties13.getOrDefault((java.lang.Object) atomikosProperties15, (java.lang.Object) atomikosProperties26);
        atomikosProperties15.maxActives = ' ';
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        atomikosProperties36.transactionManagerUniqueName = "";
        atomikosProperties36.threadedTwoPhaseCommit = true;
        java.util.Properties properties47 = atomikosProperties36.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str55 = atomikosProperties54.logBaseDir;
        atomikosProperties54.setTransactionManagerUniqueName("");
        int int58 = atomikosProperties54.getMaxActives();
        java.lang.String str59 = atomikosProperties54.transactionManagerUniqueName;
        boolean boolean60 = properties51.containsValue((java.lang.Object) atomikosProperties54);
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties51.elements();
        atomikosProperties15.set(properties47, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        long long67 = atomikosProperties63.getDefaultJtaTimeout();
        atomikosProperties63.defaultJtaTimeout = 50;
        java.lang.String str70 = atomikosProperties63.getTransactionManagerUniqueName();
        atomikosProperties63.threadedTwoPhaseCommit = false;
        atomikosProperties63.forceShutdownOnVmExit = false;
        java.lang.String str75 = atomikosProperties63.transactionManagerUniqueName;
        atomikosProperties63.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean78 = properties47.contains((java.lang.Object) atomikosProperties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str81 = atomikosProperties80.logBaseDir;
        atomikosProperties80.setTransactionManagerUniqueName("");
        int int84 = atomikosProperties80.getMaxActives();
        java.lang.String str85 = atomikosProperties80.getLogBaseDir();
        java.lang.String str86 = atomikosProperties80.logBaseName;
        boolean boolean87 = atomikosProperties80.threadedTwoPhaseCommit;
        java.lang.String str88 = atomikosProperties80.logBaseDir;
        atomikosProperties80.enableLogging = false;
        atomikosProperties80.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties93 = atomikosProperties80.asProperties();
        java.lang.String str94 = atomikosProperties80.transactionManagerUniqueName;
        java.util.Properties properties95 = atomikosProperties80.asProperties();
        atomikosProperties0.set(properties47, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties80);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50 + "'", int58 == 50);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 50 + "'", int84 == 50);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "tmlog" + "'", str86, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(properties93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(properties95);
    }

    @Test
    public void test7116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7116");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.transactionManagerUniqueName;
        long long7 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7117");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        java.lang.String str3 = atomikosProperties0.getService();
        atomikosProperties0.setCheckpointInterval(97L);
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test7118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7118");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        java.lang.String str10 = properties4.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str13 = properties4.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.hi!=0, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test7119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7119");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.setCheckpointInterval((long) 100);
        boolean boolean6 = atomikosProperties3.isForceShutdownOnVmExit();
        atomikosProperties3.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean9 = properties2.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        atomikosProperties10.setService("");
        java.util.Properties properties15 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        properties19.clear();
        boolean boolean21 = properties19.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        atomikosProperties22.setTransactionManagerUniqueName("");
        int int26 = atomikosProperties22.getMaxActives();
        java.lang.String str27 = atomikosProperties22.transactionManagerUniqueName;
        boolean boolean28 = properties19.containsValue((java.lang.Object) atomikosProperties22);
        boolean boolean29 = atomikosProperties22.forceShutdownOnVmExit;
        atomikosProperties10.set(properties15, "{}", (java.lang.Object) boolean29);
        java.util.Properties properties31 = new java.util.Properties(properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        atomikosProperties32.setTransactionManagerUniqueName("");
        int int36 = atomikosProperties32.getMaxActives();
        java.lang.String str37 = atomikosProperties32.transactionManagerUniqueName;
        atomikosProperties32.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        properties42.clear();
        java.util.Properties properties44 = new java.util.Properties(properties42);
        atomikosProperties32.set(properties42, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj50 = properties42.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties51 = new java.util.Properties(properties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        properties54.clear();
        boolean boolean56 = properties54.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        java.util.Properties properties59 = atomikosProperties57.asProperties();
        boolean boolean61 = properties59.containsValue((java.lang.Object) 100L);
        boolean boolean62 = properties54.contains((java.lang.Object) properties59);
        java.lang.Object obj63 = properties15.put((java.lang.Object) properties42, (java.lang.Object) properties54);
        java.lang.Object obj65 = properties2.put((java.lang.Object) properties15, (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Collection<java.lang.Object> objCollection66 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long68 = atomikosProperties67.checkpointInterval;
        java.util.Properties properties69 = atomikosProperties67.asProperties();
        properties69.clear();
        boolean boolean71 = properties69.isEmpty();
        java.lang.Object obj72 = properties69.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long74 = atomikosProperties73.checkpointInterval;
        java.util.Properties properties75 = atomikosProperties73.asProperties();
        properties75.clear();
        boolean boolean77 = properties75.isEmpty();
        java.util.Collection<java.lang.Object> objCollection78 = properties75.values();
        properties69.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties75);
        java.util.Properties properties80 = new java.util.Properties(properties69);
        java.lang.Object obj81 = properties80.clone();
        java.lang.Object obj83 = properties2.putIfAbsent((java.lang.Object) properties80, (java.lang.Object) true);
        java.io.OutputStream outputStream84 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(outputStream84, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(objCollection66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "{}");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 500L + "'", long74 == 500L);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objCollection78);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "{}");
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test7120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7120");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str6 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Enumeration<java.lang.Object> objEnumeration7 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        atomikosProperties13.setTransactionManagerUniqueName("");
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.logBaseName = "tmlog";
        int int20 = atomikosProperties13.maxActives;
        boolean boolean21 = properties10.containsValue((java.lang.Object) int20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        atomikosProperties23.setThreadedTwoPhaseCommit(false);
        boolean boolean28 = properties10.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        atomikosProperties29.maxActives = (byte) 0;
        java.lang.Object obj34 = properties10.remove((java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setCheckpointInterval((long) 100);
        boolean boolean41 = atomikosProperties38.isForceShutdownOnVmExit();
        atomikosProperties38.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean44 = properties37.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet45 = properties37.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties37.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setLogBaseName("");
        boolean boolean53 = atomikosProperties47.threadedTwoPhaseCommit;
        long long54 = atomikosProperties47.getDefaultJtaTimeout();
        atomikosProperties47.setSerialJtaTransactions(true);
        boolean boolean57 = properties37.containsKey((java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.logBaseDir;
        atomikosProperties58.setTransactionManagerUniqueName("");
        int int62 = atomikosProperties58.getMaxActives();
        atomikosProperties58.setTransactionManagerUniqueName("{}");
        boolean boolean65 = atomikosProperties58.forceShutdownOnVmExit;
        atomikosProperties58.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        java.lang.Object obj68 = properties10.replace((java.lang.Object) atomikosProperties47, (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean69 = properties2.contains((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(objEnumeration7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objEntrySet45);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 50 + "'", int62 == 50);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test7121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7121");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet24 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        java.lang.Object obj28 = properties27.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setMaxActives((int) (byte) -1);
        boolean boolean35 = atomikosProperties29.isEnableLogging();
        atomikosProperties29.transactionManagerUniqueName = "";
        atomikosProperties29.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        java.lang.String str46 = atomikosProperties40.getService();
        java.lang.Object obj47 = properties27.getOrDefault((java.lang.Object) atomikosProperties29, (java.lang.Object) atomikosProperties40);
        atomikosProperties29.maxActives = ' ';
        java.lang.String str50 = atomikosProperties29.getTransactionManagerUniqueName();
        atomikosProperties29.setCheckpointInterval((long) (byte) 10);
        boolean boolean53 = atomikosProperties29.threadedTwoPhaseCommit;
        java.lang.Object obj54 = properties2.get((java.lang.Object) boolean53);
        int int55 = properties2.size();
        boolean boolean56 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties2.elements();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(objEntrySet24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objEnumeration57);
    }

    @Test
    public void test7122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7122");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setCheckpointInterval((long) 100);
        boolean boolean18 = atomikosProperties15.isForceShutdownOnVmExit();
        atomikosProperties15.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean21 = properties14.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.enableLogging = true;
        boolean boolean26 = properties11.replace((java.lang.Object) boolean21, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection27 = properties11.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        boolean boolean31 = properties11.contains((java.lang.Object) properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.util.Set<java.lang.String> strSet36 = properties35.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        java.lang.Object obj40 = properties39.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        atomikosProperties41.setMaxActives((int) (byte) -1);
        boolean boolean47 = atomikosProperties41.isEnableLogging();
        atomikosProperties41.transactionManagerUniqueName = "";
        atomikosProperties41.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        java.lang.String str55 = atomikosProperties52.getLogBaseDir();
        atomikosProperties52.setMaxActives((int) (byte) -1);
        java.lang.String str58 = atomikosProperties52.getService();
        java.lang.Object obj59 = properties39.getOrDefault((java.lang.Object) atomikosProperties41, (java.lang.Object) atomikosProperties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        boolean boolean64 = atomikosProperties60.isSerialJtaTransactions();
        long long65 = atomikosProperties60.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        properties68.clear();
        boolean boolean70 = properties68.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        atomikosProperties71.setTransactionManagerUniqueName("");
        int int75 = atomikosProperties71.getMaxActives();
        java.lang.String str76 = atomikosProperties71.transactionManagerUniqueName;
        boolean boolean77 = properties68.containsValue((java.lang.Object) atomikosProperties71);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties78.setCheckpointInterval((long) 100);
        atomikosProperties78.maxActives = (byte) 0;
        atomikosProperties78.setTransactionManagerUniqueName("");
        java.lang.Object obj85 = properties68.get((java.lang.Object) atomikosProperties78);
        boolean boolean87 = properties68.containsValue((java.lang.Object) 100.0d);
        boolean boolean88 = properties35.replace(obj59, (java.lang.Object) atomikosProperties60, (java.lang.Object) boolean87);
        atomikosProperties0.set(properties11, "", (java.lang.Object) properties35);
        long long90 = atomikosProperties0.getMaxTimeout();
        long long91 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean92 = atomikosProperties0.isEnableLogging();
        boolean boolean93 = atomikosProperties0.enableLogging;
        atomikosProperties0.checkpointInterval = 0;
        long long96 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str97 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.transactionManagerUniqueName = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 500L + "'", long65 == 500L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 50 + "'", int75 == 50);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 300000L + "'", long90 == 300000L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 10000L + "'", long91 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test7123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7123");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = 1;
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet15 = properties14.keySet();
        java.lang.Object obj16 = properties14.clone();
        java.util.Enumeration<?> wildcardEnumeration17 = properties14.propertyNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(objSet15);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(wildcardEnumeration17);
    }

    @Test
    public void test7124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7124");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setMaxTimeout(32L);
        atomikosProperties0.logBaseDir = "tmlog";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
    }

    @Test
    public void test7125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7125");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        int int7 = atomikosProperties0.maxActives;
        long long8 = atomikosProperties0.getCheckpointInterval();
        int int9 = atomikosProperties0.maxActives;
        long long10 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        atomikosProperties11.setTransactionManagerUniqueName("");
        int int15 = atomikosProperties11.getMaxActives();
        java.lang.String str16 = atomikosProperties11.transactionManagerUniqueName;
        atomikosProperties11.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        properties21.clear();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        atomikosProperties11.set(properties21, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj29 = properties21.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet30 = properties21.stringPropertyNames();
        java.lang.String str32 = properties21.getProperty("hi!");
        java.util.Enumeration<java.lang.Object> objEnumeration33 = properties21.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.setLogBaseName("");
        long long42 = atomikosProperties35.getMaxTimeout();
        java.lang.String str43 = atomikosProperties35.getService();
        java.util.Properties properties44 = atomikosProperties35.asProperties();
        atomikosProperties0.set(properties21, "", (java.lang.Object) atomikosProperties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        atomikosProperties46.setTransactionManagerUniqueName("");
        int int50 = atomikosProperties46.getMaxActives();
        atomikosProperties46.logBaseName = "tmlog";
        int int53 = atomikosProperties46.maxActives;
        long long54 = atomikosProperties46.getCheckpointInterval();
        int int55 = atomikosProperties46.maxActives;
        java.lang.Object obj56 = properties21.get((java.lang.Object) atomikosProperties46);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(objEnumeration33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 300000L + "'", long42 == 300000L);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 50 + "'", int53 == 50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 500L + "'", long54 == 500L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 50 + "'", int55 == 50);
        org.junit.Assert.assertNull(obj56);
    }

    @Test
    public void test7126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7126");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        java.lang.String str3 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 'a';
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setEnableLogging(true);
        java.lang.String str12 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
    }

    @Test
    public void test7127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7127");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection6 = properties2.values();
        int int7 = properties2.size();
        java.lang.String str10 = properties2.getProperty("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog, tmlog=1}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog, tmlog=1}" + "'", str10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog, tmlog=1}");
    }

    @Test
    public void test7128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7128");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setDefaultJtaTimeout((long) 50);
        boolean boolean16 = properties9.contains((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        atomikosProperties17.setService("");
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        boolean boolean36 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties17.set(properties22, "{}", (java.lang.Object) boolean36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        boolean boolean42 = properties40.containsValue((java.lang.Object) 100L);
        java.lang.String str43 = properties40.toString();
        java.lang.Object obj44 = properties9.put((java.lang.Object) "{}", (java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        java.lang.Object obj48 = properties47.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        boolean boolean55 = atomikosProperties49.isEnableLogging();
        atomikosProperties49.transactionManagerUniqueName = "";
        atomikosProperties49.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        atomikosProperties60.setMaxActives((int) (byte) -1);
        java.lang.String str66 = atomikosProperties60.getService();
        java.lang.Object obj67 = properties47.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        int int70 = atomikosProperties68.getMaxActives();
        java.lang.String str71 = atomikosProperties68.logBaseDir;
        java.lang.Object obj73 = properties47.putIfAbsent((java.lang.Object) atomikosProperties68, (java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet74 = properties47.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet75 = properties47.entrySet();
        java.lang.Object obj76 = properties40.remove((java.lang.Object) properties47);
        java.util.Properties properties77 = new java.util.Properties(properties47);
        java.lang.String str78 = properties77.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 50 + "'", int70 == 50);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(objSet74);
        org.junit.Assert.assertNotNull(objEntrySet75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "{}" + "'", str78, "{}");
    }

    @Test
    public void test7129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7129");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.lang.Object obj23 = properties5.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        boolean boolean28 = properties26.containsValue((java.lang.Object) 100L);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties26.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        boolean boolean34 = atomikosProperties30.isSerialJtaTransactions();
        long long35 = atomikosProperties30.checkpointInterval;
        boolean boolean36 = atomikosProperties30.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        boolean boolean41 = atomikosProperties37.isSerialJtaTransactions();
        atomikosProperties37.serialJtaTransactions = true;
        atomikosProperties37.checkpointInterval = (-1L);
        atomikosProperties37.threadedTwoPhaseCommit = true;
        java.lang.String str48 = atomikosProperties37.transactionManagerUniqueName;
        atomikosProperties37.maxActives = (byte) 1;
        java.lang.Object obj51 = properties26.getOrDefault((java.lang.Object) boolean36, (java.lang.Object) atomikosProperties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        java.lang.String str55 = atomikosProperties52.getLogBaseDir();
        atomikosProperties52.setMaxActives((int) (byte) -1);
        boolean boolean58 = atomikosProperties52.isEnableLogging();
        long long59 = atomikosProperties52.checkpointInterval;
        atomikosProperties52.setCheckpointInterval(10L);
        atomikosProperties52.serialJtaTransactions = false;
        boolean boolean64 = atomikosProperties52.serialJtaTransactions;
        atomikosProperties52.threadedTwoPhaseCommit = true;
        java.lang.String str67 = atomikosProperties52.getLogBaseDir();
        java.lang.Object obj68 = properties5.putIfAbsent((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties52);
        long long69 = atomikosProperties37.defaultJtaTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10000L + "'", long69 == 10000L);
    }

    @Test
    public void test7130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7130");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.lang.String str15 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        atomikosProperties17.setTransactionManagerUniqueName("");
        int int21 = atomikosProperties17.getMaxActives();
        java.lang.String str22 = atomikosProperties17.transactionManagerUniqueName;
        atomikosProperties17.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        properties27.clear();
        java.util.Properties properties29 = new java.util.Properties(properties27);
        atomikosProperties17.set(properties27, "tmlog", (java.lang.Object) 0.0d);
        java.lang.String str33 = properties27.toString();
        boolean boolean34 = properties27.isEmpty();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        java.lang.Object obj38 = properties27.setProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass39 = obj38.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{com.atomikos.icatch.tmlog=0.0}" + "'", str33, "{com.atomikos.icatch.tmlog=0.0}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test7131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7131");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        properties42.clear();
        boolean boolean44 = properties42.isEmpty();
        java.lang.Object obj45 = properties42.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        java.lang.Object obj50 = properties49.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        boolean boolean57 = atomikosProperties51.isEnableLogging();
        atomikosProperties51.transactionManagerUniqueName = "";
        atomikosProperties51.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str63 = atomikosProperties62.logBaseDir;
        java.lang.String str64 = atomikosProperties62.logBaseName;
        java.lang.String str65 = atomikosProperties62.getLogBaseDir();
        atomikosProperties62.setMaxActives((int) (byte) -1);
        java.lang.String str68 = atomikosProperties62.getService();
        java.lang.Object obj69 = properties49.getOrDefault((java.lang.Object) atomikosProperties51, (java.lang.Object) atomikosProperties62);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long71 = atomikosProperties70.checkpointInterval;
        int int72 = atomikosProperties70.getMaxActives();
        java.lang.String str73 = atomikosProperties70.logBaseDir;
        java.lang.Object obj75 = properties49.putIfAbsent((java.lang.Object) atomikosProperties70, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str77 = atomikosProperties76.logBaseDir;
        java.lang.String str78 = atomikosProperties76.logBaseName;
        java.lang.String str79 = atomikosProperties76.getLogBaseDir();
        boolean boolean80 = atomikosProperties76.isSerialJtaTransactions();
        atomikosProperties76.setEnableLogging(false);
        boolean boolean83 = properties42.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties76);
        atomikosProperties76.logBaseName = "{}";
        long long86 = atomikosProperties76.getDefaultJtaTimeout();
        boolean boolean87 = atomikosProperties76.isThreadedTwoPhaseCommit();
        atomikosProperties76.threadedTwoPhaseCommit = true;
        atomikosProperties76.setCheckpointInterval((long) 100);
        boolean boolean92 = properties2.containsValue((java.lang.Object) atomikosProperties76);
        java.io.PrintWriter printWriter93 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printWriter93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{}");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNotNull(obj50);
// flaky:         org.junit.Assert.assertEquals(obj50.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "tmlog" + "'", str64, "tmlog");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 500L + "'", long71 == 500L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10000L + "'", long86 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test7132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7132");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setCheckpointInterval((long) 9);
        java.lang.String str12 = atomikosProperties0.getService();
        boolean boolean13 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setService("");
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean18 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test7133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7133");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        java.lang.Object obj49 = properties48.clone();
        java.lang.Object obj50 = properties44.replace((java.lang.Object) true, obj49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long52 = atomikosProperties51.checkpointInterval;
        java.util.Properties properties53 = atomikosProperties51.asProperties();
        boolean boolean55 = properties53.containsValue((java.lang.Object) 100L);
        java.lang.String str56 = properties53.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties53.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.checkpointInterval;
        java.util.Properties properties63 = atomikosProperties61.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties64.setCheckpointInterval((long) 100);
        boolean boolean67 = atomikosProperties64.isForceShutdownOnVmExit();
        atomikosProperties64.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean70 = properties63.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.enableLogging = true;
        boolean boolean75 = properties60.replace((java.lang.Object) boolean70, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection76 = properties60.values();
        boolean boolean77 = properties53.contains((java.lang.Object) properties60);
        properties44.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties60);
        java.util.Collection<java.lang.Object> objCollection79 = properties60.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long81 = atomikosProperties80.checkpointInterval;
        int int82 = atomikosProperties80.getMaxActives();
        atomikosProperties80.setCheckpointInterval(1L);
        atomikosProperties80.setService("{}");
        atomikosProperties80.logBaseName = "tmlog";
        long long89 = atomikosProperties80.getMaxTimeout();
        boolean boolean90 = atomikosProperties80.serialJtaTransactions;
        java.lang.Object obj91 = properties60.get((java.lang.Object) atomikosProperties80);
        java.util.Enumeration<?> wildcardEnumeration92 = properties60.propertyNames();
        java.io.PrintWriter printWriter93 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties60.list(printWriter93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNotNull(obj49);
// flaky:         org.junit.Assert.assertEquals(obj49.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objCollection76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objCollection79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 50 + "'", int82 == 50);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 300000L + "'", long89 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNotNull(wildcardEnumeration92);
    }

    @Test
    public void test7134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7134");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setLogBaseDir("{}");
        atomikosProperties0.setLogBaseDir("{}");
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        atomikosProperties0.setSerialJtaTransactions(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(properties15);
    }

    @Test
    public void test7135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7135");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        int int3 = properties2.size();
        java.io.Reader reader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(reader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
    }

    @Test
    public void test7136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7136");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties10.transactionManagerUniqueName = "hi!";
        atomikosProperties10.maxTimeout = 2;
        long long44 = atomikosProperties10.maxTimeout;
        atomikosProperties10.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2L + "'", long44 == 2L);
    }

    @Test
    public void test7137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7137");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setMaxTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        java.util.Properties properties12 = atomikosProperties10.asProperties();
        properties12.clear();
        boolean boolean14 = properties12.isEmpty();
        java.lang.Object obj15 = properties12.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        properties18.clear();
        boolean boolean20 = properties18.isEmpty();
        java.util.Collection<java.lang.Object> objCollection21 = properties18.values();
        properties12.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.util.Enumeration<?> wildcardEnumeration23 = properties18.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.enableLogging = true;
        atomikosProperties24.maxActives = (byte) -1;
        boolean boolean29 = atomikosProperties24.isForceShutdownOnVmExit();
        boolean boolean30 = properties18.containsValue((java.lang.Object) atomikosProperties24);
        java.lang.String str31 = properties18.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties18.elements();
        java.util.Set<java.lang.String> strSet33 = properties18.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        properties36.clear();
        java.util.Properties properties38 = new java.util.Properties(properties36);
        int int39 = properties38.size();
        java.util.Set<java.lang.Object> objSet40 = properties38.keySet();
        java.lang.Object obj41 = properties18.remove((java.lang.Object) properties38);
        java.util.Properties properties42 = new java.util.Properties(properties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        java.util.Properties properties48 = new java.util.Properties(properties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        atomikosProperties49.setTransactionManagerUniqueName("");
        int int53 = atomikosProperties49.getMaxActives();
        atomikosProperties49.logBaseName = "tmlog";
        int int56 = atomikosProperties49.maxActives;
        boolean boolean57 = properties46.containsValue((java.lang.Object) int56);
        properties46.clear();
        atomikosProperties0.set(properties38, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=1, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) properties46);
        java.io.Reader reader60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties38.load(reader60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertNotNull(wildcardEnumeration23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{}" + "'", str31, "{}");
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 50 + "'", int53 == 50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test7138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7138");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.service = "";
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.forceShutdownOnVmExit = true;
        long long13 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.maxActives = 0;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
    }

    @Test
    public void test7139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7139");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        int int5 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseDir = "{}";
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        long long12 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        long long15 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.checkpointInterval = 9;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
    }

    @Test
    public void test7140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7140");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        java.util.Properties properties48 = new java.util.Properties(properties46);
        java.lang.Object obj51 = properties48.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str52 = properties48.toString();
        boolean boolean53 = properties2.containsValue((java.lang.Object) properties48);
        java.util.Set<java.lang.Object> objSet54 = properties48.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        atomikosProperties55.forceShutdownOnVmExit = false;
        atomikosProperties55.setTransactionManagerUniqueName("");
        boolean boolean61 = atomikosProperties55.serialJtaTransactions;
        java.lang.Object obj62 = properties48.get((java.lang.Object) atomikosProperties55);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        boolean boolean67 = atomikosProperties63.isSerialJtaTransactions();
        atomikosProperties63.serialJtaTransactions = true;
        atomikosProperties63.checkpointInterval = (-1L);
        atomikosProperties63.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long75 = atomikosProperties74.checkpointInterval;
        java.util.Properties properties76 = atomikosProperties74.asProperties();
        boolean boolean78 = properties76.containsValue((java.lang.Object) 100L);
        java.lang.String str79 = properties76.toString();
        java.lang.Object obj82 = properties76.setProperty("", "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet83 = properties76.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties84 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long85 = atomikosProperties84.checkpointInterval;
        long long86 = atomikosProperties84.getDefaultJtaTimeout();
        java.util.Properties properties87 = atomikosProperties84.asProperties();
        java.lang.String str88 = properties87.toString();
        boolean boolean89 = properties76.equals((java.lang.Object) properties87);
        java.util.Properties properties90 = new java.util.Properties(properties76);
        boolean boolean91 = properties48.remove((java.lang.Object) true, (java.lang.Object) properties90);
        java.io.OutputStream outputStream92 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties90.save(outputStream92, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.hi!=0, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj51, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objSet54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 500L + "'", long75 == 500L);
        org.junit.Assert.assertNotNull(properties76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str79, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(objEntrySet83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 500L + "'", long85 == 500L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10000L + "'", long86 == 10000L);
        org.junit.Assert.assertNotNull(properties87);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str88, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test7141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7141");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        atomikosProperties36.threadedTwoPhaseCommit = true;
        atomikosProperties36.setCheckpointInterval((long) 100);
        java.lang.String str52 = atomikosProperties36.logBaseName;
        atomikosProperties36.maxTimeout = 3;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
    }

    @Test
    public void test7142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7142");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        long long8 = atomikosProperties0.getMaxTimeout();
        long long9 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval((long) (short) 0);
        atomikosProperties0.setDefaultJtaTimeout(32L);
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
    }

    @Test
    public void test7143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7143");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.checkpointInterval = (-1L);
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.logBaseDir = "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}";
        atomikosProperties0.setMaxTimeout((long) 10);
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test7144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7144");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Collection<java.lang.Object> objCollection13 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        boolean boolean18 = properties16.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        java.lang.Object obj24 = properties21.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setLogBaseName("");
        java.lang.Object obj31 = properties16.replace((java.lang.Object) properties21, (java.lang.Object) "");
        java.lang.String str33 = properties16.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Object obj34 = properties2.get((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        atomikosProperties35.setLogBaseName("");
        long long41 = atomikosProperties35.defaultJtaTimeout;
        java.util.Properties properties42 = atomikosProperties35.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long44 = atomikosProperties43.checkpointInterval;
        java.util.Properties properties45 = atomikosProperties43.asProperties();
        properties45.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        boolean boolean49 = atomikosProperties47.isSerialJtaTransactions();
        atomikosProperties47.maxTimeout = 100;
        int int52 = atomikosProperties47.getMaxActives();
        atomikosProperties47.setEnableLogging(false);
        java.lang.String str55 = atomikosProperties47.getService();
        int int56 = atomikosProperties47.getMaxActives();
        java.lang.Object obj58 = properties45.replace((java.lang.Object) int56, (java.lang.Object) (short) 0);
        java.util.Set<java.lang.String> strSet59 = properties45.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties45.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties45.elements();
        java.lang.Object obj62 = properties2.getOrDefault((java.lang.Object) properties42, (java.lang.Object) objEnumeration61);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10000L + "'", long41 == 10000L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertNotNull(obj62);
    }

    @Test
    public void test7145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7145");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties29.defaultJtaTimeout = (byte) 10;
        atomikosProperties29.setService("hi!");
        atomikosProperties29.setCheckpointInterval((long) (byte) 1);
        atomikosProperties29.setDefaultJtaTimeout(32L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test7146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7146");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        java.lang.String str29 = atomikosProperties13.transactionManagerUniqueName;
        boolean boolean30 = atomikosProperties13.forceShutdownOnVmExit;
        java.lang.String str31 = atomikosProperties13.getService();
        boolean boolean32 = atomikosProperties13.forceShutdownOnVmExit;
        atomikosProperties13.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
        atomikosProperties13.defaultJtaTimeout = (short) 1;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test7147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7147");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        java.util.Collection<java.lang.Object> objCollection57 = properties17.values();
        properties17.clear();
        java.lang.String str60 = properties17.getProperty("");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet61 = properties17.entrySet();
        java.lang.String str62 = properties17.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        atomikosProperties63.setMaxActives((int) (byte) -1);
        boolean boolean69 = atomikosProperties63.isEnableLogging();
        long long70 = atomikosProperties63.checkpointInterval;
        atomikosProperties63.setCheckpointInterval(10L);
        boolean boolean73 = atomikosProperties63.isForceShutdownOnVmExit();
        atomikosProperties63.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean76 = atomikosProperties63.forceShutdownOnVmExit;
        atomikosProperties63.setEnableLogging(false);
        atomikosProperties63.forceShutdownOnVmExit = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str82 = atomikosProperties81.logBaseDir;
        boolean boolean83 = atomikosProperties81.isEnableLogging();
        atomikosProperties81.setLogBaseName("tmlog");
        boolean boolean86 = atomikosProperties81.isForceShutdownOnVmExit();
        atomikosProperties81.setDefaultJtaTimeout((long) '4');
        java.lang.Object obj89 = properties17.putIfAbsent((java.lang.Object) atomikosProperties63, (java.lang.Object) '4');
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(objEntrySet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{}" + "'", str62, "{}");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 500L + "'", long70 == 500L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test7148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7148");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str5 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setCheckpointInterval(10L);
        java.lang.String str8 = atomikosProperties0.getLogBaseName();
        int int9 = atomikosProperties0.maxActives;
        atomikosProperties0.maxTimeout = 10;
        long long12 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
    }

    @Test
    public void test7149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7149");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.checkpointInterval = (short) 10;
        atomikosProperties0.setLogBaseName("{}");
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.serialJtaTransactions = true;
        boolean boolean14 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test7150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7150");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.setCheckpointInterval((long) 100);
        int int6 = atomikosProperties0.getMaxActives();
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setDefaultJtaTimeout((long) 9);
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean11 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test7151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7151");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        java.util.Properties properties48 = new java.util.Properties(properties46);
        java.lang.Object obj51 = properties48.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str52 = properties48.toString();
        boolean boolean53 = properties2.containsValue((java.lang.Object) properties48);
        java.util.Set<java.lang.Object> objSet54 = properties48.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        atomikosProperties55.forceShutdownOnVmExit = false;
        atomikosProperties55.setTransactionManagerUniqueName("");
        boolean boolean61 = atomikosProperties55.serialJtaTransactions;
        java.lang.Object obj62 = properties48.get((java.lang.Object) atomikosProperties55);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        atomikosProperties63.setMaxActives((int) (byte) -1);
        java.lang.String str69 = atomikosProperties63.getService();
        atomikosProperties63.setEnableLogging(false);
        java.lang.String str72 = atomikosProperties63.getLogBaseName();
        boolean boolean73 = properties48.equals((java.lang.Object) atomikosProperties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long75 = atomikosProperties74.checkpointInterval;
        java.util.Properties properties76 = atomikosProperties74.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties77.setCheckpointInterval((long) 100);
        boolean boolean80 = atomikosProperties77.isForceShutdownOnVmExit();
        atomikosProperties77.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean83 = properties76.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet84 = properties76.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration85 = properties76.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties86 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str87 = atomikosProperties86.logBaseDir;
        java.lang.String str88 = atomikosProperties86.logBaseName;
        java.lang.String str89 = atomikosProperties86.getLogBaseDir();
        atomikosProperties86.setLogBaseName("");
        boolean boolean92 = atomikosProperties86.threadedTwoPhaseCommit;
        long long93 = atomikosProperties86.getDefaultJtaTimeout();
        atomikosProperties86.setSerialJtaTransactions(true);
        boolean boolean96 = properties76.containsKey((java.lang.Object) atomikosProperties86);
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties76);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj51, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objSet54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tmlog" + "'", str72, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 500L + "'", long75 == 500L);
        org.junit.Assert.assertNotNull(properties76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objEntrySet84);
        org.junit.Assert.assertNotNull(objEnumeration85);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "tmlog" + "'", str88, "tmlog");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 10000L + "'", long93 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test7152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7152");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setDefaultJtaTimeout((long) '#');
        java.lang.String str10 = atomikosProperties0.getService();
        java.lang.String str11 = atomikosProperties0.transactionManagerUniqueName;
        int int12 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setDefaultJtaTimeout(300000L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        java.lang.Object obj18 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties30);
        java.util.Set<java.lang.String> strSet38 = properties17.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet39 = properties17.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        atomikosProperties41.forceShutdownOnVmExit = false;
        atomikosProperties41.threadedTwoPhaseCommit = false;
        atomikosProperties41.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties41.threadedTwoPhaseCommit = false;
        java.lang.String str51 = atomikosProperties41.transactionManagerUniqueName;
        atomikosProperties41.enableLogging = true;
        atomikosProperties41.threadedTwoPhaseCommit = false;
        atomikosProperties0.set(properties17, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", (java.lang.Object) atomikosProperties41);
        boolean boolean57 = atomikosProperties41.serialJtaTransactions;
        atomikosProperties41.setThreadedTwoPhaseCommit(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(objSet39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str51, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test7153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7153");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        long long9 = atomikosProperties0.maxTimeout;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean11 = atomikosProperties0.forceShutdownOnVmExit;
        long long12 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
    }

    @Test
    public void test7154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7154");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setLogBaseName("{}");
        long long9 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        atomikosProperties0.logBaseName = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}";
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertNotNull(properties14);
    }

    @Test
    public void test7155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7155");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        long long11 = atomikosProperties0.getDefaultJtaTimeout();
        long long12 = atomikosProperties0.getDefaultJtaTimeout();
        long long13 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
    }

    @Test
    public void test7156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7156");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties5.setCheckpointInterval((long) 100);
        boolean boolean8 = atomikosProperties5.isForceShutdownOnVmExit();
        atomikosProperties5.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long11 = atomikosProperties5.getDefaultJtaTimeout();
        long long12 = atomikosProperties5.getMaxTimeout();
        atomikosProperties5.logBaseName = "tmlog";
        atomikosProperties5.maxActives = (byte) 0;
        atomikosProperties5.checkpointInterval = (-1L);
        atomikosProperties5.setCheckpointInterval((long) (byte) 10);
        long long21 = atomikosProperties5.defaultJtaTimeout;
        boolean boolean22 = properties2.equals((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        boolean boolean27 = properties25.containsValue((java.lang.Object) 100L);
        java.lang.String str28 = properties25.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setMaxActives((int) (byte) -1);
        boolean boolean35 = atomikosProperties29.isEnableLogging();
        atomikosProperties29.transactionManagerUniqueName = "";
        atomikosProperties29.setEnableLogging(false);
        boolean boolean40 = atomikosProperties29.isEnableLogging();
        atomikosProperties29.maxActives = 1;
        java.util.Properties properties43 = atomikosProperties29.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.logBaseDir;
        atomikosProperties44.setTransactionManagerUniqueName("");
        int int48 = atomikosProperties44.getMaxActives();
        java.lang.String str49 = atomikosProperties44.getLogBaseDir();
        java.lang.String str50 = atomikosProperties44.logBaseName;
        boolean boolean51 = atomikosProperties44.threadedTwoPhaseCommit;
        java.lang.String str52 = atomikosProperties44.logBaseDir;
        atomikosProperties44.enableLogging = false;
        java.lang.Object obj55 = properties25.getOrDefault((java.lang.Object) atomikosProperties29, (java.lang.Object) false);
        java.lang.Object obj56 = properties2.remove((java.lang.Object) properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        long long59 = atomikosProperties57.getDefaultJtaTimeout();
        atomikosProperties57.setService("hi!");
        atomikosProperties57.setEnableLogging(false);
        atomikosProperties57.threadedTwoPhaseCommit = true;
        atomikosProperties57.maxActives = 10;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        java.util.Properties properties70 = atomikosProperties68.asProperties();
        properties70.clear();
        java.util.Properties properties72 = new java.util.Properties(properties70);
        int int73 = properties72.size();
        boolean boolean74 = properties72.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.logBaseDir;
        java.lang.String str77 = atomikosProperties75.logBaseName;
        java.lang.String str78 = atomikosProperties75.getLogBaseDir();
        atomikosProperties75.setMaxActives((int) (byte) -1);
        java.lang.String str81 = atomikosProperties75.getService();
        atomikosProperties75.setEnableLogging(false);
        java.lang.Object obj84 = properties72.remove((java.lang.Object) false);
        java.lang.Object obj85 = null;
        boolean boolean86 = properties72.equals(obj85);
        java.lang.Object obj87 = properties25.getOrDefault((java.lang.Object) atomikosProperties57, (java.lang.Object) boolean86);
        atomikosProperties57.setLogBaseDir("hi!");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10000L + "'", long21 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str28, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + false + "'", obj55, false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tmlog" + "'", str77, "tmlog");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + obj87 + "' != '" + false + "'", obj87, false);
    }

    @Test
    public void test7157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7157");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        boolean boolean8 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str9 = atomikosProperties0.getService();
        atomikosProperties0.setMaxActives((int) (byte) 1);
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.logBaseName = "hi!";
        atomikosProperties0.setLogBaseName("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}");
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.tmlog=0.0}");
        boolean boolean20 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test7158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7158");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setSerialJtaTransactions(false);
        long long9 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        java.lang.String str12 = atomikosProperties0.getService();
        boolean boolean13 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean14 = atomikosProperties0.forceShutdownOnVmExit;
        long long15 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
    }

    @Test
    public void test7159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7159");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setDefaultJtaTimeout((long) 50);
        boolean boolean16 = properties9.contains((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        atomikosProperties17.setService("");
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        boolean boolean36 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties17.set(properties22, "{}", (java.lang.Object) boolean36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        boolean boolean42 = properties40.containsValue((java.lang.Object) 100L);
        java.lang.String str43 = properties40.toString();
        java.lang.Object obj44 = properties9.put((java.lang.Object) "{}", (java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        java.lang.Object obj48 = properties47.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        boolean boolean55 = atomikosProperties49.isEnableLogging();
        atomikosProperties49.transactionManagerUniqueName = "";
        atomikosProperties49.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        atomikosProperties60.setMaxActives((int) (byte) -1);
        java.lang.String str66 = atomikosProperties60.getService();
        java.lang.Object obj67 = properties47.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        int int70 = atomikosProperties68.getMaxActives();
        java.lang.String str71 = atomikosProperties68.logBaseDir;
        java.lang.Object obj73 = properties47.putIfAbsent((java.lang.Object) atomikosProperties68, (java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet74 = properties47.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet75 = properties47.entrySet();
        java.lang.Object obj76 = properties40.remove((java.lang.Object) properties47);
        java.util.Properties properties77 = new java.util.Properties(properties47);
        java.io.OutputStream outputStream78 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties47.storeToXML(outputStream78, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.hi!=0, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 50 + "'", int70 == 50);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(objSet74);
        org.junit.Assert.assertNotNull(objEntrySet75);
        org.junit.Assert.assertNull(obj76);
    }

    @Test
    public void test7160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7160");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        boolean boolean11 = atomikosProperties9.isSerialJtaTransactions();
        atomikosProperties9.transactionManagerUniqueName = "";
        atomikosProperties9.setTransactionManagerUniqueName("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        atomikosProperties16.setService("");
        java.util.Properties properties21 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        properties25.clear();
        boolean boolean27 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        atomikosProperties28.setTransactionManagerUniqueName("");
        int int32 = atomikosProperties28.getMaxActives();
        java.lang.String str33 = atomikosProperties28.transactionManagerUniqueName;
        boolean boolean34 = properties25.containsValue((java.lang.Object) atomikosProperties28);
        boolean boolean35 = atomikosProperties28.forceShutdownOnVmExit;
        atomikosProperties16.set(properties21, "{}", (java.lang.Object) boolean35);
        java.lang.Object obj39 = properties21.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{}");
        java.util.Set<java.lang.Object> objSet40 = properties21.keySet();
        java.lang.Object obj41 = properties2.replace((java.lang.Object) atomikosProperties9, (java.lang.Object) properties21);
        atomikosProperties9.setEnableLogging(true);
        boolean boolean44 = atomikosProperties9.isEnableLogging();
        int int45 = atomikosProperties9.maxActives;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 50 + "'", int45 == 50);
    }

    @Test
    public void test7161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7161");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection6 = properties2.values();
        java.util.Collection<java.lang.Object> objCollection7 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        boolean boolean12 = properties10.isEmpty();
        java.lang.Object obj13 = properties10.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Enumeration<?> wildcardEnumeration21 = properties16.propertyNames();
        java.util.Properties properties22 = new java.util.Properties(properties16);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        int int24 = properties2.size();
        boolean boolean25 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setMaxActives((int) (byte) -1);
        java.lang.String str32 = atomikosProperties26.getService();
        atomikosProperties26.setDefaultJtaTimeout((long) (-1));
        int int35 = atomikosProperties26.maxActives;
        long long36 = atomikosProperties26.maxTimeout;
        atomikosProperties26.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        atomikosProperties43.setTransactionManagerUniqueName("");
        int int47 = atomikosProperties43.getMaxActives();
        boolean boolean48 = properties41.containsValue((java.lang.Object) int47);
        java.lang.Object obj51 = properties41.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties52 = new java.util.Properties(properties41);
        int int53 = properties41.size();
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties41.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str56 = atomikosProperties55.logBaseDir;
        java.lang.String str57 = atomikosProperties55.logBaseName;
        java.lang.String str58 = atomikosProperties55.getLogBaseDir();
        atomikosProperties55.setMaxActives((int) (byte) -1);
        boolean boolean61 = atomikosProperties55.isEnableLogging();
        long long62 = atomikosProperties55.checkpointInterval;
        atomikosProperties55.setCheckpointInterval(10L);
        boolean boolean65 = atomikosProperties55.isForceShutdownOnVmExit();
        atomikosProperties55.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean68 = atomikosProperties55.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        java.lang.String str71 = atomikosProperties69.logBaseName;
        java.lang.String str72 = atomikosProperties69.getLogBaseDir();
        boolean boolean73 = atomikosProperties69.isSerialJtaTransactions();
        atomikosProperties69.setEnableLogging(false);
        boolean boolean76 = atomikosProperties69.serialJtaTransactions;
        long long77 = atomikosProperties69.defaultJtaTimeout;
        java.lang.String str78 = atomikosProperties69.logBaseName;
        java.lang.String str79 = atomikosProperties69.getLogBaseName();
        atomikosProperties69.setLogBaseName("");
        java.lang.Object obj82 = properties41.put((java.lang.Object) boolean68, (java.lang.Object) atomikosProperties69);
        java.util.Enumeration<java.lang.Object> objEnumeration83 = properties41.elements();
        java.util.Collection<java.lang.Object> objCollection84 = properties41.values();
        java.lang.Object obj85 = properties2.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) properties41);
        java.util.Set<java.lang.Object> objSet86 = properties2.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(wildcardEnumeration21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objEnumeration54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tmlog" + "'", str57, "tmlog");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tmlog" + "'", str71, "tmlog");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(objEnumeration83);
        org.junit.Assert.assertNotNull(objCollection84);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNotNull(objSet86);
    }

    @Test
    public void test7162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7162");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.maxActives = '4';
        boolean boolean48 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean49 = atomikosProperties0.isForceShutdownOnVmExit();
        long long50 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setMaxTimeout((long) (short) 1);
        atomikosProperties0.setCheckpointInterval((long) 11);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
    }

    @Test
    public void test7163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7163");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setEnableLogging(false);
        int int11 = atomikosProperties0.maxActives;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
    }

    @Test
    public void test7164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7164");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        long long5 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.logBaseName = "hi!";
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10000L + "'", long5 == 10000L);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test7165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7165");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.lang.String str2 = atomikosProperties0.service;
        atomikosProperties0.setCheckpointInterval((long) '4');
        java.lang.String str5 = atomikosProperties0.service;
        java.lang.String str6 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
    }

    @Test
    public void test7166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7166");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.transactionManagerUniqueName = "";
        java.lang.String str5 = atomikosProperties0.getService();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test7167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7167");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.checkpointInterval = 0L;
        atomikosProperties0.setSerialJtaTransactions(true);
        boolean boolean14 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
        long long19 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 300000L + "'", long19 == 300000L);
    }

    @Test
    public void test7168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7168");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        properties7.clear();
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        int int52 = atomikosProperties50.getMaxActives();
        java.lang.String str53 = atomikosProperties50.logBaseDir;
        boolean boolean54 = atomikosProperties50.serialJtaTransactions;
        java.lang.String str55 = atomikosProperties50.transactionManagerUniqueName;
        boolean boolean56 = properties7.equals((java.lang.Object) atomikosProperties50);
        atomikosProperties50.setDefaultJtaTimeout(10000L);
        atomikosProperties50.maxActives = 0;
        java.lang.String str61 = atomikosProperties50.getLogBaseName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
    }

    @Test
    public void test7169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7169");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setLogBaseName("");
        long long6 = atomikosProperties0.defaultJtaTimeout;
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog, tmlog=1}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNotNull(properties7);
    }

    @Test
    public void test7170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7170");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.keys();
        properties14.clear();
        java.lang.String str17 = properties14.toString();
        properties14.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        atomikosProperties19.setTransactionManagerUniqueName("");
        int int23 = atomikosProperties19.getMaxActives();
        java.lang.String str24 = atomikosProperties19.transactionManagerUniqueName;
        atomikosProperties19.threadedTwoPhaseCommit = true;
        java.lang.Class<?> wildcardClass27 = atomikosProperties19.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        java.lang.String str30 = atomikosProperties28.transactionManagerUniqueName;
        boolean boolean31 = atomikosProperties28.enableLogging;
        boolean boolean32 = atomikosProperties28.isThreadedTwoPhaseCommit();
        boolean boolean33 = atomikosProperties28.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.logBaseDir;
        java.lang.String str36 = atomikosProperties34.transactionManagerUniqueName;
        boolean boolean37 = atomikosProperties34.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        java.lang.Object obj41 = properties40.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setMaxActives((int) (byte) -1);
        boolean boolean48 = atomikosProperties42.isEnableLogging();
        atomikosProperties42.transactionManagerUniqueName = "";
        atomikosProperties42.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        java.lang.String str55 = atomikosProperties53.logBaseName;
        java.lang.String str56 = atomikosProperties53.getLogBaseDir();
        atomikosProperties53.setMaxActives((int) (byte) -1);
        java.lang.String str59 = atomikosProperties53.getService();
        java.lang.Object obj60 = properties40.getOrDefault((java.lang.Object) atomikosProperties42, (java.lang.Object) atomikosProperties53);
        int int61 = properties40.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        boolean boolean67 = atomikosProperties63.isSerialJtaTransactions();
        atomikosProperties63.serialJtaTransactions = true;
        java.lang.String str70 = atomikosProperties63.getService();
        atomikosProperties34.set(properties40, "hi!", (java.lang.Object) str70);
        java.lang.String str73 = properties40.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.logBaseDir;
        java.lang.String str77 = atomikosProperties75.logBaseName;
        java.lang.String str78 = atomikosProperties75.getLogBaseName();
        long long79 = atomikosProperties75.maxTimeout;
        java.lang.String str80 = atomikosProperties75.getTransactionManagerUniqueName();
        atomikosProperties28.set(properties40, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties75);
        java.util.Enumeration<?> wildcardEnumeration82 = properties40.propertyNames();
        java.lang.Object obj83 = properties14.getOrDefault((java.lang.Object) wildcardClass27, (java.lang.Object) wildcardEnumeration82);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tmlog" + "'", str77, "tmlog");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 300000L + "'", long79 == 300000L);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(wildcardEnumeration82);
        org.junit.Assert.assertNotNull(obj83);
    }

    @Test
    public void test7171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7171");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        java.lang.String str27 = properties2.getProperty("tmlog");
        boolean boolean28 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.getLogBaseDir();
        java.lang.String str35 = atomikosProperties29.logBaseName;
        atomikosProperties29.setSerialJtaTransactions(true);
        java.lang.String str38 = atomikosProperties29.logBaseName;
        long long39 = atomikosProperties29.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        java.lang.String str46 = atomikosProperties40.getService();
        atomikosProperties40.setSerialJtaTransactions(false);
        long long49 = atomikosProperties40.defaultJtaTimeout;
        atomikosProperties40.setDefaultJtaTimeout((long) 'a');
        java.lang.String str52 = atomikosProperties40.getService();
        java.lang.Object obj53 = properties2.replace((java.lang.Object) long39, (java.lang.Object) atomikosProperties40);
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties2.elements();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objEnumeration54);
    }

    @Test
    public void test7172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7172");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        java.util.Properties properties48 = new java.util.Properties(properties7);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test7173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7173");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.lang.String str13 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.checkpointInterval = (-1L);
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setMaxTimeout(1L);
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
    }

    @Test
    public void test7174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7174");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        long long11 = atomikosProperties4.checkpointInterval;
        atomikosProperties4.setCheckpointInterval(10L);
        boolean boolean14 = atomikosProperties4.serialJtaTransactions;
        boolean boolean15 = properties2.equals((java.lang.Object) boolean14);
        java.util.Properties properties16 = new java.util.Properties(properties2);
        java.util.Collection<java.lang.Object> objCollection17 = properties2.values();
        java.io.InputStream inputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.loadFromXML(inputStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objCollection17);
    }

    @Test
    public void test7175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7175");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        atomikosProperties14.setMaxActives((int) (byte) -1);
        boolean boolean20 = atomikosProperties14.isEnableLogging();
        atomikosProperties14.transactionManagerUniqueName = "";
        atomikosProperties14.threadedTwoPhaseCommit = true;
        java.util.Properties properties25 = atomikosProperties14.asProperties();
        atomikosProperties14.maxTimeout = 10L;
        java.lang.Object obj28 = properties2.remove((java.lang.Object) atomikosProperties14);
        properties2.clear();
        boolean boolean30 = properties2.isEmpty();
        java.lang.Object obj31 = properties2.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
    }

    @Test
    public void test7176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7176");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        boolean boolean11 = atomikosProperties9.isSerialJtaTransactions();
        atomikosProperties9.transactionManagerUniqueName = "";
        atomikosProperties9.setTransactionManagerUniqueName("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        atomikosProperties16.setService("");
        java.util.Properties properties21 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        properties25.clear();
        boolean boolean27 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        atomikosProperties28.setTransactionManagerUniqueName("");
        int int32 = atomikosProperties28.getMaxActives();
        java.lang.String str33 = atomikosProperties28.transactionManagerUniqueName;
        boolean boolean34 = properties25.containsValue((java.lang.Object) atomikosProperties28);
        boolean boolean35 = atomikosProperties28.forceShutdownOnVmExit;
        atomikosProperties16.set(properties21, "{}", (java.lang.Object) boolean35);
        java.lang.Object obj39 = properties21.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{}");
        java.util.Set<java.lang.Object> objSet40 = properties21.keySet();
        java.lang.Object obj41 = properties2.replace((java.lang.Object) atomikosProperties9, (java.lang.Object) properties21);
        java.util.Properties properties42 = new java.util.Properties(properties2);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertNull(obj41);
    }

    @Test
    public void test7177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7177");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setMaxActives((-1));
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
    }

    @Test
    public void test7178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7178");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties2.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet46 = properties2.entrySet();
        java.util.Properties properties47 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        boolean boolean54 = atomikosProperties48.isEnableLogging();
        long long55 = atomikosProperties48.checkpointInterval;
        atomikosProperties48.setCheckpointInterval(10L);
        boolean boolean58 = atomikosProperties48.isForceShutdownOnVmExit();
        atomikosProperties48.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean61 = atomikosProperties48.forceShutdownOnVmExit;
        atomikosProperties48.setEnableLogging(false);
        java.lang.Object obj64 = properties47.get((java.lang.Object) atomikosProperties48);
        boolean boolean65 = properties47.isEmpty();
        java.lang.Object obj66 = properties47.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objEntrySet46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{}");
    }

    @Test
    public void test7179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7179");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        int int14 = properties2.size();
        boolean boolean15 = properties2.isEmpty();
        java.lang.String str17 = properties2.getProperty("");
        properties2.clear();
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(outputStream19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test7180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7180");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        atomikosProperties9.setLogBaseDir("{}");
        atomikosProperties9.setLogBaseDir("{}");
        atomikosProperties9.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test7181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7181");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties2.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties2.entrySet();
        java.lang.String str22 = properties2.getProperty("hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet23 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        java.lang.Object obj29 = properties26.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        java.util.Properties properties32 = atomikosProperties30.asProperties();
        properties32.clear();
        boolean boolean34 = properties32.isEmpty();
        java.util.Collection<java.lang.Object> objCollection35 = properties32.values();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        java.lang.Object obj39 = properties32.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.lang.Object obj40 = properties32.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        java.lang.Object obj44 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties43.elements();
        java.util.Properties properties46 = new java.util.Properties(properties43);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.util.Set<java.lang.String> strSet49 = properties46.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(objEntrySet23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(obj44);
// flaky:         org.junit.Assert.assertEquals(obj44.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(strSet49);
    }

    @Test
    public void test7182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7182");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setDefaultJtaTimeout(0L);
        int int10 = atomikosProperties0.maxActives;
        atomikosProperties0.setEnableLogging(false);
        long long13 = atomikosProperties0.getDefaultJtaTimeout();
        long long14 = atomikosProperties0.getMaxTimeout();
        boolean boolean15 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.maxTimeout = 52;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test7183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7183");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        java.lang.Object obj21 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        boolean boolean28 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.transactionManagerUniqueName = "";
        atomikosProperties22.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        java.lang.String str39 = atomikosProperties33.getService();
        java.lang.Object obj40 = properties20.getOrDefault((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties33);
        int int41 = properties20.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet42 = properties20.entrySet();
        java.lang.Object obj43 = properties2.remove((java.lang.Object) objEntrySet42);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties2.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties2.keys();
        boolean boolean47 = properties2.isEmpty();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        atomikosProperties49.setTransactionManagerUniqueName("");
        int int53 = atomikosProperties49.getMaxActives();
        java.lang.String str54 = atomikosProperties49.transactionManagerUniqueName;
        atomikosProperties49.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        java.util.Properties properties59 = atomikosProperties57.asProperties();
        properties59.clear();
        java.util.Properties properties61 = new java.util.Properties(properties59);
        atomikosProperties49.set(properties59, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj67 = properties59.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        java.util.Properties properties70 = atomikosProperties68.asProperties();
        properties70.clear();
        java.util.Properties properties72 = new java.util.Properties(properties70);
        java.lang.Object obj75 = properties72.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str76 = properties72.toString();
        java.lang.Object obj79 = properties72.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet80 = properties72.keySet();
        java.lang.Object obj81 = properties59.remove((java.lang.Object) properties72);
        java.util.Properties properties82 = new java.util.Properties(properties72);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties82);
        java.util.Enumeration<java.lang.Object> objEnumeration84 = properties2.elements();
        java.io.OutputStream outputStream85 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream85, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.hi!=0, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(objEntrySet42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 50 + "'", int53 == 50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj75, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{}" + "'", str76, "{}");
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(objSet80);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNotNull(objEnumeration84);
    }

    @Test
    public void test7184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7184");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setCheckpointInterval((long) 100);
        boolean boolean12 = atomikosProperties9.isForceShutdownOnVmExit();
        atomikosProperties9.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long15 = atomikosProperties9.getDefaultJtaTimeout();
        long long16 = atomikosProperties9.getMaxTimeout();
        atomikosProperties9.logBaseName = "tmlog";
        long long19 = atomikosProperties9.getDefaultJtaTimeout();
        atomikosProperties9.setForceShutdownOnVmExit(true);
        atomikosProperties9.maxTimeout = (short) 100;
        java.lang.Object obj24 = properties2.remove((java.lang.Object) atomikosProperties9);
        atomikosProperties9.forceShutdownOnVmExit = true;
        atomikosProperties9.setEnableLogging(true);
        long long29 = atomikosProperties9.defaultJtaTimeout;
        atomikosProperties9.logBaseDir = "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}";
        atomikosProperties9.setMaxTimeout(100L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
    }

    @Test
    public void test7185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7185");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        java.lang.Object obj16 = properties15.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setMaxActives((int) (byte) -1);
        boolean boolean23 = atomikosProperties17.isEnableLogging();
        atomikosProperties17.transactionManagerUniqueName = "";
        atomikosProperties17.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        java.lang.String str30 = atomikosProperties28.logBaseName;
        java.lang.String str31 = atomikosProperties28.getLogBaseDir();
        atomikosProperties28.setMaxActives((int) (byte) -1);
        java.lang.String str34 = atomikosProperties28.getService();
        java.lang.Object obj35 = properties15.getOrDefault((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        int int38 = atomikosProperties36.getMaxActives();
        java.lang.String str39 = atomikosProperties36.logBaseDir;
        java.lang.Object obj41 = properties15.putIfAbsent((java.lang.Object) atomikosProperties36, (java.lang.Object) "");
        int int42 = properties15.size();
        java.util.Collection<java.lang.Object> objCollection43 = properties15.values();
        boolean boolean45 = properties2.remove((java.lang.Object) properties15, (java.lang.Object) 1);
        boolean boolean46 = properties15.isEmpty();
        java.lang.String str48 = properties15.getProperty("tmlog");
        java.util.Properties properties49 = new java.util.Properties(properties15);
        boolean boolean50 = properties49.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test7186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7186");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setTransactionManagerUniqueName("");
        atomikosProperties6.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass16 = atomikosProperties6.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        int int19 = atomikosProperties17.getMaxActives();
        java.lang.String str20 = atomikosProperties17.transactionManagerUniqueName;
        long long21 = atomikosProperties17.getCheckpointInterval();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        atomikosProperties27.transactionManagerUniqueName = "";
        atomikosProperties27.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        java.lang.Object obj45 = properties25.getOrDefault((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        int int48 = atomikosProperties46.getMaxActives();
        java.lang.String str49 = atomikosProperties46.logBaseDir;
        java.lang.Object obj51 = properties25.putIfAbsent((java.lang.Object) atomikosProperties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        atomikosProperties52.setService("");
        boolean boolean57 = atomikosProperties52.threadedTwoPhaseCommit;
        java.lang.String str58 = atomikosProperties52.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        boolean boolean63 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.serialJtaTransactions = true;
        java.lang.String str66 = atomikosProperties59.getService();
        java.lang.Object obj67 = properties25.putIfAbsent((java.lang.Object) str58, (java.lang.Object) atomikosProperties59);
        boolean boolean68 = properties3.replace((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties59);
        java.util.Properties properties69 = new java.util.Properties(properties3);
        java.lang.String str72 = properties69.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}" + "'", str72, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test7187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7187");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        boolean boolean3 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        properties13.clear();
        boolean boolean15 = properties13.isEmpty();
        java.util.Collection<java.lang.Object> objCollection16 = properties13.values();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Enumeration<?> wildcardEnumeration18 = properties13.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        properties21.clear();
        boolean boolean23 = properties21.isEmpty();
        java.util.Collection<java.lang.Object> objCollection24 = properties21.values();
        boolean boolean25 = properties13.equals((java.lang.Object) properties21);
        java.util.Enumeration<?> wildcardEnumeration26 = properties21.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        java.lang.Object obj30 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        boolean boolean37 = atomikosProperties31.isEnableLogging();
        atomikosProperties31.transactionManagerUniqueName = "";
        atomikosProperties31.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setMaxActives((int) (byte) -1);
        java.lang.String str48 = atomikosProperties42.getService();
        java.lang.Object obj49 = properties29.getOrDefault((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        int int52 = atomikosProperties50.getMaxActives();
        java.lang.String str53 = atomikosProperties50.logBaseDir;
        java.lang.Object obj55 = properties29.putIfAbsent((java.lang.Object) atomikosProperties50, (java.lang.Object) "");
        int int56 = properties29.size();
        java.util.Collection<java.lang.Object> objCollection57 = properties29.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        int int60 = atomikosProperties58.getMaxActives();
        java.lang.String str61 = atomikosProperties58.logBaseDir;
        java.lang.String str62 = atomikosProperties58.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        atomikosProperties63.setMaxActives((int) (byte) -1);
        boolean boolean69 = atomikosProperties63.isEnableLogging();
        java.lang.String str70 = atomikosProperties63.getLogBaseName();
        java.lang.Object obj71 = properties29.replace((java.lang.Object) atomikosProperties58, (java.lang.Object) atomikosProperties63);
        int int72 = atomikosProperties58.getMaxActives();
        java.lang.Object obj73 = properties4.putIfAbsent((java.lang.Object) wildcardEnumeration26, (java.lang.Object) int72);
        boolean boolean74 = properties4.isEmpty();
        properties4.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(wildcardEnumeration18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardEnumeration26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "tmlog" + "'", str70, "tmlog");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test7188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7188");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        java.lang.String str13 = atomikosProperties0.getLogBaseName();
        boolean boolean14 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setMaxTimeout((long) '4');
        boolean boolean17 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test7189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7189");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties19.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        atomikosProperties21.setService("");
        boolean boolean26 = atomikosProperties21.threadedTwoPhaseCommit;
        int int27 = atomikosProperties21.getMaxActives();
        boolean boolean28 = atomikosProperties21.isEnableLogging();
        java.lang.String str29 = atomikosProperties21.getTransactionManagerUniqueName();
        atomikosProperties21.logBaseDir = "tmlog";
        boolean boolean32 = atomikosProperties21.enableLogging;
        atomikosProperties21.setMaxActives((int) (byte) 0);
        boolean boolean35 = properties19.containsKey((java.lang.Object) atomikosProperties21);
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test7190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7190");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval(1L);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.service = "tmlog";
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.serialJtaTransactions = true;
        long long14 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test7191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7191");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        int int4 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        java.lang.String str7 = atomikosProperties5.logBaseName;
        atomikosProperties5.setService("");
        java.util.Properties properties10 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        boolean boolean16 = properties14.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        atomikosProperties17.setTransactionManagerUniqueName("");
        int int21 = atomikosProperties17.getMaxActives();
        java.lang.String str22 = atomikosProperties17.transactionManagerUniqueName;
        boolean boolean23 = properties14.containsValue((java.lang.Object) atomikosProperties17);
        boolean boolean24 = atomikosProperties17.forceShutdownOnVmExit;
        atomikosProperties5.set(properties10, "{}", (java.lang.Object) boolean24);
        java.lang.Object obj28 = properties10.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{}");
        java.util.Set<java.lang.Object> objSet29 = properties10.keySet();
        java.lang.Object obj30 = properties3.get((java.lang.Object) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        java.lang.Object obj36 = properties33.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection37 = properties33.values();
        java.util.Collection<java.lang.Object> objCollection38 = properties33.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        boolean boolean43 = properties41.isEmpty();
        java.lang.Object obj44 = properties41.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        properties47.clear();
        boolean boolean49 = properties47.isEmpty();
        java.util.Collection<java.lang.Object> objCollection50 = properties47.values();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.util.Enumeration<?> wildcardEnumeration52 = properties47.propertyNames();
        java.util.Properties properties53 = new java.util.Properties(properties47);
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties53);
        int int55 = properties33.size();
        properties33.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) 100);
        boolean boolean60 = atomikosProperties57.isForceShutdownOnVmExit();
        atomikosProperties57.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long63 = atomikosProperties57.getDefaultJtaTimeout();
        long long64 = atomikosProperties57.getMaxTimeout();
        atomikosProperties57.logBaseName = "tmlog";
        long long67 = atomikosProperties57.defaultJtaTimeout;
        atomikosProperties57.setMaxActives(50);
        java.lang.Object obj70 = properties3.putIfAbsent((java.lang.Object) properties33, (java.lang.Object) atomikosProperties57);
        java.util.Collection<java.lang.Object> objCollection71 = properties33.values();
        int int72 = properties33.size();
        int int73 = properties33.size();
        java.io.OutputStream outputStream74 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties33.storeToXML(outputStream74, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.hi!=0, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objSet29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertNotNull(objCollection38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{}");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objCollection50);
        org.junit.Assert.assertNotNull(wildcardEnumeration52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 300000L + "'", long64 == 300000L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(objCollection71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test7192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7192");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        boolean boolean21 = properties2.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        java.util.Set<java.lang.Object> objSet28 = properties24.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.threadedTwoPhaseCommit = false;
        int int39 = atomikosProperties29.maxActives;
        atomikosProperties29.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj42 = properties2.getOrDefault((java.lang.Object) properties24, (java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long44 = atomikosProperties43.checkpointInterval;
        java.util.Properties properties45 = atomikosProperties43.asProperties();
        properties45.clear();
        java.util.Properties properties47 = new java.util.Properties(properties45);
        int int48 = properties47.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.util.Collection<java.lang.Object> objCollection54 = properties51.values();
        boolean boolean55 = properties47.containsKey((java.lang.Object) objCollection54);
        java.util.Properties properties56 = new java.util.Properties(properties47);
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties56);
        java.io.InputStream inputStream58 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties24.loadFromXML(inputStream58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test7193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7193");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        boolean boolean4 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        java.lang.String str8 = atomikosProperties6.transactionManagerUniqueName;
        boolean boolean9 = atomikosProperties6.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        java.util.Properties properties12 = atomikosProperties10.asProperties();
        java.lang.Object obj13 = properties12.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        atomikosProperties14.setMaxActives((int) (byte) -1);
        boolean boolean20 = atomikosProperties14.isEnableLogging();
        atomikosProperties14.transactionManagerUniqueName = "";
        atomikosProperties14.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        java.lang.String str31 = atomikosProperties25.getService();
        java.lang.Object obj32 = properties12.getOrDefault((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties25);
        int int33 = properties12.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.serialJtaTransactions = true;
        java.lang.String str42 = atomikosProperties35.getService();
        atomikosProperties6.set(properties12, "hi!", (java.lang.Object) str42);
        java.lang.String str45 = properties12.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseName();
        long long51 = atomikosProperties47.maxTimeout;
        java.lang.String str52 = atomikosProperties47.getTransactionManagerUniqueName();
        atomikosProperties0.set(properties12, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties47);
        atomikosProperties47.setLogBaseDir("tmlog");
        atomikosProperties47.maxTimeout = (byte) 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        properties60.clear();
        java.util.Properties properties62 = new java.util.Properties(properties60);
        java.lang.Object obj65 = properties62.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str66 = properties62.toString();
        java.lang.Object obj69 = properties62.setProperty("tmlog", "");
        java.util.Set<java.lang.String> strSet70 = properties62.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str73 = atomikosProperties72.logBaseDir;
        java.lang.String str74 = atomikosProperties72.transactionManagerUniqueName;
        boolean boolean75 = atomikosProperties72.enableLogging;
        atomikosProperties72.setCheckpointInterval((long) 100);
        int int78 = atomikosProperties72.getMaxActives();
        atomikosProperties72.enableLogging = true;
        atomikosProperties72.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties72.setLogBaseDir("{-1=1}");
        java.lang.String str85 = atomikosProperties72.getTransactionManagerUniqueName();
        atomikosProperties72.serialJtaTransactions = true;
        atomikosProperties47.set(properties62, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 300000L + "'", long51 == 300000L);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertEquals("'" + obj65 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj65, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{}" + "'", str66, "{}");
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 50 + "'", int78 == 50);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test7194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7194");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        boolean boolean20 = properties8.equals((java.lang.Object) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        atomikosProperties21.forceShutdownOnVmExit = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.maxTimeout = 50;
        boolean boolean33 = properties16.equals((java.lang.Object) 50);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties16.elements();
        java.util.Properties properties35 = new java.util.Properties(properties16);
        java.io.OutputStream outputStream36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties35.storeToXML(outputStream36, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objEnumeration34);
    }

    @Test
    public void test7195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7195");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.transactionManagerUniqueName;
        long long7 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7196");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.maxActives = '4';
        long long48 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = 10000L;
        long long51 = atomikosProperties0.getCheckpointInterval();
        boolean boolean52 = atomikosProperties0.isEnableLogging();
        long long53 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
    }

    @Test
    public void test7197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7197");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.lang.String str2 = atomikosProperties0.service;
        atomikosProperties0.setCheckpointInterval((long) '4');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        atomikosProperties9.setTransactionManagerUniqueName("");
        int int13 = atomikosProperties9.getMaxActives();
        boolean boolean14 = properties7.containsValue((java.lang.Object) int13);
        java.lang.Object obj17 = properties7.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties18 = new java.util.Properties(properties7);
        int int19 = properties7.size();
        boolean boolean20 = properties7.isEmpty();
        java.lang.String str22 = properties7.getProperty("{=}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        atomikosProperties23.logBaseName = "tmlog";
        atomikosProperties23.setEnableLogging(true);
        atomikosProperties23.setMaxActives((int) (byte) 0);
        atomikosProperties23.setMaxActives((int) (short) 1);
        boolean boolean36 = atomikosProperties23.isSerialJtaTransactions();
        java.lang.String str37 = atomikosProperties23.getLogBaseDir();
        boolean boolean38 = atomikosProperties23.isThreadedTwoPhaseCommit();
        atomikosProperties23.setForceShutdownOnVmExit(true);
        boolean boolean41 = properties7.contains((java.lang.Object) true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long44 = atomikosProperties43.checkpointInterval;
        java.util.Properties properties45 = atomikosProperties43.asProperties();
        java.lang.Object obj46 = properties45.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setMaxActives((int) (byte) -1);
        boolean boolean53 = atomikosProperties47.isEnableLogging();
        atomikosProperties47.transactionManagerUniqueName = "";
        atomikosProperties47.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.logBaseDir;
        java.lang.String str60 = atomikosProperties58.logBaseName;
        java.lang.String str61 = atomikosProperties58.getLogBaseDir();
        atomikosProperties58.setMaxActives((int) (byte) -1);
        java.lang.String str64 = atomikosProperties58.getService();
        java.lang.Object obj65 = properties45.getOrDefault((java.lang.Object) atomikosProperties47, (java.lang.Object) atomikosProperties58);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        int int68 = atomikosProperties66.getMaxActives();
        java.lang.String str69 = atomikosProperties66.logBaseDir;
        java.lang.Object obj71 = properties45.putIfAbsent((java.lang.Object) atomikosProperties66, (java.lang.Object) "");
        int int72 = properties45.size();
        java.util.Collection<java.lang.Object> objCollection73 = properties45.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long75 = atomikosProperties74.checkpointInterval;
        int int76 = atomikosProperties74.getMaxActives();
        java.lang.String str77 = atomikosProperties74.logBaseDir;
        java.lang.String str78 = atomikosProperties74.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str80 = atomikosProperties79.logBaseDir;
        java.lang.String str81 = atomikosProperties79.logBaseName;
        java.lang.String str82 = atomikosProperties79.getLogBaseDir();
        atomikosProperties79.setMaxActives((int) (byte) -1);
        boolean boolean85 = atomikosProperties79.isEnableLogging();
        java.lang.String str86 = atomikosProperties79.getLogBaseName();
        java.lang.Object obj87 = properties45.replace((java.lang.Object) atomikosProperties74, (java.lang.Object) atomikosProperties79);
        long long88 = atomikosProperties74.defaultJtaTimeout;
        atomikosProperties74.setTransactionManagerUniqueName("hi!");
        long long91 = atomikosProperties74.maxTimeout;
        long long92 = atomikosProperties74.maxTimeout;
        atomikosProperties74.maxActives = (byte) 1;
        atomikosProperties74.setTransactionManagerUniqueName("{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        java.lang.String str97 = atomikosProperties74.getService();
        atomikosProperties0.set(properties7, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) str97);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNotNull(obj46);
// flaky:         org.junit.Assert.assertEquals(obj46.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tmlog" + "'", str60, "tmlog");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 50 + "'", int68 == 50);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 500L + "'", long75 == 500L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 50 + "'", int76 == 50);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tmlog" + "'", str81, "tmlog");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "tmlog" + "'", str86, "tmlog");
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 10000L + "'", long88 == 10000L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 300000L + "'", long91 == 300000L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 300000L + "'", long92 == 300000L);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test7198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7198");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        long long9 = atomikosProperties0.maxTimeout;
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.maxTimeout = (short) 10;
        java.lang.String str14 = atomikosProperties0.getLogBaseName();
        java.lang.String str15 = atomikosProperties0.logBaseName;
        boolean boolean16 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test7199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7199");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean22 = properties2.contains((java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        properties29.clear();
        boolean boolean31 = properties29.isEmpty();
        java.lang.Object obj32 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        java.lang.Object obj37 = properties36.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        boolean boolean44 = atomikosProperties38.isEnableLogging();
        atomikosProperties38.transactionManagerUniqueName = "";
        atomikosProperties38.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        java.lang.String str55 = atomikosProperties49.getService();
        java.lang.Object obj56 = properties36.getOrDefault((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        int int59 = atomikosProperties57.getMaxActives();
        java.lang.String str60 = atomikosProperties57.logBaseDir;
        java.lang.Object obj62 = properties36.putIfAbsent((java.lang.Object) atomikosProperties57, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        boolean boolean67 = atomikosProperties63.isSerialJtaTransactions();
        atomikosProperties63.setEnableLogging(false);
        boolean boolean70 = properties29.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties63);
        atomikosProperties63.logBaseName = "{}";
        long long73 = atomikosProperties63.getDefaultJtaTimeout();
        atomikosProperties63.setThreadedTwoPhaseCommit(true);
        java.lang.Object obj76 = properties2.getOrDefault(obj26, (java.lang.Object) atomikosProperties63);
        boolean boolean77 = atomikosProperties63.forceShutdownOnVmExit;
        atomikosProperties63.transactionManagerUniqueName = "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}";
        java.lang.String str80 = atomikosProperties63.getService();
        atomikosProperties63.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test7200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7200");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        java.lang.String str29 = atomikosProperties13.transactionManagerUniqueName;
        boolean boolean30 = atomikosProperties13.forceShutdownOnVmExit;
        java.lang.String str31 = atomikosProperties13.logBaseDir;
        int int32 = atomikosProperties13.maxActives;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
    }

    @Test
    public void test7201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7201");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean22 = properties2.contains((java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        atomikosProperties23.logBaseName = "tmlog";
        atomikosProperties23.setEnableLogging(true);
        atomikosProperties23.setMaxActives((int) (byte) 0);
        atomikosProperties23.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        properties38.clear();
        boolean boolean40 = properties38.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        java.lang.Object obj46 = properties43.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection47 = properties43.values();
        boolean boolean48 = properties38.containsKey((java.lang.Object) objCollection47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties38.keys();
        java.lang.String str51 = properties38.getProperty("");
        java.lang.Object obj52 = properties2.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) properties38);
        java.io.OutputStream outputStream53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties38.storeToXML(outputStream53, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
    }

    @Test
    public void test7202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7202");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        atomikosProperties14.setMaxActives((int) (byte) -1);
        boolean boolean20 = atomikosProperties14.isEnableLogging();
        atomikosProperties14.transactionManagerUniqueName = "";
        atomikosProperties14.threadedTwoPhaseCommit = true;
        java.util.Properties properties25 = atomikosProperties14.asProperties();
        atomikosProperties14.maxTimeout = 10L;
        java.lang.Object obj28 = properties2.remove((java.lang.Object) atomikosProperties14);
        java.lang.String str29 = atomikosProperties14.transactionManagerUniqueName;
        atomikosProperties14.setSerialJtaTransactions(true);
        long long32 = atomikosProperties14.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
    }

    @Test
    public void test7203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7203");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        java.util.Collection<java.lang.Object> objCollection12 = properties9.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        atomikosProperties13.setTransactionManagerUniqueName("");
        int int17 = atomikosProperties13.getMaxActives();
        java.lang.String str18 = atomikosProperties13.transactionManagerUniqueName;
        atomikosProperties13.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        properties23.clear();
        java.util.Properties properties25 = new java.util.Properties(properties23);
        atomikosProperties13.set(properties23, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj31 = properties23.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet32 = properties23.stringPropertyNames();
        java.lang.String str34 = properties23.getProperty("hi!");
        java.lang.Object obj35 = properties2.putIfAbsent((java.lang.Object) objCollection12, (java.lang.Object) "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        java.lang.Object obj39 = properties38.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        boolean boolean46 = atomikosProperties40.isEnableLogging();
        atomikosProperties40.transactionManagerUniqueName = "";
        atomikosProperties40.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        java.lang.String str57 = atomikosProperties51.getService();
        java.lang.Object obj58 = properties38.getOrDefault((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties51);
        int int59 = properties38.size();
        boolean boolean60 = properties2.containsValue((java.lang.Object) properties38);
        java.util.Properties properties61 = new java.util.Properties(properties38);
        java.io.OutputStream outputStream62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties61.save(outputStream62, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test7204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7204");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        long long11 = atomikosProperties0.getMaxTimeout();
        long long12 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
    }

    @Test
    public void test7205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7205");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        java.lang.String str72 = atomikosProperties66.getService();
        long long73 = atomikosProperties66.defaultJtaTimeout;
        atomikosProperties66.setEnableLogging(true);
        boolean boolean76 = properties53.equals((java.lang.Object) atomikosProperties66);
        boolean boolean77 = atomikosProperties66.isThreadedTwoPhaseCommit();
        atomikosProperties66.setMaxActives((int) (short) 100);
        boolean boolean80 = atomikosProperties66.serialJtaTransactions;
        java.lang.String str81 = atomikosProperties66.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test7206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7206");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        atomikosProperties9.setTransactionManagerUniqueName("");
        int int13 = atomikosProperties9.getMaxActives();
        boolean boolean14 = properties7.containsValue((java.lang.Object) int13);
        java.lang.Object obj17 = properties7.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties18 = new java.util.Properties(properties7);
        int int19 = properties7.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        properties22.clear();
        boolean boolean24 = properties22.isEmpty();
        java.lang.Object obj25 = properties22.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        java.lang.Object obj30 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        boolean boolean37 = atomikosProperties31.isEnableLogging();
        atomikosProperties31.transactionManagerUniqueName = "";
        atomikosProperties31.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setMaxActives((int) (byte) -1);
        java.lang.String str48 = atomikosProperties42.getService();
        java.lang.Object obj49 = properties29.getOrDefault((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        int int52 = atomikosProperties50.getMaxActives();
        java.lang.String str53 = atomikosProperties50.logBaseDir;
        java.lang.Object obj55 = properties29.putIfAbsent((java.lang.Object) atomikosProperties50, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        java.lang.String str58 = atomikosProperties56.logBaseName;
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        boolean boolean60 = atomikosProperties56.isSerialJtaTransactions();
        atomikosProperties56.setEnableLogging(false);
        boolean boolean63 = properties22.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties56);
        atomikosProperties56.logBaseName = "{}";
        long long66 = atomikosProperties56.getDefaultJtaTimeout();
        atomikosProperties56.setThreadedTwoPhaseCommit(true);
        boolean boolean69 = properties2.replace((java.lang.Object) 100L, (java.lang.Object) properties7, (java.lang.Object) true);
        java.util.Properties properties70 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setCheckpointInterval((long) 100);
        boolean boolean74 = atomikosProperties71.isForceShutdownOnVmExit();
        atomikosProperties71.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long77 = atomikosProperties71.getDefaultJtaTimeout();
        long long78 = atomikosProperties71.getMaxTimeout();
        long long79 = atomikosProperties71.getMaxTimeout();
        boolean boolean80 = properties7.containsValue((java.lang.Object) long79);
        java.util.Enumeration<java.lang.Object> objEnumeration81 = properties7.keys();
        boolean boolean82 = properties7.isEmpty();
        java.util.Set<java.lang.String> strSet83 = properties7.stringPropertyNames();
        java.util.Properties properties84 = new java.util.Properties(properties7);
        properties84.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 300000L + "'", long78 == 300000L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 300000L + "'", long79 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objEnumeration81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSet83);
    }

    @Test
    public void test7207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7207");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.logBaseName = "{}";
        java.lang.String str4 = atomikosProperties0.getLogBaseDir();
        long long5 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
    }

    @Test
    public void test7208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7208");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        boolean boolean8 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test7209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7209");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = atomikosProperties5.isEnableLogging();
        atomikosProperties5.setMaxActives((int) (byte) -1);
        atomikosProperties5.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test7210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7210");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 1);
        boolean boolean6 = atomikosProperties0.isSerialJtaTransactions();
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        java.lang.Object obj15 = properties12.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        properties18.clear();
        java.util.Properties properties20 = new java.util.Properties(properties18);
        java.lang.Object obj23 = properties20.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str24 = properties20.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        boolean boolean31 = atomikosProperties25.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.setCheckpointInterval((long) 100);
        boolean boolean35 = atomikosProperties32.isForceShutdownOnVmExit();
        java.lang.Object obj36 = properties20.putIfAbsent((java.lang.Object) atomikosProperties25, (java.lang.Object) boolean35);
        java.util.Set<java.lang.String> strSet37 = properties20.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet38 = properties20.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration39 = properties20.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        atomikosProperties40.forceShutdownOnVmExit = false;
        atomikosProperties40.threadedTwoPhaseCommit = false;
        atomikosProperties40.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties40.threadedTwoPhaseCommit = false;
        atomikosProperties40.setDefaultJtaTimeout(500L);
        java.lang.Object obj52 = properties12.putIfAbsent((java.lang.Object) properties20, (java.lang.Object) 500L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        java.lang.String str55 = atomikosProperties53.logBaseName;
        java.lang.String str56 = atomikosProperties53.getLogBaseDir();
        atomikosProperties53.setMaxActives((int) (byte) -1);
        boolean boolean59 = atomikosProperties53.isEnableLogging();
        java.lang.String str60 = atomikosProperties53.getLogBaseName();
        atomikosProperties53.setDefaultJtaTimeout((long) '#');
        java.lang.String str63 = atomikosProperties53.getService();
        java.lang.Object obj64 = properties12.remove((java.lang.Object) atomikosProperties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.logBaseDir;
        java.lang.String str67 = atomikosProperties65.logBaseName;
        java.lang.String str68 = atomikosProperties65.getLogBaseDir();
        boolean boolean69 = atomikosProperties65.isSerialJtaTransactions();
        atomikosProperties65.serialJtaTransactions = true;
        atomikosProperties65.checkpointInterval = (-1L);
        boolean boolean74 = atomikosProperties65.threadedTwoPhaseCommit;
        atomikosProperties65.setMaxTimeout((long) (-1));
        java.lang.Object obj77 = properties7.replace((java.lang.Object) properties12, (java.lang.Object) (-1));
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long79 = atomikosProperties78.checkpointInterval;
        long long80 = atomikosProperties78.getDefaultJtaTimeout();
        java.util.Properties properties81 = atomikosProperties78.asProperties();
        java.lang.String str82 = properties81.toString();
        java.lang.Object obj83 = properties7.get((java.lang.Object) str82);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj23, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{}" + "'", str24, "{}");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(objSet38);
        org.junit.Assert.assertNotNull(objEnumeration39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tmlog" + "'", str60, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 500L + "'", long79 == 500L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10000L + "'", long80 == 10000L);
        org.junit.Assert.assertNotNull(properties81);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str82, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test7211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7211");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        properties7.clear();
        properties7.clear();
        java.lang.String str51 = properties7.getProperty("");
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties7.elements();
        java.util.Set<java.lang.Object> objSet53 = properties7.keySet();
        properties7.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(objSet53);
    }

    @Test
    public void test7212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7212");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        java.util.Collection<java.lang.Object> objCollection12 = properties9.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        atomikosProperties13.setTransactionManagerUniqueName("");
        int int17 = atomikosProperties13.getMaxActives();
        java.lang.String str18 = atomikosProperties13.transactionManagerUniqueName;
        atomikosProperties13.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        properties23.clear();
        java.util.Properties properties25 = new java.util.Properties(properties23);
        atomikosProperties13.set(properties23, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj31 = properties23.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet32 = properties23.stringPropertyNames();
        java.lang.String str34 = properties23.getProperty("hi!");
        java.lang.Object obj35 = properties2.putIfAbsent((java.lang.Object) objCollection12, (java.lang.Object) "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        java.lang.Object obj39 = properties38.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        boolean boolean46 = atomikosProperties40.isEnableLogging();
        atomikosProperties40.transactionManagerUniqueName = "";
        atomikosProperties40.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        java.lang.String str57 = atomikosProperties51.getService();
        java.lang.Object obj58 = properties38.getOrDefault((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties51);
        int int59 = properties38.size();
        boolean boolean60 = properties2.containsValue((java.lang.Object) properties38);
        java.util.Properties properties61 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties61.elements();
        properties61.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.logBaseDir;
        atomikosProperties64.setTransactionManagerUniqueName("");
        int int68 = atomikosProperties64.getMaxActives();
        atomikosProperties64.logBaseName = "tmlog";
        atomikosProperties64.setEnableLogging(true);
        atomikosProperties64.setMaxActives((int) (byte) 0);
        atomikosProperties64.setMaxActives((int) (short) 1);
        boolean boolean77 = atomikosProperties64.isSerialJtaTransactions();
        long long78 = atomikosProperties64.getMaxTimeout();
        java.lang.String str79 = atomikosProperties64.logBaseDir;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj80 = properties61.remove((java.lang.Object) str79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 50 + "'", int68 == 50);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 300000L + "'", long78 == 300000L);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test7213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7213");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        boolean boolean48 = atomikosProperties45.isForceShutdownOnVmExit();
        atomikosProperties45.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long51 = atomikosProperties45.getDefaultJtaTimeout();
        long long52 = atomikosProperties45.getMaxTimeout();
        atomikosProperties45.logBaseName = "tmlog";
        long long55 = atomikosProperties45.getDefaultJtaTimeout();
        atomikosProperties45.maxActives = 9;
        boolean boolean58 = properties2.containsKey((java.lang.Object) atomikosProperties45);
        boolean boolean59 = properties2.isEmpty();
        int int60 = properties2.size();
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties2.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objEnumeration61);
    }

    @Test
    public void test7214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7214");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.maxActives = ' ';
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.checkpointInterval = '#';
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test7215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7215");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        java.lang.Object obj7 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.logBaseName;
        java.lang.String str11 = atomikosProperties8.getLogBaseDir();
        atomikosProperties8.setMaxActives((int) (byte) -1);
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        atomikosProperties8.transactionManagerUniqueName = "";
        atomikosProperties8.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        java.lang.String str25 = atomikosProperties19.getService();
        java.lang.Object obj26 = properties6.getOrDefault((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        boolean boolean31 = atomikosProperties27.isSerialJtaTransactions();
        long long32 = atomikosProperties27.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        atomikosProperties38.setTransactionManagerUniqueName("");
        int int42 = atomikosProperties38.getMaxActives();
        java.lang.String str43 = atomikosProperties38.transactionManagerUniqueName;
        boolean boolean44 = properties35.containsValue((java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        atomikosProperties45.maxActives = (byte) 0;
        atomikosProperties45.setTransactionManagerUniqueName("");
        java.lang.Object obj52 = properties35.get((java.lang.Object) atomikosProperties45);
        boolean boolean54 = properties35.containsValue((java.lang.Object) 100.0d);
        boolean boolean55 = properties2.replace(obj26, (java.lang.Object) atomikosProperties27, (java.lang.Object) boolean54);
        java.lang.Object obj56 = properties2.clone();
        java.lang.Object obj59 = properties2.setProperty("tmlog", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet60 = properties2.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet61 = properties2.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties62.transactionManagerUniqueName = "{}";
        java.lang.Class<?> wildcardClass65 = atomikosProperties62.getClass();
        boolean boolean66 = properties2.containsKey((java.lang.Object) atomikosProperties62);
        java.util.Properties properties67 = new java.util.Properties(properties2);
        java.io.OutputStream outputStream68 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties67.storeToXML(outputStream68, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}", "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
// flaky:         org.junit.Assert.assertEquals(obj56.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(objSet61);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test7216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7216");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = atomikosProperties5.isEnableLogging();
        atomikosProperties5.setMaxActives((int) (byte) -1);
        atomikosProperties5.forceShutdownOnVmExit = true;
        java.lang.String str17 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setSerialJtaTransactions(true);
        atomikosProperties5.maxTimeout = 32;
        atomikosProperties5.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties5.maxTimeout = (short) 100;
        boolean boolean26 = atomikosProperties5.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test7217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7217");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        java.lang.String str19 = properties2.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        int int22 = atomikosProperties20.getMaxActives();
        java.lang.String str23 = atomikosProperties20.logBaseDir;
        boolean boolean24 = atomikosProperties20.serialJtaTransactions;
        java.lang.String str25 = atomikosProperties20.transactionManagerUniqueName;
        atomikosProperties20.threadedTwoPhaseCommit = false;
        atomikosProperties20.transactionManagerUniqueName = "{}";
        boolean boolean30 = properties2.contains((java.lang.Object) atomikosProperties20);
        properties2.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration32 = properties2.keys();
        java.lang.String str34 = properties2.getProperty("tmlog");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objEnumeration32);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test7218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7218");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = atomikosProperties5.isEnableLogging();
        atomikosProperties5.setMaxActives((int) (byte) -1);
        atomikosProperties5.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties5.maxActives = 'a';
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test7219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7219");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        long long9 = atomikosProperties0.maxTimeout;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean11 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test7220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7220");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        boolean boolean45 = atomikosProperties31.threadedTwoPhaseCommit;
        java.lang.String str46 = atomikosProperties31.transactionManagerUniqueName;
        boolean boolean47 = atomikosProperties31.enableLogging;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test7221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7221");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.keys();
        properties14.clear();
        java.lang.String str17 = properties14.toString();
        properties14.clear();
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties14.storeToXML(outputStream19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
    }

    @Test
    public void test7222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7222");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        int int31 = properties2.size();
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.Object obj35 = properties32.getOrDefault((java.lang.Object) 0.0f, (java.lang.Object) 0.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        atomikosProperties36.setTransactionManagerUniqueName("");
        int int40 = atomikosProperties36.getMaxActives();
        java.lang.String str41 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setTransactionManagerUniqueName("");
        atomikosProperties36.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties36.setSerialJtaTransactions(false);
        atomikosProperties36.threadedTwoPhaseCommit = false;
        boolean boolean50 = properties2.remove(obj35, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long52 = atomikosProperties51.checkpointInterval;
        atomikosProperties51.forceShutdownOnVmExit = false;
        atomikosProperties51.threadedTwoPhaseCommit = false;
        atomikosProperties51.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean59 = atomikosProperties51.isSerialJtaTransactions();
        boolean boolean60 = atomikosProperties51.forceShutdownOnVmExit;
        boolean boolean61 = atomikosProperties51.serialJtaTransactions;
        java.util.Properties properties62 = atomikosProperties51.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long64 = atomikosProperties63.checkpointInterval;
        java.util.Properties properties65 = atomikosProperties63.asProperties();
        properties65.clear();
        boolean boolean67 = properties65.isEmpty();
        java.lang.Object obj68 = properties65.clone();
        java.lang.String str69 = properties65.toString();
        properties65.clear();
        java.lang.Object obj71 = properties2.replace((java.lang.Object) properties62, (java.lang.Object) properties65);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + 0.0d + "'", obj35, 0.0d);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 50 + "'", int40 == 50);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 500L + "'", long64 == 500L);
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{}");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{}" + "'", str69, "{}");
        org.junit.Assert.assertNull(obj71);
    }

    @Test
    public void test7223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7223");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        atomikosProperties0.serialJtaTransactions = false;
        long long12 = atomikosProperties0.defaultJtaTimeout;
        long long13 = atomikosProperties0.getMaxTimeout();
        int int14 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test7224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7224");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = 1;
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setCheckpointInterval((long) ' ');
        java.lang.String str18 = atomikosProperties0.service;
        atomikosProperties0.setMaxActives((int) '#');
        atomikosProperties0.setMaxActives((int) (byte) -1);
        long long23 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10000L + "'", long23 == 10000L);
    }

    @Test
    public void test7225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7225");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.checkpointInterval = '#';
        atomikosProperties0.setLogBaseDir("tmlog");
        int int9 = atomikosProperties0.getMaxActives();
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=1, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test7226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7226");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setLogBaseDir("{}");
        atomikosProperties0.setLogBaseDir("{}");
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet16 = properties15.keySet();
        java.lang.Object obj19 = properties15.setProperty("tmlog", "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Object obj22 = properties15.setProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet23 = properties15.stringPropertyNames();
        java.io.OutputStream outputStream24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties15.storeToXML(outputStream24, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(strSet23);
    }

    @Test
    public void test7227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7227");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        java.lang.Object obj21 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        boolean boolean28 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.transactionManagerUniqueName = "";
        atomikosProperties22.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        java.lang.String str39 = atomikosProperties33.getService();
        java.lang.Object obj40 = properties20.getOrDefault((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties33);
        int int41 = properties20.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet42 = properties20.entrySet();
        java.lang.Object obj43 = properties2.remove((java.lang.Object) objEntrySet42);
        java.lang.Object obj46 = properties2.setProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(objEntrySet42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test7228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7228");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        int int14 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        java.lang.Object obj18 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties30);
        int int38 = properties17.size();
        java.lang.String str39 = properties17.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties17.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.enableLogging = true;
        atomikosProperties41.maxActives = (byte) -1;
        java.lang.Object obj46 = properties2.putIfAbsent((java.lang.Object) properties17, (java.lang.Object) (byte) -1);
        java.util.Properties properties47 = new java.util.Properties(properties2);
        java.util.Properties properties48 = new java.util.Properties(properties47);
        java.io.InputStream inputStream49 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties47.load(inputStream49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str39, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj46);
    }

    @Test
    public void test7229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7229");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.maxTimeout = 50;
        atomikosProperties0.serialJtaTransactions = true;
        long long14 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.checkpointInterval = 4;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 50L + "'", long14 == 50L);
    }

    @Test
    public void test7230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7230");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setDefaultJtaTimeout(0L);
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 100);
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        int int14 = atomikosProperties0.maxActives;
        int int15 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
    }

    @Test
    public void test7231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7231");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        boolean boolean48 = atomikosProperties45.isForceShutdownOnVmExit();
        atomikosProperties45.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long51 = atomikosProperties45.getDefaultJtaTimeout();
        long long52 = atomikosProperties45.getMaxTimeout();
        atomikosProperties45.logBaseName = "tmlog";
        long long55 = atomikosProperties45.getDefaultJtaTimeout();
        atomikosProperties45.maxActives = 9;
        boolean boolean58 = properties2.containsKey((java.lang.Object) atomikosProperties45);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet59 = properties2.entrySet();
        java.util.Properties properties60 = new java.util.Properties(properties2);
        java.lang.String str62 = properties60.getProperty("tmlog");
        int int63 = properties60.size();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objEntrySet59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test7232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7232");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.enableLogging = false;
        long long9 = atomikosProperties0.defaultJtaTimeout;
        long long10 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean11 = atomikosProperties0.serialJtaTransactions;
        long long12 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
    }

    @Test
    public void test7233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7233");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long8 = atomikosProperties0.maxTimeout;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) 100);
        java.lang.String str14 = atomikosProperties11.getService();
        atomikosProperties11.defaultJtaTimeout = 'a';
        atomikosProperties11.enableLogging = false;
        atomikosProperties11.threadedTwoPhaseCommit = false;
        atomikosProperties11.setForceShutdownOnVmExit(false);
        java.lang.Object obj23 = properties9.remove((java.lang.Object) atomikosProperties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.logBaseDir;
        java.lang.String str26 = atomikosProperties24.logBaseName;
        java.lang.String str27 = atomikosProperties24.getLogBaseDir();
        atomikosProperties24.setMaxActives((int) (byte) -1);
        boolean boolean30 = atomikosProperties24.isEnableLogging();
        atomikosProperties24.transactionManagerUniqueName = "";
        atomikosProperties24.setEnableLogging(false);
        boolean boolean35 = atomikosProperties24.isEnableLogging();
        atomikosProperties24.maxActives = 1;
        java.util.Properties properties38 = atomikosProperties24.asProperties();
        boolean boolean39 = atomikosProperties24.serialJtaTransactions;
        java.lang.Object obj40 = properties9.remove((java.lang.Object) atomikosProperties24);
        java.lang.String str41 = atomikosProperties24.getTransactionManagerUniqueName();
        atomikosProperties24.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test7234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7234");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        boolean boolean11 = atomikosProperties9.isSerialJtaTransactions();
        atomikosProperties9.transactionManagerUniqueName = "";
        atomikosProperties9.setTransactionManagerUniqueName("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        atomikosProperties16.setService("");
        java.util.Properties properties21 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        properties25.clear();
        boolean boolean27 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        atomikosProperties28.setTransactionManagerUniqueName("");
        int int32 = atomikosProperties28.getMaxActives();
        java.lang.String str33 = atomikosProperties28.transactionManagerUniqueName;
        boolean boolean34 = properties25.containsValue((java.lang.Object) atomikosProperties28);
        boolean boolean35 = atomikosProperties28.forceShutdownOnVmExit;
        atomikosProperties16.set(properties21, "{}", (java.lang.Object) boolean35);
        java.lang.Object obj39 = properties21.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{}");
        java.util.Set<java.lang.Object> objSet40 = properties21.keySet();
        java.lang.Object obj41 = properties2.replace((java.lang.Object) atomikosProperties9, (java.lang.Object) properties21);
        java.lang.Object obj42 = properties2.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
    }

    @Test
    public void test7235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7235");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        atomikosProperties19.maxActives = (byte) 0;
        atomikosProperties19.setTransactionManagerUniqueName("");
        java.lang.Object obj26 = properties9.get((java.lang.Object) atomikosProperties19);
        atomikosProperties19.logBaseDir = "{}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        boolean boolean33 = atomikosProperties29.isSerialJtaTransactions();
        atomikosProperties29.setEnableLogging(false);
        boolean boolean36 = atomikosProperties29.serialJtaTransactions;
        long long37 = atomikosProperties29.defaultJtaTimeout;
        java.lang.String str38 = atomikosProperties29.logBaseName;
        java.lang.Object obj39 = properties6.put((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties29);
        java.util.Set<java.lang.String> strSet40 = properties6.stringPropertyNames();
        java.util.Properties properties41 = new java.util.Properties(properties6);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long43 = atomikosProperties42.checkpointInterval;
        java.util.Properties properties44 = atomikosProperties42.asProperties();
        properties44.clear();
        java.util.Properties properties46 = new java.util.Properties(properties44);
        java.lang.Object obj49 = properties46.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str50 = properties46.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        boolean boolean57 = atomikosProperties51.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties58.setCheckpointInterval((long) 100);
        boolean boolean61 = atomikosProperties58.isForceShutdownOnVmExit();
        java.lang.Object obj62 = properties46.putIfAbsent((java.lang.Object) atomikosProperties51, (java.lang.Object) boolean61);
        java.util.Set<java.lang.String> strSet63 = properties46.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet64 = properties46.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        java.util.Properties properties67 = atomikosProperties65.asProperties();
        properties67.clear();
        boolean boolean69 = properties67.isEmpty();
        java.util.Collection<java.lang.Object> objCollection70 = properties67.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        java.lang.String str73 = atomikosProperties71.logBaseName;
        java.lang.String str74 = atomikosProperties71.getLogBaseDir();
        boolean boolean75 = atomikosProperties71.isSerialJtaTransactions();
        atomikosProperties71.setEnableLogging(false);
        boolean boolean78 = atomikosProperties71.serialJtaTransactions;
        long long79 = atomikosProperties71.defaultJtaTimeout;
        java.lang.String str80 = atomikosProperties71.logBaseName;
        java.lang.String str81 = atomikosProperties71.getLogBaseName();
        atomikosProperties71.setLogBaseName("");
        atomikosProperties71.forceShutdownOnVmExit = true;
        java.lang.Object obj86 = properties46.put((java.lang.Object) objCollection70, (java.lang.Object) true);
        properties6.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.io.PrintStream printStream88 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties46.list(printStream88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj49, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{}" + "'", str50, "{}");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(objSet64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objCollection70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tmlog" + "'", str73, "tmlog");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10000L + "'", long79 == 10000L);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "tmlog" + "'", str80, "tmlog");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tmlog" + "'", str81, "tmlog");
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test7236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7236");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.maxTimeout = 10000L;
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        java.lang.String str17 = atomikosProperties0.logBaseName;
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str20 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
    }

    @Test
    public void test7237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7237");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        int int9 = properties2.size();
        java.util.Properties properties10 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        atomikosProperties11.setTransactionManagerUniqueName("");
        int int15 = atomikosProperties11.getMaxActives();
        java.lang.String str16 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setCheckpointInterval((long) 100);
        boolean boolean28 = atomikosProperties25.isForceShutdownOnVmExit();
        atomikosProperties25.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean31 = properties24.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties32.enableLogging = true;
        boolean boolean36 = properties21.replace((java.lang.Object) boolean31, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection37 = properties21.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet38 = properties21.entrySet();
        atomikosProperties11.set(properties21, "hi!", (java.lang.Object) 0L);
        atomikosProperties11.setEnableLogging(false);
        atomikosProperties11.setTransactionManagerUniqueName("tmlog");
        atomikosProperties11.setEnableLogging(false);
        long long48 = atomikosProperties11.checkpointInterval;
        java.lang.Object obj49 = properties10.remove((java.lang.Object) long48);
        java.util.Properties properties50 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long52 = atomikosProperties51.checkpointInterval;
        java.util.Properties properties53 = atomikosProperties51.asProperties();
        boolean boolean55 = properties53.containsValue((java.lang.Object) 100L);
        java.lang.String str56 = properties53.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        atomikosProperties57.setTransactionManagerUniqueName("");
        int int61 = atomikosProperties57.getMaxActives();
        java.lang.String str62 = atomikosProperties57.transactionManagerUniqueName;
        atomikosProperties57.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        java.util.Properties properties67 = atomikosProperties65.asProperties();
        properties67.clear();
        java.util.Properties properties69 = new java.util.Properties(properties67);
        atomikosProperties57.set(properties67, "tmlog", (java.lang.Object) 0.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str74 = atomikosProperties73.logBaseDir;
        java.lang.String str75 = atomikosProperties73.logBaseName;
        java.lang.String str76 = atomikosProperties73.getLogBaseDir();
        java.lang.Object obj77 = properties53.putIfAbsent((java.lang.Object) "tmlog", (java.lang.Object) atomikosProperties73);
        boolean boolean78 = atomikosProperties73.isEnableLogging();
        java.lang.Object obj79 = properties2.getOrDefault((java.lang.Object) properties50, (java.lang.Object) atomikosProperties73);
        boolean boolean80 = atomikosProperties73.threadedTwoPhaseCommit;
        long long81 = atomikosProperties73.getDefaultJtaTimeout();
        atomikosProperties73.checkpointInterval = 2;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertNotNull(objEntrySet38);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 50 + "'", int61 == 50);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tmlog" + "'", str75, "tmlog");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 10000L + "'", long81 == 10000L);
    }

    @Test
    public void test7238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7238");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        boolean boolean46 = atomikosProperties44.isSerialJtaTransactions();
        java.lang.String str47 = atomikosProperties44.getLogBaseName();
        long long48 = atomikosProperties44.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.lang.Object obj54 = properties51.clone();
        java.util.Set<java.lang.Object> objSet55 = properties51.keySet();
        boolean boolean58 = properties51.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        java.lang.Object obj59 = properties15.replace((java.lang.Object) long48, (java.lang.Object) properties51);
        java.util.Properties properties60 = new java.util.Properties(properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setCheckpointInterval((long) 100);
        boolean boolean64 = atomikosProperties61.isForceShutdownOnVmExit();
        atomikosProperties61.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long67 = atomikosProperties61.getDefaultJtaTimeout();
        long long68 = atomikosProperties61.getMaxTimeout();
        long long69 = atomikosProperties61.getMaxTimeout();
        long long70 = atomikosProperties61.checkpointInterval;
        boolean boolean71 = properties51.containsValue((java.lang.Object) atomikosProperties61);
        atomikosProperties61.setCheckpointInterval((long) 10);
        java.lang.String str74 = atomikosProperties61.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 300000L + "'", long68 == 300000L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 300000L + "'", long69 == 300000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test7239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7239");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        boolean boolean20 = properties8.equals((java.lang.Object) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setCheckpointInterval((long) 100);
        java.lang.String str24 = atomikosProperties21.getService();
        atomikosProperties21.defaultJtaTimeout = 'a';
        atomikosProperties21.enableLogging = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setMaxActives(10);
        java.lang.String str33 = atomikosProperties21.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        boolean boolean36 = atomikosProperties34.isSerialJtaTransactions();
        atomikosProperties34.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        atomikosProperties39.setTransactionManagerUniqueName("");
        int int43 = atomikosProperties39.getMaxActives();
        java.lang.String str44 = atomikosProperties39.getLogBaseDir();
        atomikosProperties39.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setCheckpointInterval((long) 100);
        boolean boolean56 = atomikosProperties53.isForceShutdownOnVmExit();
        atomikosProperties53.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean59 = properties52.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.enableLogging = true;
        boolean boolean64 = properties49.replace((java.lang.Object) boolean59, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection65 = properties49.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet66 = properties49.entrySet();
        atomikosProperties39.set(properties49, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long72 = atomikosProperties71.checkpointInterval;
        java.util.Properties properties73 = atomikosProperties71.asProperties();
        properties73.clear();
        boolean boolean75 = properties73.isEmpty();
        java.util.Collection<java.lang.Object> objCollection76 = properties73.values();
        atomikosProperties34.set(properties49, "hi!", (java.lang.Object) objCollection76);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long79 = atomikosProperties78.checkpointInterval;
        boolean boolean80 = atomikosProperties78.isSerialJtaTransactions();
        java.lang.String str81 = atomikosProperties78.getLogBaseName();
        long long82 = atomikosProperties78.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long84 = atomikosProperties83.checkpointInterval;
        java.util.Properties properties85 = atomikosProperties83.asProperties();
        properties85.clear();
        boolean boolean87 = properties85.isEmpty();
        java.lang.Object obj88 = properties85.clone();
        java.util.Set<java.lang.Object> objSet89 = properties85.keySet();
        boolean boolean92 = properties85.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        java.lang.Object obj93 = properties49.replace((java.lang.Object) long82, (java.lang.Object) properties85);
        java.util.Properties properties94 = new java.util.Properties(properties85);
        java.lang.Object obj95 = properties8.putIfAbsent((java.lang.Object) atomikosProperties21, (java.lang.Object) properties85);
        java.util.Properties properties96 = new java.util.Properties(properties85);
        java.io.PrintStream printStream97 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties85.list(printStream97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objCollection65);
        org.junit.Assert.assertNotNull(objEntrySet66);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 500L + "'", long72 == 500L);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objCollection76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 500L + "'", long79 == 500L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tmlog" + "'", str81, "tmlog");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertNotNull(properties85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "{}");
        org.junit.Assert.assertNotNull(objSet89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test7240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7240");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        java.lang.String str72 = atomikosProperties66.getService();
        long long73 = atomikosProperties66.defaultJtaTimeout;
        atomikosProperties66.setEnableLogging(true);
        boolean boolean76 = properties53.equals((java.lang.Object) atomikosProperties66);
        boolean boolean77 = atomikosProperties66.isThreadedTwoPhaseCommit();
        atomikosProperties66.setMaxActives((int) (short) 100);
        boolean boolean80 = atomikosProperties66.serialJtaTransactions;
        java.lang.String str81 = atomikosProperties66.getService();
        boolean boolean82 = atomikosProperties66.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test7241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7241");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Collection<java.lang.Object> objCollection7 = properties6.values();
        java.util.Enumeration<java.lang.Object> objEnumeration8 = properties6.keys();
        java.io.PrintStream printStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties6.list(printStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertNotNull(objEnumeration8);
    }

    @Test
    public void test7242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7242");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.transactionManagerUniqueName;
        atomikosProperties21.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        properties31.clear();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        atomikosProperties21.set(properties31, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj39 = properties31.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties40 = new java.util.Properties(properties31);
        int int41 = properties40.size();
        java.lang.String str42 = properties40.toString();
        int int43 = properties40.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        properties47.clear();
        java.util.Properties properties49 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        atomikosProperties50.setTransactionManagerUniqueName("");
        int int54 = atomikosProperties50.getMaxActives();
        atomikosProperties50.logBaseName = "tmlog";
        int int57 = atomikosProperties50.maxActives;
        boolean boolean58 = properties47.containsValue((java.lang.Object) int57);
        java.util.Properties properties59 = new java.util.Properties(properties47);
        atomikosProperties9.set(properties40, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", (java.lang.Object) properties59);
        long long61 = atomikosProperties9.getDefaultJtaTimeout();
        long long62 = atomikosProperties9.getCheckpointInterval();
        java.lang.String str63 = atomikosProperties9.getTransactionManagerUniqueName();
        long long64 = atomikosProperties9.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 500L + "'", long64 == 500L);
    }

    @Test
    public void test7243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7243");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        boolean boolean8 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str9 = atomikosProperties0.getService();
        atomikosProperties0.checkpointInterval = (short) 0;
        java.lang.String str12 = atomikosProperties0.getService();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7244");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        java.util.Properties properties14 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        properties17.clear();
        java.util.Properties properties19 = new java.util.Properties(properties17);
        java.lang.Object obj22 = properties19.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str23 = properties19.toString();
        java.lang.Object obj26 = properties19.setProperty("tmlog", "");
        boolean boolean27 = properties8.equals(obj26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        atomikosProperties28.setTransactionManagerUniqueName("");
        int int32 = atomikosProperties28.getMaxActives();
        atomikosProperties28.logBaseName = "tmlog";
        atomikosProperties28.setEnableLogging(true);
        long long37 = atomikosProperties28.maxTimeout;
        int int38 = atomikosProperties28.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        atomikosProperties39.setTransactionManagerUniqueName("");
        int int43 = atomikosProperties39.getMaxActives();
        java.lang.String str44 = atomikosProperties39.transactionManagerUniqueName;
        atomikosProperties39.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        properties49.clear();
        java.util.Properties properties51 = new java.util.Properties(properties49);
        atomikosProperties39.set(properties49, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj57 = properties49.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet58 = properties49.stringPropertyNames();
        java.lang.Object obj59 = properties8.getOrDefault((java.lang.Object) atomikosProperties28, (java.lang.Object) properties49);
        java.io.OutputStream outputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties8.storeToXML(outputStream60, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj22, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(obj59);
// flaky:         org.junit.Assert.assertEquals(obj59.toString(), "{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
    }

    @Test
    public void test7245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7245");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        long long45 = atomikosProperties31.defaultJtaTimeout;
        atomikosProperties31.setSerialJtaTransactions(false);
        java.lang.String str48 = atomikosProperties31.getLogBaseName();
        atomikosProperties31.setMaxActives(100);
        atomikosProperties31.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10000L + "'", long45 == 10000L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
    }

    @Test
    public void test7246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7246");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        int int5 = properties4.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        boolean boolean12 = properties4.containsKey((java.lang.Object) objCollection11);
        java.util.Properties properties13 = new java.util.Properties(properties4);
        java.util.Set<java.lang.String> strSet14 = properties4.stringPropertyNames();
        java.util.Set<java.lang.String> strSet15 = properties4.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet15);
    }

    @Test
    public void test7247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7247");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        java.util.Properties properties10 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        atomikosProperties11.setTransactionManagerUniqueName("");
        int int15 = atomikosProperties11.getMaxActives();
        atomikosProperties11.logBaseName = "tmlog";
        int int18 = atomikosProperties11.maxActives;
        boolean boolean19 = properties8.containsValue((java.lang.Object) int18);
        java.util.Properties properties20 = new java.util.Properties(properties8);
        java.lang.Object obj21 = properties3.remove((java.lang.Object) properties20);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties3.keys();
        java.util.Properties properties23 = null;
        java.util.Properties properties24 = new java.util.Properties(properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        java.lang.Object obj28 = properties27.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setMaxActives((int) (byte) -1);
        boolean boolean35 = atomikosProperties29.isEnableLogging();
        atomikosProperties29.transactionManagerUniqueName = "";
        atomikosProperties29.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        java.lang.String str46 = atomikosProperties40.getService();
        java.lang.Object obj47 = properties27.getOrDefault((java.lang.Object) atomikosProperties29, (java.lang.Object) atomikosProperties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        int int50 = atomikosProperties48.getMaxActives();
        java.lang.String str51 = atomikosProperties48.logBaseDir;
        java.lang.Object obj53 = properties27.putIfAbsent((java.lang.Object) atomikosProperties48, (java.lang.Object) "");
        int int54 = properties27.size();
        java.util.Collection<java.lang.Object> objCollection55 = properties27.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        int int58 = atomikosProperties56.getMaxActives();
        java.lang.String str59 = atomikosProperties56.logBaseDir;
        java.lang.String str60 = atomikosProperties56.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        java.lang.String str64 = atomikosProperties61.getLogBaseDir();
        atomikosProperties61.setMaxActives((int) (byte) -1);
        boolean boolean67 = atomikosProperties61.isEnableLogging();
        java.lang.String str68 = atomikosProperties61.getLogBaseName();
        java.lang.Object obj69 = properties27.replace((java.lang.Object) atomikosProperties56, (java.lang.Object) atomikosProperties61);
        atomikosProperties56.checkpointInterval = 100L;
        boolean boolean72 = properties24.containsKey((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties73.setCheckpointInterval((long) 100);
        boolean boolean76 = atomikosProperties73.isForceShutdownOnVmExit();
        atomikosProperties73.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties73.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        boolean boolean81 = properties24.containsKey((java.lang.Object) atomikosProperties73);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties82.enableLogging = true;
        boolean boolean85 = atomikosProperties82.forceShutdownOnVmExit;
        atomikosProperties82.setSerialJtaTransactions(false);
        atomikosProperties82.setForceShutdownOnVmExit(true);
        atomikosProperties82.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean92 = properties3.remove((java.lang.Object) atomikosProperties73, (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(objCollection55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50 + "'", int58 == 50);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test7248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7248");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setMaxActives((int) (byte) 0);
        atomikosProperties0.setMaxActives((int) (short) 1);
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str14 = atomikosProperties0.getLogBaseDir();
        boolean boolean15 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.tmlog=0.0}");
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.lang.String str20 = atomikosProperties0.getLogBaseName();
        java.lang.String str21 = atomikosProperties0.getService();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test7249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7249");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        java.lang.String str72 = atomikosProperties66.getService();
        long long73 = atomikosProperties66.defaultJtaTimeout;
        atomikosProperties66.setEnableLogging(true);
        boolean boolean76 = properties53.equals((java.lang.Object) atomikosProperties66);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str78 = atomikosProperties77.logBaseDir;
        java.lang.String str79 = atomikosProperties77.logBaseName;
        java.lang.String str80 = atomikosProperties77.getLogBaseDir();
        atomikosProperties77.setMaxActives((int) (byte) -1);
        java.lang.String str83 = atomikosProperties77.getService();
        atomikosProperties77.setDefaultJtaTimeout((long) (-1));
        int int86 = atomikosProperties77.maxActives;
        long long87 = atomikosProperties77.maxTimeout;
        long long88 = atomikosProperties77.getDefaultJtaTimeout();
        java.lang.Object obj89 = properties53.remove((java.lang.Object) atomikosProperties77);
        atomikosProperties77.setLogBaseDir("{com.atomikos.icatch.tmlog=0.0}");
        java.lang.String str92 = atomikosProperties77.service;
        boolean boolean93 = atomikosProperties77.isThreadedTwoPhaseCommit();
        atomikosProperties77.serialJtaTransactions = true;
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 300000L + "'", long87 == 300000L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test7250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7250");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        java.lang.String str27 = properties2.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        properties30.clear();
        boolean boolean32 = properties30.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        atomikosProperties33.setTransactionManagerUniqueName("");
        int int37 = atomikosProperties33.getMaxActives();
        java.lang.String str38 = atomikosProperties33.transactionManagerUniqueName;
        boolean boolean39 = properties30.containsValue((java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) 100);
        atomikosProperties40.maxActives = (byte) 0;
        atomikosProperties40.setTransactionManagerUniqueName("");
        java.lang.Object obj47 = properties30.get((java.lang.Object) atomikosProperties40);
        boolean boolean49 = properties30.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        properties52.clear();
        boolean boolean54 = properties52.isEmpty();
        java.lang.Object obj55 = properties52.clone();
        java.util.Set<java.lang.Object> objSet56 = properties52.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) 100);
        java.lang.String str60 = atomikosProperties57.getService();
        atomikosProperties57.defaultJtaTimeout = 'a';
        atomikosProperties57.enableLogging = false;
        atomikosProperties57.threadedTwoPhaseCommit = false;
        int int67 = atomikosProperties57.maxActives;
        atomikosProperties57.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj70 = properties30.getOrDefault((java.lang.Object) properties52, (java.lang.Object) atomikosProperties57);
        java.lang.Object obj71 = properties2.remove((java.lang.Object) atomikosProperties57);
        atomikosProperties57.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean74 = atomikosProperties57.isSerialJtaTransactions();
        atomikosProperties57.maxTimeout = 9;
        atomikosProperties57.maxTimeout = 0;
        long long79 = atomikosProperties57.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{}");
        org.junit.Assert.assertNotNull(objSet56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 100L + "'", long79 == 100L);
    }

    @Test
    public void test7251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7251");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        java.lang.Object obj21 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        boolean boolean28 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.transactionManagerUniqueName = "";
        atomikosProperties22.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        java.lang.String str39 = atomikosProperties33.getService();
        java.lang.Object obj40 = properties20.getOrDefault((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties33);
        int int41 = properties20.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet42 = properties20.entrySet();
        java.lang.Object obj43 = properties2.remove((java.lang.Object) objEntrySet42);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        java.util.Set<java.lang.String> strSet45 = properties44.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        long long48 = atomikosProperties46.getDefaultJtaTimeout();
        atomikosProperties46.setService("hi!");
        atomikosProperties46.serialJtaTransactions = false;
        boolean boolean53 = atomikosProperties46.isForceShutdownOnVmExit();
        java.lang.String str54 = atomikosProperties46.logBaseName;
        java.util.Properties properties55 = atomikosProperties46.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        int int58 = atomikosProperties56.getMaxActives();
        java.lang.String str59 = atomikosProperties56.logBaseDir;
        atomikosProperties56.setDefaultJtaTimeout((long) 50);
        boolean boolean62 = properties55.contains((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        atomikosProperties63.setService("");
        java.util.Properties properties68 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long71 = atomikosProperties70.checkpointInterval;
        java.util.Properties properties72 = atomikosProperties70.asProperties();
        properties72.clear();
        boolean boolean74 = properties72.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.logBaseDir;
        atomikosProperties75.setTransactionManagerUniqueName("");
        int int79 = atomikosProperties75.getMaxActives();
        java.lang.String str80 = atomikosProperties75.transactionManagerUniqueName;
        boolean boolean81 = properties72.containsValue((java.lang.Object) atomikosProperties75);
        boolean boolean82 = atomikosProperties75.forceShutdownOnVmExit;
        atomikosProperties63.set(properties68, "{}", (java.lang.Object) boolean82);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties84 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long85 = atomikosProperties84.checkpointInterval;
        java.util.Properties properties86 = atomikosProperties84.asProperties();
        boolean boolean88 = properties86.containsValue((java.lang.Object) 100L);
        java.lang.String str89 = properties86.toString();
        java.lang.Object obj90 = properties55.put((java.lang.Object) "{}", (java.lang.Object) properties86);
        java.util.Properties properties91 = new java.util.Properties(properties55);
        int int92 = properties55.size();
        boolean boolean93 = properties44.containsKey((java.lang.Object) int92);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(objEntrySet42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 50 + "'", int58 == 50);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 500L + "'", long71 == 500L);
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 50 + "'", int79 == 50);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 500L + "'", long85 == 500L);
        org.junit.Assert.assertNotNull(properties86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str89, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 11 + "'", int92 == 11);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test7252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7252");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        java.lang.Object obj15 = properties12.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str16 = properties12.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setMaxActives((int) (byte) -1);
        boolean boolean23 = atomikosProperties17.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) 100);
        boolean boolean27 = atomikosProperties24.isForceShutdownOnVmExit();
        java.lang.Object obj28 = properties12.putIfAbsent((java.lang.Object) atomikosProperties17, (java.lang.Object) boolean27);
        java.util.Set<java.lang.String> strSet29 = properties12.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet30 = properties12.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties12.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        atomikosProperties32.forceShutdownOnVmExit = false;
        atomikosProperties32.threadedTwoPhaseCommit = false;
        atomikosProperties32.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties32.threadedTwoPhaseCommit = false;
        atomikosProperties32.setDefaultJtaTimeout(500L);
        java.lang.Object obj44 = properties4.putIfAbsent((java.lang.Object) properties12, (java.lang.Object) 500L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        atomikosProperties45.forceShutdownOnVmExit = false;
        atomikosProperties45.threadedTwoPhaseCommit = false;
        atomikosProperties45.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean53 = atomikosProperties45.isSerialJtaTransactions();
        atomikosProperties45.setForceShutdownOnVmExit(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        java.util.Properties properties58 = atomikosProperties56.asProperties();
        properties58.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        atomikosProperties60.setMaxActives((int) (byte) -1);
        boolean boolean66 = atomikosProperties60.isEnableLogging();
        long long67 = atomikosProperties60.checkpointInterval;
        atomikosProperties60.setCheckpointInterval(10L);
        boolean boolean70 = atomikosProperties60.serialJtaTransactions;
        boolean boolean71 = properties58.equals((java.lang.Object) boolean70);
        java.util.Properties properties72 = new java.util.Properties(properties58);
        java.lang.Object obj73 = properties12.putIfAbsent((java.lang.Object) atomikosProperties45, (java.lang.Object) properties58);
        atomikosProperties45.setTransactionManagerUniqueName("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj73);
    }

    @Test
    public void test7253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7253");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str5 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setMaxTimeout((long) 1);
        atomikosProperties0.defaultJtaTimeout = (byte) 10;
        long long16 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test7254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7254");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.checkpointInterval = (-1L);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.defaultJtaTimeout = 9;
        java.lang.String str13 = atomikosProperties0.getService();
        java.lang.String str14 = atomikosProperties0.logBaseDir;
        boolean boolean15 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test7255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7255");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        boolean boolean48 = atomikosProperties45.isForceShutdownOnVmExit();
        atomikosProperties45.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long51 = atomikosProperties45.getDefaultJtaTimeout();
        long long52 = atomikosProperties45.getMaxTimeout();
        atomikosProperties45.logBaseName = "tmlog";
        long long55 = atomikosProperties45.getDefaultJtaTimeout();
        atomikosProperties45.maxActives = 9;
        boolean boolean58 = properties2.containsKey((java.lang.Object) atomikosProperties45);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet59 = properties2.entrySet();
        java.io.PrintStream printStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printStream60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objEntrySet59);
    }

    @Test
    public void test7256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7256");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long8 = atomikosProperties0.maxTimeout;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) 100);
        java.lang.String str14 = atomikosProperties11.getService();
        atomikosProperties11.defaultJtaTimeout = 'a';
        atomikosProperties11.enableLogging = false;
        atomikosProperties11.threadedTwoPhaseCommit = false;
        atomikosProperties11.setForceShutdownOnVmExit(false);
        java.lang.Object obj23 = properties9.remove((java.lang.Object) atomikosProperties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.logBaseDir;
        java.lang.String str26 = atomikosProperties24.logBaseName;
        java.lang.String str27 = atomikosProperties24.getLogBaseDir();
        atomikosProperties24.setMaxActives((int) (byte) -1);
        boolean boolean30 = atomikosProperties24.isEnableLogging();
        atomikosProperties24.transactionManagerUniqueName = "";
        atomikosProperties24.setEnableLogging(false);
        boolean boolean35 = atomikosProperties24.isEnableLogging();
        atomikosProperties24.maxActives = 1;
        java.util.Properties properties38 = atomikosProperties24.asProperties();
        boolean boolean39 = atomikosProperties24.serialJtaTransactions;
        java.lang.Object obj40 = properties9.remove((java.lang.Object) atomikosProperties24);
        java.io.OutputStream outputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.store(outputStream41, "{-1=1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test7257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7257");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        boolean boolean4 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.enableLogging = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7258");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        java.lang.String str19 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties2.entrySet();
        java.util.Properties properties21 = new java.util.Properties(properties2);
        java.io.InputStream inputStream22 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.loadFromXML(inputStream22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(objEntrySet20);
    }

    @Test
    public void test7259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7259");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        boolean boolean18 = atomikosProperties14.isSerialJtaTransactions();
        atomikosProperties14.setLogBaseName("");
        atomikosProperties14.setTransactionManagerUniqueName("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        java.lang.Object obj28 = properties13.replace((java.lang.Object) "tmlog", (java.lang.Object) int27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        java.lang.Object obj32 = properties31.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        boolean boolean39 = atomikosProperties33.isEnableLogging();
        atomikosProperties33.transactionManagerUniqueName = "";
        atomikosProperties33.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.logBaseDir;
        java.lang.String str46 = atomikosProperties44.logBaseName;
        java.lang.String str47 = atomikosProperties44.getLogBaseDir();
        atomikosProperties44.setMaxActives((int) (byte) -1);
        java.lang.String str50 = atomikosProperties44.getService();
        java.lang.Object obj51 = properties31.getOrDefault((java.lang.Object) atomikosProperties33, (java.lang.Object) atomikosProperties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        int int54 = atomikosProperties52.getMaxActives();
        java.lang.String str55 = atomikosProperties52.logBaseDir;
        java.lang.Object obj57 = properties31.putIfAbsent((java.lang.Object) atomikosProperties52, (java.lang.Object) "");
        int int58 = properties31.size();
        java.util.Collection<java.lang.Object> objCollection59 = properties31.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        int int62 = atomikosProperties60.getMaxActives();
        java.lang.String str63 = atomikosProperties60.logBaseDir;
        java.lang.String str64 = atomikosProperties60.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.logBaseDir;
        java.lang.String str67 = atomikosProperties65.logBaseName;
        java.lang.String str68 = atomikosProperties65.getLogBaseDir();
        atomikosProperties65.setMaxActives((int) (byte) -1);
        boolean boolean71 = atomikosProperties65.isEnableLogging();
        java.lang.String str72 = atomikosProperties65.getLogBaseName();
        java.lang.Object obj73 = properties31.replace((java.lang.Object) atomikosProperties60, (java.lang.Object) atomikosProperties65);
        int int74 = atomikosProperties60.getMaxActives();
        boolean boolean75 = properties13.containsValue((java.lang.Object) atomikosProperties60);
        atomikosProperties60.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties60.serialJtaTransactions = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNotNull(obj32);
// flaky:         org.junit.Assert.assertEquals(obj32.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(objCollection59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 50 + "'", int62 == 50);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tmlog" + "'", str72, "tmlog");
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 50 + "'", int74 == 50);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test7260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7260");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.lang.String str15 = properties14.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        java.lang.Object obj19 = properties18.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.logBaseDir;
        java.lang.String str22 = atomikosProperties20.logBaseName;
        java.lang.String str23 = atomikosProperties20.getLogBaseDir();
        atomikosProperties20.setMaxActives((int) (byte) -1);
        boolean boolean26 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.transactionManagerUniqueName = "";
        atomikosProperties20.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        java.lang.String str37 = atomikosProperties31.getService();
        java.lang.Object obj38 = properties18.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties31);
        int int39 = properties18.size();
        java.lang.String str40 = properties18.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties18.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        atomikosProperties42.setTransactionManagerUniqueName("");
        int int46 = atomikosProperties42.getMaxActives();
        java.lang.String str47 = atomikosProperties42.transactionManagerUniqueName;
        atomikosProperties42.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        properties52.clear();
        java.util.Properties properties54 = new java.util.Properties(properties52);
        atomikosProperties42.set(properties52, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj60 = properties52.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet61 = properties52.stringPropertyNames();
        java.lang.String str63 = properties52.getProperty("hi!");
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        java.util.Set<java.lang.String> strSet65 = properties18.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        properties68.clear();
        boolean boolean70 = properties68.isEmpty();
        java.lang.Object obj71 = properties68.clone();
        java.util.Set<java.lang.Object> objSet72 = properties68.keySet();
        java.lang.Object obj73 = properties14.replace((java.lang.Object) properties18, (java.lang.Object) objSet72);
        java.util.Enumeration<java.lang.Object> objEnumeration74 = properties18.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.logBaseDir;
        atomikosProperties75.setTransactionManagerUniqueName("");
        int int79 = atomikosProperties75.getMaxActives();
        java.lang.String str80 = atomikosProperties75.getLogBaseDir();
        atomikosProperties75.setTransactionManagerUniqueName("");
        atomikosProperties75.setDefaultJtaTimeout(0L);
        int int85 = atomikosProperties75.maxActives;
        atomikosProperties75.setEnableLogging(false);
        long long88 = atomikosProperties75.getDefaultJtaTimeout();
        java.util.Properties properties89 = atomikosProperties75.asProperties();
        boolean boolean90 = properties18.containsValue((java.lang.Object) atomikosProperties75);
        java.lang.Object obj93 = properties18.setProperty("{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
        java.util.Set<java.lang.Object> objSet94 = properties18.keySet();
        java.util.Set<java.lang.Object> objSet95 = properties18.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str40, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 50 + "'", int46 == 50);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "{}");
        org.junit.Assert.assertNotNull(objSet72);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(objEnumeration74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 50 + "'", int79 == 50);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 50 + "'", int85 == 50);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(properties89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNotNull(objSet94);
        org.junit.Assert.assertNotNull(objSet95);
    }

    @Test
    public void test7261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7261");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        int int6 = atomikosProperties0.getMaxActives();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        int int10 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.checkpointInterval = 10L;
        atomikosProperties0.checkpointInterval = '#';
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test7262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7262");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties19.keys();
        java.util.Properties properties21 = new java.util.Properties(properties19);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objEnumeration20);
    }

    @Test
    public void test7263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7263");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 1);
        long long6 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.transactionManagerUniqueName = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}";
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.{}=false, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
    }

    @Test
    public void test7264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7264");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        int int9 = atomikosProperties0.maxActives;
        long long10 = atomikosProperties0.maxTimeout;
        java.lang.String str11 = atomikosProperties0.getService();
        atomikosProperties0.maxActives = (byte) 0;
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.lang.String str15 = properties14.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        properties18.clear();
        boolean boolean20 = properties18.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        java.lang.Object obj26 = properties23.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection27 = properties23.values();
        boolean boolean28 = properties18.containsKey((java.lang.Object) objCollection27);
        java.util.Enumeration<java.lang.Object> objEnumeration29 = properties18.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        java.util.Properties properties32 = atomikosProperties30.asProperties();
        properties32.clear();
        boolean boolean34 = properties32.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        atomikosProperties35.setTransactionManagerUniqueName("");
        int int39 = atomikosProperties35.getMaxActives();
        java.lang.String str40 = atomikosProperties35.transactionManagerUniqueName;
        boolean boolean41 = properties32.containsValue((java.lang.Object) atomikosProperties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setCheckpointInterval((long) 100);
        atomikosProperties42.maxActives = (byte) 0;
        atomikosProperties42.setTransactionManagerUniqueName("");
        java.lang.Object obj49 = properties32.get((java.lang.Object) atomikosProperties42);
        long long50 = atomikosProperties42.checkpointInterval;
        atomikosProperties42.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        java.util.Properties properties53 = atomikosProperties42.asProperties();
        atomikosProperties42.enableLogging = false;
        boolean boolean56 = properties18.equals((java.lang.Object) atomikosProperties42);
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.io.InputStream inputStream58 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties18.load(inputStream58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(properties14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}" + "'", str15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objEnumeration29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test7265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7265");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        boolean boolean4 = atomikosProperties0.isForceShutdownOnVmExit();
        int int5 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setMaxActives(32);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
    }

    @Test
    public void test7266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7266");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.setTransactionManagerUniqueName("");
        boolean boolean6 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str7 = atomikosProperties0.service;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.setMaxActives(4);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test7267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7267");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        long long11 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setMaxTimeout((long) (short) 10);
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str16 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
    }

    @Test
    public void test7268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7268");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        long long11 = atomikosProperties4.checkpointInterval;
        atomikosProperties4.setCheckpointInterval(10L);
        boolean boolean14 = atomikosProperties4.serialJtaTransactions;
        boolean boolean15 = properties2.equals((java.lang.Object) boolean14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties2.elements();
        java.io.PrintStream printStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNotNull(objEnumeration17);
    }

    @Test
    public void test7269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7269");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        java.util.Collection<java.lang.Object> objCollection57 = properties17.values();
        java.lang.Object obj58 = properties17.clone();
        boolean boolean60 = properties17.containsKey((java.lang.Object) 10L);
        properties17.clear();
        java.io.OutputStream outputStream62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.store(outputStream62, "{com.atomikos.icatch.tmlog=0.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(obj58);
// flaky:         org.junit.Assert.assertEquals(obj58.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test7270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7270");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.service = "tmlog";
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long14 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test7271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7271");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.setMaxActives(50);
        long long25 = atomikosProperties15.getCheckpointInterval();
        int int26 = atomikosProperties15.maxActives;
        long long27 = atomikosProperties15.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
    }

    @Test
    public void test7272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7272");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        atomikosProperties36.threadedTwoPhaseCommit = true;
        atomikosProperties36.setCheckpointInterval((long) 100);
        atomikosProperties36.setLogBaseName("");
        atomikosProperties36.setThreadedTwoPhaseCommit(true);
        atomikosProperties36.setCheckpointInterval((long) 10);
        java.lang.String str58 = atomikosProperties36.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test7273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7273");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.setService("{}");
        boolean boolean7 = atomikosProperties0.enableLogging;
        boolean boolean8 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setCheckpointInterval((long) 52);
        atomikosProperties0.checkpointInterval = 'a';
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7274");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        properties7.clear();
        properties7.clear();
        java.lang.String str51 = properties7.getProperty("");
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties7.elements();
        java.util.Collection<java.lang.Object> objCollection53 = properties7.values();
        java.io.PrintWriter printWriter54 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.list(printWriter54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(objCollection53);
    }

    @Test
    public void test7275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7275");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long6 = atomikosProperties0.getMaxTimeout();
        long long7 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str8 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setMaxTimeout(300000L);
        atomikosProperties0.service = "{com.atomikos.icatch.tmlog=0.0}";
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test7276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7276");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.util.Properties properties16 = new java.util.Properties(properties10);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet17 = properties10.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        atomikosProperties18.setTransactionManagerUniqueName("");
        int int22 = atomikosProperties18.getMaxActives();
        atomikosProperties18.logBaseName = "tmlog";
        long long25 = atomikosProperties18.checkpointInterval;
        atomikosProperties18.logBaseDir = "";
        atomikosProperties18.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties18.checkpointInterval = '4';
        atomikosProperties18.enableLogging = false;
        java.lang.String str34 = atomikosProperties18.getLogBaseDir();
        java.lang.Object obj35 = properties10.get((java.lang.Object) atomikosProperties18);
        properties10.clear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(objEntrySet17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test7277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7277");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.service = "hi!";
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setMaxTimeout(10000L);
        long long11 = atomikosProperties0.maxTimeout;
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.defaultJtaTimeout = 2L;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test7278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7278");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        properties7.clear();
        properties7.clear();
        java.lang.String str51 = properties7.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        java.lang.String str55 = atomikosProperties52.getLogBaseDir();
        boolean boolean56 = atomikosProperties52.isSerialJtaTransactions();
        atomikosProperties52.serialJtaTransactions = true;
        atomikosProperties52.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        atomikosProperties61.setTransactionManagerUniqueName("");
        int int65 = atomikosProperties61.getMaxActives();
        atomikosProperties61.logBaseName = "tmlog";
        atomikosProperties61.setEnableLogging(true);
        atomikosProperties61.setMaxActives((int) (byte) 0);
        atomikosProperties61.setMaxActives((int) (short) 1);
        boolean boolean74 = atomikosProperties61.isSerialJtaTransactions();
        long long75 = atomikosProperties61.getMaxTimeout();
        boolean boolean76 = atomikosProperties61.enableLogging;
        boolean boolean77 = atomikosProperties61.serialJtaTransactions;
        long long78 = atomikosProperties61.defaultJtaTimeout;
        java.lang.Object obj79 = properties7.putIfAbsent((java.lang.Object) atomikosProperties52, (java.lang.Object) atomikosProperties61);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 50 + "'", int65 == 50);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 300000L + "'", long75 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 10000L + "'", long78 == 10000L);
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test7279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7279");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.maxActives = ' ';
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.setCheckpointInterval(2L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7280");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties4.maxActives = ' ';
        java.lang.String str25 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setMaxTimeout(1L);
        boolean boolean28 = atomikosProperties4.isThreadedTwoPhaseCommit();
        atomikosProperties4.setDefaultJtaTimeout(0L);
        atomikosProperties4.maxActives = (byte) 0;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test7281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7281");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        int int9 = atomikosProperties0.maxActives;
        long long10 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseDir("hi!");
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        long long15 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
    }

    @Test
    public void test7282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7282");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        boolean boolean4 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
    }

    @Test
    public void test7283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7283");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        int int9 = atomikosProperties0.maxActives;
        long long10 = atomikosProperties0.maxTimeout;
        java.lang.String str11 = atomikosProperties0.getService();
        atomikosProperties0.maxActives = (byte) 0;
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.lang.String str15 = properties14.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties14.keys();
        java.lang.String str19 = properties14.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(properties14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}" + "'", str15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test7284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7284");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        boolean boolean7 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str8 = atomikosProperties0.transactionManagerUniqueName;
        java.lang.String str9 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        long long12 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
    }

    @Test
    public void test7285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7285");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        atomikosProperties22.setTransactionManagerUniqueName("");
        int int26 = atomikosProperties22.getMaxActives();
        java.lang.String str27 = atomikosProperties22.transactionManagerUniqueName;
        atomikosProperties22.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        java.util.Properties properties32 = atomikosProperties30.asProperties();
        properties32.clear();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        atomikosProperties22.set(properties32, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj40 = properties32.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties41 = new java.util.Properties(properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long43 = atomikosProperties42.checkpointInterval;
        java.util.Properties properties44 = atomikosProperties42.asProperties();
        properties44.clear();
        boolean boolean46 = properties44.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        boolean boolean51 = properties49.containsValue((java.lang.Object) 100L);
        boolean boolean52 = properties44.contains((java.lang.Object) properties49);
        java.lang.Object obj53 = properties5.put((java.lang.Object) properties32, (java.lang.Object) properties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        java.util.Properties properties56 = atomikosProperties54.asProperties();
        properties56.clear();
        boolean boolean58 = properties56.isEmpty();
        java.lang.Object obj59 = properties56.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        java.util.Properties properties62 = atomikosProperties60.asProperties();
        boolean boolean64 = properties62.containsValue((java.lang.Object) 100L);
        java.lang.String str65 = properties62.toString();
        java.lang.Object obj68 = properties62.setProperty("", "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet69 = properties62.entrySet();
        java.lang.Object obj70 = properties32.getOrDefault((java.lang.Object) properties56, (java.lang.Object) properties62);
        java.io.InputStream inputStream71 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties32.loadFromXML(inputStream71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{}");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str65, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(objEntrySet69);
        org.junit.Assert.assertNotNull(obj70);
// flaky:         org.junit.Assert.assertEquals(obj70.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
    }

    @Test
    public void test7286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7286");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        boolean boolean4 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str5 = atomikosProperties0.service;
        long long6 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
    }

    @Test
    public void test7287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7287");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        java.util.Collection<java.lang.Object> objCollection57 = properties17.values();
        java.util.Collection<java.lang.Object> objCollection58 = properties17.values();
        java.util.Set<java.lang.String> strSet59 = properties17.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.maxTimeout = 100;
        int int65 = atomikosProperties60.getMaxActives();
        atomikosProperties60.setEnableLogging(false);
        atomikosProperties60.logBaseDir = "{}";
        atomikosProperties60.setDefaultJtaTimeout(0L);
        atomikosProperties60.setMaxTimeout((long) '4');
        boolean boolean74 = properties17.equals((java.lang.Object) '4');
        java.io.OutputStream outputStream75 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.storeToXML(outputStream75, "{=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(objCollection58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 50 + "'", int65 == 50);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test7288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7288");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str6 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        java.lang.Object obj14 = properties11.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str15 = properties11.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) 100);
        boolean boolean26 = atomikosProperties23.isForceShutdownOnVmExit();
        java.lang.Object obj27 = properties11.putIfAbsent((java.lang.Object) atomikosProperties16, (java.lang.Object) boolean26);
        java.util.Set<java.lang.String> strSet28 = properties11.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet29 = properties11.keySet();
        java.lang.Object obj30 = properties2.remove((java.lang.Object) properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setCheckpointInterval((long) 100);
        boolean boolean34 = atomikosProperties31.isForceShutdownOnVmExit();
        atomikosProperties31.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties31.forceShutdownOnVmExit = false;
        boolean boolean39 = properties2.contains((java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) 100);
        boolean boolean43 = atomikosProperties40.isForceShutdownOnVmExit();
        atomikosProperties40.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long46 = atomikosProperties40.getDefaultJtaTimeout();
        long long47 = atomikosProperties40.getMaxTimeout();
        atomikosProperties40.logBaseName = "tmlog";
        long long50 = atomikosProperties40.getDefaultJtaTimeout();
        atomikosProperties40.setForceShutdownOnVmExit(true);
        java.lang.String str53 = atomikosProperties40.getLogBaseName();
        long long54 = atomikosProperties40.checkpointInterval;
        java.lang.String str55 = atomikosProperties40.logBaseDir;
        java.lang.String str56 = atomikosProperties40.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        java.lang.String str59 = atomikosProperties57.logBaseName;
        atomikosProperties57.setCheckpointInterval((-1L));
        atomikosProperties57.setMaxTimeout((long) 9);
        long long64 = atomikosProperties57.getMaxTimeout();
        java.lang.String str65 = atomikosProperties57.logBaseDir;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj66 = properties2.put((java.lang.Object) str56, (java.lang.Object) str65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj14, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(objSet29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 300000L + "'", long47 == 300000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str55, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tmlog" + "'", str56, "tmlog");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 9L + "'", long64 == 9L);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test7289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7289");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        long long12 = atomikosProperties10.getDefaultJtaTimeout();
        java.util.Properties properties13 = atomikosProperties10.asProperties();
        java.lang.String str14 = properties13.toString();
        boolean boolean15 = properties2.equals((java.lang.Object) properties13);
        java.util.Properties properties16 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        java.lang.Object obj20 = properties19.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        boolean boolean27 = atomikosProperties21.isEnableLogging();
        atomikosProperties21.transactionManagerUniqueName = "";
        atomikosProperties21.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        java.lang.String str34 = atomikosProperties32.logBaseName;
        java.lang.String str35 = atomikosProperties32.getLogBaseDir();
        atomikosProperties32.setMaxActives((int) (byte) -1);
        java.lang.String str38 = atomikosProperties32.getService();
        java.lang.Object obj39 = properties19.getOrDefault((java.lang.Object) atomikosProperties21, (java.lang.Object) atomikosProperties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        int int42 = atomikosProperties40.getMaxActives();
        java.lang.String str43 = atomikosProperties40.logBaseDir;
        java.lang.Object obj45 = properties19.putIfAbsent((java.lang.Object) atomikosProperties40, (java.lang.Object) "");
        boolean boolean46 = atomikosProperties40.isThreadedTwoPhaseCommit();
        atomikosProperties40.setService("tmlog");
        boolean boolean49 = atomikosProperties40.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        properties52.clear();
        boolean boolean54 = properties52.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str56 = atomikosProperties55.logBaseDir;
        atomikosProperties55.setTransactionManagerUniqueName("");
        int int59 = atomikosProperties55.getMaxActives();
        java.lang.String str60 = atomikosProperties55.transactionManagerUniqueName;
        boolean boolean61 = properties52.containsValue((java.lang.Object) atomikosProperties55);
        boolean boolean62 = atomikosProperties55.isEnableLogging();
        java.lang.String str63 = atomikosProperties55.getTransactionManagerUniqueName();
        int int64 = atomikosProperties55.maxActives;
        java.lang.Object obj65 = properties2.getOrDefault((java.lang.Object) boolean49, (java.lang.Object) atomikosProperties55);
        java.util.Set<java.lang.Object> objSet66 = properties2.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNotNull(properties13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str14, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(objSet66);
    }

    @Test
    public void test7290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7290");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        java.lang.String str19 = properties2.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        int int22 = atomikosProperties20.getMaxActives();
        java.lang.String str23 = atomikosProperties20.logBaseDir;
        boolean boolean24 = atomikosProperties20.serialJtaTransactions;
        java.lang.String str25 = atomikosProperties20.transactionManagerUniqueName;
        atomikosProperties20.threadedTwoPhaseCommit = false;
        atomikosProperties20.transactionManagerUniqueName = "{}";
        boolean boolean30 = properties2.contains((java.lang.Object) atomikosProperties20);
        atomikosProperties20.threadedTwoPhaseCommit = true;
        boolean boolean33 = atomikosProperties20.isForceShutdownOnVmExit();
        atomikosProperties20.setTransactionManagerUniqueName("{}");
        boolean boolean36 = atomikosProperties20.isEnableLogging();
        java.lang.String str37 = atomikosProperties20.getService();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test7291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7291");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setLogBaseName("hi!");
        atomikosProperties0.setCheckpointInterval((long) (short) 1);
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties17);
    }

    @Test
    public void test7292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7292");
        java.util.Properties properties0 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties1 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str2 = atomikosProperties1.logBaseDir;
        atomikosProperties1.setTransactionManagerUniqueName("");
        int int5 = atomikosProperties1.getMaxActives();
        java.lang.String str6 = atomikosProperties1.getLogBaseDir();
        atomikosProperties1.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setCheckpointInterval((long) 100);
        boolean boolean18 = atomikosProperties15.isForceShutdownOnVmExit();
        atomikosProperties15.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean21 = properties14.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.enableLogging = true;
        boolean boolean26 = properties11.replace((java.lang.Object) boolean21, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection27 = properties11.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet28 = properties11.entrySet();
        atomikosProperties1.set(properties11, "hi!", (java.lang.Object) 0L);
        atomikosProperties1.setEnableLogging(false);
        atomikosProperties1.setTransactionManagerUniqueName("tmlog");
        atomikosProperties1.setEnableLogging(false);
        long long38 = atomikosProperties1.checkpointInterval;
        java.lang.Object obj39 = properties0.remove((java.lang.Object) long38);
        java.util.Properties properties40 = new java.util.Properties(properties0);
        properties0.clear();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertNotNull(objEntrySet28);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test7293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7293");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.maxActives = (byte) -1;
        boolean boolean5 = atomikosProperties0.isEnableLogging();
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
    }

    @Test
    public void test7294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7294");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection6 = properties2.values();
        int int7 = properties2.size();
        java.lang.Object obj8 = null;
        boolean boolean9 = properties2.equals(obj8);
        java.util.Collection<java.lang.Object> objCollection10 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        atomikosProperties11.forceShutdownOnVmExit = false;
        atomikosProperties11.threadedTwoPhaseCommit = false;
        atomikosProperties11.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean19 = atomikosProperties11.isSerialJtaTransactions();
        atomikosProperties11.setForceShutdownOnVmExit(false);
        boolean boolean22 = properties2.contains((java.lang.Object) atomikosProperties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        long long27 = atomikosProperties23.getDefaultJtaTimeout();
        long long28 = atomikosProperties23.checkpointInterval;
        java.lang.String str29 = atomikosProperties23.getLogBaseDir();
        atomikosProperties23.setLogBaseDir("");
        boolean boolean32 = properties2.equals((java.lang.Object) atomikosProperties23);
        java.lang.Object obj35 = properties2.setProperty("{-1=1}", "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objCollection10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10000L + "'", long27 == 10000L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test7295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7295");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        java.lang.String str40 = atomikosProperties10.getService();
        atomikosProperties10.logBaseName = "";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test7296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7296");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        int int5 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseDir = "{}";
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.util.Enumeration<?> wildcardEnumeration14 = properties13.propertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(wildcardEnumeration14);
    }

    @Test
    public void test7297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7297");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        long long8 = atomikosProperties0.getMaxTimeout();
        long long9 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
    }

    @Test
    public void test7298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7298");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        long long7 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
    }

    @Test
    public void test7299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7299");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.lang.Object obj15 = properties2.remove((java.lang.Object) atomikosProperties13);
        atomikosProperties13.forceShutdownOnVmExit = true;
        atomikosProperties13.setLogBaseName("tmlog");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        atomikosProperties13.setService("hi!");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
    }

    @Test
    public void test7300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7300");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.threadedTwoPhaseCommit = true;
        atomikosProperties15.setCheckpointInterval((long) (byte) 0);
        boolean boolean27 = atomikosProperties15.threadedTwoPhaseCommit;
        atomikosProperties15.setThreadedTwoPhaseCommit(true);
        boolean boolean30 = atomikosProperties15.threadedTwoPhaseCommit;
        boolean boolean31 = atomikosProperties15.enableLogging;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test7301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7301");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        int int5 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str8 = atomikosProperties0.getService();
        int int9 = atomikosProperties0.getMaxActives();
        long long10 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test7302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7302");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long8 = atomikosProperties0.maxTimeout;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        boolean boolean14 = atomikosProperties10.serialJtaTransactions;
        java.lang.String str15 = atomikosProperties10.transactionManagerUniqueName;
        atomikosProperties10.threadedTwoPhaseCommit = false;
        long long18 = atomikosProperties10.maxTimeout;
        java.util.Properties properties19 = atomikosProperties10.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties19.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setCheckpointInterval((long) 100);
        java.lang.String str24 = atomikosProperties21.getService();
        atomikosProperties21.defaultJtaTimeout = 'a';
        atomikosProperties21.enableLogging = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setForceShutdownOnVmExit(false);
        java.lang.Object obj33 = properties19.remove((java.lang.Object) atomikosProperties21);
        atomikosProperties21.logBaseName = "hi!";
        boolean boolean36 = properties9.contains((java.lang.Object) "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) 100);
        boolean boolean43 = atomikosProperties40.isForceShutdownOnVmExit();
        atomikosProperties40.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean46 = properties39.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean47 = properties9.containsValue((java.lang.Object) boolean46);
        java.io.OutputStream outputStream48 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.save(outputStream48, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test7303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7303");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        java.lang.String str9 = atomikosProperties0.service;
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str11 = atomikosProperties0.getService();
        atomikosProperties0.setLogBaseDir("tmlog");
        atomikosProperties0.maxTimeout = 0L;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test7304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7304");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setLogBaseName("");
        boolean boolean13 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        int int16 = atomikosProperties0.getMaxActives();
        boolean boolean17 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean18 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test7305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7305");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.isThreadedTwoPhaseCommit();
        int int8 = atomikosProperties0.maxActives;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean11 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}" + "'", str12, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test7306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7306");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        properties21.clear();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.lang.Object obj26 = properties23.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str27 = properties23.toString();
        java.lang.Object obj30 = properties23.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet31 = properties23.keySet();
        java.lang.Object obj32 = properties10.remove((java.lang.Object) properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        java.lang.Object obj38 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        boolean boolean43 = properties41.isEmpty();
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<?> wildcardEnumeration46 = properties35.propertyNames();
        java.lang.Object obj47 = properties10.get((java.lang.Object) properties35);
        java.lang.String str49 = properties35.getProperty("");
        java.util.Properties properties50 = new java.util.Properties(properties35);
        java.util.Properties properties51 = new java.util.Properties(properties50);
        java.lang.String str52 = properties51.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        java.lang.String str55 = atomikosProperties53.logBaseName;
        atomikosProperties53.setCheckpointInterval((-1L));
        java.lang.String str58 = atomikosProperties53.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        boolean boolean63 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.setEnableLogging(false);
        boolean boolean66 = atomikosProperties59.serialJtaTransactions;
        long long67 = atomikosProperties59.defaultJtaTimeout;
        java.lang.String str68 = atomikosProperties59.logBaseName;
        java.lang.String str69 = atomikosProperties59.getLogBaseName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj70 = properties51.replace((java.lang.Object) str58, (java.lang.Object) atomikosProperties59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj26, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(wildcardEnumeration46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
    }

    @Test
    public void test7307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7307");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.lang.Object obj13 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean23 = properties21.containsValue((java.lang.Object) 100L);
        boolean boolean24 = properties16.contains((java.lang.Object) properties21);
        java.util.Set<java.lang.String> strSet25 = properties21.stringPropertyNames();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.lang.String str27 = properties21.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str27, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test7308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7308");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        boolean boolean23 = atomikosProperties4.isForceShutdownOnVmExit();
        long long24 = atomikosProperties4.maxTimeout;
        boolean boolean25 = atomikosProperties4.isSerialJtaTransactions();
        atomikosProperties4.setMaxActives(0);
        atomikosProperties4.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties4.logBaseName = "{=}";
        atomikosProperties4.logBaseName = "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=1, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 300000L + "'", long24 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test7309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7309");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        java.util.Properties properties14 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        java.lang.Object obj18 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties30);
        int int38 = properties17.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet39 = properties17.entrySet();
        java.util.Enumeration<?> wildcardEnumeration40 = properties17.propertyNames();
        java.lang.Object obj41 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long43 = atomikosProperties42.checkpointInterval;
        java.util.Properties properties44 = atomikosProperties42.asProperties();
        properties44.clear();
        java.util.Properties properties46 = new java.util.Properties(properties44);
        java.lang.Object obj49 = properties46.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.transactionManagerUniqueName;
        boolean boolean53 = atomikosProperties50.enableLogging;
        java.lang.String str54 = atomikosProperties50.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str56 = atomikosProperties55.logBaseDir;
        java.lang.String str57 = atomikosProperties55.logBaseName;
        java.lang.String str58 = atomikosProperties55.getLogBaseDir();
        atomikosProperties55.setMaxActives((int) (byte) -1);
        boolean boolean61 = atomikosProperties55.isEnableLogging();
        atomikosProperties55.transactionManagerUniqueName = "";
        int int64 = atomikosProperties55.maxActives;
        boolean boolean65 = properties46.remove((java.lang.Object) atomikosProperties50, (java.lang.Object) atomikosProperties55);
        boolean boolean66 = properties8.remove((java.lang.Object) properties17, (java.lang.Object) properties46);
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties8.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(objEntrySet39);
        org.junit.Assert.assertNotNull(wildcardEnumeration40);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj49, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tmlog" + "'", str57, "tmlog");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objEnumeration67);
    }

    @Test
    public void test7310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7310");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        int int14 = properties2.size();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties2.elements();
        int int16 = properties2.size();
        java.lang.String str17 = properties2.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        java.lang.String str20 = atomikosProperties18.logBaseName;
        atomikosProperties18.setService("");
        boolean boolean23 = atomikosProperties18.threadedTwoPhaseCommit;
        int int24 = atomikosProperties18.getMaxActives();
        boolean boolean25 = atomikosProperties18.isEnableLogging();
        java.lang.String str26 = atomikosProperties18.getTransactionManagerUniqueName();
        atomikosProperties18.setMaxActives((int) (short) 1);
        atomikosProperties18.maxActives = (short) 0;
        long long31 = atomikosProperties18.defaultJtaTimeout;
        java.lang.Object obj32 = properties2.get((java.lang.Object) long31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        java.util.Properties properties39 = atomikosProperties33.asProperties();
        java.util.Collection<java.lang.Object> objCollection40 = properties39.values();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties39.keys();
        java.lang.String str42 = properties39.toString();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 50 + "'", int24 == 50);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNotNull(objCollection40);
        org.junit.Assert.assertNotNull(objEnumeration41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str42, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test7311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7311");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.getOrDefault((java.lang.Object) 0.0f, (java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties0.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.logBaseDir;
        atomikosProperties7.setTransactionManagerUniqueName("");
        int int11 = atomikosProperties7.getMaxActives();
        java.lang.String str12 = atomikosProperties7.transactionManagerUniqueName;
        atomikosProperties7.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        properties17.clear();
        java.util.Properties properties19 = new java.util.Properties(properties17);
        atomikosProperties7.set(properties17, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj25 = properties17.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        properties28.clear();
        java.util.Properties properties30 = new java.util.Properties(properties28);
        java.lang.Object obj33 = properties30.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str34 = properties30.toString();
        java.lang.Object obj37 = properties30.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet38 = properties30.keySet();
        java.lang.Object obj39 = properties17.remove((java.lang.Object) properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        properties42.clear();
        boolean boolean44 = properties42.isEmpty();
        java.lang.Object obj45 = properties42.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        properties48.clear();
        boolean boolean50 = properties48.isEmpty();
        java.util.Collection<java.lang.Object> objCollection51 = properties48.values();
        properties42.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.util.Enumeration<?> wildcardEnumeration53 = properties42.propertyNames();
        java.lang.Object obj54 = properties17.get((java.lang.Object) properties42);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties0.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration57 = properties0.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.logBaseDir;
        java.lang.String str60 = atomikosProperties58.logBaseName;
        java.lang.String str61 = atomikosProperties58.getLogBaseDir();
        long long62 = atomikosProperties58.getDefaultJtaTimeout();
        atomikosProperties58.defaultJtaTimeout = 50;
        java.lang.String str65 = atomikosProperties58.getTransactionManagerUniqueName();
        atomikosProperties58.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties58.setLogBaseDir("{com.atomikos.icatch.tmlog=0.0}");
        atomikosProperties58.maxTimeout = '4';
        atomikosProperties58.setDefaultJtaTimeout((long) ' ');
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long75 = atomikosProperties74.checkpointInterval;
        atomikosProperties74.forceShutdownOnVmExit = false;
        atomikosProperties74.threadedTwoPhaseCommit = false;
        atomikosProperties74.serialJtaTransactions = false;
        java.lang.Object obj82 = properties0.replace((java.lang.Object) ' ', (java.lang.Object) atomikosProperties74);
        java.lang.String str85 = properties0.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "");
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 0.0d + "'", obj3, 0.0d);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj33, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(objSet38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{}");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertNotNull(wildcardEnumeration53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertNotNull(objEnumeration57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tmlog" + "'", str60, "tmlog");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10000L + "'", long62 == 10000L);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 500L + "'", long75 == 500L);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test7312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7312");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean22 = properties2.contains((java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        atomikosProperties23.logBaseName = "tmlog";
        atomikosProperties23.setEnableLogging(true);
        atomikosProperties23.setMaxActives((int) (byte) 0);
        atomikosProperties23.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        properties38.clear();
        boolean boolean40 = properties38.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        java.lang.Object obj46 = properties43.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection47 = properties43.values();
        boolean boolean48 = properties38.containsKey((java.lang.Object) objCollection47);
        java.util.Enumeration<java.lang.Object> objEnumeration49 = properties38.keys();
        java.lang.String str51 = properties38.getProperty("");
        java.lang.Object obj52 = properties2.getOrDefault((java.lang.Object) "hi!", (java.lang.Object) properties38);
        int int53 = properties38.size();
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties38.elements();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objEnumeration49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "{}");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objEnumeration54);
    }

    @Test
    public void test7313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7313");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.threadedTwoPhaseCommit = true;
        atomikosProperties15.setTransactionManagerUniqueName("{com.atomikos.icatch.tmlog=0.0}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        java.util.Properties properties32 = atomikosProperties30.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) 100);
        boolean boolean36 = atomikosProperties33.isForceShutdownOnVmExit();
        atomikosProperties33.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean39 = properties32.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.enableLogging = true;
        boolean boolean44 = properties29.replace((java.lang.Object) boolean39, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection45 = properties29.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet46 = properties29.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet47 = properties29.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setCheckpointInterval((long) 100);
        boolean boolean52 = atomikosProperties49.isForceShutdownOnVmExit();
        atomikosProperties49.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long55 = atomikosProperties49.getDefaultJtaTimeout();
        long long56 = atomikosProperties49.getMaxTimeout();
        atomikosProperties49.logBaseName = "tmlog";
        long long59 = atomikosProperties49.getDefaultJtaTimeout();
        long long60 = atomikosProperties49.defaultJtaTimeout;
        atomikosProperties49.maxTimeout = 10000L;
        boolean boolean63 = atomikosProperties49.threadedTwoPhaseCommit;
        long long64 = atomikosProperties49.getCheckpointInterval();
        atomikosProperties49.maxActives = (short) 1;
        atomikosProperties15.set(properties29, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}", (java.lang.Object) (short) 1);
        boolean boolean68 = atomikosProperties15.isEnableLogging();
        java.lang.String str69 = atomikosProperties15.getLogBaseName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertNotNull(objEntrySet46);
        org.junit.Assert.assertNotNull(objEntrySet47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 300000L + "'", long56 == 300000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
    }

    @Test
    public void test7314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7314");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 1);
        boolean boolean6 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str7 = atomikosProperties0.service;
        java.util.Properties properties8 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(properties8);
    }

    @Test
    public void test7315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7315");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str7 = atomikosProperties0.getService();
        atomikosProperties0.setMaxTimeout((long) (short) 0);
        atomikosProperties0.forceShutdownOnVmExit = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test7316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7316");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        java.lang.String str48 = atomikosProperties44.logBaseName;
        java.lang.String str49 = atomikosProperties44.logBaseDir;
        atomikosProperties44.threadedTwoPhaseCommit = true;
        java.lang.String str52 = atomikosProperties44.getService();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test7317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7317");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.lang.Object obj23 = properties5.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{}");
        java.util.Enumeration<?> wildcardEnumeration24 = properties5.propertyNames();
        boolean boolean26 = properties5.contains((java.lang.Object) 10.0d);
        boolean boolean27 = properties5.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        boolean boolean32 = properties30.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj38 = properties35.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        java.lang.String str41 = atomikosProperties39.logBaseName;
        java.lang.String str42 = atomikosProperties39.getLogBaseDir();
        atomikosProperties39.setLogBaseName("");
        java.lang.Object obj45 = properties30.replace((java.lang.Object) properties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        java.lang.Object obj49 = properties48.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        atomikosProperties50.setMaxActives((int) (byte) -1);
        boolean boolean56 = atomikosProperties50.isEnableLogging();
        atomikosProperties50.transactionManagerUniqueName = "";
        atomikosProperties50.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        java.lang.String str64 = atomikosProperties61.getLogBaseDir();
        atomikosProperties61.setMaxActives((int) (byte) -1);
        java.lang.String str67 = atomikosProperties61.getService();
        java.lang.Object obj68 = properties48.getOrDefault((java.lang.Object) atomikosProperties50, (java.lang.Object) atomikosProperties61);
        int int69 = properties48.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet70 = properties48.entrySet();
        java.lang.Object obj71 = properties30.remove((java.lang.Object) objEntrySet70);
        java.util.Properties properties72 = new java.util.Properties(properties30);
        java.util.Enumeration<java.lang.Object> objEnumeration73 = properties30.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration74 = properties30.keys();
        boolean boolean75 = properties30.isEmpty();
        properties5.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties30);
        java.io.InputStream inputStream77 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties30.loadFromXML(inputStream77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(wildcardEnumeration24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNotNull(obj49);
// flaky:         org.junit.Assert.assertEquals(obj49.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
        org.junit.Assert.assertNotNull(objEntrySet70);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(objEnumeration73);
        org.junit.Assert.assertNotNull(objEnumeration74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test7318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7318");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        atomikosProperties15.setThreadedTwoPhaseCommit(false);
        boolean boolean20 = properties2.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        properties2.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties2.entrySet();
        java.util.Set<java.lang.Object> objSet23 = properties2.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties2.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet25 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        boolean boolean30 = properties28.containsValue((java.lang.Object) 100L);
        java.lang.String str31 = properties28.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        atomikosProperties32.setTransactionManagerUniqueName("");
        int int36 = atomikosProperties32.getMaxActives();
        java.lang.String str37 = atomikosProperties32.transactionManagerUniqueName;
        atomikosProperties32.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        properties42.clear();
        java.util.Properties properties44 = new java.util.Properties(properties42);
        atomikosProperties32.set(properties42, "tmlog", (java.lang.Object) 0.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        java.lang.Object obj52 = properties28.putIfAbsent((java.lang.Object) "tmlog", (java.lang.Object) atomikosProperties48);
        java.lang.String str54 = properties28.getProperty("{}");
        java.lang.String str56 = properties28.getProperty("");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties28);
        java.io.OutputStream outputStream58 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties28.storeToXML(outputStream58, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEntrySet22);
        org.junit.Assert.assertNotNull(objSet23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNotNull(objEntrySet25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str31, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test7319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7319");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        boolean boolean23 = atomikosProperties4.isForceShutdownOnVmExit();
        long long24 = atomikosProperties4.maxTimeout;
        boolean boolean25 = atomikosProperties4.isSerialJtaTransactions();
        atomikosProperties4.setMaxActives(0);
        long long28 = atomikosProperties4.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 300000L + "'", long24 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10000L + "'", long28 == 10000L);
    }

    @Test
    public void test7320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7320");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection6 = properties2.values();
        java.util.Collection<java.lang.Object> objCollection7 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        boolean boolean12 = properties10.isEmpty();
        java.lang.Object obj13 = properties10.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Enumeration<?> wildcardEnumeration21 = properties16.propertyNames();
        java.util.Properties properties22 = new java.util.Properties(properties16);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        int int24 = properties2.size();
        boolean boolean25 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setMaxActives((int) (byte) -1);
        java.lang.String str32 = atomikosProperties26.getService();
        atomikosProperties26.setDefaultJtaTimeout((long) (-1));
        int int35 = atomikosProperties26.maxActives;
        long long36 = atomikosProperties26.maxTimeout;
        atomikosProperties26.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        atomikosProperties43.setTransactionManagerUniqueName("");
        int int47 = atomikosProperties43.getMaxActives();
        boolean boolean48 = properties41.containsValue((java.lang.Object) int47);
        java.lang.Object obj51 = properties41.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties52 = new java.util.Properties(properties41);
        int int53 = properties41.size();
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties41.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str56 = atomikosProperties55.logBaseDir;
        java.lang.String str57 = atomikosProperties55.logBaseName;
        java.lang.String str58 = atomikosProperties55.getLogBaseDir();
        atomikosProperties55.setMaxActives((int) (byte) -1);
        boolean boolean61 = atomikosProperties55.isEnableLogging();
        long long62 = atomikosProperties55.checkpointInterval;
        atomikosProperties55.setCheckpointInterval(10L);
        boolean boolean65 = atomikosProperties55.isForceShutdownOnVmExit();
        atomikosProperties55.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean68 = atomikosProperties55.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        java.lang.String str71 = atomikosProperties69.logBaseName;
        java.lang.String str72 = atomikosProperties69.getLogBaseDir();
        boolean boolean73 = atomikosProperties69.isSerialJtaTransactions();
        atomikosProperties69.setEnableLogging(false);
        boolean boolean76 = atomikosProperties69.serialJtaTransactions;
        long long77 = atomikosProperties69.defaultJtaTimeout;
        java.lang.String str78 = atomikosProperties69.logBaseName;
        java.lang.String str79 = atomikosProperties69.getLogBaseName();
        atomikosProperties69.setLogBaseName("");
        java.lang.Object obj82 = properties41.put((java.lang.Object) boolean68, (java.lang.Object) atomikosProperties69);
        java.util.Enumeration<java.lang.Object> objEnumeration83 = properties41.elements();
        java.util.Collection<java.lang.Object> objCollection84 = properties41.values();
        java.lang.Object obj85 = properties2.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) properties41);
        java.util.Properties properties86 = new java.util.Properties(properties41);
        java.io.InputStream inputStream87 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties41.loadFromXML(inputStream87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(wildcardEnumeration21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objEnumeration54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tmlog" + "'", str57, "tmlog");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tmlog" + "'", str71, "tmlog");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(objEnumeration83);
        org.junit.Assert.assertNotNull(objCollection84);
        org.junit.Assert.assertNull(obj85);
    }

    @Test
    public void test7321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7321");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.transactionManagerUniqueName;
        atomikosProperties21.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        properties31.clear();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        atomikosProperties21.set(properties31, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj39 = properties31.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties40 = new java.util.Properties(properties31);
        int int41 = properties40.size();
        java.lang.String str42 = properties40.toString();
        int int43 = properties40.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        properties47.clear();
        java.util.Properties properties49 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        atomikosProperties50.setTransactionManagerUniqueName("");
        int int54 = atomikosProperties50.getMaxActives();
        atomikosProperties50.logBaseName = "tmlog";
        int int57 = atomikosProperties50.maxActives;
        boolean boolean58 = properties47.containsValue((java.lang.Object) int57);
        java.util.Properties properties59 = new java.util.Properties(properties47);
        atomikosProperties9.set(properties40, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", (java.lang.Object) properties59);
        long long61 = atomikosProperties9.getDefaultJtaTimeout();
        atomikosProperties9.logBaseDir = "{}";
        boolean boolean64 = atomikosProperties9.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test7322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7322");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        atomikosProperties15.setThreadedTwoPhaseCommit(false);
        boolean boolean20 = properties2.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setCheckpointInterval((long) 100);
        atomikosProperties21.maxActives = (byte) 0;
        java.lang.Object obj26 = properties2.remove((java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        atomikosProperties27.transactionManagerUniqueName = "";
        atomikosProperties27.setEnableLogging(false);
        atomikosProperties27.setLogBaseName("");
        boolean boolean40 = atomikosProperties27.threadedTwoPhaseCommit;
        boolean boolean41 = atomikosProperties27.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long43 = atomikosProperties42.checkpointInterval;
        java.util.Properties properties44 = atomikosProperties42.asProperties();
        java.lang.Object obj45 = properties44.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        boolean boolean52 = atomikosProperties46.isEnableLogging();
        atomikosProperties46.transactionManagerUniqueName = "";
        atomikosProperties46.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        java.lang.String str59 = atomikosProperties57.logBaseName;
        java.lang.String str60 = atomikosProperties57.getLogBaseDir();
        atomikosProperties57.setMaxActives((int) (byte) -1);
        java.lang.String str63 = atomikosProperties57.getService();
        java.lang.Object obj64 = properties44.getOrDefault((java.lang.Object) atomikosProperties46, (java.lang.Object) atomikosProperties57);
        atomikosProperties57.setService("tmlog");
        java.lang.String str67 = atomikosProperties57.getLogBaseDir();
        atomikosProperties57.setDefaultJtaTimeout((long) (byte) 0);
        java.lang.String str70 = atomikosProperties57.logBaseName;
        java.lang.Object obj71 = properties2.replace((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties57);
        atomikosProperties57.maxTimeout = 9;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertNotNull(obj45);
// flaky:         org.junit.Assert.assertEquals(obj45.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "tmlog" + "'", str70, "tmlog");
        org.junit.Assert.assertNull(obj71);
    }

    @Test
    public void test7323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7323");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7324");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.threadedTwoPhaseCommit = true;
        atomikosProperties31.service = "tmlog";
        boolean boolean49 = atomikosProperties31.isForceShutdownOnVmExit();
        java.lang.String str50 = atomikosProperties31.getLogBaseDir();
        boolean boolean51 = atomikosProperties31.isForceShutdownOnVmExit();
        atomikosProperties31.logBaseDir = "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties31.setService("");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test7325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7325");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.tmlog=0.0}";
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setMaxTimeout((long) 0);
        java.lang.String str11 = atomikosProperties0.getService();
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}";
        long long17 = atomikosProperties0.getMaxTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{com.atomikos.icatch.tmlog=0.0}" + "'", str14, "{com.atomikos.icatch.tmlog=0.0}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test7326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7326");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.lang.Object obj15 = properties2.setProperty("", "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.lang.Object obj27 = properties18.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj27);
// flaky:         org.junit.Assert.assertEquals(obj27.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test7327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7327");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        java.lang.Object obj29 = properties28.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        long long37 = atomikosProperties30.defaultJtaTimeout;
        java.lang.String str38 = atomikosProperties30.logBaseName;
        boolean boolean39 = properties2.remove(obj29, (java.lang.Object) atomikosProperties30);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        properties43.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.logBaseDir;
        atomikosProperties45.setTransactionManagerUniqueName("");
        int int49 = atomikosProperties45.getMaxActives();
        boolean boolean50 = properties43.containsValue((java.lang.Object) int49);
        java.lang.Object obj53 = properties43.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties54 = new java.util.Properties(properties43);
        int int55 = properties43.size();
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties43.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        java.lang.String str59 = atomikosProperties57.logBaseName;
        java.lang.String str60 = atomikosProperties57.getLogBaseDir();
        atomikosProperties57.setMaxActives((int) (byte) -1);
        boolean boolean63 = atomikosProperties57.isEnableLogging();
        long long64 = atomikosProperties57.checkpointInterval;
        atomikosProperties57.setCheckpointInterval(10L);
        boolean boolean67 = atomikosProperties57.isForceShutdownOnVmExit();
        atomikosProperties57.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean70 = atomikosProperties57.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        java.lang.String str73 = atomikosProperties71.logBaseName;
        java.lang.String str74 = atomikosProperties71.getLogBaseDir();
        boolean boolean75 = atomikosProperties71.isSerialJtaTransactions();
        atomikosProperties71.setEnableLogging(false);
        boolean boolean78 = atomikosProperties71.serialJtaTransactions;
        long long79 = atomikosProperties71.defaultJtaTimeout;
        java.lang.String str80 = atomikosProperties71.logBaseName;
        java.lang.String str81 = atomikosProperties71.getLogBaseName();
        atomikosProperties71.setLogBaseName("");
        java.lang.Object obj84 = properties43.put((java.lang.Object) boolean70, (java.lang.Object) atomikosProperties71);
        boolean boolean85 = properties2.equals((java.lang.Object) properties43);
        java.util.Enumeration<?> wildcardEnumeration86 = properties2.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration87 = properties2.keys();
        java.util.Properties properties88 = new java.util.Properties(properties2);
        java.util.Properties properties89 = new java.util.Properties(properties88);
        java.lang.Object obj90 = properties89.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(obj29);
// flaky:         org.junit.Assert.assertEquals(obj29.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 50 + "'", int49 == 50);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 500L + "'", long64 == 500L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tmlog" + "'", str73, "tmlog");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10000L + "'", long79 == 10000L);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "tmlog" + "'", str80, "tmlog");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tmlog" + "'", str81, "tmlog");
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration86);
        org.junit.Assert.assertNotNull(objEnumeration87);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "{}");
    }

    @Test
    public void test7328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7328");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setMaxActives((int) (byte) 0);
        atomikosProperties0.setMaxActives((int) (short) 1);
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str14 = atomikosProperties0.getLogBaseDir();
        long long15 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
    }

    @Test
    public void test7329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7329");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        int int6 = atomikosProperties0.getMaxActives();
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        java.lang.String str8 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.logBaseDir = "tmlog";
        boolean boolean11 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        boolean boolean16 = properties14.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        java.lang.Object obj22 = properties19.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        atomikosProperties23.setLogBaseName("");
        java.lang.Object obj29 = properties14.replace((java.lang.Object) properties19, (java.lang.Object) "");
        java.lang.String str31 = properties14.getProperty("tmlog");
        int int32 = properties14.size();
        java.lang.Object obj34 = null;
        atomikosProperties0.set(properties14, "tmlog", obj34);
        boolean boolean36 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test7330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7330");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        atomikosProperties15.setThreadedTwoPhaseCommit(false);
        boolean boolean20 = properties2.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        atomikosProperties22.setDefaultJtaTimeout((long) (-1));
        int int31 = atomikosProperties22.maxActives;
        atomikosProperties22.setDefaultJtaTimeout(1L);
        java.lang.String str34 = atomikosProperties22.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.enableLogging = true;
        boolean boolean38 = atomikosProperties35.forceShutdownOnVmExit;
        java.lang.Object obj39 = properties2.replace((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        properties42.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.logBaseDir;
        atomikosProperties44.setTransactionManagerUniqueName("");
        int int48 = atomikosProperties44.getMaxActives();
        boolean boolean49 = properties42.containsValue((java.lang.Object) int48);
        java.lang.Object obj52 = properties42.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        java.lang.String str55 = atomikosProperties53.logBaseName;
        java.lang.String str56 = atomikosProperties53.getLogBaseDir();
        atomikosProperties53.setMaxActives((int) (byte) -1);
        boolean boolean59 = atomikosProperties53.isEnableLogging();
        long long60 = atomikosProperties53.checkpointInterval;
        atomikosProperties53.setCheckpointInterval(10L);
        boolean boolean63 = atomikosProperties53.serialJtaTransactions;
        java.lang.Object obj64 = properties2.put((java.lang.Object) properties42, (java.lang.Object) boolean63);
        java.lang.String str65 = properties42.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        boolean boolean70 = atomikosProperties66.isSerialJtaTransactions();
        atomikosProperties66.setEnableLogging(false);
        boolean boolean73 = atomikosProperties66.serialJtaTransactions;
        long long74 = atomikosProperties66.defaultJtaTimeout;
        java.lang.String str75 = atomikosProperties66.logBaseName;
        java.lang.String str76 = atomikosProperties66.getLogBaseName();
        atomikosProperties66.setLogBaseName("");
        boolean boolean79 = atomikosProperties66.isForceShutdownOnVmExit();
        java.util.Properties properties80 = atomikosProperties66.asProperties();
        boolean boolean81 = properties42.containsKey((java.lang.Object) properties80);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long83 = atomikosProperties82.checkpointInterval;
        atomikosProperties82.forceShutdownOnVmExit = false;
        atomikosProperties82.threadedTwoPhaseCommit = false;
        long long88 = atomikosProperties82.getMaxTimeout();
        long long89 = atomikosProperties82.getCheckpointInterval();
        java.lang.String str90 = atomikosProperties82.getTransactionManagerUniqueName();
        atomikosProperties82.setMaxTimeout(300000L);
        java.lang.Object obj93 = properties42.get((java.lang.Object) 300000L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}" + "'", str65, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 10000L + "'", long74 == 10000L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tmlog" + "'", str75, "tmlog");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "tmlog" + "'", str76, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(properties80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 500L + "'", long83 == 500L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 300000L + "'", long88 == 300000L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 500L + "'", long89 == 500L);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertNull(obj93);
    }

    @Test
    public void test7331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7331");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.maxActives = (byte) -1;
        boolean boolean12 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test7332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7332");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        atomikosProperties0.maxActives = ' ';
        long long11 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test7333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7333");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        int int22 = properties21.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.enableLogging = true;
        atomikosProperties23.maxActives = (byte) -1;
        atomikosProperties23.threadedTwoPhaseCommit = false;
        java.lang.String str30 = atomikosProperties23.service;
        atomikosProperties23.maxActives = 10;
        boolean boolean33 = properties21.equals((java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.logBaseDir;
        atomikosProperties34.setTransactionManagerUniqueName("");
        int int38 = atomikosProperties34.getMaxActives();
        java.lang.String str39 = atomikosProperties34.getLogBaseDir();
        atomikosProperties34.setTransactionManagerUniqueName("");
        atomikosProperties34.setDefaultJtaTimeout(0L);
        int int44 = atomikosProperties34.maxActives;
        atomikosProperties34.setEnableLogging(false);
        long long47 = atomikosProperties34.getDefaultJtaTimeout();
        atomikosProperties34.setDefaultJtaTimeout(1L);
        atomikosProperties34.maxActives = (byte) 100;
        boolean boolean52 = atomikosProperties34.enableLogging;
        long long53 = atomikosProperties34.checkpointInterval;
        java.lang.Object obj54 = properties21.get((java.lang.Object) atomikosProperties34);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet55 = properties21.entrySet();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objEntrySet55);
    }

    @Test
    public void test7334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7334");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        int int66 = properties53.size();
        java.util.Enumeration<java.lang.Object> objEnumeration67 = properties53.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.logBaseDir;
        java.lang.String str70 = atomikosProperties68.logBaseName;
        java.lang.String str71 = atomikosProperties68.getLogBaseDir();
        atomikosProperties68.setMaxActives((int) (byte) -1);
        boolean boolean74 = atomikosProperties68.isEnableLogging();
        long long75 = atomikosProperties68.checkpointInterval;
        atomikosProperties68.setCheckpointInterval(10L);
        boolean boolean78 = atomikosProperties68.isForceShutdownOnVmExit();
        atomikosProperties68.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties68.setLogBaseName("hi!");
        long long83 = atomikosProperties68.checkpointInterval;
        atomikosProperties68.serialJtaTransactions = true;
        atomikosProperties68.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties88 = atomikosProperties68.asProperties();
        boolean boolean89 = properties53.contains((java.lang.Object) properties88);
        java.util.Properties properties90 = new java.util.Properties(properties53);
        java.io.InputStream inputStream91 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties53.load(inputStream91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(objEnumeration67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "tmlog" + "'", str70, "tmlog");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 500L + "'", long75 == 500L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10L + "'", long83 == 10L);
        org.junit.Assert.assertNotNull(properties88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test7335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7335");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        java.lang.String str72 = atomikosProperties66.getService();
        long long73 = atomikosProperties66.defaultJtaTimeout;
        atomikosProperties66.setEnableLogging(true);
        boolean boolean76 = properties53.equals((java.lang.Object) atomikosProperties66);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str78 = atomikosProperties77.logBaseDir;
        java.lang.String str79 = atomikosProperties77.logBaseName;
        java.lang.String str80 = atomikosProperties77.getLogBaseDir();
        atomikosProperties77.setMaxActives((int) (byte) -1);
        java.lang.String str83 = atomikosProperties77.getService();
        atomikosProperties77.setDefaultJtaTimeout((long) (-1));
        int int86 = atomikosProperties77.maxActives;
        long long87 = atomikosProperties77.maxTimeout;
        long long88 = atomikosProperties77.getDefaultJtaTimeout();
        java.lang.Object obj89 = properties53.remove((java.lang.Object) atomikosProperties77);
        boolean boolean90 = atomikosProperties77.isEnableLogging();
        long long91 = atomikosProperties77.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 300000L + "'", long87 == 300000L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 300000L + "'", long91 == 300000L);
    }

    @Test
    public void test7336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7336");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean46 = atomikosProperties0.threadedTwoPhaseCommit;
        long long47 = atomikosProperties0.getCheckpointInterval();
        long long48 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.defaultJtaTimeout = (short) 10;
        atomikosProperties0.setMaxActives((int) (short) 0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
    }

    @Test
    public void test7337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7337");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        atomikosProperties36.threadedTwoPhaseCommit = true;
        atomikosProperties36.setCheckpointInterval((long) 100);
        atomikosProperties36.setLogBaseName("");
        atomikosProperties36.setThreadedTwoPhaseCommit(true);
        atomikosProperties36.setCheckpointInterval(52L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test7338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7338");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        properties48.clear();
        boolean boolean50 = properties48.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long52 = atomikosProperties51.checkpointInterval;
        java.util.Properties properties53 = atomikosProperties51.asProperties();
        java.lang.Object obj56 = properties53.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection57 = properties53.values();
        boolean boolean58 = properties48.containsKey((java.lang.Object) objCollection57);
        java.util.Enumeration<java.lang.Object> objEnumeration59 = properties48.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        atomikosProperties61.setTransactionManagerUniqueName("");
        int int65 = atomikosProperties61.getMaxActives();
        atomikosProperties61.logBaseName = "tmlog";
        atomikosProperties61.setMaxActives(50);
        atomikosProperties61.setLogBaseDir("{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        atomikosProperties0.set(properties48, "tmlog", (java.lang.Object) "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objEnumeration59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 50 + "'", int65 == 50);
    }

    @Test
    public void test7339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7339");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setDefaultJtaTimeout((long) 50);
        boolean boolean16 = properties9.contains((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        atomikosProperties17.setService("");
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        boolean boolean36 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties17.set(properties22, "{}", (java.lang.Object) boolean36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        boolean boolean42 = properties40.containsValue((java.lang.Object) 100L);
        java.lang.String str43 = properties40.toString();
        java.lang.Object obj44 = properties9.put((java.lang.Object) "{}", (java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        java.lang.Object obj48 = properties47.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        boolean boolean55 = atomikosProperties49.isEnableLogging();
        atomikosProperties49.transactionManagerUniqueName = "";
        atomikosProperties49.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        atomikosProperties60.setMaxActives((int) (byte) -1);
        java.lang.String str66 = atomikosProperties60.getService();
        java.lang.Object obj67 = properties47.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        int int70 = atomikosProperties68.getMaxActives();
        java.lang.String str71 = atomikosProperties68.logBaseDir;
        java.lang.Object obj73 = properties47.putIfAbsent((java.lang.Object) atomikosProperties68, (java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet74 = properties47.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet75 = properties47.entrySet();
        java.lang.Object obj76 = properties40.remove((java.lang.Object) properties47);
        java.lang.Object obj79 = properties47.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}", "{=}");
        java.util.Collection<java.lang.Object> objCollection80 = properties47.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 50 + "'", int70 == 50);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(objSet74);
        org.junit.Assert.assertNotNull(objEntrySet75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(objCollection80);
    }

    @Test
    public void test7340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7340");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        long long4 = atomikosProperties0.maxTimeout;
        java.lang.String str5 = atomikosProperties0.getTransactionManagerUniqueName();
        java.util.Properties properties6 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        boolean boolean12 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        atomikosProperties13.setTransactionManagerUniqueName("");
        int int17 = atomikosProperties13.getMaxActives();
        java.lang.String str18 = atomikosProperties13.transactionManagerUniqueName;
        boolean boolean19 = properties10.containsValue((java.lang.Object) atomikosProperties13);
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties10.elements();
        java.util.Collection<java.lang.Object> objCollection21 = properties10.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet22 = properties10.entrySet();
        // The following exception was thrown during execution in test generation
        try {
            atomikosProperties0.set(properties6, "{-1=1}", (java.lang.Object) objEntrySet22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 300000L + "'", long4 == 300000L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objEnumeration20);
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertNotNull(objEntrySet22);
    }

    @Test
    public void test7341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7341");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        boolean boolean21 = properties2.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        java.util.Set<java.lang.Object> objSet28 = properties24.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.threadedTwoPhaseCommit = false;
        int int39 = atomikosProperties29.maxActives;
        atomikosProperties29.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj42 = properties2.getOrDefault((java.lang.Object) properties24, (java.lang.Object) atomikosProperties29);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties24.elements();
        java.lang.Object obj46 = properties24.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "");
        boolean boolean47 = properties24.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        atomikosProperties48.setTransactionManagerUniqueName("");
        int int52 = atomikosProperties48.getMaxActives();
        java.lang.String str53 = atomikosProperties48.transactionManagerUniqueName;
        atomikosProperties48.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        java.util.Properties properties58 = atomikosProperties56.asProperties();
        properties58.clear();
        java.util.Properties properties60 = new java.util.Properties(properties58);
        atomikosProperties48.set(properties58, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj66 = properties58.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long68 = atomikosProperties67.checkpointInterval;
        java.util.Properties properties69 = atomikosProperties67.asProperties();
        properties69.clear();
        java.util.Properties properties71 = new java.util.Properties(properties69);
        java.lang.Object obj74 = properties71.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str75 = properties71.toString();
        java.lang.Object obj78 = properties71.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet79 = properties71.keySet();
        java.lang.Object obj80 = properties58.remove((java.lang.Object) properties71);
        boolean boolean81 = properties24.containsKey((java.lang.Object) properties58);
        java.io.Writer writer82 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties24.store(writer82, "{-1=1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj74, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "{}" + "'", str75, "{}");
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(objSet79);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test7342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7342");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet24 = properties2.entrySet();
        java.util.Enumeration<?> wildcardEnumeration25 = properties2.propertyNames();
        java.lang.Object obj26 = properties2.clone();
        properties2.clear();
        java.util.Set<java.lang.String> strSet28 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        atomikosProperties29.setService("");
        boolean boolean34 = atomikosProperties29.threadedTwoPhaseCommit;
        int int35 = atomikosProperties29.getMaxActives();
        boolean boolean36 = atomikosProperties29.isEnableLogging();
        java.lang.String str37 = atomikosProperties29.getTransactionManagerUniqueName();
        atomikosProperties29.logBaseDir = "tmlog";
        boolean boolean40 = atomikosProperties29.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        boolean boolean45 = properties43.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        java.lang.Object obj51 = properties48.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        java.lang.String str55 = atomikosProperties52.getLogBaseDir();
        atomikosProperties52.setLogBaseName("");
        java.lang.Object obj58 = properties43.replace((java.lang.Object) properties48, (java.lang.Object) "");
        java.lang.String str60 = properties43.getProperty("tmlog");
        int int61 = properties43.size();
        java.lang.Object obj63 = null;
        atomikosProperties29.set(properties43, "tmlog", obj63);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties43);
        java.util.Set<java.lang.Object> objSet66 = properties2.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(objEntrySet24);
        org.junit.Assert.assertNotNull(wildcardEnumeration25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(objSet66);
    }

    @Test
    public void test7343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7343");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.transactionManagerUniqueName;
        atomikosProperties6.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        atomikosProperties6.set(properties16, "tmlog", (java.lang.Object) 0.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        java.lang.Object obj26 = properties2.putIfAbsent((java.lang.Object) "tmlog", (java.lang.Object) atomikosProperties22);
        java.lang.String str28 = properties2.getProperty("{}");
        java.lang.String str30 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        boolean boolean35 = properties33.containsValue((java.lang.Object) 100L);
        java.lang.String str36 = properties33.toString();
        java.lang.Object obj39 = properties33.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        java.util.Properties properties46 = atomikosProperties40.asProperties();
        boolean boolean47 = properties33.equals((java.lang.Object) atomikosProperties40);
        java.lang.String str48 = properties33.toString();
        java.lang.Object obj49 = properties2.remove((java.lang.Object) properties33);
        int int50 = properties33.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet51 = properties33.entrySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str36, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}" + "'", str48, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(objEntrySet51);
    }

    @Test
    public void test7344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7344");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties4.maxActives = ' ';
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        boolean boolean31 = atomikosProperties25.isEnableLogging();
        atomikosProperties25.transactionManagerUniqueName = "";
        atomikosProperties25.threadedTwoPhaseCommit = true;
        java.util.Properties properties36 = atomikosProperties25.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        properties40.clear();
        boolean boolean42 = properties40.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        atomikosProperties43.setTransactionManagerUniqueName("");
        int int47 = atomikosProperties43.getMaxActives();
        java.lang.String str48 = atomikosProperties43.transactionManagerUniqueName;
        boolean boolean49 = properties40.containsValue((java.lang.Object) atomikosProperties43);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties40.elements();
        atomikosProperties4.set(properties36, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) properties40);
        java.lang.String str53 = properties40.getProperty("{}");
        java.lang.String str55 = properties40.getProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        java.util.Properties properties58 = atomikosProperties56.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        java.util.Properties properties61 = atomikosProperties59.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties62.setCheckpointInterval((long) 100);
        boolean boolean65 = atomikosProperties62.isForceShutdownOnVmExit();
        atomikosProperties62.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean68 = properties61.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties69.enableLogging = true;
        boolean boolean73 = properties58.replace((java.lang.Object) boolean68, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection74 = properties58.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet75 = properties58.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet76 = properties58.entrySet();
        java.lang.String str78 = properties58.getProperty("hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet79 = properties58.entrySet();
        java.lang.Object obj80 = properties58.clone();
        java.lang.Object obj81 = properties40.remove((java.lang.Object) properties58);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objCollection74);
        org.junit.Assert.assertNotNull(objEntrySet75);
        org.junit.Assert.assertNotNull(objEntrySet76);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(objEntrySet79);
        org.junit.Assert.assertNotNull(obj80);
// flaky:         org.junit.Assert.assertEquals(obj80.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj81);
    }

    @Test
    public void test7345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7345");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.maxActives = 9;
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.lang.String str13 = atomikosProperties0.transactionManagerUniqueName;
        java.lang.String str14 = atomikosProperties0.logBaseName;
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
    }

    @Test
    public void test7346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7346");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.lang.String str12 = atomikosProperties0.logBaseName;
        atomikosProperties0.logBaseDir = "hi!";
        java.lang.String str15 = atomikosProperties0.logBaseDir;
        boolean boolean16 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test7347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7347");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = 1;
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setCheckpointInterval((long) ' ');
        java.lang.String str18 = atomikosProperties0.service;
        boolean boolean19 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setDefaultJtaTimeout((long) 0);
        atomikosProperties0.serialJtaTransactions = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test7348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7348");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.getOrDefault((java.lang.Object) 0.0f, (java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties0.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.logBaseDir;
        atomikosProperties7.setTransactionManagerUniqueName("");
        int int11 = atomikosProperties7.getMaxActives();
        java.lang.String str12 = atomikosProperties7.transactionManagerUniqueName;
        atomikosProperties7.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        properties17.clear();
        java.util.Properties properties19 = new java.util.Properties(properties17);
        atomikosProperties7.set(properties17, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj25 = properties17.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        properties28.clear();
        java.util.Properties properties30 = new java.util.Properties(properties28);
        java.lang.Object obj33 = properties30.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str34 = properties30.toString();
        java.lang.Object obj37 = properties30.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet38 = properties30.keySet();
        java.lang.Object obj39 = properties17.remove((java.lang.Object) properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        properties42.clear();
        boolean boolean44 = properties42.isEmpty();
        java.lang.Object obj45 = properties42.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        properties48.clear();
        boolean boolean50 = properties48.isEmpty();
        java.util.Collection<java.lang.Object> objCollection51 = properties48.values();
        properties42.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.util.Enumeration<?> wildcardEnumeration53 = properties42.propertyNames();
        java.lang.Object obj54 = properties17.get((java.lang.Object) properties42);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Properties properties56 = new java.util.Properties(properties0);
        java.io.Writer writer57 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer57, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 0.0d + "'", obj3, 0.0d);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj33, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(objSet38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{}");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertNotNull(wildcardEnumeration53);
        org.junit.Assert.assertNull(obj54);
    }

    @Test
    public void test7349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7349");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        atomikosProperties44.threadedTwoPhaseCommit = true;
        boolean boolean50 = atomikosProperties44.isThreadedTwoPhaseCommit();
        java.lang.String str51 = atomikosProperties44.transactionManagerUniqueName;
        java.lang.String str52 = atomikosProperties44.logBaseDir;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test7350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7350");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
    }

    @Test
    public void test7351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7351");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str12 = atomikosProperties0.transactionManagerUniqueName;
        long long13 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setDefaultJtaTimeout((long) 0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
    }

    @Test
    public void test7352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7352");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        int int14 = properties2.size();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties2.elements();
        int int16 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        boolean boolean21 = properties19.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        java.lang.Object obj27 = properties24.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        java.lang.String str30 = atomikosProperties28.logBaseName;
        java.lang.String str31 = atomikosProperties28.getLogBaseDir();
        atomikosProperties28.setLogBaseName("");
        java.lang.Object obj34 = properties19.replace((java.lang.Object) properties24, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        atomikosProperties36.transactionManagerUniqueName = "";
        atomikosProperties36.setEnableLogging(false);
        boolean boolean47 = atomikosProperties36.isEnableLogging();
        boolean boolean48 = properties24.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean47);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet49 = properties24.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        atomikosProperties50.setTransactionManagerUniqueName("");
        int int54 = atomikosProperties50.getMaxActives();
        java.lang.String str55 = atomikosProperties50.transactionManagerUniqueName;
        atomikosProperties50.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        properties60.clear();
        java.util.Properties properties62 = new java.util.Properties(properties60);
        atomikosProperties50.set(properties60, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj68 = properties60.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties69 = new java.util.Properties(properties60);
        java.util.Collection<java.lang.Object> objCollection70 = properties60.values();
        java.util.Properties properties71 = new java.util.Properties(properties60);
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties71);
        java.util.Properties properties73 = new java.util.Properties(properties24);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties73);
        java.util.Collection<java.lang.Object> objCollection75 = properties2.values();
        int int76 = properties2.size();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objEntrySet49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(objCollection70);
        org.junit.Assert.assertNotNull(objCollection75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test7353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7353");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        boolean boolean22 = properties20.containsValue((java.lang.Object) 100L);
        java.lang.String str23 = properties20.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties20.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        properties27.clear();
        boolean boolean29 = properties27.isEmpty();
        java.lang.Object obj30 = properties27.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        java.lang.Object obj35 = properties34.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        atomikosProperties36.transactionManagerUniqueName = "";
        atomikosProperties36.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setMaxActives((int) (byte) -1);
        java.lang.String str53 = atomikosProperties47.getService();
        java.lang.Object obj54 = properties34.getOrDefault((java.lang.Object) atomikosProperties36, (java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        int int57 = atomikosProperties55.getMaxActives();
        java.lang.String str58 = atomikosProperties55.logBaseDir;
        java.lang.Object obj60 = properties34.putIfAbsent((java.lang.Object) atomikosProperties55, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        java.lang.String str64 = atomikosProperties61.getLogBaseDir();
        boolean boolean65 = atomikosProperties61.isSerialJtaTransactions();
        atomikosProperties61.setEnableLogging(false);
        boolean boolean68 = properties27.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties61);
        atomikosProperties61.logBaseName = "{}";
        long long71 = atomikosProperties61.getDefaultJtaTimeout();
        boolean boolean72 = atomikosProperties61.isThreadedTwoPhaseCommit();
        boolean boolean73 = atomikosProperties61.forceShutdownOnVmExit;
        long long74 = atomikosProperties61.getCheckpointInterval();
        boolean boolean75 = properties7.remove((java.lang.Object) objEnumeration24, (java.lang.Object) atomikosProperties61);
        boolean boolean76 = atomikosProperties61.forceShutdownOnVmExit;
        atomikosProperties61.forceShutdownOnVmExit = false;
        long long79 = atomikosProperties61.maxTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str23, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10000L + "'", long71 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 500L + "'", long74 == 500L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 300000L + "'", long79 == 300000L);
    }

    @Test
    public void test7354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7354");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        boolean boolean48 = atomikosProperties45.isForceShutdownOnVmExit();
        atomikosProperties45.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long51 = atomikosProperties45.getDefaultJtaTimeout();
        long long52 = atomikosProperties45.getMaxTimeout();
        atomikosProperties45.logBaseName = "tmlog";
        long long55 = atomikosProperties45.getDefaultJtaTimeout();
        atomikosProperties45.maxActives = 9;
        boolean boolean58 = properties2.containsKey((java.lang.Object) atomikosProperties45);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet59 = properties2.entrySet();
        java.util.Properties properties60 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        java.lang.String str64 = atomikosProperties61.getLogBaseDir();
        atomikosProperties61.setMaxActives((int) (byte) -1);
        boolean boolean67 = atomikosProperties61.isEnableLogging();
        atomikosProperties61.transactionManagerUniqueName = "";
        atomikosProperties61.setEnableLogging(false);
        atomikosProperties61.setLogBaseName("");
        atomikosProperties61.maxActives = 0;
        java.lang.String str76 = atomikosProperties61.getLogBaseDir();
        java.util.Properties properties77 = atomikosProperties61.asProperties();
        boolean boolean78 = properties60.containsValue((java.lang.Object) atomikosProperties61);
        atomikosProperties61.logBaseName = "{}";
        long long81 = atomikosProperties61.getCheckpointInterval();
        atomikosProperties61.serialJtaTransactions = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objEntrySet59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(properties77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
    }

    @Test
    public void test7355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7355");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.service = "hi!";
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setMaxTimeout(10000L);
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        java.lang.String str14 = atomikosProperties0.getService();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test7356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7356");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setMaxActives((int) (byte) 0);
        atomikosProperties0.setMaxActives((int) (short) 1);
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str14 = atomikosProperties0.getLogBaseDir();
        java.lang.String str15 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.defaultJtaTimeout = 35L;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
    }

    @Test
    public void test7357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7357");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        java.lang.String str15 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        java.util.Properties properties16 = new java.util.Properties(properties2);
        java.lang.String str17 = properties2.toString();
        java.util.Enumeration<?> wildcardEnumeration18 = properties2.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties2.elements();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{=}" + "'", str17, "{=}");
        org.junit.Assert.assertNotNull(wildcardEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration19);
    }

    @Test
    public void test7358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7358");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        boolean boolean3 = atomikosProperties0.forceShutdownOnVmExit;
        long long4 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setCheckpointInterval((long) 0);
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.lang.String str9 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 300000L + "'", long4 == 300000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
    }

    @Test
    public void test7359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7359");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setDefaultJtaTimeout((long) 50);
        boolean boolean16 = properties9.contains((java.lang.Object) 50);
        java.lang.Object obj17 = properties9.clone();
        int int18 = properties9.size();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test7360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7360");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setDefaultJtaTimeout(0L);
        int int10 = atomikosProperties0.maxActives;
        atomikosProperties0.setEnableLogging(false);
        long long13 = atomikosProperties0.getDefaultJtaTimeout();
        long long14 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setMaxTimeout((long) 1);
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.logBaseName = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}";
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}";
        java.lang.String str23 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}" + "'", str23, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}");
    }

    @Test
    public void test7361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7361");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        atomikosProperties29.setService("");
        boolean boolean34 = atomikosProperties29.threadedTwoPhaseCommit;
        java.lang.String str35 = atomikosProperties29.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.serialJtaTransactions = true;
        java.lang.String str43 = atomikosProperties36.getService();
        java.lang.Object obj44 = properties2.putIfAbsent((java.lang.Object) str35, (java.lang.Object) atomikosProperties36);
        atomikosProperties36.enableLogging = false;
        atomikosProperties36.threadedTwoPhaseCommit = false;
        atomikosProperties36.forceShutdownOnVmExit = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test7362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7362");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties2.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties2.entrySet();
        java.lang.String str22 = properties2.getProperty("hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet23 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        java.lang.Object obj29 = properties26.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        java.util.Properties properties32 = atomikosProperties30.asProperties();
        properties32.clear();
        boolean boolean34 = properties32.isEmpty();
        java.util.Collection<java.lang.Object> objCollection35 = properties32.values();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        java.lang.Object obj39 = properties32.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.lang.Object obj40 = properties32.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        java.lang.Object obj44 = properties43.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties43.elements();
        java.util.Properties properties46 = new java.util.Properties(properties43);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties46);
        java.lang.String str51 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.tmlog=0.0}=, com.atomikos.icatch.log_base_name=tmlog, []=hi!}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.tmlog=0.0}=, com.atomikos.icatch.log_base_name=tmlog, []=hi!}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(objEntrySet23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNotNull(obj44);
// flaky:         org.junit.Assert.assertEquals(obj44.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.tmlog=0.0}=, com.atomikos.icatch.log_base_name=tmlog, []=hi!}" + "'", str51, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.tmlog=0.0}=, com.atomikos.icatch.log_base_name=tmlog, []=hi!}");
    }

    @Test
    public void test7363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7363");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        java.util.Enumeration<java.lang.Object> objEnumeration13 = properties2.keys();
        java.lang.String str15 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        java.lang.String str22 = atomikosProperties16.getService();
        long long23 = atomikosProperties16.defaultJtaTimeout;
        java.lang.String str24 = atomikosProperties16.logBaseName;
        java.util.Properties properties25 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) 100);
        boolean boolean29 = atomikosProperties26.isForceShutdownOnVmExit();
        atomikosProperties26.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long32 = atomikosProperties26.getDefaultJtaTimeout();
        long long33 = atomikosProperties26.getMaxTimeout();
        java.lang.String str34 = atomikosProperties26.service;
        atomikosProperties26.serialJtaTransactions = false;
        boolean boolean37 = properties25.containsValue((java.lang.Object) atomikosProperties26);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        java.lang.String str41 = atomikosProperties39.logBaseName;
        java.lang.String str42 = atomikosProperties39.getLogBaseDir();
        atomikosProperties39.setMaxActives((int) (byte) -1);
        java.lang.String str45 = atomikosProperties39.transactionManagerUniqueName;
        long long46 = atomikosProperties39.defaultJtaTimeout;
        long long47 = atomikosProperties39.defaultJtaTimeout;
        boolean boolean48 = properties2.contains((java.lang.Object) long47);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objEnumeration13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10000L + "'", long23 == 10000L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 300000L + "'", long33 == 300000L);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test7364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7364");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str4 = atomikosProperties0.service;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test7365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7365");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        int int10 = atomikosProperties0.maxActives;
        atomikosProperties0.setEnableLogging(true);
        long long13 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setMaxActives(1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
    }

    @Test
    public void test7366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7366");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str7 = atomikosProperties0.logBaseDir;
        int int8 = atomikosProperties0.maxActives;
        atomikosProperties0.setMaxTimeout(0L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
    }

    @Test
    public void test7367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7367");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str7 = atomikosProperties0.getService();
        long long8 = atomikosProperties0.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        properties11.clear();
        boolean boolean13 = properties11.isEmpty();
        java.lang.Object obj14 = properties11.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        java.lang.Object obj19 = properties18.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.logBaseDir;
        java.lang.String str22 = atomikosProperties20.logBaseName;
        java.lang.String str23 = atomikosProperties20.getLogBaseDir();
        atomikosProperties20.setMaxActives((int) (byte) -1);
        boolean boolean26 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.transactionManagerUniqueName = "";
        atomikosProperties20.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        java.lang.String str37 = atomikosProperties31.getService();
        java.lang.Object obj38 = properties18.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        int int41 = atomikosProperties39.getMaxActives();
        java.lang.String str42 = atomikosProperties39.logBaseDir;
        java.lang.Object obj44 = properties18.putIfAbsent((java.lang.Object) atomikosProperties39, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str46 = atomikosProperties45.logBaseDir;
        java.lang.String str47 = atomikosProperties45.logBaseName;
        java.lang.String str48 = atomikosProperties45.getLogBaseDir();
        boolean boolean49 = atomikosProperties45.isSerialJtaTransactions();
        atomikosProperties45.setEnableLogging(false);
        boolean boolean52 = properties11.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties45);
        java.util.Properties properties53 = new java.util.Properties(properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setCheckpointInterval((long) 100);
        boolean boolean57 = atomikosProperties54.isForceShutdownOnVmExit();
        atomikosProperties54.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long60 = atomikosProperties54.getDefaultJtaTimeout();
        long long61 = atomikosProperties54.getMaxTimeout();
        atomikosProperties54.logBaseName = "tmlog";
        long long64 = atomikosProperties54.getDefaultJtaTimeout();
        atomikosProperties54.maxActives = 9;
        boolean boolean67 = properties11.containsKey((java.lang.Object) atomikosProperties54);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet68 = properties11.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str71 = atomikosProperties70.logBaseDir;
        java.lang.String str72 = atomikosProperties70.logBaseName;
        java.lang.String str73 = atomikosProperties70.getLogBaseDir();
        atomikosProperties70.setMaxActives((int) (byte) -1);
        boolean boolean76 = atomikosProperties70.isEnableLogging();
        java.lang.Class<?> wildcardClass77 = atomikosProperties70.getClass();
        atomikosProperties0.set(properties11, "hi!", (java.lang.Object) atomikosProperties70);
        java.lang.String str79 = atomikosProperties70.service;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 50 + "'", int41 == 50);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 300000L + "'", long61 == 300000L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 10000L + "'", long64 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objEntrySet68);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tmlog" + "'", str72, "tmlog");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test7368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7368");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.forceShutdownOnVmExit = true;
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test7369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7369");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long8 = atomikosProperties0.maxTimeout;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.setCheckpointInterval((long) 100);
        java.lang.String str14 = atomikosProperties11.getService();
        atomikosProperties11.defaultJtaTimeout = 'a';
        atomikosProperties11.enableLogging = false;
        atomikosProperties11.threadedTwoPhaseCommit = false;
        atomikosProperties11.setForceShutdownOnVmExit(false);
        java.lang.Object obj23 = properties9.remove((java.lang.Object) atomikosProperties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.logBaseDir;
        java.lang.String str26 = atomikosProperties24.logBaseName;
        java.lang.String str27 = atomikosProperties24.getLogBaseDir();
        atomikosProperties24.setMaxActives((int) (byte) -1);
        boolean boolean30 = atomikosProperties24.isEnableLogging();
        atomikosProperties24.transactionManagerUniqueName = "";
        atomikosProperties24.setEnableLogging(false);
        boolean boolean35 = atomikosProperties24.isEnableLogging();
        atomikosProperties24.maxActives = 1;
        java.util.Properties properties38 = atomikosProperties24.asProperties();
        boolean boolean39 = atomikosProperties24.serialJtaTransactions;
        java.lang.Object obj40 = properties9.remove((java.lang.Object) atomikosProperties24);
        java.lang.String str41 = properties9.toString();
        java.util.Properties properties42 = new java.util.Properties(properties9);
        java.util.Collection<java.lang.Object> objCollection43 = properties9.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str41, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objCollection43);
    }

    @Test
    public void test7370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7370");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.maxActives = (short) 0;
        atomikosProperties0.maxActives = 100;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test7371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7371");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.lang.String str15 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        atomikosProperties17.setTransactionManagerUniqueName("");
        int int21 = atomikosProperties17.getMaxActives();
        java.lang.String str22 = atomikosProperties17.transactionManagerUniqueName;
        atomikosProperties17.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        properties27.clear();
        java.util.Properties properties29 = new java.util.Properties(properties27);
        atomikosProperties17.set(properties27, "tmlog", (java.lang.Object) 0.0d);
        java.lang.String str33 = properties27.toString();
        boolean boolean34 = properties27.isEmpty();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        java.lang.Object obj39 = properties38.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        boolean boolean46 = atomikosProperties40.isEnableLogging();
        atomikosProperties40.transactionManagerUniqueName = "";
        atomikosProperties40.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        java.lang.String str57 = atomikosProperties51.getService();
        java.lang.Object obj58 = properties38.getOrDefault((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties51);
        java.lang.String str59 = properties38.toString();
        java.util.Set<java.lang.Object> objSet60 = properties38.keySet();
        boolean boolean61 = properties27.equals((java.lang.Object) properties38);
        java.util.Enumeration<?> wildcardEnumeration62 = properties27.propertyNames();
        java.util.Set<java.lang.String> strSet63 = properties27.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{com.atomikos.icatch.tmlog=0.0}" + "'", str33, "{com.atomikos.icatch.tmlog=0.0}");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(obj58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str59, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration62);
        org.junit.Assert.assertNotNull(strSet63);
    }

    @Test
    public void test7372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7372");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        java.util.Properties properties14 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        properties17.clear();
        java.util.Properties properties19 = new java.util.Properties(properties17);
        java.lang.Object obj22 = properties19.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str23 = properties19.toString();
        java.lang.Object obj26 = properties19.setProperty("tmlog", "");
        boolean boolean27 = properties8.equals(obj26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        atomikosProperties28.setTransactionManagerUniqueName("");
        int int32 = atomikosProperties28.getMaxActives();
        atomikosProperties28.logBaseName = "tmlog";
        atomikosProperties28.setEnableLogging(true);
        long long37 = atomikosProperties28.maxTimeout;
        int int38 = atomikosProperties28.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        atomikosProperties39.setTransactionManagerUniqueName("");
        int int43 = atomikosProperties39.getMaxActives();
        java.lang.String str44 = atomikosProperties39.transactionManagerUniqueName;
        atomikosProperties39.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        properties49.clear();
        java.util.Properties properties51 = new java.util.Properties(properties49);
        atomikosProperties39.set(properties49, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj57 = properties49.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet58 = properties49.stringPropertyNames();
        java.lang.Object obj59 = properties8.getOrDefault((java.lang.Object) atomikosProperties28, (java.lang.Object) properties49);
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties49.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.checkpointInterval;
        java.util.Properties properties63 = atomikosProperties61.asProperties();
        java.lang.Object obj64 = properties63.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.logBaseDir;
        java.lang.String str67 = atomikosProperties65.logBaseName;
        java.lang.String str68 = atomikosProperties65.getLogBaseDir();
        atomikosProperties65.setMaxActives((int) (byte) -1);
        boolean boolean71 = atomikosProperties65.isEnableLogging();
        atomikosProperties65.transactionManagerUniqueName = "";
        atomikosProperties65.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str77 = atomikosProperties76.logBaseDir;
        java.lang.String str78 = atomikosProperties76.logBaseName;
        java.lang.String str79 = atomikosProperties76.getLogBaseDir();
        atomikosProperties76.setMaxActives((int) (byte) -1);
        java.lang.String str82 = atomikosProperties76.getService();
        java.lang.Object obj83 = properties63.getOrDefault((java.lang.Object) atomikosProperties65, (java.lang.Object) atomikosProperties76);
        java.lang.String str84 = properties63.toString();
        java.lang.Object obj87 = properties63.setProperty("tmlog", "{}");
        java.lang.Object obj88 = properties63.clone();
        properties49.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties90 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long91 = atomikosProperties90.checkpointInterval;
        java.lang.String str92 = atomikosProperties90.service;
        boolean boolean93 = atomikosProperties90.isForceShutdownOnVmExit();
        atomikosProperties90.setCheckpointInterval((long) 50);
        java.lang.String str96 = atomikosProperties90.transactionManagerUniqueName;
        boolean boolean97 = properties63.equals((java.lang.Object) atomikosProperties90);
        java.lang.Object obj98 = properties63.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj22, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(obj59);
// flaky:         org.junit.Assert.assertEquals(obj59.toString(), "{com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNotNull(obj64);
// flaky:         org.junit.Assert.assertEquals(obj64.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(obj83);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str84, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(obj88);
// flaky:         org.junit.Assert.assertEquals(obj88.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 500L + "'", long91 == 500L);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(obj98);
// flaky:         org.junit.Assert.assertEquals(obj98.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj98), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj98), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
    }

    @Test
    public void test7373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7373");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) 100);
        boolean boolean20 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties17.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        java.lang.String str31 = atomikosProperties25.getService();
        long long32 = atomikosProperties25.defaultJtaTimeout;
        java.lang.String str33 = atomikosProperties25.logBaseName;
        java.lang.String str34 = atomikosProperties25.logBaseDir;
        java.lang.Class<?> wildcardClass35 = atomikosProperties25.getClass();
        boolean boolean36 = properties2.remove((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        atomikosProperties37.forceShutdownOnVmExit = false;
        boolean boolean41 = atomikosProperties37.isSerialJtaTransactions();
        java.lang.String str42 = atomikosProperties37.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.Object obj46 = properties2.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        atomikosProperties47.setTransactionManagerUniqueName("");
        int int51 = atomikosProperties47.getMaxActives();
        java.lang.String str52 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        java.util.Properties properties57 = atomikosProperties55.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setCheckpointInterval((long) 100);
        boolean boolean64 = atomikosProperties61.isForceShutdownOnVmExit();
        atomikosProperties61.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean67 = properties60.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties68.enableLogging = true;
        boolean boolean72 = properties57.replace((java.lang.Object) boolean67, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection73 = properties57.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet74 = properties57.entrySet();
        atomikosProperties47.set(properties57, "hi!", (java.lang.Object) 0L);
        atomikosProperties47.setEnableLogging(false);
        atomikosProperties47.setTransactionManagerUniqueName("tmlog");
        atomikosProperties47.setEnableLogging(false);
        long long84 = atomikosProperties47.checkpointInterval;
        boolean boolean85 = atomikosProperties47.isThreadedTwoPhaseCommit();
        atomikosProperties47.setForceShutdownOnVmExit(true);
        int int88 = atomikosProperties47.maxActives;
        java.lang.Object obj89 = properties2.get((java.lang.Object) atomikosProperties47);
        atomikosProperties47.setLogBaseDir("");
        atomikosProperties47.setEnableLogging(true);
        java.lang.String str94 = atomikosProperties47.logBaseName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertNotNull(objEntrySet74);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 50 + "'", int88 == 50);
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "tmlog" + "'", str94, "tmlog");
    }

    @Test
    public void test7374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7374");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.checkpointInterval = (-1L);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setCheckpointInterval(0L);
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7375");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        java.util.Collection<java.lang.Object> objCollection57 = properties17.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        properties60.clear();
        java.util.Properties properties62 = new java.util.Properties(properties60);
        java.lang.Object obj65 = properties62.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str66 = properties62.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.logBaseDir;
        java.lang.String str69 = atomikosProperties67.logBaseName;
        java.lang.String str70 = atomikosProperties67.getLogBaseDir();
        atomikosProperties67.setMaxActives((int) (byte) -1);
        boolean boolean73 = atomikosProperties67.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties74.setCheckpointInterval((long) 100);
        boolean boolean77 = atomikosProperties74.isForceShutdownOnVmExit();
        java.lang.Object obj78 = properties62.putIfAbsent((java.lang.Object) atomikosProperties67, (java.lang.Object) boolean77);
        java.util.Set<java.lang.String> strSet79 = properties62.stringPropertyNames();
        boolean boolean80 = properties17.equals((java.lang.Object) properties62);
        java.lang.String str81 = properties62.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str83 = atomikosProperties82.logBaseDir;
        java.lang.String str84 = atomikosProperties82.logBaseName;
        java.lang.String str85 = atomikosProperties82.getLogBaseDir();
        boolean boolean86 = atomikosProperties82.isSerialJtaTransactions();
        atomikosProperties82.serialJtaTransactions = true;
        atomikosProperties82.setLogBaseName("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties91 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long92 = atomikosProperties91.checkpointInterval;
        java.util.Properties properties93 = atomikosProperties91.asProperties();
        properties93.clear();
        java.util.Properties properties95 = new java.util.Properties(properties93);
        int int96 = properties95.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet97 = properties95.entrySet();
        java.lang.Object obj98 = properties62.getOrDefault((java.lang.Object) atomikosProperties82, (java.lang.Object) properties95);
        boolean boolean99 = properties62.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertEquals("'" + obj65 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj65, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{}" + "'", str66, "{}");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "tmlog" + "'", str84, "tmlog");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 500L + "'", long92 == 500L);
        org.junit.Assert.assertNotNull(properties93);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(objEntrySet97);
        org.junit.Assert.assertNotNull(obj98);
        org.junit.Assert.assertEquals(obj98.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj98), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj98), "{}");
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test7376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7376");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        boolean boolean10 = atomikosProperties0.threadedTwoPhaseCommit;
        long long11 = atomikosProperties0.maxTimeout;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setMaxActives(52);
        atomikosProperties0.setMaxActives((int) (short) 100);
        java.lang.String str20 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str20, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test7377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7377");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.util.Set<java.lang.Object> objSet2 = properties1.keySet();
        java.util.Enumeration<?> wildcardEnumeration3 = properties1.propertyNames();
        java.lang.Object obj6 = properties1.setProperty("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}", "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        org.junit.Assert.assertNotNull(objSet2);
        org.junit.Assert.assertNotNull(wildcardEnumeration3);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test7378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7378");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        atomikosProperties29.setService("");
        boolean boolean34 = atomikosProperties29.threadedTwoPhaseCommit;
        java.lang.String str35 = atomikosProperties29.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.serialJtaTransactions = true;
        java.lang.String str43 = atomikosProperties36.getService();
        java.lang.Object obj44 = properties2.putIfAbsent((java.lang.Object) str35, (java.lang.Object) atomikosProperties36);
        atomikosProperties36.enableLogging = false;
        atomikosProperties36.threadedTwoPhaseCommit = false;
        boolean boolean49 = atomikosProperties36.isForceShutdownOnVmExit();
        atomikosProperties36.defaultJtaTimeout = 0L;
        atomikosProperties36.maxTimeout = 'a';
        boolean boolean54 = atomikosProperties36.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test7379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7379");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.lang.Object obj23 = properties5.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{}");
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties5.elements();
        java.lang.Object obj27 = properties5.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet28 = properties5.entrySet();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEntrySet28);
    }

    @Test
    public void test7380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7380");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        atomikosProperties5.setLogBaseName("{}");
        boolean boolean14 = atomikosProperties5.isEnableLogging();
        java.lang.String str15 = atomikosProperties5.service;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test7381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7381");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        java.util.Properties properties14 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        properties17.clear();
        java.util.Properties properties19 = new java.util.Properties(properties17);
        java.lang.Object obj22 = properties19.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str23 = properties19.toString();
        java.lang.Object obj26 = properties19.setProperty("tmlog", "");
        boolean boolean27 = properties8.equals(obj26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        atomikosProperties28.setTransactionManagerUniqueName("");
        int int32 = atomikosProperties28.getMaxActives();
        atomikosProperties28.logBaseName = "tmlog";
        atomikosProperties28.setEnableLogging(true);
        long long37 = atomikosProperties28.maxTimeout;
        int int38 = atomikosProperties28.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        atomikosProperties39.setTransactionManagerUniqueName("");
        int int43 = atomikosProperties39.getMaxActives();
        java.lang.String str44 = atomikosProperties39.transactionManagerUniqueName;
        atomikosProperties39.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        properties49.clear();
        java.util.Properties properties51 = new java.util.Properties(properties49);
        atomikosProperties39.set(properties49, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj57 = properties49.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet58 = properties49.stringPropertyNames();
        java.lang.Object obj59 = properties8.getOrDefault((java.lang.Object) atomikosProperties28, (java.lang.Object) properties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        atomikosProperties60.setMaxActives((int) (byte) -1);
        boolean boolean66 = atomikosProperties60.isEnableLogging();
        long long67 = atomikosProperties60.checkpointInterval;
        atomikosProperties60.setCheckpointInterval(10L);
        boolean boolean70 = atomikosProperties60.isForceShutdownOnVmExit();
        atomikosProperties60.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties60.setLogBaseName("hi!");
        boolean boolean75 = atomikosProperties60.isThreadedTwoPhaseCommit();
        int int76 = atomikosProperties60.maxActives;
        atomikosProperties60.forceShutdownOnVmExit = true;
        atomikosProperties60.logBaseDir = "{}";
        boolean boolean81 = properties8.equals((java.lang.Object) "{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long83 = atomikosProperties82.checkpointInterval;
        boolean boolean84 = atomikosProperties82.isSerialJtaTransactions();
        atomikosProperties82.transactionManagerUniqueName = "";
        int int87 = atomikosProperties82.getMaxActives();
        java.lang.String str88 = atomikosProperties82.logBaseName;
        atomikosProperties82.threadedTwoPhaseCommit = false;
        boolean boolean91 = properties8.equals((java.lang.Object) atomikosProperties82);
        atomikosProperties82.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj22, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(obj59);
// flaky:         org.junit.Assert.assertEquals(obj59.toString(), "{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 500L + "'", long83 == 500L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 50 + "'", int87 == 50);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "tmlog" + "'", str88, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test7382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7382");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        int int14 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        java.lang.Object obj18 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties30);
        int int38 = properties17.size();
        java.lang.String str39 = properties17.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties17.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.enableLogging = true;
        atomikosProperties41.maxActives = (byte) -1;
        java.lang.Object obj46 = properties2.putIfAbsent((java.lang.Object) properties17, (java.lang.Object) (byte) -1);
        java.lang.String str47 = properties2.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        atomikosProperties48.setService("");
        java.util.Properties properties53 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        java.util.Properties properties57 = atomikosProperties55.asProperties();
        properties57.clear();
        boolean boolean59 = properties57.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        atomikosProperties60.setTransactionManagerUniqueName("");
        int int64 = atomikosProperties60.getMaxActives();
        java.lang.String str65 = atomikosProperties60.transactionManagerUniqueName;
        boolean boolean66 = properties57.containsValue((java.lang.Object) atomikosProperties60);
        boolean boolean67 = atomikosProperties60.forceShutdownOnVmExit;
        atomikosProperties48.set(properties53, "{}", (java.lang.Object) boolean67);
        java.util.Properties properties69 = new java.util.Properties(properties53);
        java.util.Collection<java.lang.Object> objCollection70 = properties69.values();
        java.util.Properties properties71 = new java.util.Properties(properties69);
        boolean boolean72 = properties2.containsValue((java.lang.Object) properties69);
        java.util.Collection<java.lang.Object> objCollection73 = properties69.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.logBaseDir;
        atomikosProperties75.setTransactionManagerUniqueName("");
        int int79 = atomikosProperties75.getMaxActives();
        atomikosProperties75.logBaseName = "tmlog";
        atomikosProperties75.setEnableLogging(true);
        atomikosProperties75.setMaxActives((int) (byte) 0);
        atomikosProperties75.setMaxActives((int) (short) 1);
        boolean boolean88 = atomikosProperties75.isSerialJtaTransactions();
        long long89 = atomikosProperties75.getMaxTimeout();
        atomikosProperties75.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Object obj92 = properties69.getOrDefault((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}", (java.lang.Object) atomikosProperties75);
        java.io.OutputStream outputStream93 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties69.save(outputStream93, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str39, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objCollection70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 50 + "'", int79 == 50);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 300000L + "'", long89 == 300000L);
        org.junit.Assert.assertNotNull(obj92);
    }

    @Test
    public void test7383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7383");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.checkpointInterval = (-1L);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        int int11 = atomikosProperties0.maxActives;
        atomikosProperties0.checkpointInterval = 500L;
        int int14 = atomikosProperties0.maxActives;
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test7384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7384");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        boolean boolean20 = properties8.equals((java.lang.Object) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setCheckpointInterval((long) 100);
        java.lang.String str24 = atomikosProperties21.getService();
        atomikosProperties21.defaultJtaTimeout = 'a';
        atomikosProperties21.enableLogging = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setMaxActives(10);
        java.lang.String str33 = atomikosProperties21.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        boolean boolean36 = atomikosProperties34.isSerialJtaTransactions();
        atomikosProperties34.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        atomikosProperties39.setTransactionManagerUniqueName("");
        int int43 = atomikosProperties39.getMaxActives();
        java.lang.String str44 = atomikosProperties39.getLogBaseDir();
        atomikosProperties39.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties53.setCheckpointInterval((long) 100);
        boolean boolean56 = atomikosProperties53.isForceShutdownOnVmExit();
        atomikosProperties53.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean59 = properties52.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.enableLogging = true;
        boolean boolean64 = properties49.replace((java.lang.Object) boolean59, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection65 = properties49.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet66 = properties49.entrySet();
        atomikosProperties39.set(properties49, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long72 = atomikosProperties71.checkpointInterval;
        java.util.Properties properties73 = atomikosProperties71.asProperties();
        properties73.clear();
        boolean boolean75 = properties73.isEmpty();
        java.util.Collection<java.lang.Object> objCollection76 = properties73.values();
        atomikosProperties34.set(properties49, "hi!", (java.lang.Object) objCollection76);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long79 = atomikosProperties78.checkpointInterval;
        boolean boolean80 = atomikosProperties78.isSerialJtaTransactions();
        java.lang.String str81 = atomikosProperties78.getLogBaseName();
        long long82 = atomikosProperties78.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long84 = atomikosProperties83.checkpointInterval;
        java.util.Properties properties85 = atomikosProperties83.asProperties();
        properties85.clear();
        boolean boolean87 = properties85.isEmpty();
        java.lang.Object obj88 = properties85.clone();
        java.util.Set<java.lang.Object> objSet89 = properties85.keySet();
        boolean boolean92 = properties85.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        java.lang.Object obj93 = properties49.replace((java.lang.Object) long82, (java.lang.Object) properties85);
        java.util.Properties properties94 = new java.util.Properties(properties85);
        java.lang.Object obj95 = properties8.putIfAbsent((java.lang.Object) atomikosProperties21, (java.lang.Object) properties85);
        java.util.Properties properties96 = new java.util.Properties(properties85);
        java.lang.Object obj97 = properties85.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objCollection65);
        org.junit.Assert.assertNotNull(objEntrySet66);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 500L + "'", long72 == 500L);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objCollection76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 500L + "'", long79 == 500L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tmlog" + "'", str81, "tmlog");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertNotNull(properties85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "{}");
        org.junit.Assert.assertNotNull(objSet89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertNotNull(obj97);
        org.junit.Assert.assertEquals(obj97.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj97), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj97), "{}");
    }

    @Test
    public void test7385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7385");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = atomikosProperties5.isEnableLogging();
        atomikosProperties5.setMaxActives((int) (byte) -1);
        java.lang.String str15 = atomikosProperties5.getService();
        boolean boolean16 = atomikosProperties5.isThreadedTwoPhaseCommit();
        atomikosProperties5.threadedTwoPhaseCommit = false;
        atomikosProperties5.setDefaultJtaTimeout(97L);
        atomikosProperties5.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test7386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7386");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        int int4 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        java.lang.String str7 = atomikosProperties5.logBaseName;
        atomikosProperties5.setService("");
        java.util.Properties properties10 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        boolean boolean16 = properties14.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        atomikosProperties17.setTransactionManagerUniqueName("");
        int int21 = atomikosProperties17.getMaxActives();
        java.lang.String str22 = atomikosProperties17.transactionManagerUniqueName;
        boolean boolean23 = properties14.containsValue((java.lang.Object) atomikosProperties17);
        boolean boolean24 = atomikosProperties17.forceShutdownOnVmExit;
        atomikosProperties5.set(properties10, "{}", (java.lang.Object) boolean24);
        java.lang.Object obj28 = properties10.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{}");
        java.util.Set<java.lang.Object> objSet29 = properties10.keySet();
        java.lang.Object obj30 = properties3.get((java.lang.Object) properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        java.lang.Object obj36 = properties33.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection37 = properties33.values();
        java.util.Collection<java.lang.Object> objCollection38 = properties33.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        boolean boolean43 = properties41.isEmpty();
        java.lang.Object obj44 = properties41.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        properties47.clear();
        boolean boolean49 = properties47.isEmpty();
        java.util.Collection<java.lang.Object> objCollection50 = properties47.values();
        properties41.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties47);
        java.util.Enumeration<?> wildcardEnumeration52 = properties47.propertyNames();
        java.util.Properties properties53 = new java.util.Properties(properties47);
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties53);
        int int55 = properties33.size();
        properties33.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) 100);
        boolean boolean60 = atomikosProperties57.isForceShutdownOnVmExit();
        atomikosProperties57.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long63 = atomikosProperties57.getDefaultJtaTimeout();
        long long64 = atomikosProperties57.getMaxTimeout();
        atomikosProperties57.logBaseName = "tmlog";
        long long67 = atomikosProperties57.defaultJtaTimeout;
        atomikosProperties57.setMaxActives(50);
        java.lang.Object obj70 = properties3.putIfAbsent((java.lang.Object) properties33, (java.lang.Object) atomikosProperties57);
        java.lang.Object obj71 = properties3.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long73 = atomikosProperties72.checkpointInterval;
        atomikosProperties72.forceShutdownOnVmExit = false;
        atomikosProperties72.threadedTwoPhaseCommit = false;
        atomikosProperties72.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean80 = atomikosProperties72.isSerialJtaTransactions();
        atomikosProperties72.setForceShutdownOnVmExit(false);
        long long83 = atomikosProperties72.defaultJtaTimeout;
        java.lang.String str84 = atomikosProperties72.getService();
        atomikosProperties72.setLogBaseName("{=}");
        boolean boolean87 = properties3.contains((java.lang.Object) "{=}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objSet29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertNotNull(objCollection38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{}");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objCollection50);
        org.junit.Assert.assertNotNull(wildcardEnumeration52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 300000L + "'", long64 == 300000L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 500L + "'", long73 == 500L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10000L + "'", long83 == 10000L);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test7387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7387");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties2.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet46 = properties2.entrySet();
        java.util.Properties properties47 = new java.util.Properties(properties2);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet48 = properties2.entrySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objEntrySet46);
        org.junit.Assert.assertNotNull(objEntrySet48);
    }

    @Test
    public void test7388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7388");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        int int5 = properties4.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        boolean boolean12 = properties4.containsKey((java.lang.Object) objCollection11);
        int int13 = properties4.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.enableLogging = true;
        boolean boolean17 = atomikosProperties14.forceShutdownOnVmExit;
        atomikosProperties14.setSerialJtaTransactions(false);
        java.lang.String str20 = atomikosProperties14.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        boolean boolean23 = atomikosProperties21.isSerialJtaTransactions();
        atomikosProperties21.maxTimeout = 100;
        int int26 = atomikosProperties21.getMaxActives();
        atomikosProperties21.setEnableLogging(false);
        atomikosProperties21.logBaseDir = "{}";
        java.lang.Object obj31 = properties4.replace((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties21);
        java.lang.String str32 = atomikosProperties14.service;
        java.lang.String str33 = atomikosProperties14.getTransactionManagerUniqueName();
        atomikosProperties14.enableLogging = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
    }

    @Test
    public void test7389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7389");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties10.transactionManagerUniqueName = "hi!";
        atomikosProperties10.maxTimeout = 2;
        long long44 = atomikosProperties10.maxTimeout;
        boolean boolean45 = atomikosProperties10.threadedTwoPhaseCommit;
        atomikosProperties10.setThreadedTwoPhaseCommit(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2L + "'", long44 == 2L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test7390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7390");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        java.lang.Object obj15 = properties12.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str16 = properties12.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setMaxActives((int) (byte) -1);
        boolean boolean23 = atomikosProperties17.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) 100);
        boolean boolean27 = atomikosProperties24.isForceShutdownOnVmExit();
        java.lang.Object obj28 = properties12.putIfAbsent((java.lang.Object) atomikosProperties17, (java.lang.Object) boolean27);
        java.util.Set<java.lang.String> strSet29 = properties12.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet30 = properties12.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties12.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        atomikosProperties32.forceShutdownOnVmExit = false;
        atomikosProperties32.threadedTwoPhaseCommit = false;
        atomikosProperties32.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties32.threadedTwoPhaseCommit = false;
        atomikosProperties32.setDefaultJtaTimeout(500L);
        java.lang.Object obj44 = properties4.putIfAbsent((java.lang.Object) properties12, (java.lang.Object) 500L);
        properties4.clear();
        java.util.Properties properties46 = new java.util.Properties(properties4);
        boolean boolean47 = properties46.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet48 = properties46.entrySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objEntrySet48);
    }

    @Test
    public void test7391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7391");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean15 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean16 = atomikosProperties0.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        java.lang.Object obj22 = properties19.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection23 = properties19.values();
        java.util.Collection<java.lang.Object> objCollection24 = properties19.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        properties27.clear();
        boolean boolean29 = properties27.isEmpty();
        java.lang.Object obj30 = properties27.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        properties33.clear();
        boolean boolean35 = properties33.isEmpty();
        java.util.Collection<java.lang.Object> objCollection36 = properties33.values();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Enumeration<?> wildcardEnumeration38 = properties33.propertyNames();
        java.util.Properties properties39 = new java.util.Properties(properties33);
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        java.lang.String str41 = properties19.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long44 = atomikosProperties43.checkpointInterval;
        java.util.Properties properties45 = atomikosProperties43.asProperties();
        properties45.clear();
        boolean boolean47 = properties45.isEmpty();
        java.lang.Object obj48 = properties45.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.util.Collection<java.lang.Object> objCollection54 = properties51.values();
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        atomikosProperties0.set(properties19, "tmlog", (java.lang.Object) properties45);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet57 = properties45.entrySet();
        java.lang.Object obj60 = properties45.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.io.InputStream inputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties45.load(inputStream61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertNotNull(wildcardEnumeration38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str41, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertNotNull(objEntrySet57);
        org.junit.Assert.assertNull(obj60);
    }

    @Test
    public void test7392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7392");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        boolean boolean20 = properties8.equals((java.lang.Object) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        atomikosProperties21.forceShutdownOnVmExit = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.maxTimeout = 50;
        boolean boolean33 = properties16.equals((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.logBaseDir;
        atomikosProperties34.setTransactionManagerUniqueName("");
        int int38 = atomikosProperties34.getMaxActives();
        java.lang.String str39 = atomikosProperties34.transactionManagerUniqueName;
        boolean boolean40 = properties16.containsValue((java.lang.Object) atomikosProperties34);
        atomikosProperties34.service = "";
        long long43 = atomikosProperties34.getMaxTimeout();
        java.util.Properties properties44 = atomikosProperties34.asProperties();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 300000L + "'", long43 == 300000L);
        org.junit.Assert.assertNotNull(properties44);
    }

    @Test
    public void test7393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7393");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        long long4 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.maxActives = 50;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        long long10 = atomikosProperties0.maxTimeout;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str9, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test7394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7394");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        atomikosProperties44.threadedTwoPhaseCommit = true;
        atomikosProperties44.logBaseName = "";
        java.lang.String str52 = atomikosProperties44.getTransactionManagerUniqueName();
        java.lang.String str53 = atomikosProperties44.logBaseName;
        boolean boolean54 = atomikosProperties44.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test7395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7395");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        long long47 = atomikosProperties45.getDefaultJtaTimeout();
        atomikosProperties45.setService("hi!");
        atomikosProperties45.serialJtaTransactions = false;
        boolean boolean52 = atomikosProperties45.isForceShutdownOnVmExit();
        java.lang.String str53 = atomikosProperties45.logBaseName;
        java.util.Properties properties54 = atomikosProperties45.asProperties();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.lang.Object obj58 = properties54.setProperty("", "{-1=1}");
        java.io.InputStream inputStream59 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties54.load(inputStream59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertNull(obj58);
    }

    @Test
    public void test7396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7396");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        atomikosProperties36.threadedTwoPhaseCommit = true;
        atomikosProperties36.setCheckpointInterval((long) 100);
        java.lang.String str52 = atomikosProperties36.logBaseName;
        java.lang.String str53 = atomikosProperties36.getTransactionManagerUniqueName();
        long long54 = atomikosProperties36.maxTimeout;
        atomikosProperties36.checkpointInterval = (-1L);
        long long57 = atomikosProperties36.defaultJtaTimeout;
        atomikosProperties36.enableLogging = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "{}" + "'", str52, "{}");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 300000L + "'", long54 == 300000L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10000L + "'", long57 == 10000L);
    }

    @Test
    public void test7397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7397");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str13 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test7398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7398");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setLogBaseDir("tmlog");
        atomikosProperties0.setSerialJtaTransactions(true);
        boolean boolean9 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test7399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7399");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        java.util.Properties properties16 = new java.util.Properties(properties14);
        java.lang.Object obj19 = properties16.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str20 = properties16.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        boolean boolean23 = atomikosProperties21.isSerialJtaTransactions();
        atomikosProperties21.maxTimeout = 100;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.Object obj27 = properties2.replace((java.lang.Object) properties16, (java.lang.Object) int26);
        java.util.Properties properties28 = new java.util.Properties(properties2);
        java.util.Collection<java.lang.Object> objCollection29 = properties2.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objCollection29);
    }

    @Test
    public void test7400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7400");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.maxActives = 0;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test7401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7401");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}";
        atomikosProperties0.forceShutdownOnVmExit = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
    }

    @Test
    public void test7402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7402");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        atomikosProperties12.logBaseDir = "{}";
        boolean boolean22 = atomikosProperties12.serialJtaTransactions;
        java.lang.String str23 = atomikosProperties12.service;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test7403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7403");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        boolean boolean22 = properties20.containsValue((java.lang.Object) 100L);
        java.lang.String str23 = properties20.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties20.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        properties27.clear();
        boolean boolean29 = properties27.isEmpty();
        java.lang.Object obj30 = properties27.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        java.lang.Object obj35 = properties34.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        atomikosProperties36.transactionManagerUniqueName = "";
        atomikosProperties36.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setMaxActives((int) (byte) -1);
        java.lang.String str53 = atomikosProperties47.getService();
        java.lang.Object obj54 = properties34.getOrDefault((java.lang.Object) atomikosProperties36, (java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        int int57 = atomikosProperties55.getMaxActives();
        java.lang.String str58 = atomikosProperties55.logBaseDir;
        java.lang.Object obj60 = properties34.putIfAbsent((java.lang.Object) atomikosProperties55, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        java.lang.String str64 = atomikosProperties61.getLogBaseDir();
        boolean boolean65 = atomikosProperties61.isSerialJtaTransactions();
        atomikosProperties61.setEnableLogging(false);
        boolean boolean68 = properties27.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties61);
        atomikosProperties61.logBaseName = "{}";
        long long71 = atomikosProperties61.getDefaultJtaTimeout();
        boolean boolean72 = atomikosProperties61.isThreadedTwoPhaseCommit();
        boolean boolean73 = atomikosProperties61.forceShutdownOnVmExit;
        long long74 = atomikosProperties61.getCheckpointInterval();
        boolean boolean75 = properties7.remove((java.lang.Object) objEnumeration24, (java.lang.Object) atomikosProperties61);
        java.util.Properties properties76 = new java.util.Properties(properties7);
        java.util.Enumeration<java.lang.Object> objEnumeration77 = properties76.elements();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str23, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 10000L + "'", long71 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 500L + "'", long74 == 500L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objEnumeration77);
    }

    @Test
    public void test7404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7404");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        atomikosProperties0.maxActives = ' ';
        java.lang.String str11 = atomikosProperties0.getLogBaseDir();
        java.lang.String str12 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7405");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        java.lang.String str27 = properties2.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        properties30.clear();
        boolean boolean32 = properties30.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        atomikosProperties33.setTransactionManagerUniqueName("");
        int int37 = atomikosProperties33.getMaxActives();
        java.lang.String str38 = atomikosProperties33.transactionManagerUniqueName;
        boolean boolean39 = properties30.containsValue((java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) 100);
        atomikosProperties40.maxActives = (byte) 0;
        atomikosProperties40.setTransactionManagerUniqueName("");
        java.lang.Object obj47 = properties30.get((java.lang.Object) atomikosProperties40);
        boolean boolean49 = properties30.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        properties52.clear();
        boolean boolean54 = properties52.isEmpty();
        java.lang.Object obj55 = properties52.clone();
        java.util.Set<java.lang.Object> objSet56 = properties52.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) 100);
        java.lang.String str60 = atomikosProperties57.getService();
        atomikosProperties57.defaultJtaTimeout = 'a';
        atomikosProperties57.enableLogging = false;
        atomikosProperties57.threadedTwoPhaseCommit = false;
        int int67 = atomikosProperties57.maxActives;
        atomikosProperties57.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj70 = properties30.getOrDefault((java.lang.Object) properties52, (java.lang.Object) atomikosProperties57);
        java.lang.Object obj71 = properties2.remove((java.lang.Object) atomikosProperties57);
        atomikosProperties57.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Class<?> wildcardClass74 = atomikosProperties57.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{}");
        org.junit.Assert.assertNotNull(objSet56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test7406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7406");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setDefaultJtaTimeout(0L);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setMaxActives((int) (short) 100);
        atomikosProperties0.maxActives = (short) 100;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.checkpointInterval = 0L;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7407");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection16 = properties10.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet17 = properties10.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties10.elements();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(objEntrySet17);
        org.junit.Assert.assertNotNull(objEnumeration18);
    }

    @Test
    public void test7408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7408");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        int int5 = atomikosProperties0.getMaxActives();
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        long long11 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str12 = atomikosProperties0.getService();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test7409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7409");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setMaxTimeout((long) (short) 1);
    }

    @Test
    public void test7410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7410");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration4 = properties2.elements();
        java.util.Properties properties5 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        java.lang.Object obj16 = properties13.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection17 = properties13.values();
        boolean boolean18 = properties8.containsKey((java.lang.Object) objCollection17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseName();
        int int23 = atomikosProperties19.getMaxActives();
        atomikosProperties19.setLogBaseDir("hi!");
        java.lang.String str26 = atomikosProperties19.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        atomikosProperties27.setTransactionManagerUniqueName("");
        int int31 = atomikosProperties27.getMaxActives();
        java.lang.String str32 = atomikosProperties27.getLogBaseDir();
        java.lang.String str33 = atomikosProperties27.logBaseName;
        java.lang.Object obj34 = properties8.replace((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties27);
        boolean boolean35 = properties8.isEmpty();
        java.lang.Object obj36 = properties8.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet37 = properties8.entrySet();
        java.lang.Object obj38 = properties8.clone();
        java.util.Set<java.lang.String> strSet39 = properties8.stringPropertyNames();
        boolean boolean40 = properties5.containsValue((java.lang.Object) properties8);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet41 = properties5.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setCheckpointInterval((long) 100);
        boolean boolean45 = atomikosProperties42.isForceShutdownOnVmExit();
        atomikosProperties42.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long48 = atomikosProperties42.getDefaultJtaTimeout();
        long long49 = atomikosProperties42.getMaxTimeout();
        atomikosProperties42.logBaseName = "tmlog";
        boolean boolean52 = atomikosProperties42.forceShutdownOnVmExit;
        boolean boolean53 = properties5.equals((java.lang.Object) boolean52);
        java.io.OutputStream outputStream54 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.storeToXML(outputStream54, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertNotNull(objEntrySet37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objEntrySet41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 300000L + "'", long49 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test7411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7411");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        int int5 = properties4.size();
        boolean boolean6 = properties4.isEmpty();
        java.util.Collection<java.lang.Object> objCollection7 = properties4.values();
        int int8 = properties4.size();
        java.util.Enumeration<?> wildcardEnumeration9 = properties4.propertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(wildcardEnumeration9);
    }

    @Test
    public void test7412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7412");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str6 = atomikosProperties0.service;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.defaultJtaTimeout = 9L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test7413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7413");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Set<java.lang.String> strSet14 = properties2.stringPropertyNames();
        java.util.Set<java.lang.String> strSet15 = properties2.stringPropertyNames();
        boolean boolean16 = properties2.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test7414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7414");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        long long5 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setMaxTimeout((long) (byte) 10);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        boolean boolean12 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str13 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
    }

    @Test
    public void test7415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7415");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        java.util.Properties properties16 = new java.util.Properties(properties14);
        java.lang.Object obj19 = properties16.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str20 = properties16.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        boolean boolean23 = atomikosProperties21.isSerialJtaTransactions();
        atomikosProperties21.maxTimeout = 100;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.Object obj27 = properties2.replace((java.lang.Object) properties16, (java.lang.Object) int26);
        java.util.Set<java.lang.Object> objSet28 = properties2.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        properties31.clear();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        int int34 = properties33.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties33.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        properties38.clear();
        boolean boolean40 = properties38.isEmpty();
        java.lang.Object obj41 = properties38.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long43 = atomikosProperties42.checkpointInterval;
        java.util.Properties properties44 = atomikosProperties42.asProperties();
        properties44.clear();
        boolean boolean46 = properties44.isEmpty();
        java.util.Collection<java.lang.Object> objCollection47 = properties44.values();
        properties38.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties44);
        java.util.Enumeration<?> wildcardEnumeration49 = properties44.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        properties52.clear();
        boolean boolean54 = properties52.isEmpty();
        java.util.Collection<java.lang.Object> objCollection55 = properties52.values();
        boolean boolean56 = properties44.equals((java.lang.Object) properties52);
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        atomikosProperties58.forceShutdownOnVmExit = false;
        boolean boolean62 = atomikosProperties58.isSerialJtaTransactions();
        atomikosProperties58.setThreadedTwoPhaseCommit(false);
        java.lang.String str65 = atomikosProperties58.getService();
        boolean boolean66 = properties33.containsKey((java.lang.Object) atomikosProperties58);
        java.util.Set<java.lang.String> strSet67 = properties33.stringPropertyNames();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Set<java.lang.String> strSet69 = properties33.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{}");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertNotNull(wildcardEnumeration49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strSet69);
    }

    @Test
    public void test7416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7416");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str5 = atomikosProperties0.logBaseName;
        long long6 = atomikosProperties0.getMaxTimeout();
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives((int) (byte) 100);
        int int10 = atomikosProperties0.maxActives;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test7417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7417");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.defaultJtaTimeout;
        long long11 = atomikosProperties0.maxTimeout;
        java.lang.String str12 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean13 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str14 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test7418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7418");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.transactionManagerUniqueName;
        long long14 = atomikosProperties10.getCheckpointInterval();
        boolean boolean15 = atomikosProperties10.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        int int18 = atomikosProperties16.getMaxActives();
        atomikosProperties16.setCheckpointInterval(1L);
        atomikosProperties16.setService("{}");
        boolean boolean23 = atomikosProperties16.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) 100);
        boolean boolean27 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long30 = atomikosProperties24.getDefaultJtaTimeout();
        long long31 = atomikosProperties24.getMaxTimeout();
        atomikosProperties24.logBaseName = "tmlog";
        long long34 = atomikosProperties24.getDefaultJtaTimeout();
        atomikosProperties24.setForceShutdownOnVmExit(true);
        java.lang.String str37 = atomikosProperties24.getLogBaseName();
        boolean boolean38 = properties9.replace((java.lang.Object) atomikosProperties10, (java.lang.Object) boolean23, (java.lang.Object) str37);
        java.lang.String str39 = atomikosProperties10.getService();
        boolean boolean40 = atomikosProperties10.enableLogging;
        boolean boolean41 = atomikosProperties10.serialJtaTransactions;
        atomikosProperties10.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test7419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7419");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        java.lang.String str3 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 'a';
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.hi!=0, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test7420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7420");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.util.Properties properties16 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        java.lang.Object obj20 = properties19.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        boolean boolean27 = atomikosProperties21.isEnableLogging();
        atomikosProperties21.transactionManagerUniqueName = "";
        atomikosProperties21.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        java.lang.String str34 = atomikosProperties32.logBaseName;
        java.lang.String str35 = atomikosProperties32.getLogBaseDir();
        atomikosProperties32.setMaxActives((int) (byte) -1);
        java.lang.String str38 = atomikosProperties32.getService();
        java.lang.Object obj39 = properties19.getOrDefault((java.lang.Object) atomikosProperties21, (java.lang.Object) atomikosProperties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        int int42 = atomikosProperties40.getMaxActives();
        java.lang.String str43 = atomikosProperties40.logBaseDir;
        java.lang.Object obj45 = properties19.putIfAbsent((java.lang.Object) atomikosProperties40, (java.lang.Object) "");
        int int46 = properties19.size();
        java.util.Collection<java.lang.Object> objCollection47 = properties19.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        int int50 = atomikosProperties48.getMaxActives();
        java.lang.String str51 = atomikosProperties48.logBaseDir;
        java.lang.String str52 = atomikosProperties48.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        java.lang.String str55 = atomikosProperties53.logBaseName;
        java.lang.String str56 = atomikosProperties53.getLogBaseDir();
        atomikosProperties53.setMaxActives((int) (byte) -1);
        boolean boolean59 = atomikosProperties53.isEnableLogging();
        java.lang.String str60 = atomikosProperties53.getLogBaseName();
        java.lang.Object obj61 = properties19.replace((java.lang.Object) atomikosProperties48, (java.lang.Object) atomikosProperties53);
        boolean boolean62 = atomikosProperties48.threadedTwoPhaseCommit;
        java.lang.String str63 = atomikosProperties48.transactionManagerUniqueName;
        boolean boolean64 = properties16.containsValue((java.lang.Object) atomikosProperties48);
        atomikosProperties48.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties48.enableLogging = true;
        atomikosProperties48.threadedTwoPhaseCommit = true;
        boolean boolean71 = atomikosProperties48.isForceShutdownOnVmExit();
        long long72 = atomikosProperties48.maxTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tmlog" + "'", str60, "tmlog");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 300000L + "'", long72 == 300000L);
    }

    @Test
    public void test7421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7421");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.checkpointInterval = 0L;
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test7422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7422");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.enableLogging = true;
        atomikosProperties14.maxActives = (byte) -1;
        boolean boolean19 = atomikosProperties14.isForceShutdownOnVmExit();
        boolean boolean20 = properties8.containsValue((java.lang.Object) atomikosProperties14);
        int int21 = atomikosProperties14.getMaxActives();
        atomikosProperties14.defaultJtaTimeout = (byte) 100;
        atomikosProperties14.setLogBaseDir("hi!");
        atomikosProperties14.maxTimeout = 97L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test7423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7423");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        atomikosProperties36.threadedTwoPhaseCommit = true;
        atomikosProperties36.checkpointInterval = 0;
        java.lang.String str52 = atomikosProperties36.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test7424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7424");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.defaultJtaTimeout = 10;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setMaxActives(100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test7425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7425");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setTransactionManagerUniqueName("");
        atomikosProperties6.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass16 = atomikosProperties6.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        int int19 = atomikosProperties17.getMaxActives();
        java.lang.String str20 = atomikosProperties17.transactionManagerUniqueName;
        long long21 = atomikosProperties17.getCheckpointInterval();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        atomikosProperties27.transactionManagerUniqueName = "";
        atomikosProperties27.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        java.lang.Object obj45 = properties25.getOrDefault((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        int int48 = atomikosProperties46.getMaxActives();
        java.lang.String str49 = atomikosProperties46.logBaseDir;
        java.lang.Object obj51 = properties25.putIfAbsent((java.lang.Object) atomikosProperties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        atomikosProperties52.setService("");
        boolean boolean57 = atomikosProperties52.threadedTwoPhaseCommit;
        java.lang.String str58 = atomikosProperties52.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        boolean boolean63 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.serialJtaTransactions = true;
        java.lang.String str66 = atomikosProperties59.getService();
        java.lang.Object obj67 = properties25.putIfAbsent((java.lang.Object) str58, (java.lang.Object) atomikosProperties59);
        boolean boolean68 = properties3.replace((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties59);
        atomikosProperties17.setSerialJtaTransactions(true);
        atomikosProperties17.setService("tmlog");
        java.util.Properties properties73 = atomikosProperties17.asProperties();
        java.lang.Object obj76 = properties73.setProperty("{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}", "{=}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNull(obj76);
    }

    @Test
    public void test7426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7426");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        boolean boolean21 = properties2.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        java.util.Set<java.lang.Object> objSet28 = properties24.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.threadedTwoPhaseCommit = false;
        int int39 = atomikosProperties29.maxActives;
        atomikosProperties29.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj42 = properties2.getOrDefault((java.lang.Object) properties24, (java.lang.Object) atomikosProperties29);
        atomikosProperties29.logBaseName = "";
        long long45 = atomikosProperties29.getMaxTimeout();
        atomikosProperties29.maxActives = 4;
        atomikosProperties29.defaultJtaTimeout = 1L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 300000L + "'", long45 == 300000L);
    }

    @Test
    public void test7427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7427");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        int int11 = atomikosProperties0.maxActives;
        atomikosProperties0.enableLogging = true;
        long long14 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setMaxTimeout((long) (byte) 10);
        boolean boolean17 = atomikosProperties0.enableLogging;
        atomikosProperties0.checkpointInterval = 'a';
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test7428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7428");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.maxActives = ' ';
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.checkpointInterval = '#';
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str19 = atomikosProperties0.service;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.hi!=0, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test7429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7429");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        boolean boolean9 = properties7.containsValue((java.lang.Object) 100L);
        boolean boolean10 = properties2.contains((java.lang.Object) properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        properties13.clear();
        boolean boolean15 = properties13.isEmpty();
        java.lang.Object obj16 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        properties19.clear();
        boolean boolean21 = properties19.isEmpty();
        java.util.Collection<java.lang.Object> objCollection22 = properties19.values();
        properties13.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties19);
        java.lang.Object obj26 = properties19.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.lang.Object obj27 = properties19.clone();
        boolean boolean28 = properties7.equals((java.lang.Object) properties19);
        properties19.clear();
        int int30 = properties19.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        properties33.clear();
        boolean boolean35 = properties33.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        java.lang.Object obj41 = properties38.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection42 = properties38.values();
        boolean boolean43 = properties33.containsKey((java.lang.Object) objCollection42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.logBaseDir;
        java.lang.String str46 = atomikosProperties44.logBaseName;
        java.lang.String str47 = atomikosProperties44.getLogBaseName();
        int int48 = atomikosProperties44.getMaxActives();
        atomikosProperties44.setLogBaseDir("hi!");
        java.lang.String str51 = atomikosProperties44.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        atomikosProperties52.setTransactionManagerUniqueName("");
        int int56 = atomikosProperties52.getMaxActives();
        java.lang.String str57 = atomikosProperties52.getLogBaseDir();
        java.lang.String str58 = atomikosProperties52.logBaseName;
        java.lang.Object obj59 = properties33.replace((java.lang.Object) atomikosProperties44, (java.lang.Object) atomikosProperties52);
        boolean boolean60 = properties33.isEmpty();
        java.lang.Object obj61 = properties33.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet62 = properties33.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setCheckpointInterval((long) 100);
        atomikosProperties63.maxActives = (byte) 0;
        atomikosProperties63.setTransactionManagerUniqueName("");
        java.lang.Object obj70 = properties19.putIfAbsent((java.lang.Object) properties33, (java.lang.Object) atomikosProperties63);
        atomikosProperties63.threadedTwoPhaseCommit = true;
        atomikosProperties63.setLogBaseDir("{}");
        boolean boolean75 = atomikosProperties63.isEnableLogging();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "{}");
        org.junit.Assert.assertNotNull(objEntrySet62);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test7430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7430");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.maxActives = (byte) 0;
        atomikosProperties0.checkpointInterval = (-1L);
        atomikosProperties0.setCheckpointInterval((long) (byte) 10);
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.tmlog=0.0}");
        long long19 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 300000L + "'", long19 == 300000L);
    }

    @Test
    public void test7431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7431");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        boolean boolean18 = atomikosProperties14.isSerialJtaTransactions();
        atomikosProperties14.setLogBaseName("");
        atomikosProperties14.setTransactionManagerUniqueName("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        java.lang.Object obj28 = properties13.replace((java.lang.Object) "tmlog", (java.lang.Object) int27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        int int31 = atomikosProperties29.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        boolean boolean36 = properties34.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        java.lang.Object obj42 = properties39.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.String str46 = atomikosProperties43.getLogBaseDir();
        atomikosProperties43.setLogBaseName("");
        java.lang.Object obj49 = properties34.replace((java.lang.Object) properties39, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        boolean boolean57 = atomikosProperties51.isEnableLogging();
        atomikosProperties51.transactionManagerUniqueName = "";
        atomikosProperties51.setEnableLogging(false);
        boolean boolean62 = atomikosProperties51.isEnableLogging();
        boolean boolean63 = properties39.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean62);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet64 = properties39.entrySet();
        atomikosProperties29.set(properties39, "{}", (java.lang.Object) ' ');
        boolean boolean68 = properties13.contains((java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long70 = atomikosProperties69.checkpointInterval;
        java.util.Properties properties71 = atomikosProperties69.asProperties();
        properties71.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str74 = atomikosProperties73.logBaseDir;
        atomikosProperties73.setTransactionManagerUniqueName("");
        int int77 = atomikosProperties73.getMaxActives();
        boolean boolean78 = properties71.containsValue((java.lang.Object) int77);
        java.lang.Object obj81 = properties71.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties82 = new java.util.Properties(properties71);
        java.util.Set<java.lang.Object> objSet83 = properties71.keySet();
        java.lang.Object obj84 = properties13.get((java.lang.Object) properties71);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet85 = properties71.entrySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objEntrySet64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 500L + "'", long70 == 500L);
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 50 + "'", int77 == 50);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNotNull(objSet83);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNotNull(objEntrySet85);
    }

    @Test
    public void test7432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7432");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        long long4 = atomikosProperties0.getCheckpointInterval();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        java.lang.String str8 = atomikosProperties6.logBaseName;
        atomikosProperties6.setService("");
        java.util.Properties properties11 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        properties15.clear();
        boolean boolean17 = properties15.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        atomikosProperties18.setTransactionManagerUniqueName("");
        int int22 = atomikosProperties18.getMaxActives();
        java.lang.String str23 = atomikosProperties18.transactionManagerUniqueName;
        boolean boolean24 = properties15.containsValue((java.lang.Object) atomikosProperties18);
        boolean boolean25 = atomikosProperties18.forceShutdownOnVmExit;
        atomikosProperties6.set(properties11, "{}", (java.lang.Object) boolean25);
        java.util.Properties properties27 = new java.util.Properties(properties11);
        java.util.Collection<java.lang.Object> objCollection28 = properties27.values();
        boolean boolean29 = properties5.containsValue((java.lang.Object) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        boolean boolean34 = atomikosProperties30.isSerialJtaTransactions();
        long long35 = atomikosProperties30.checkpointInterval;
        atomikosProperties30.setMaxTimeout((long) (byte) 10);
        long long38 = atomikosProperties30.maxTimeout;
        boolean boolean39 = atomikosProperties30.isForceShutdownOnVmExit();
        boolean boolean40 = atomikosProperties30.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        atomikosProperties41.setMaxActives((int) (byte) -1);
        java.lang.String str47 = atomikosProperties41.getService();
        long long48 = atomikosProperties41.defaultJtaTimeout;
        java.lang.String str49 = atomikosProperties41.logBaseName;
        java.lang.String str50 = atomikosProperties41.logBaseDir;
        atomikosProperties41.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean53 = atomikosProperties41.threadedTwoPhaseCommit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.transactionManagerUniqueName = "{}";
        boolean boolean57 = properties5.replace((java.lang.Object) boolean40, (java.lang.Object) boolean53, (java.lang.Object) atomikosProperties54);
        java.io.OutputStream outputStream58 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.storeToXML(outputStream58, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test7433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7433");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        properties21.clear();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.lang.Object obj26 = properties23.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str27 = properties23.toString();
        java.lang.Object obj30 = properties23.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet31 = properties23.keySet();
        java.lang.Object obj32 = properties10.remove((java.lang.Object) properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        java.lang.Object obj38 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        boolean boolean43 = properties41.isEmpty();
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<?> wildcardEnumeration46 = properties35.propertyNames();
        java.lang.Object obj47 = properties10.get((java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        int int50 = atomikosProperties48.getMaxActives();
        java.lang.String str51 = atomikosProperties48.logBaseDir;
        boolean boolean52 = atomikosProperties48.serialJtaTransactions;
        java.lang.String str53 = atomikosProperties48.transactionManagerUniqueName;
        atomikosProperties48.threadedTwoPhaseCommit = false;
        long long56 = atomikosProperties48.maxTimeout;
        java.util.Properties properties57 = atomikosProperties48.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties57.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties59.setCheckpointInterval((long) 100);
        java.lang.String str62 = atomikosProperties59.getService();
        atomikosProperties59.defaultJtaTimeout = 'a';
        atomikosProperties59.enableLogging = false;
        atomikosProperties59.threadedTwoPhaseCommit = false;
        atomikosProperties59.setForceShutdownOnVmExit(false);
        java.lang.Object obj71 = properties57.remove((java.lang.Object) atomikosProperties59);
        int int72 = properties57.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long74 = atomikosProperties73.checkpointInterval;
        java.util.Properties properties75 = atomikosProperties73.asProperties();
        properties75.clear();
        java.util.Properties properties77 = new java.util.Properties(properties75);
        int int78 = properties77.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet79 = properties77.entrySet();
        java.util.Set<java.lang.String> strSet80 = properties77.stringPropertyNames();
        boolean boolean81 = properties57.equals((java.lang.Object) properties77);
        java.util.Set<java.lang.String> strSet82 = properties57.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long84 = atomikosProperties83.checkpointInterval;
        int int85 = atomikosProperties83.getMaxActives();
        java.lang.String str86 = atomikosProperties83.logBaseDir;
        boolean boolean87 = atomikosProperties83.serialJtaTransactions;
        java.lang.String str88 = atomikosProperties83.transactionManagerUniqueName;
        atomikosProperties83.threadedTwoPhaseCommit = false;
        long long91 = atomikosProperties83.maxTimeout;
        java.util.Properties properties92 = atomikosProperties83.asProperties();
        atomikosProperties83.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}";
        java.lang.Object obj95 = properties10.put((java.lang.Object) properties57, (java.lang.Object) atomikosProperties83);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj26, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(wildcardEnumeration46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 300000L + "'", long56 == 300000L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 500L + "'", long74 == 500L);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(objEntrySet79);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 50 + "'", int85 == 50);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 300000L + "'", long91 == 300000L);
        org.junit.Assert.assertNotNull(properties92);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test7434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7434");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        long long11 = atomikosProperties4.checkpointInterval;
        atomikosProperties4.setCheckpointInterval(10L);
        boolean boolean14 = atomikosProperties4.serialJtaTransactions;
        boolean boolean15 = properties2.equals((java.lang.Object) boolean14);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        java.lang.String str20 = atomikosProperties18.logBaseName;
        java.lang.String str21 = atomikosProperties18.getLogBaseDir();
        boolean boolean22 = atomikosProperties18.isSerialJtaTransactions();
        long long23 = atomikosProperties18.checkpointInterval;
        atomikosProperties18.setMaxActives(0);
        boolean boolean26 = properties2.containsValue((java.lang.Object) 0);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        java.lang.Object obj30 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        boolean boolean37 = atomikosProperties31.isEnableLogging();
        atomikosProperties31.transactionManagerUniqueName = "";
        atomikosProperties31.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setMaxActives((int) (byte) -1);
        java.lang.String str48 = atomikosProperties42.getService();
        java.lang.Object obj49 = properties29.getOrDefault((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties42);
        int int50 = properties29.size();
        java.lang.String str52 = properties29.getProperty("");
        java.lang.String str54 = properties29.getProperty("tmlog");
        boolean boolean55 = properties29.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        atomikosProperties56.setTransactionManagerUniqueName("");
        int int60 = atomikosProperties56.getMaxActives();
        java.lang.String str61 = atomikosProperties56.getLogBaseDir();
        java.lang.String str62 = atomikosProperties56.logBaseName;
        atomikosProperties56.setSerialJtaTransactions(true);
        java.lang.String str65 = atomikosProperties56.logBaseName;
        long long66 = atomikosProperties56.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.logBaseDir;
        java.lang.String str69 = atomikosProperties67.logBaseName;
        java.lang.String str70 = atomikosProperties67.getLogBaseDir();
        atomikosProperties67.setMaxActives((int) (byte) -1);
        java.lang.String str73 = atomikosProperties67.getService();
        atomikosProperties67.setSerialJtaTransactions(false);
        long long76 = atomikosProperties67.defaultJtaTimeout;
        atomikosProperties67.setDefaultJtaTimeout((long) 'a');
        java.lang.String str79 = atomikosProperties67.getService();
        java.lang.Object obj80 = properties29.replace((java.lang.Object) long66, (java.lang.Object) atomikosProperties67);
        java.util.Properties properties81 = new java.util.Properties(properties29);
        boolean boolean82 = properties2.contains((java.lang.Object) properties81);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNotNull(objEnumeration17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10000L + "'", long66 == 10000L);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10000L + "'", long76 == 10000L);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test7435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7435");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        boolean boolean9 = properties7.containsValue((java.lang.Object) 100L);
        boolean boolean10 = properties2.contains((java.lang.Object) properties7);
        java.util.Set<java.lang.String> strSet11 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        boolean boolean16 = properties14.isEmpty();
        java.lang.Object obj17 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        properties20.clear();
        boolean boolean22 = properties20.isEmpty();
        java.util.Collection<java.lang.Object> objCollection23 = properties20.values();
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Enumeration<?> wildcardEnumeration25 = properties20.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        properties28.clear();
        boolean boolean30 = properties28.isEmpty();
        java.util.Collection<java.lang.Object> objCollection31 = properties28.values();
        boolean boolean32 = properties20.equals((java.lang.Object) properties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        java.lang.Object obj38 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        atomikosProperties40.forceShutdownOnVmExit = false;
        atomikosProperties40.setTransactionManagerUniqueName("");
        java.lang.Object obj46 = properties35.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        java.util.Properties properties50 = atomikosProperties48.asProperties();
        boolean boolean52 = properties50.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long54 = atomikosProperties53.checkpointInterval;
        java.util.Properties properties55 = atomikosProperties53.asProperties();
        java.lang.Object obj58 = properties55.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        atomikosProperties59.setLogBaseName("");
        java.lang.Object obj65 = properties50.replace((java.lang.Object) properties55, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        java.lang.Object obj69 = properties68.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str71 = atomikosProperties70.logBaseDir;
        java.lang.String str72 = atomikosProperties70.logBaseName;
        java.lang.String str73 = atomikosProperties70.getLogBaseDir();
        atomikosProperties70.setMaxActives((int) (byte) -1);
        boolean boolean76 = atomikosProperties70.isEnableLogging();
        atomikosProperties70.transactionManagerUniqueName = "";
        atomikosProperties70.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str82 = atomikosProperties81.logBaseDir;
        java.lang.String str83 = atomikosProperties81.logBaseName;
        java.lang.String str84 = atomikosProperties81.getLogBaseDir();
        atomikosProperties81.setMaxActives((int) (byte) -1);
        java.lang.String str87 = atomikosProperties81.getService();
        java.lang.Object obj88 = properties68.getOrDefault((java.lang.Object) atomikosProperties70, (java.lang.Object) atomikosProperties81);
        boolean boolean89 = properties35.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties50, (java.lang.Object) atomikosProperties81);
        java.util.Collection<java.lang.Object> objCollection90 = properties50.values();
        java.lang.Object obj91 = properties50.clone();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties50);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties50);
        java.io.OutputStream outputStream94 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream94, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}", "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{}");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNotNull(wildcardEnumeration25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 500L + "'", long54 == 500L);
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertNotNull(obj69);
// flaky:         org.junit.Assert.assertEquals(obj69.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tmlog" + "'", str72, "tmlog");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "tmlog" + "'", str83, "tmlog");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objCollection90);
        org.junit.Assert.assertNotNull(obj91);
// flaky:         org.junit.Assert.assertEquals(obj91.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test7436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7436");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setCheckpointInterval((long) 100);
        boolean boolean17 = atomikosProperties14.isForceShutdownOnVmExit();
        atomikosProperties14.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean20 = properties13.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet21 = properties13.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties13.elements();
        java.util.Enumeration<?> wildcardEnumeration23 = properties13.propertyNames();
        java.lang.Object obj24 = properties13.clone();
        java.util.Enumeration<?> wildcardEnumeration25 = properties13.propertyNames();
        boolean boolean26 = properties2.containsValue((java.lang.Object) wildcardEnumeration25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        properties29.clear();
        boolean boolean31 = properties29.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        atomikosProperties32.setTransactionManagerUniqueName("");
        int int36 = atomikosProperties32.getMaxActives();
        java.lang.String str37 = atomikosProperties32.transactionManagerUniqueName;
        boolean boolean38 = properties29.containsValue((java.lang.Object) atomikosProperties32);
        atomikosProperties32.service = "tmlog";
        atomikosProperties32.setTransactionManagerUniqueName("");
        java.lang.Object obj43 = properties2.remove((java.lang.Object) atomikosProperties32);
        atomikosProperties32.setMaxTimeout((long) ' ');
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objEntrySet21);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(wildcardEnumeration23);
        org.junit.Assert.assertNotNull(obj24);
// flaky:         org.junit.Assert.assertEquals(obj24.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(wildcardEnumeration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test7437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7437");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        boolean boolean57 = atomikosProperties48.isThreadedTwoPhaseCommit();
        atomikosProperties48.setLogBaseName("");
        atomikosProperties48.maxActives = 100;
        atomikosProperties48.checkpointInterval = '4';
        int int64 = atomikosProperties48.getMaxActives();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
    }

    @Test
    public void test7438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7438");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setLogBaseDir("{}");
        atomikosProperties0.setLogBaseDir("{}");
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        properties18.clear();
        java.util.Properties properties20 = new java.util.Properties(properties18);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        atomikosProperties21.logBaseName = "tmlog";
        int int28 = atomikosProperties21.maxActives;
        boolean boolean29 = properties18.containsValue((java.lang.Object) int28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        atomikosProperties31.setThreadedTwoPhaseCommit(false);
        boolean boolean36 = properties18.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        properties18.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        atomikosProperties38.setDefaultJtaTimeout((long) (-1));
        int int47 = atomikosProperties38.maxActives;
        atomikosProperties38.setDefaultJtaTimeout(1L);
        java.lang.String str50 = atomikosProperties38.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.enableLogging = true;
        boolean boolean54 = atomikosProperties51.forceShutdownOnVmExit;
        java.lang.Object obj55 = properties18.replace((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        java.lang.String str59 = atomikosProperties57.logBaseName;
        java.lang.String str60 = atomikosProperties57.getLogBaseDir();
        atomikosProperties57.setMaxActives((int) (byte) -1);
        boolean boolean63 = atomikosProperties57.isEnableLogging();
        long long64 = atomikosProperties57.checkpointInterval;
        atomikosProperties57.setCheckpointInterval(10L);
        atomikosProperties57.serialJtaTransactions = false;
        atomikosProperties57.setCheckpointInterval(0L);
        atomikosProperties57.setMaxActives((int) (byte) 1);
        atomikosProperties57.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties57.setLogBaseDir("tmlog");
        boolean boolean77 = atomikosProperties57.isEnableLogging();
        atomikosProperties0.set(properties18, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}", (java.lang.Object) atomikosProperties57);
        java.util.Set<java.lang.Object> objSet79 = properties18.keySet();
        java.lang.Object obj82 = properties18.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}", "{}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 500L + "'", long64 == 500L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objSet79);
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test7439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7439");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        java.lang.String str6 = properties2.toString();
        boolean boolean7 = properties2.isEmpty();
        java.lang.String str9 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.hi!=0, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{}" + "'", str6, "{}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7440");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.transactionManagerUniqueName;
        atomikosProperties6.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        java.util.Properties properties18 = new java.util.Properties(properties16);
        atomikosProperties6.set(properties16, "tmlog", (java.lang.Object) 0.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        java.lang.Object obj26 = properties2.putIfAbsent((java.lang.Object) "tmlog", (java.lang.Object) atomikosProperties22);
        java.lang.String str28 = properties2.getProperty("{}");
        java.lang.String str30 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        properties33.clear();
        boolean boolean35 = properties33.isEmpty();
        java.lang.Object obj36 = properties33.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        java.lang.Object obj41 = properties40.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setMaxActives((int) (byte) -1);
        boolean boolean48 = atomikosProperties42.isEnableLogging();
        atomikosProperties42.transactionManagerUniqueName = "";
        atomikosProperties42.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        java.lang.String str55 = atomikosProperties53.logBaseName;
        java.lang.String str56 = atomikosProperties53.getLogBaseDir();
        atomikosProperties53.setMaxActives((int) (byte) -1);
        java.lang.String str59 = atomikosProperties53.getService();
        java.lang.Object obj60 = properties40.getOrDefault((java.lang.Object) atomikosProperties42, (java.lang.Object) atomikosProperties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.checkpointInterval;
        int int63 = atomikosProperties61.getMaxActives();
        java.lang.String str64 = atomikosProperties61.logBaseDir;
        java.lang.Object obj66 = properties40.putIfAbsent((java.lang.Object) atomikosProperties61, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.logBaseDir;
        java.lang.String str69 = atomikosProperties67.logBaseName;
        java.lang.String str70 = atomikosProperties67.getLogBaseDir();
        boolean boolean71 = atomikosProperties67.isSerialJtaTransactions();
        atomikosProperties67.setEnableLogging(false);
        boolean boolean74 = properties33.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties67);
        atomikosProperties67.logBaseName = "{}";
        long long77 = atomikosProperties67.getDefaultJtaTimeout();
        boolean boolean78 = atomikosProperties67.isThreadedTwoPhaseCommit();
        atomikosProperties67.threadedTwoPhaseCommit = true;
        atomikosProperties67.checkpointInterval = 0;
        boolean boolean83 = properties2.containsKey((java.lang.Object) 0);
        java.io.OutputStream outputStream84 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(outputStream84, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 50 + "'", int63 == 50);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test7441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7441");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setLogBaseName("hi!");
        atomikosProperties0.setCheckpointInterval((long) (short) 1);
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        atomikosProperties0.maxTimeout = 10000L;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.setMaxActives(2);
        atomikosProperties0.setMaxActives((int) (byte) 0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test7442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7442");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        java.lang.String str19 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties2.entrySet();
        java.util.Properties properties21 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        boolean boolean24 = atomikosProperties22.isSerialJtaTransactions();
        atomikosProperties22.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        atomikosProperties27.setTransactionManagerUniqueName("");
        int int31 = atomikosProperties27.getMaxActives();
        java.lang.String str32 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setCheckpointInterval((long) 100);
        boolean boolean44 = atomikosProperties41.isForceShutdownOnVmExit();
        atomikosProperties41.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean47 = properties40.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.enableLogging = true;
        boolean boolean52 = properties37.replace((java.lang.Object) boolean47, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection53 = properties37.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet54 = properties37.entrySet();
        atomikosProperties27.set(properties37, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        java.util.Properties properties61 = atomikosProperties59.asProperties();
        properties61.clear();
        boolean boolean63 = properties61.isEmpty();
        java.util.Collection<java.lang.Object> objCollection64 = properties61.values();
        atomikosProperties22.set(properties37, "hi!", (java.lang.Object) objCollection64);
        atomikosProperties22.forceShutdownOnVmExit = false;
        atomikosProperties22.maxActives = '4';
        boolean boolean70 = atomikosProperties22.forceShutdownOnVmExit;
        boolean boolean71 = atomikosProperties22.isForceShutdownOnVmExit();
        long long72 = atomikosProperties22.checkpointInterval;
        atomikosProperties22.setMaxTimeout((long) (short) 1);
        boolean boolean75 = atomikosProperties22.isThreadedTwoPhaseCommit();
        long long76 = atomikosProperties22.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long78 = atomikosProperties77.checkpointInterval;
        java.util.Properties properties79 = atomikosProperties77.asProperties();
        properties79.clear();
        boolean boolean81 = properties79.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str83 = atomikosProperties82.logBaseDir;
        atomikosProperties82.setTransactionManagerUniqueName("");
        int int86 = atomikosProperties82.getMaxActives();
        java.lang.String str87 = atomikosProperties82.transactionManagerUniqueName;
        boolean boolean88 = properties79.containsValue((java.lang.Object) atomikosProperties82);
        boolean boolean89 = properties21.remove((java.lang.Object) atomikosProperties22, (java.lang.Object) boolean88);
        properties21.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objCollection53);
        org.junit.Assert.assertNotNull(objEntrySet54);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objCollection64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 500L + "'", long72 == 500L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 500L + "'", long76 == 500L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 500L + "'", long78 == 500L);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 50 + "'", int86 == 50);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test7443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7443");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        atomikosProperties0.enableLogging = true;
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        long long9 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        int int13 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test7444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7444");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties10.transactionManagerUniqueName = "hi!";
        java.lang.String str42 = atomikosProperties10.service;
        boolean boolean43 = atomikosProperties10.threadedTwoPhaseCommit;
        atomikosProperties10.enableLogging = true;
        atomikosProperties10.setThreadedTwoPhaseCommit(true);
        atomikosProperties10.maxActives = 100;
        boolean boolean50 = atomikosProperties10.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test7445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7445");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        java.lang.String str8 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        java.lang.Object obj14 = properties11.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection15 = properties11.values();
        int int16 = properties11.size();
        java.lang.Object obj17 = null;
        boolean boolean18 = properties11.equals(obj17);
        java.util.Collection<java.lang.Object> objCollection19 = properties11.values();
        java.lang.Object obj20 = properties2.get((java.lang.Object) properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.transactionManagerUniqueName;
        atomikosProperties21.threadedTwoPhaseCommit = true;
        atomikosProperties21.serialJtaTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        atomikosProperties31.setService("");
        boolean boolean36 = atomikosProperties31.threadedTwoPhaseCommit;
        int int37 = atomikosProperties31.getMaxActives();
        boolean boolean38 = atomikosProperties31.isForceShutdownOnVmExit();
        boolean boolean39 = atomikosProperties31.isEnableLogging();
        boolean boolean40 = atomikosProperties31.serialJtaTransactions;
        int int41 = atomikosProperties31.getMaxActives();
        atomikosProperties31.setForceShutdownOnVmExit(false);
        boolean boolean44 = atomikosProperties31.isEnableLogging();
        java.lang.Object obj45 = properties2.replace((java.lang.Object) atomikosProperties21, (java.lang.Object) atomikosProperties31);
        boolean boolean46 = atomikosProperties21.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 50 + "'", int41 == 50);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test7446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7446");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        int int6 = atomikosProperties0.getMaxActives();
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        long long8 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setMaxActives(0);
        long long15 = atomikosProperties0.getMaxTimeout();
        boolean boolean16 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 300000L + "'", long15 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test7447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7447");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        long long48 = atomikosProperties36.defaultJtaTimeout;
        atomikosProperties36.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties36.serialJtaTransactions = true;
        atomikosProperties36.defaultJtaTimeout = '4';
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
    }

    @Test
    public void test7448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7448");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        java.util.Set<java.lang.String> strSet21 = properties4.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet22 = properties4.keySet();
        java.lang.String str23 = properties4.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties4.elements();
        java.lang.String str26 = properties4.getProperty("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        properties29.clear();
        boolean boolean31 = properties29.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        atomikosProperties32.setTransactionManagerUniqueName("");
        int int36 = atomikosProperties32.getMaxActives();
        java.lang.String str37 = atomikosProperties32.transactionManagerUniqueName;
        boolean boolean38 = properties29.containsValue((java.lang.Object) atomikosProperties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setCheckpointInterval((long) 100);
        atomikosProperties39.maxActives = (byte) 0;
        atomikosProperties39.setTransactionManagerUniqueName("");
        java.lang.Object obj46 = properties29.get((java.lang.Object) atomikosProperties39);
        java.lang.String str47 = atomikosProperties39.getTransactionManagerUniqueName();
        atomikosProperties39.setService("tmlog");
        long long50 = atomikosProperties39.getCheckpointInterval();
        boolean boolean51 = atomikosProperties39.forceShutdownOnVmExit;
        long long52 = atomikosProperties39.maxTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        java.lang.String str55 = atomikosProperties53.logBaseName;
        java.lang.String str56 = atomikosProperties53.getLogBaseDir();
        atomikosProperties53.setMaxActives((int) (byte) -1);
        boolean boolean59 = atomikosProperties53.isEnableLogging();
        atomikosProperties53.transactionManagerUniqueName = "";
        atomikosProperties53.threadedTwoPhaseCommit = true;
        java.util.Properties properties64 = atomikosProperties53.asProperties();
        atomikosProperties53.logBaseDir = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.logBaseDir;
        java.lang.String str69 = atomikosProperties67.logBaseName;
        java.lang.String str70 = atomikosProperties67.getLogBaseDir();
        boolean boolean71 = atomikosProperties67.forceShutdownOnVmExit;
        java.lang.String str72 = atomikosProperties67.logBaseName;
        boolean boolean73 = atomikosProperties67.enableLogging;
        atomikosProperties67.logBaseDir = "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}";
        atomikosProperties67.logBaseDir = "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}";
        atomikosProperties67.setForceShutdownOnVmExit(true);
        boolean boolean80 = properties4.replace((java.lang.Object) atomikosProperties39, (java.lang.Object) "hi!", (java.lang.Object) true);
        java.io.OutputStream outputStream81 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.save(outputStream81, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objSet22);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tmlog" + "'", str72, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test7449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7449");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout((long) (byte) -1);
        atomikosProperties0.setMaxTimeout((long) 'a');
        atomikosProperties0.checkpointInterval = 2L;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test7450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7450");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test7451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7451");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        java.lang.String str12 = atomikosProperties0.getService();
        atomikosProperties0.setSerialJtaTransactions(false);
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        long long17 = atomikosProperties0.getDefaultJtaTimeout();
        long long18 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 300000L + "'", long18 == 300000L);
    }

    @Test
    public void test7452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7452");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        java.lang.Object obj29 = properties28.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        long long37 = atomikosProperties30.defaultJtaTimeout;
        java.lang.String str38 = atomikosProperties30.logBaseName;
        boolean boolean39 = properties2.remove(obj29, (java.lang.Object) atomikosProperties30);
        atomikosProperties30.serialJtaTransactions = false;
        boolean boolean42 = atomikosProperties30.isForceShutdownOnVmExit();
        java.lang.String str43 = atomikosProperties30.transactionManagerUniqueName;
        java.lang.String str44 = atomikosProperties30.transactionManagerUniqueName;
        atomikosProperties30.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties30.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(obj29);
// flaky:         org.junit.Assert.assertEquals(obj29.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test7453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7453");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setCheckpointInterval((long) 9);
        java.lang.String str12 = atomikosProperties0.getService();
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test7454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7454");
        java.util.Properties properties0 = new java.util.Properties();
        boolean boolean1 = properties0.isEmpty();
        boolean boolean2 = properties0.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test7455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7455");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setLogBaseDir("hi!");
        java.lang.String str7 = atomikosProperties0.logBaseName;
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.defaultJtaTimeout = 52;
        boolean boolean13 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.enableLogging = false;
        boolean boolean16 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test7456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7456");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test7457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7457");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setDefaultJtaTimeout(0L);
        int int10 = atomikosProperties0.maxActives;
        atomikosProperties0.setEnableLogging(false);
        long long13 = atomikosProperties0.getDefaultJtaTimeout();
        long long14 = atomikosProperties0.getMaxTimeout();
        boolean boolean15 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str16 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
    }

    @Test
    public void test7458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7458");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        int int6 = atomikosProperties0.getMaxActives();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        java.util.Properties properties12 = atomikosProperties10.asProperties();
        boolean boolean14 = properties12.containsValue((java.lang.Object) 100L);
        java.lang.String str15 = properties12.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        boolean boolean27 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.maxActives = 1;
        java.util.Properties properties30 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        atomikosProperties31.setTransactionManagerUniqueName("");
        int int35 = atomikosProperties31.getMaxActives();
        java.lang.String str36 = atomikosProperties31.getLogBaseDir();
        java.lang.String str37 = atomikosProperties31.logBaseName;
        boolean boolean38 = atomikosProperties31.threadedTwoPhaseCommit;
        java.lang.String str39 = atomikosProperties31.logBaseDir;
        atomikosProperties31.enableLogging = false;
        java.lang.Object obj42 = properties12.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) false);
        atomikosProperties16.setEnableLogging(false);
        boolean boolean45 = properties9.equals((java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        java.lang.String str52 = atomikosProperties46.getService();
        long long53 = atomikosProperties46.defaultJtaTimeout;
        java.lang.String str54 = atomikosProperties46.logBaseName;
        java.util.Properties properties55 = atomikosProperties46.asProperties();
        atomikosProperties46.setMaxActives(0);
        long long58 = atomikosProperties46.maxTimeout;
        atomikosProperties46.defaultJtaTimeout = 0L;
        atomikosProperties46.setForceShutdownOnVmExit(true);
        atomikosProperties46.setMaxActives((int) (short) -1);
        boolean boolean65 = properties9.contains((java.lang.Object) (short) -1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + false + "'", obj42, false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10000L + "'", long53 == 10000L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNotNull(properties55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 300000L + "'", long58 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test7459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7459");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        java.lang.String str27 = properties2.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        properties30.clear();
        boolean boolean32 = properties30.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        atomikosProperties33.setTransactionManagerUniqueName("");
        int int37 = atomikosProperties33.getMaxActives();
        java.lang.String str38 = atomikosProperties33.transactionManagerUniqueName;
        boolean boolean39 = properties30.containsValue((java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) 100);
        atomikosProperties40.maxActives = (byte) 0;
        atomikosProperties40.setTransactionManagerUniqueName("");
        java.lang.Object obj47 = properties30.get((java.lang.Object) atomikosProperties40);
        boolean boolean49 = properties30.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        properties52.clear();
        boolean boolean54 = properties52.isEmpty();
        java.lang.Object obj55 = properties52.clone();
        java.util.Set<java.lang.Object> objSet56 = properties52.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) 100);
        java.lang.String str60 = atomikosProperties57.getService();
        atomikosProperties57.defaultJtaTimeout = 'a';
        atomikosProperties57.enableLogging = false;
        atomikosProperties57.threadedTwoPhaseCommit = false;
        int int67 = atomikosProperties57.maxActives;
        atomikosProperties57.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj70 = properties30.getOrDefault((java.lang.Object) properties52, (java.lang.Object) atomikosProperties57);
        java.lang.Object obj71 = properties2.remove((java.lang.Object) atomikosProperties57);
        atomikosProperties57.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean74 = atomikosProperties57.isSerialJtaTransactions();
        atomikosProperties57.setLogBaseName("{}");
        atomikosProperties57.setEnableLogging(false);
        atomikosProperties57.maxActives = (short) 0;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{}");
        org.junit.Assert.assertNotNull(objSet56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test7460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7460");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        long long6 = atomikosProperties4.getDefaultJtaTimeout();
        java.util.Properties properties7 = atomikosProperties4.asProperties();
        java.util.Set<java.lang.Object> objSet8 = properties7.keySet();
        java.util.Properties properties9 = new java.util.Properties(properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        long long12 = atomikosProperties10.getDefaultJtaTimeout();
        atomikosProperties10.setService("hi!");
        atomikosProperties10.serialJtaTransactions = false;
        boolean boolean17 = atomikosProperties10.isForceShutdownOnVmExit();
        java.lang.Object obj18 = properties2.getOrDefault((java.lang.Object) properties9, (java.lang.Object) boolean17);
        java.lang.String str20 = properties9.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.Object> objSet21 = properties9.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objSet8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + false + "'", obj18, false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(objSet21);
    }

    @Test
    public void test7461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7461");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        long long9 = atomikosProperties0.maxTimeout;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        java.lang.String str11 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setCheckpointInterval((long) (short) 1);
        java.lang.String str14 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setCheckpointInterval((long) 10);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test7462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7462");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.getOrDefault((java.lang.Object) 0.0f, (java.lang.Object) 0.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        boolean boolean8 = properties6.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        java.lang.Object obj14 = properties11.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setLogBaseName("");
        java.lang.Object obj21 = properties6.replace((java.lang.Object) properties11, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        atomikosProperties23.setMaxActives((int) (byte) -1);
        boolean boolean29 = atomikosProperties23.isEnableLogging();
        atomikosProperties23.transactionManagerUniqueName = "";
        atomikosProperties23.setEnableLogging(false);
        boolean boolean34 = atomikosProperties23.isEnableLogging();
        boolean boolean35 = properties11.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean34);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet36 = properties11.entrySet();
        boolean boolean37 = properties0.containsValue((java.lang.Object) objEntrySet36);
        properties0.clear();
        java.io.OutputStream outputStream39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.save(outputStream39, "{}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 0.0d + "'", obj3, 0.0d);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEntrySet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test7463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7463");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean6 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str7 = atomikosProperties0.service;
        boolean boolean8 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test7464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7464");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        boolean boolean23 = atomikosProperties4.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        java.lang.Object obj29 = properties26.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        java.lang.Object obj34 = properties33.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        atomikosProperties35.setMaxActives((int) (byte) -1);
        boolean boolean41 = atomikosProperties35.isEnableLogging();
        atomikosProperties35.transactionManagerUniqueName = "";
        atomikosProperties35.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        java.lang.String str52 = atomikosProperties46.getService();
        java.lang.Object obj53 = properties33.getOrDefault((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        int int56 = atomikosProperties54.getMaxActives();
        java.lang.String str57 = atomikosProperties54.logBaseDir;
        java.lang.Object obj59 = properties33.putIfAbsent((java.lang.Object) atomikosProperties54, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        boolean boolean64 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.setEnableLogging(false);
        boolean boolean67 = properties26.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        java.util.Properties properties70 = atomikosProperties68.asProperties();
        properties70.clear();
        java.util.Properties properties72 = new java.util.Properties(properties70);
        java.lang.Object obj75 = properties72.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str76 = properties72.toString();
        boolean boolean77 = properties26.containsValue((java.lang.Object) properties72);
        java.util.Set<java.lang.Object> objSet78 = properties72.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long81 = atomikosProperties80.checkpointInterval;
        int int82 = atomikosProperties80.getMaxActives();
        atomikosProperties4.set(properties72, "hi!", (java.lang.Object) atomikosProperties80);
        java.util.Set<java.lang.String> strSet84 = properties72.stringPropertyNames();
        java.lang.String str85 = properties72.toString();
        java.util.Enumeration<?> wildcardEnumeration86 = properties72.propertyNames();
        java.lang.String str88 = properties72.getProperty("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj75, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{}" + "'", str76, "{}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objSet78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 50 + "'", int82 == 50);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(wildcardEnumeration86);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test7465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7465");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        java.util.Set<java.lang.Object> objSet6 = properties2.keySet();
        java.util.Enumeration<?> wildcardEnumeration7 = properties2.propertyNames();
        boolean boolean8 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        properties11.clear();
        boolean boolean13 = properties11.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        atomikosProperties14.setTransactionManagerUniqueName("");
        int int18 = atomikosProperties14.getMaxActives();
        java.lang.String str19 = atomikosProperties14.transactionManagerUniqueName;
        boolean boolean20 = properties11.containsValue((java.lang.Object) atomikosProperties14);
        boolean boolean21 = properties11.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.lang.Object obj24 = properties11.remove((java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        java.lang.Object obj28 = properties27.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setMaxActives((int) (byte) -1);
        boolean boolean35 = atomikosProperties29.isEnableLogging();
        atomikosProperties29.transactionManagerUniqueName = "";
        atomikosProperties29.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        java.lang.String str46 = atomikosProperties40.getService();
        java.lang.Object obj47 = properties27.getOrDefault((java.lang.Object) atomikosProperties29, (java.lang.Object) atomikosProperties40);
        int int48 = properties27.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet49 = properties27.entrySet();
        java.util.Set<java.lang.String> strSet50 = properties27.stringPropertyNames();
        java.lang.Object obj51 = properties2.putIfAbsent((java.lang.Object) properties11, (java.lang.Object) strSet50);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(objEntrySet49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNull(obj51);
    }

    @Test
    public void test7466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7466");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        atomikosProperties5.service = "tmlog";
        atomikosProperties5.setTransactionManagerUniqueName("");
        boolean boolean16 = atomikosProperties5.isSerialJtaTransactions();
        atomikosProperties5.setDefaultJtaTimeout(0L);
        boolean boolean19 = atomikosProperties5.enableLogging;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test7467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7467");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str5 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7468");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setCheckpointInterval((long) 100);
        boolean boolean17 = atomikosProperties14.isForceShutdownOnVmExit();
        atomikosProperties14.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean20 = properties13.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.enableLogging = true;
        boolean boolean25 = properties10.replace((java.lang.Object) boolean20, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection26 = properties10.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet27 = properties10.entrySet();
        atomikosProperties0.set(properties10, "hi!", (java.lang.Object) 0L);
        atomikosProperties0.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj38 = properties35.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection39 = properties35.values();
        java.util.Collection<java.lang.Object> objCollection40 = properties35.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        properties43.clear();
        boolean boolean45 = properties43.isEmpty();
        java.lang.Object obj46 = properties43.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        properties49.clear();
        boolean boolean51 = properties49.isEmpty();
        java.util.Collection<java.lang.Object> objCollection52 = properties49.values();
        properties43.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        java.util.Enumeration<?> wildcardEnumeration54 = properties49.propertyNames();
        java.util.Properties properties55 = new java.util.Properties(properties49);
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties55);
        java.lang.Object obj58 = null;
        atomikosProperties0.set(properties55, "{}", obj58);
        java.util.Properties properties60 = atomikosProperties0.asProperties();
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertNotNull(objEntrySet27);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNotNull(objCollection40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "{}");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objCollection52);
        org.junit.Assert.assertNotNull(wildcardEnumeration54);
        org.junit.Assert.assertNotNull(properties60);
    }

    @Test
    public void test7469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7469");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.setCheckpointInterval(0L);
        atomikosProperties0.setMaxActives((int) (byte) 1);
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean18 = atomikosProperties0.isEnableLogging();
        java.lang.String str19 = atomikosProperties0.logBaseName;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.forceShutdownOnVmExit = true;
        int int24 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test7470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7470");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        atomikosProperties0.maxActives = ' ';
        long long11 = atomikosProperties0.getDefaultJtaTimeout();
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        boolean boolean13 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setTransactionManagerUniqueName("hi!");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test7471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7471");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties29.defaultJtaTimeout = (byte) 10;
        atomikosProperties29.threadedTwoPhaseCommit = true;
        atomikosProperties29.serialJtaTransactions = false;
        java.util.Properties properties46 = atomikosProperties29.asProperties();
        atomikosProperties29.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties29.enableLogging = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(properties46);
    }

    @Test
    public void test7472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7472");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.setCheckpointInterval((long) 100);
        boolean boolean17 = atomikosProperties14.isForceShutdownOnVmExit();
        atomikosProperties14.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean20 = properties13.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.enableLogging = true;
        boolean boolean25 = properties10.replace((java.lang.Object) boolean20, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection26 = properties10.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet27 = properties10.entrySet();
        atomikosProperties0.set(properties10, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        boolean boolean34 = properties10.contains((java.lang.Object) atomikosProperties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setCheckpointInterval((long) 100);
        boolean boolean44 = atomikosProperties41.isForceShutdownOnVmExit();
        atomikosProperties41.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean47 = properties40.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.enableLogging = true;
        boolean boolean52 = properties37.replace((java.lang.Object) boolean47, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection53 = properties37.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet54 = properties37.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet55 = properties37.entrySet();
        java.lang.String str57 = properties37.getProperty("hi!");
        java.util.Enumeration<java.lang.Object> objEnumeration58 = properties37.keys();
        java.util.Set<java.lang.String> strSet59 = properties37.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        java.util.Properties properties62 = atomikosProperties60.asProperties();
        properties62.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.logBaseDir;
        atomikosProperties64.setTransactionManagerUniqueName("");
        int int68 = atomikosProperties64.getMaxActives();
        boolean boolean69 = properties62.containsValue((java.lang.Object) int68);
        java.lang.Object obj72 = properties62.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties73 = new java.util.Properties(properties62);
        java.util.Set<java.lang.Object> objSet74 = properties62.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long76 = atomikosProperties75.checkpointInterval;
        java.util.Properties properties77 = atomikosProperties75.asProperties();
        boolean boolean79 = properties77.containsValue((java.lang.Object) 100L);
        java.lang.String str80 = properties77.toString();
        java.lang.Object obj83 = properties77.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties84 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str85 = atomikosProperties84.logBaseDir;
        java.lang.String str86 = atomikosProperties84.logBaseName;
        java.lang.String str87 = atomikosProperties84.getLogBaseDir();
        atomikosProperties84.setMaxActives((int) (byte) -1);
        java.util.Properties properties90 = atomikosProperties84.asProperties();
        boolean boolean91 = properties77.equals((java.lang.Object) atomikosProperties84);
        java.util.Set<java.lang.String> strSet92 = properties77.stringPropertyNames();
        boolean boolean93 = properties10.replace((java.lang.Object) strSet59, (java.lang.Object) properties62, (java.lang.Object) strSet92);
        java.util.Properties properties94 = new java.util.Properties(properties10);
        boolean boolean95 = properties10.isEmpty();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objCollection26);
        org.junit.Assert.assertNotNull(objEntrySet27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objCollection53);
        org.junit.Assert.assertNotNull(objEntrySet54);
        org.junit.Assert.assertNotNull(objEntrySet55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(objEnumeration58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 50 + "'", int68 == 50);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(objSet74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 500L + "'", long76 == 500L);
        org.junit.Assert.assertNotNull(properties77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str80, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "tmlog" + "'", str86, "tmlog");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(properties90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test7473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7473");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.setService("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}" + "'", str13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test7474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7474");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.checkpointInterval = 100L;
        atomikosProperties0.setDefaultJtaTimeout(0L);
        java.util.Properties properties16 = atomikosProperties0.asProperties();
        java.util.Properties properties17 = atomikosProperties0.asProperties();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(properties17);
    }

    @Test
    public void test7475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7475");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        java.lang.String str12 = atomikosProperties0.getService();
        atomikosProperties0.setSerialJtaTransactions(false);
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.transactionManagerUniqueName;
        atomikosProperties16.serialJtaTransactions = true;
        atomikosProperties16.transactionManagerUniqueName = "{com.atomikos.icatch.tmlog=0.0}";
        atomikosProperties16.setForceShutdownOnVmExit(true);
        atomikosProperties16.setMaxTimeout((long) 0);
        java.lang.String str27 = atomikosProperties16.getService();
        atomikosProperties16.setCheckpointInterval((long) (short) 10);
        java.lang.String str30 = atomikosProperties16.getTransactionManagerUniqueName();
        boolean boolean31 = properties15.contains((java.lang.Object) str30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        java.lang.Object obj35 = properties34.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        atomikosProperties36.transactionManagerUniqueName = "";
        atomikosProperties36.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setMaxActives((int) (byte) -1);
        java.lang.String str53 = atomikosProperties47.getService();
        java.lang.Object obj54 = properties34.getOrDefault((java.lang.Object) atomikosProperties36, (java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        int int57 = atomikosProperties55.getMaxActives();
        java.lang.String str58 = atomikosProperties55.logBaseDir;
        java.lang.Object obj60 = properties34.putIfAbsent((java.lang.Object) atomikosProperties55, (java.lang.Object) "");
        int int61 = properties34.size();
        java.util.Collection<java.lang.Object> objCollection62 = properties34.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long64 = atomikosProperties63.checkpointInterval;
        int int65 = atomikosProperties63.getMaxActives();
        java.lang.String str66 = atomikosProperties63.logBaseDir;
        java.lang.String str67 = atomikosProperties63.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.logBaseDir;
        java.lang.String str70 = atomikosProperties68.logBaseName;
        java.lang.String str71 = atomikosProperties68.getLogBaseDir();
        atomikosProperties68.setMaxActives((int) (byte) -1);
        boolean boolean74 = atomikosProperties68.isEnableLogging();
        java.lang.String str75 = atomikosProperties68.getLogBaseName();
        java.lang.Object obj76 = properties34.replace((java.lang.Object) atomikosProperties63, (java.lang.Object) atomikosProperties68);
        atomikosProperties63.checkpointInterval = 100L;
        int int79 = atomikosProperties63.maxActives;
        java.util.Properties properties80 = atomikosProperties63.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet81 = properties80.entrySet();
        java.util.Properties properties82 = new java.util.Properties(properties80);
        boolean boolean83 = properties15.containsKey((java.lang.Object) properties80);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties84 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str85 = atomikosProperties84.logBaseDir;
        java.lang.String str86 = atomikosProperties84.logBaseName;
        java.lang.String str87 = atomikosProperties84.getLogBaseDir();
        atomikosProperties84.setMaxActives((int) (byte) -1);
        boolean boolean90 = atomikosProperties84.isEnableLogging();
        long long91 = atomikosProperties84.checkpointInterval;
        atomikosProperties84.setCheckpointInterval(10L);
        atomikosProperties84.serialJtaTransactions = false;
        long long96 = atomikosProperties84.defaultJtaTimeout;
        long long97 = atomikosProperties84.getMaxTimeout();
        boolean boolean98 = atomikosProperties84.forceShutdownOnVmExit;
        boolean boolean99 = properties80.containsValue((java.lang.Object) boolean98);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{com.atomikos.icatch.tmlog=0.0}" + "'", str30, "{com.atomikos.icatch.tmlog=0.0}");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(objCollection62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 500L + "'", long64 == 500L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 50 + "'", int65 == 50);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "tmlog" + "'", str70, "tmlog");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tmlog" + "'", str75, "tmlog");
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 50 + "'", int79 == 50);
        org.junit.Assert.assertNotNull(properties80);
        org.junit.Assert.assertNotNull(objEntrySet81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "tmlog" + "'", str86, "tmlog");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 500L + "'", long91 == 500L);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 10000L + "'", long96 == 10000L);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 300000L + "'", long97 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test7476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7476");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        java.lang.String str9 = atomikosProperties0.service;
        boolean boolean10 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.service = "hi!";
        long long15 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
    }

    @Test
    public void test7477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7477");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str8 = atomikosProperties0.getLogBaseDir();
        java.lang.String str9 = atomikosProperties0.getLogBaseName();
        java.lang.String str10 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test7478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7478");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        int int9 = atomikosProperties0.maxActives;
        long long10 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str13 = atomikosProperties0.getService();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test7479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7479");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setCheckpointInterval((long) 100);
        long long12 = atomikosProperties0.getCheckpointInterval();
        boolean boolean13 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.enableLogging = true;
        java.lang.String str16 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test7480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7480");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        int int14 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        java.lang.Object obj18 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties30);
        int int38 = properties17.size();
        java.lang.String str39 = properties17.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties17.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.enableLogging = true;
        atomikosProperties41.maxActives = (byte) -1;
        java.lang.Object obj46 = properties2.putIfAbsent((java.lang.Object) properties17, (java.lang.Object) (byte) -1);
        java.lang.String str47 = properties2.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        atomikosProperties48.setService("");
        java.util.Properties properties53 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        java.util.Properties properties57 = atomikosProperties55.asProperties();
        properties57.clear();
        boolean boolean59 = properties57.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        atomikosProperties60.setTransactionManagerUniqueName("");
        int int64 = atomikosProperties60.getMaxActives();
        java.lang.String str65 = atomikosProperties60.transactionManagerUniqueName;
        boolean boolean66 = properties57.containsValue((java.lang.Object) atomikosProperties60);
        boolean boolean67 = atomikosProperties60.forceShutdownOnVmExit;
        atomikosProperties48.set(properties53, "{}", (java.lang.Object) boolean67);
        java.util.Properties properties69 = new java.util.Properties(properties53);
        java.util.Collection<java.lang.Object> objCollection70 = properties69.values();
        java.util.Properties properties71 = new java.util.Properties(properties69);
        boolean boolean72 = properties2.containsValue((java.lang.Object) properties69);
        java.util.Enumeration<?> wildcardEnumeration73 = properties69.propertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str39, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 50 + "'", int64 == 50);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objCollection70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration73);
    }

    @Test
    public void test7481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7481");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval(1L);
        java.lang.String str5 = atomikosProperties0.getService();
        atomikosProperties0.maxActives = 'a';
        long long8 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str9 = atomikosProperties0.getService();
        long long10 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test7482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7482");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        boolean boolean8 = atomikosProperties0.forceShutdownOnVmExit;
        java.lang.String str9 = atomikosProperties0.getService();
        atomikosProperties0.checkpointInterval = (short) 0;
        atomikosProperties0.checkpointInterval = 10;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test7483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7483");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setMaxTimeout(100L);
        java.lang.String str8 = atomikosProperties0.getLogBaseDir();
        long long9 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
    }

    @Test
    public void test7484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7484");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setLogBaseName("{}");
        long long9 = atomikosProperties0.maxTimeout;
        atomikosProperties0.defaultJtaTimeout = 300000L;
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test7485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7485");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.setMaxActives(50);
        atomikosProperties15.setLogBaseName("");
        atomikosProperties15.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties15.setMaxTimeout((long) 32);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
    }

    @Test
    public void test7486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7486");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        java.util.Set<java.lang.String> strSet20 = properties2.stringPropertyNames();
        java.util.Collection<java.lang.Object> objCollection21 = properties2.values();
        java.lang.Class<?> wildcardClass22 = objCollection21.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(objCollection21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test7487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7487");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        boolean boolean8 = properties6.containsValue((java.lang.Object) 100L);
        java.lang.String str9 = properties6.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties6.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        properties13.clear();
        boolean boolean15 = properties13.isEmpty();
        java.util.Collection<java.lang.Object> objCollection16 = properties13.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        atomikosProperties17.setTransactionManagerUniqueName("");
        int int21 = atomikosProperties17.getMaxActives();
        java.lang.String str22 = atomikosProperties17.transactionManagerUniqueName;
        atomikosProperties17.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        properties27.clear();
        java.util.Properties properties29 = new java.util.Properties(properties27);
        atomikosProperties17.set(properties27, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj35 = properties27.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet36 = properties27.stringPropertyNames();
        java.lang.String str38 = properties27.getProperty("hi!");
        java.lang.Object obj39 = properties6.putIfAbsent((java.lang.Object) objCollection16, (java.lang.Object) "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        java.lang.Object obj43 = properties42.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.logBaseDir;
        java.lang.String str46 = atomikosProperties44.logBaseName;
        java.lang.String str47 = atomikosProperties44.getLogBaseDir();
        atomikosProperties44.setMaxActives((int) (byte) -1);
        boolean boolean50 = atomikosProperties44.isEnableLogging();
        atomikosProperties44.transactionManagerUniqueName = "";
        atomikosProperties44.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str56 = atomikosProperties55.logBaseDir;
        java.lang.String str57 = atomikosProperties55.logBaseName;
        java.lang.String str58 = atomikosProperties55.getLogBaseDir();
        atomikosProperties55.setMaxActives((int) (byte) -1);
        java.lang.String str61 = atomikosProperties55.getService();
        java.lang.Object obj62 = properties42.getOrDefault((java.lang.Object) atomikosProperties44, (java.lang.Object) atomikosProperties55);
        int int63 = properties42.size();
        boolean boolean64 = properties6.containsValue((java.lang.Object) properties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        atomikosProperties66.forceShutdownOnVmExit = false;
        atomikosProperties66.threadedTwoPhaseCommit = false;
        int int72 = atomikosProperties66.maxActives;
        atomikosProperties0.set(properties6, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", (java.lang.Object) int72);
        java.util.Properties properties74 = new java.util.Properties();
        boolean boolean75 = properties6.containsValue((java.lang.Object) properties74);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties76.setCheckpointInterval((long) 100);
        boolean boolean79 = atomikosProperties76.isForceShutdownOnVmExit();
        atomikosProperties76.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long82 = atomikosProperties76.getDefaultJtaTimeout();
        long long83 = atomikosProperties76.getMaxTimeout();
        long long84 = atomikosProperties76.getMaxTimeout();
        long long85 = atomikosProperties76.checkpointInterval;
        atomikosProperties76.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean88 = atomikosProperties76.isSerialJtaTransactions();
        long long89 = atomikosProperties76.defaultJtaTimeout;
        boolean boolean90 = properties6.containsValue((java.lang.Object) atomikosProperties76);
        java.lang.Object obj91 = properties6.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str9, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNotNull(obj43);
// flaky:         org.junit.Assert.assertEquals(obj43.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tmlog" + "'", str57, "tmlog");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 300000L + "'", long83 == 300000L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 300000L + "'", long84 == 300000L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 100L + "'", long85 == 100L);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 10000L + "'", long89 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(obj91);
// flaky:         org.junit.Assert.assertEquals(obj91.toString(), "{com.atomikos.icatch.{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}=50, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, []=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "{com.atomikos.icatch.{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}=50, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, []=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "{com.atomikos.icatch.{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}=50, com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, []=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test7488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7488");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setEnableLogging(true);
        java.lang.String str5 = atomikosProperties0.logBaseName;
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 32;
        long long9 = atomikosProperties0.maxTimeout;
        long long10 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
    }

    @Test
    public void test7489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7489");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties2.entrySet();
        int int20 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        atomikosProperties21.forceShutdownOnVmExit = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setDefaultJtaTimeout(500L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) 100);
        boolean boolean36 = atomikosProperties33.isForceShutdownOnVmExit();
        atomikosProperties33.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties33.service = "hi!";
        java.lang.Object obj41 = properties2.put((java.lang.Object) atomikosProperties21, (java.lang.Object) "hi!");
        int int42 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long44 = atomikosProperties43.checkpointInterval;
        atomikosProperties43.forceShutdownOnVmExit = false;
        boolean boolean47 = atomikosProperties43.isSerialJtaTransactions();
        atomikosProperties43.setThreadedTwoPhaseCommit(false);
        java.util.Properties properties50 = atomikosProperties43.asProperties();
        java.util.Enumeration<?> wildcardEnumeration51 = properties50.propertyNames();
        boolean boolean52 = properties2.equals((java.lang.Object) wildcardEnumeration51);
        java.io.Reader reader53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(reader53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(wildcardEnumeration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test7490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7490");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        java.lang.String str23 = atomikosProperties15.service;
        long long24 = atomikosProperties15.maxTimeout;
        long long25 = atomikosProperties15.getMaxTimeout();
        java.lang.String str26 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.forceShutdownOnVmExit = false;
        atomikosProperties15.checkpointInterval = 35L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 300000L + "'", long24 == 300000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test7491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7491");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.forceShutdownOnVmExit;
        atomikosProperties36.serialJtaTransactions = false;
        atomikosProperties36.setMaxTimeout(10000L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test7492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7492");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        java.lang.String str3 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 'a';
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setMaxActives(10);
        boolean boolean12 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long13 = atomikosProperties0.getMaxTimeout();
        java.lang.String str14 = atomikosProperties0.getService();
        atomikosProperties0.setLogBaseDir("{}");
        java.lang.String str17 = atomikosProperties0.service;
        int int18 = atomikosProperties0.maxActives;
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test7493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7493");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        java.lang.String str8 = atomikosProperties6.logBaseName;
        java.lang.String str9 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setMaxActives((int) (byte) -1);
        boolean boolean12 = atomikosProperties6.isEnableLogging();
        atomikosProperties6.transactionManagerUniqueName = "";
        atomikosProperties6.setEnableLogging(false);
        boolean boolean17 = atomikosProperties6.isEnableLogging();
        atomikosProperties6.maxActives = 1;
        java.util.Properties properties20 = atomikosProperties6.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        boolean boolean28 = atomikosProperties21.threadedTwoPhaseCommit;
        java.lang.String str29 = atomikosProperties21.logBaseDir;
        atomikosProperties21.enableLogging = false;
        java.lang.Object obj32 = properties2.getOrDefault((java.lang.Object) atomikosProperties6, (java.lang.Object) false);
        long long33 = atomikosProperties6.defaultJtaTimeout;
        java.lang.String str34 = atomikosProperties6.getLogBaseName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + false + "'", obj32, false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
    }

    @Test
    public void test7494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7494");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval(1L);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setEnableLogging(false);
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertNotNull(properties12);
    }

    @Test
    public void test7495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7495");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        java.util.Set<java.lang.Object> objSet6 = properties2.keySet();
        java.util.Enumeration<?> wildcardEnumeration7 = properties2.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.transactionManagerUniqueName;
        boolean boolean11 = atomikosProperties8.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        int int35 = properties14.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        boolean boolean41 = atomikosProperties37.isSerialJtaTransactions();
        atomikosProperties37.serialJtaTransactions = true;
        java.lang.String str44 = atomikosProperties37.getService();
        atomikosProperties8.set(properties14, "hi!", (java.lang.Object) str44);
        atomikosProperties8.checkpointInterval = (short) 0;
        boolean boolean48 = properties2.equals((java.lang.Object) (short) 0);
        java.lang.Object obj49 = null;
        boolean boolean50 = properties2.equals(obj49);
        boolean boolean51 = properties2.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test7496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7496");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.setCheckpointInterval(0L);
        atomikosProperties0.setMaxActives((int) (byte) 1);
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setLogBaseDir("tmlog");
        boolean boolean20 = atomikosProperties0.isEnableLogging();
        java.lang.String str21 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean22 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str21, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test7497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7497");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.checkpointInterval = (-1L);
        java.lang.String str9 = atomikosProperties0.getLogBaseDir();
        long long10 = atomikosProperties0.maxTimeout;
        java.lang.String str11 = atomikosProperties0.getService();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test7498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7498");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.serialJtaTransactions = true;
        boolean boolean9 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean14 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test7499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7499");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet19 = properties10.stringPropertyNames();
        java.lang.String str21 = properties10.getProperty("hi!");
        java.lang.Object obj22 = properties10.clone();
        properties10.clear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
    }

    @Test
    public void test7500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test7500");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.util.Properties properties16 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        properties19.clear();
        boolean boolean21 = properties19.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        atomikosProperties22.setTransactionManagerUniqueName("");
        int int26 = atomikosProperties22.getMaxActives();
        java.lang.String str27 = atomikosProperties22.transactionManagerUniqueName;
        boolean boolean28 = properties19.containsValue((java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        properties31.clear();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        java.lang.Object obj36 = properties33.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str37 = properties33.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        boolean boolean40 = atomikosProperties38.isSerialJtaTransactions();
        atomikosProperties38.maxTimeout = 100;
        int int43 = atomikosProperties38.getMaxActives();
        java.lang.Object obj44 = properties19.replace((java.lang.Object) properties33, (java.lang.Object) int43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        properties48.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        atomikosProperties50.setTransactionManagerUniqueName("");
        int int54 = atomikosProperties50.getMaxActives();
        boolean boolean55 = properties48.containsValue((java.lang.Object) int54);
        java.lang.Object obj58 = properties48.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties59 = new java.util.Properties(properties48);
        int int60 = properties48.size();
        java.lang.Object obj61 = properties19.putIfAbsent((java.lang.Object) (-1), (java.lang.Object) int60);
        java.lang.String str62 = properties19.toString();
        java.lang.Object obj65 = properties19.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        boolean boolean72 = atomikosProperties66.isEnableLogging();
        long long73 = atomikosProperties66.checkpointInterval;
        atomikosProperties66.setCheckpointInterval(10L);
        boolean boolean76 = atomikosProperties66.isForceShutdownOnVmExit();
        atomikosProperties66.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean79 = atomikosProperties66.forceShutdownOnVmExit;
        long long80 = atomikosProperties66.getCheckpointInterval();
        boolean boolean81 = atomikosProperties66.enableLogging;
        java.lang.Object obj82 = properties10.putIfAbsent((java.lang.Object) "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties66);
        java.util.Enumeration<java.lang.Object> objEnumeration83 = properties10.keys();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj36, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{}" + "'", str37, "{}");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{-1=1}" + "'", str62, "{-1=1}");
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 500L + "'", long73 == 500L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10L + "'", long80 == 10L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(objEnumeration83);
    }
}
