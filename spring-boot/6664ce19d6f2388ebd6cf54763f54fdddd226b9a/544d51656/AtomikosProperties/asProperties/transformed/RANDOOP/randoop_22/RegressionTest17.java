import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest17 {

    public static boolean debug = false;

    @Test
    public void test8501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8501");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        atomikosProperties9.setLogBaseDir("{}");
        atomikosProperties9.setCheckpointInterval(500L);
        atomikosProperties9.threadedTwoPhaseCommit = true;
        atomikosProperties9.setEnableLogging(false);
        long long29 = atomikosProperties9.getDefaultJtaTimeout();
        atomikosProperties9.threadedTwoPhaseCommit = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
    }

    @Test
    public void test8502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8502");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet19 = properties10.stringPropertyNames();
        java.lang.String str21 = properties10.getProperty("hi!");
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties10.keys();
        java.lang.String str24 = properties10.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean25 = properties10.isEmpty();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test8503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8503");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setLogBaseDir("hi!");
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setForceShutdownOnVmExit(false);
        boolean boolean12 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.Class<?> wildcardClass13 = atomikosProperties0.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test8504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8504");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        java.util.Collection<java.lang.Object> objCollection57 = properties17.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        properties60.clear();
        java.util.Properties properties62 = new java.util.Properties(properties60);
        java.lang.Object obj65 = properties62.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str66 = properties62.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.logBaseDir;
        java.lang.String str69 = atomikosProperties67.logBaseName;
        java.lang.String str70 = atomikosProperties67.getLogBaseDir();
        atomikosProperties67.setMaxActives((int) (byte) -1);
        boolean boolean73 = atomikosProperties67.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties74.setCheckpointInterval((long) 100);
        boolean boolean77 = atomikosProperties74.isForceShutdownOnVmExit();
        java.lang.Object obj78 = properties62.putIfAbsent((java.lang.Object) atomikosProperties67, (java.lang.Object) boolean77);
        java.util.Set<java.lang.String> strSet79 = properties62.stringPropertyNames();
        boolean boolean80 = properties17.equals((java.lang.Object) properties62);
        java.lang.String str81 = properties17.toString();
        java.util.Properties properties82 = new java.util.Properties(properties17);
        java.io.InputStream inputStream83 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.load(inputStream83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertEquals("'" + obj65 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj65, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{}" + "'", str66, "{}");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str81, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8505");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        java.util.Properties properties10 = new java.util.Properties(properties8);
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str14 = properties10.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        boolean boolean21 = atomikosProperties15.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setCheckpointInterval((long) 100);
        boolean boolean25 = atomikosProperties22.isForceShutdownOnVmExit();
        java.lang.Object obj26 = properties10.putIfAbsent((java.lang.Object) atomikosProperties15, (java.lang.Object) boolean25);
        java.util.Set<java.lang.String> strSet27 = properties10.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet28 = properties10.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        int int31 = atomikosProperties29.getMaxActives();
        atomikosProperties29.setCheckpointInterval(1L);
        long long34 = atomikosProperties29.getMaxTimeout();
        java.lang.Object obj35 = properties10.get((java.lang.Object) atomikosProperties29);
        java.lang.Object obj36 = properties2.remove((java.lang.Object) properties10);
        boolean boolean37 = properties10.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        atomikosProperties38.setTransactionManagerUniqueName("");
        int int42 = atomikosProperties38.getMaxActives();
        atomikosProperties38.logBaseName = "tmlog";
        long long45 = atomikosProperties38.checkpointInterval;
        atomikosProperties38.logBaseDir = "";
        long long48 = atomikosProperties38.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.transactionManagerUniqueName;
        boolean boolean52 = atomikosProperties49.enableLogging;
        atomikosProperties49.setCheckpointInterval((long) 100);
        int int55 = atomikosProperties49.getMaxActives();
        long long56 = atomikosProperties49.getDefaultJtaTimeout();
        long long57 = atomikosProperties49.maxTimeout;
        java.lang.Object obj58 = properties10.put((java.lang.Object) long48, (java.lang.Object) long57);
        java.util.Collection<java.lang.Object> objCollection59 = properties10.values();
        java.util.Properties properties60 = new java.util.Properties(properties10);
        properties10.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 300000L + "'", long34 == 300000L);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 50 + "'", int55 == 50);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 300000L + "'", long57 == 300000L);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objCollection59);
    }

    @Test
    public void test8506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8506");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.service = "";
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str11 = atomikosProperties0.getLogBaseDir();
        java.lang.String str12 = atomikosProperties0.getLogBaseDir();
        boolean boolean13 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str11, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str12, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test8507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8507");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.logBaseDir = "";
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.checkpointInterval = '4';
        boolean boolean14 = atomikosProperties0.isEnableLogging();
        long long15 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean18 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str19 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8508");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.lang.Object obj15 = properties2.remove((java.lang.Object) atomikosProperties13);
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        java.lang.Object obj17 = properties2.clone();
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.save(outputStream19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{}");
        org.junit.Assert.assertNotNull(objCollection18);
    }

    @Test
    public void test8509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8509");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        java.lang.String str29 = atomikosProperties13.transactionManagerUniqueName;
        java.lang.String str30 = atomikosProperties13.getLogBaseDir();
        boolean boolean31 = atomikosProperties13.isSerialJtaTransactions();
        boolean boolean32 = atomikosProperties13.serialJtaTransactions;
        long long33 = atomikosProperties13.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
    }

    @Test
    public void test8510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8510");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        boolean boolean48 = atomikosProperties36.forceShutdownOnVmExit;
        atomikosProperties36.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties36.transactionManagerUniqueName = "";
        java.lang.String str53 = atomikosProperties36.getLogBaseDir();
        boolean boolean54 = atomikosProperties36.isForceShutdownOnVmExit();
        atomikosProperties36.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean57 = atomikosProperties36.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test8511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8511");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.transactionManagerUniqueName = "{}";
        atomikosProperties0.setSerialJtaTransactions(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        boolean boolean16 = properties14.isEmpty();
        java.lang.Object obj17 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        properties20.clear();
        boolean boolean22 = properties20.isEmpty();
        java.util.Collection<java.lang.Object> objCollection23 = properties20.values();
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties20);
        java.util.Enumeration<?> wildcardEnumeration25 = properties14.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration26 = properties14.keys();
        java.util.Collection<java.lang.Object> objCollection27 = properties14.values();
        properties14.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setMaxActives((int) (byte) -1);
        java.util.Properties properties35 = atomikosProperties29.asProperties();
        java.lang.String str36 = atomikosProperties29.getService();
        long long37 = atomikosProperties29.checkpointInterval;
        boolean boolean38 = properties14.contains((java.lang.Object) long37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) 100);
        boolean boolean43 = atomikosProperties40.isForceShutdownOnVmExit();
        atomikosProperties40.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties40.service = "hi!";
        long long48 = atomikosProperties40.getMaxTimeout();
        atomikosProperties40.setMaxTimeout(10000L);
        atomikosProperties40.threadedTwoPhaseCommit = true;
        java.lang.String str53 = atomikosProperties40.getLogBaseDir();
        atomikosProperties0.set(properties14, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties40);
        properties14.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{}");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNotNull(wildcardEnumeration25);
        org.junit.Assert.assertNotNull(objEnumeration26);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 300000L + "'", long48 == 300000L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str53, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8512");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.maxActives = (byte) -1;
        boolean boolean5 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.setMaxActives(1);
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test8513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8513");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties2.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties2.entrySet();
        java.lang.String str22 = properties2.getProperty("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        properties25.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        atomikosProperties27.setTransactionManagerUniqueName("");
        int int31 = atomikosProperties27.getMaxActives();
        boolean boolean32 = properties25.containsValue((java.lang.Object) int31);
        java.lang.Object obj35 = properties25.setProperty("", "");
        java.util.Properties properties36 = new java.util.Properties(properties25);
        java.util.Enumeration<java.lang.Object> objEnumeration37 = properties25.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = atomikosProperties44.isForceShutdownOnVmExit();
        atomikosProperties44.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean50 = properties43.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.enableLogging = true;
        boolean boolean55 = properties40.replace((java.lang.Object) boolean50, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection56 = properties40.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet57 = properties40.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet58 = properties40.entrySet();
        java.lang.String str60 = properties40.getProperty("hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet61 = properties40.entrySet();
        boolean boolean62 = properties25.containsKey((java.lang.Object) objEntrySet61);
        java.util.Enumeration<java.lang.Object> objEnumeration63 = properties25.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long65 = atomikosProperties64.checkpointInterval;
        atomikosProperties64.forceShutdownOnVmExit = false;
        atomikosProperties64.threadedTwoPhaseCommit = false;
        atomikosProperties64.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties64.threadedTwoPhaseCommit = false;
        java.lang.String str74 = atomikosProperties64.transactionManagerUniqueName;
        atomikosProperties64.maxActives = ' ';
        java.lang.Object obj77 = properties2.replace((java.lang.Object) objEnumeration63, (java.lang.Object) atomikosProperties64);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objEnumeration37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objCollection56);
        org.junit.Assert.assertNotNull(objEntrySet57);
        org.junit.Assert.assertNotNull(objEntrySet58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(objEntrySet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objEnumeration63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 500L + "'", long65 == 500L);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str74, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj77);
    }

    @Test
    public void test8514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8514");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.logBaseName = "";
        atomikosProperties0.transactionManagerUniqueName = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}";
        atomikosProperties0.logBaseName = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test8515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8515");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection6 = properties2.values();
        java.util.Collection<java.lang.Object> objCollection7 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        boolean boolean12 = properties10.isEmpty();
        java.lang.Object obj13 = properties10.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Enumeration<?> wildcardEnumeration21 = properties16.propertyNames();
        java.util.Properties properties22 = new java.util.Properties(properties16);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        int int24 = properties2.size();
        java.io.PrintWriter printWriter25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printWriter25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(wildcardEnumeration21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
    }

    @Test
    public void test8516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8516");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.setMaxActives(50);
        long long25 = atomikosProperties15.getCheckpointInterval();
        int int26 = atomikosProperties15.maxActives;
        java.lang.String str27 = atomikosProperties15.getLogBaseDir();
        boolean boolean28 = atomikosProperties15.isSerialJtaTransactions();
        long long29 = atomikosProperties15.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
    }

    @Test
    public void test8517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8517");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        java.lang.String str5 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean9 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str10 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
    }

    @Test
    public void test8518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8518");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        int int5 = properties4.size();
        boolean boolean6 = properties4.isEmpty();
        java.util.Collection<java.lang.Object> objCollection7 = properties4.values();
        java.lang.String str8 = properties4.toString();
        int int9 = properties4.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        java.util.Properties properties12 = atomikosProperties10.asProperties();
        java.lang.Object obj13 = properties12.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        atomikosProperties14.setMaxActives((int) (byte) -1);
        boolean boolean20 = atomikosProperties14.isEnableLogging();
        atomikosProperties14.transactionManagerUniqueName = "";
        atomikosProperties14.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        java.lang.String str31 = atomikosProperties25.getService();
        java.lang.Object obj32 = properties12.getOrDefault((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        int int35 = atomikosProperties33.getMaxActives();
        java.lang.String str36 = atomikosProperties33.logBaseDir;
        java.lang.Object obj38 = properties12.putIfAbsent((java.lang.Object) atomikosProperties33, (java.lang.Object) "");
        int int39 = properties12.size();
        java.util.Collection<java.lang.Object> objCollection40 = properties12.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        int int43 = atomikosProperties41.getMaxActives();
        java.lang.String str44 = atomikosProperties41.logBaseDir;
        java.lang.String str45 = atomikosProperties41.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        boolean boolean52 = atomikosProperties46.isEnableLogging();
        java.lang.String str53 = atomikosProperties46.getLogBaseName();
        java.lang.Object obj54 = properties12.replace((java.lang.Object) atomikosProperties41, (java.lang.Object) atomikosProperties46);
        atomikosProperties41.threadedTwoPhaseCommit = true;
        atomikosProperties41.service = "tmlog";
        boolean boolean59 = atomikosProperties41.isForceShutdownOnVmExit();
        java.lang.String str60 = atomikosProperties41.getLogBaseDir();
        boolean boolean61 = atomikosProperties41.isForceShutdownOnVmExit();
        atomikosProperties41.logBaseDir = "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean64 = properties4.contains((java.lang.Object) "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(objCollection40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test8519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8519");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.defaultJtaTimeout = (byte) -1;
        atomikosProperties0.setMaxTimeout(50L);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test8520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8520");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.enableLogging = true;
        java.lang.String str13 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.maxActives = (byte) 10;
        boolean boolean16 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setDefaultJtaTimeout(1L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test8521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8521");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        java.lang.String str8 = atomikosProperties6.logBaseName;
        java.lang.String str9 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setMaxActives((int) (byte) -1);
        boolean boolean12 = atomikosProperties6.isEnableLogging();
        atomikosProperties6.transactionManagerUniqueName = "";
        atomikosProperties6.setEnableLogging(false);
        boolean boolean17 = atomikosProperties6.isEnableLogging();
        atomikosProperties6.maxActives = 1;
        java.util.Properties properties20 = atomikosProperties6.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        boolean boolean28 = atomikosProperties21.threadedTwoPhaseCommit;
        java.lang.String str29 = atomikosProperties21.logBaseDir;
        atomikosProperties21.enableLogging = false;
        java.lang.Object obj32 = properties2.getOrDefault((java.lang.Object) atomikosProperties6, (java.lang.Object) false);
        atomikosProperties6.setEnableLogging(false);
        atomikosProperties6.forceShutdownOnVmExit = true;
        atomikosProperties6.maxTimeout = '4';
        atomikosProperties6.setTransactionManagerUniqueName("{false=true}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + false + "'", obj32, false);
    }

    @Test
    public void test8522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8522");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 1);
        long long6 = atomikosProperties0.getCheckpointInterval();
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxTimeout((long) (byte) 0);
        atomikosProperties0.logBaseName = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}";
        boolean boolean12 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8523");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setLogBaseName("{}");
        long long9 = atomikosProperties0.maxTimeout;
        atomikosProperties0.defaultJtaTimeout = 300000L;
        java.util.Properties properties12 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties12.store(outputStream13, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertNotNull(properties12);
    }

    @Test
    public void test8524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8524");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        boolean boolean23 = atomikosProperties4.isForceShutdownOnVmExit();
        boolean boolean24 = atomikosProperties4.forceShutdownOnVmExit;
        atomikosProperties4.maxActives = ' ';
        atomikosProperties4.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}";
        atomikosProperties4.setDefaultJtaTimeout((long) (byte) -1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test8525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8525");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        java.lang.String str20 = atomikosProperties12.getTransactionManagerUniqueName();
        atomikosProperties12.setService("tmlog");
        long long23 = atomikosProperties12.getCheckpointInterval();
        long long24 = atomikosProperties12.maxTimeout;
        atomikosProperties12.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L + "'", long23 == 100L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 300000L + "'", long24 == 300000L);
    }

    @Test
    public void test8526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8526");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.maxActives = (byte) -1;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        long long8 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str9 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
    }

    @Test
    public void test8527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8527");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        java.lang.Object obj29 = properties28.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        long long37 = atomikosProperties30.defaultJtaTimeout;
        java.lang.String str38 = atomikosProperties30.logBaseName;
        boolean boolean39 = properties2.remove(obj29, (java.lang.Object) atomikosProperties30);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        atomikosProperties41.setMaxActives((int) (byte) -1);
        boolean boolean47 = atomikosProperties41.isEnableLogging();
        atomikosProperties41.transactionManagerUniqueName = "";
        atomikosProperties41.setEnableLogging(false);
        boolean boolean52 = atomikosProperties41.isEnableLogging();
        atomikosProperties41.maxActives = 1;
        boolean boolean55 = atomikosProperties41.isForceShutdownOnVmExit();
        boolean boolean56 = properties2.containsKey((java.lang.Object) boolean55);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        java.lang.String str59 = atomikosProperties57.logBaseName;
        atomikosProperties57.setService("");
        boolean boolean62 = atomikosProperties57.threadedTwoPhaseCommit;
        int int63 = atomikosProperties57.getMaxActives();
        boolean boolean64 = atomikosProperties57.isEnableLogging();
        long long65 = atomikosProperties57.getCheckpointInterval();
        boolean boolean66 = properties2.equals((java.lang.Object) atomikosProperties57);
        java.lang.String str67 = properties2.toString();
        java.lang.Object obj70 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Object obj73 = properties2.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        java.lang.Object obj76 = properties2.setProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{=}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(obj29);
// flaky:         org.junit.Assert.assertEquals(obj29.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 50 + "'", int63 == 50);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 500L + "'", long65 == 500L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str67, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(obj76);
    }

    @Test
    public void test8528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8528");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        long long8 = atomikosProperties0.getMaxTimeout();
        long long9 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.enableLogging = false;
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test8529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8529");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.setLogBaseName("hi!");
        atomikosProperties31.setLogBaseName("{com.atomikos.icatch.tmlog=0.0}");
        atomikosProperties31.setLogBaseName("{}");
        java.lang.String str51 = atomikosProperties31.getLogBaseDir();
        int int52 = atomikosProperties31.maxActives;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
    }

    @Test
    public void test8530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8530");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.lang.String str12 = atomikosProperties0.logBaseName;
        atomikosProperties0.logBaseDir = "hi!";
        java.lang.String str15 = atomikosProperties0.logBaseDir;
        atomikosProperties0.defaultJtaTimeout = 100L;
        long long18 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
    }

    @Test
    public void test8531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8531");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties2.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties2.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet15 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        int int18 = atomikosProperties16.getMaxActives();
        atomikosProperties16.setEnableLogging(true);
        boolean boolean21 = properties2.containsValue((java.lang.Object) atomikosProperties16);
        boolean boolean22 = atomikosProperties16.isThreadedTwoPhaseCommit();
        atomikosProperties16.threadedTwoPhaseCommit = false;
        long long25 = atomikosProperties16.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objEntrySet15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
    }

    @Test
    public void test8532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8532");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.checkpointInterval = 100L;
        int int47 = atomikosProperties31.maxActives;
        java.util.Properties properties48 = atomikosProperties31.asProperties();
        java.util.Set<java.lang.String> strSet49 = properties48.stringPropertyNames();
        java.lang.String str50 = properties48.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNotNull(strSet49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str50, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8533");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = 1;
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.transactionManagerUniqueName = "{}";
        atomikosProperties0.setService("{}");
        atomikosProperties0.maxActives = 100;
        boolean boolean21 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test8534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8534");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        java.lang.String str23 = atomikosProperties15.service;
        long long24 = atomikosProperties15.maxTimeout;
        long long25 = atomikosProperties15.getMaxTimeout();
        atomikosProperties15.transactionManagerUniqueName = "";
        atomikosProperties15.setEnableLogging(true);
        java.lang.String str30 = atomikosProperties15.transactionManagerUniqueName;
        boolean boolean31 = atomikosProperties15.isEnableLogging();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 300000L + "'", long24 == 300000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test8535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8535");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str5 = atomikosProperties0.logBaseName;
        long long6 = atomikosProperties0.getMaxTimeout();
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean8 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean11 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setDefaultJtaTimeout(0L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8536");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.enableLogging = true;
        atomikosProperties14.maxActives = (byte) -1;
        boolean boolean19 = atomikosProperties14.isForceShutdownOnVmExit();
        boolean boolean20 = properties8.containsValue((java.lang.Object) atomikosProperties14);
        java.lang.String str21 = properties8.toString();
        java.lang.Object obj22 = null;
        boolean boolean23 = properties8.equals(obj22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.logBaseDir;
        java.lang.String str26 = atomikosProperties24.logBaseName;
        atomikosProperties24.setService("");
        long long29 = atomikosProperties24.getDefaultJtaTimeout();
        atomikosProperties24.setDefaultJtaTimeout((long) (byte) 10);
        atomikosProperties24.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.lang.String str36 = atomikosProperties34.service;
        atomikosProperties34.setService("tmlog");
        atomikosProperties34.setLogBaseName("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        properties43.clear();
        boolean boolean45 = properties43.isEmpty();
        int int46 = properties43.size();
        java.util.Set<java.lang.String> strSet47 = properties43.stringPropertyNames();
        boolean boolean48 = properties8.replace((java.lang.Object) atomikosProperties24, (java.lang.Object) atomikosProperties34, (java.lang.Object) strSet47);
        boolean boolean49 = atomikosProperties34.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{}" + "'", str21, "{}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10000L + "'", long29 == 10000L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test8537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8537");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        boolean boolean4 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean6 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test8538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8538");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setTransactionManagerUniqueName("");
        atomikosProperties6.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass16 = atomikosProperties6.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        int int19 = atomikosProperties17.getMaxActives();
        java.lang.String str20 = atomikosProperties17.transactionManagerUniqueName;
        long long21 = atomikosProperties17.getCheckpointInterval();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        atomikosProperties27.transactionManagerUniqueName = "";
        atomikosProperties27.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        java.lang.Object obj45 = properties25.getOrDefault((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        int int48 = atomikosProperties46.getMaxActives();
        java.lang.String str49 = atomikosProperties46.logBaseDir;
        java.lang.Object obj51 = properties25.putIfAbsent((java.lang.Object) atomikosProperties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        atomikosProperties52.setService("");
        boolean boolean57 = atomikosProperties52.threadedTwoPhaseCommit;
        java.lang.String str58 = atomikosProperties52.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        boolean boolean63 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.serialJtaTransactions = true;
        java.lang.String str66 = atomikosProperties59.getService();
        java.lang.Object obj67 = properties25.putIfAbsent((java.lang.Object) str58, (java.lang.Object) atomikosProperties59);
        boolean boolean68 = properties3.replace((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties59);
        atomikosProperties17.setSerialJtaTransactions(true);
        atomikosProperties17.setLogBaseDir("");
        atomikosProperties17.setDefaultJtaTimeout(100L);
        boolean boolean75 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test8539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8539");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet21 = properties4.entrySet();
        java.util.Set<java.lang.String> strSet22 = properties4.stringPropertyNames();
        properties4.clear();
        java.lang.String str25 = properties4.getProperty("{com.atomikos.icatch.tmlog=0.0}");
        java.util.Set<java.lang.String> strSet26 = properties4.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setCheckpointInterval((long) 100);
        boolean boolean30 = atomikosProperties27.isForceShutdownOnVmExit();
        atomikosProperties27.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long33 = atomikosProperties27.getDefaultJtaTimeout();
        long long34 = atomikosProperties27.getMaxTimeout();
        atomikosProperties27.logBaseName = "tmlog";
        long long37 = atomikosProperties27.getDefaultJtaTimeout();
        long long38 = atomikosProperties27.defaultJtaTimeout;
        atomikosProperties27.checkpointInterval = (byte) 1;
        atomikosProperties27.threadedTwoPhaseCommit = false;
        atomikosProperties27.setTransactionManagerUniqueName("tmlog");
        atomikosProperties27.setMaxTimeout((long) 9);
        java.util.Properties properties47 = atomikosProperties27.asProperties();
        java.lang.Object obj48 = null;
        java.lang.Object obj49 = properties4.getOrDefault((java.lang.Object) properties47, obj48);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objEntrySet21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 300000L + "'", long34 == 300000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test8540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8540");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        java.lang.String str12 = atomikosProperties0.getService();
        atomikosProperties0.setSerialJtaTransactions(false);
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        boolean boolean17 = atomikosProperties0.enableLogging;
        java.lang.String str18 = atomikosProperties0.getLogBaseDir();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean23 = properties21.containsValue((java.lang.Object) 100L);
        java.lang.String str24 = properties21.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        boolean boolean31 = atomikosProperties25.isEnableLogging();
        atomikosProperties25.transactionManagerUniqueName = "";
        atomikosProperties25.setEnableLogging(false);
        boolean boolean36 = atomikosProperties25.isEnableLogging();
        atomikosProperties25.maxActives = 1;
        java.util.Properties properties39 = atomikosProperties25.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        atomikosProperties40.setTransactionManagerUniqueName("");
        int int44 = atomikosProperties40.getMaxActives();
        java.lang.String str45 = atomikosProperties40.getLogBaseDir();
        java.lang.String str46 = atomikosProperties40.logBaseName;
        boolean boolean47 = atomikosProperties40.threadedTwoPhaseCommit;
        java.lang.String str48 = atomikosProperties40.logBaseDir;
        atomikosProperties40.enableLogging = false;
        java.lang.Object obj51 = properties21.getOrDefault((java.lang.Object) atomikosProperties25, (java.lang.Object) false);
        atomikosProperties25.setEnableLogging(false);
        java.util.Properties properties54 = atomikosProperties25.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        java.lang.String str58 = atomikosProperties56.logBaseName;
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        atomikosProperties56.setMaxActives((int) (byte) -1);
        java.lang.String str62 = atomikosProperties56.getService();
        atomikosProperties56.setDefaultJtaTimeout((long) (-1));
        int int65 = atomikosProperties56.maxActives;
        long long66 = atomikosProperties56.maxTimeout;
        java.lang.String str67 = atomikosProperties56.getService();
        atomikosProperties56.maxActives = (byte) 0;
        java.util.Properties properties70 = atomikosProperties56.asProperties();
        java.lang.String str71 = properties70.toString();
        int int72 = properties70.size();
        atomikosProperties0.set(properties54, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) properties70);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str24, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + false + "'", obj51, false);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 300000L + "'", long66 == 300000L);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(properties70);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}" + "'", str71, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
    }

    @Test
    public void test8541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8541");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setDefaultJtaTimeout((long) 50);
        boolean boolean16 = properties9.contains((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        atomikosProperties17.setService("");
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        boolean boolean36 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties17.set(properties22, "{}", (java.lang.Object) boolean36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        boolean boolean42 = properties40.containsValue((java.lang.Object) 100L);
        java.lang.String str43 = properties40.toString();
        java.lang.Object obj44 = properties9.put((java.lang.Object) "{}", (java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        java.lang.Object obj48 = properties47.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        boolean boolean55 = atomikosProperties49.isEnableLogging();
        atomikosProperties49.transactionManagerUniqueName = "";
        atomikosProperties49.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        atomikosProperties60.setMaxActives((int) (byte) -1);
        java.lang.String str66 = atomikosProperties60.getService();
        java.lang.Object obj67 = properties47.getOrDefault((java.lang.Object) atomikosProperties49, (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        int int70 = atomikosProperties68.getMaxActives();
        java.lang.String str71 = atomikosProperties68.logBaseDir;
        java.lang.Object obj73 = properties47.putIfAbsent((java.lang.Object) atomikosProperties68, (java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet74 = properties47.keySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet75 = properties47.entrySet();
        java.lang.Object obj76 = properties40.remove((java.lang.Object) properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long78 = atomikosProperties77.checkpointInterval;
        java.util.Properties properties79 = atomikosProperties77.asProperties();
        properties79.clear();
        java.util.Properties properties81 = new java.util.Properties(properties79);
        int int82 = properties81.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long84 = atomikosProperties83.checkpointInterval;
        java.util.Properties properties85 = atomikosProperties83.asProperties();
        properties85.clear();
        boolean boolean87 = properties85.isEmpty();
        java.util.Collection<java.lang.Object> objCollection88 = properties85.values();
        boolean boolean89 = properties81.containsKey((java.lang.Object) objCollection88);
        java.util.Properties properties90 = new java.util.Properties(properties81);
        java.util.Set<java.lang.String> strSet91 = properties81.stringPropertyNames();
        java.lang.Object obj92 = properties47.remove((java.lang.Object) properties81);
        properties81.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 50 + "'", int70 == 50);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(objSet74);
        org.junit.Assert.assertNotNull(objEntrySet75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 500L + "'", long78 == 500L);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertNotNull(properties85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objCollection88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test8542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8542");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setLogBaseName("");
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.service = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
    }

    @Test
    public void test8543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8543");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.enableLogging;
        atomikosProperties0.setTransactionManagerUniqueName("{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        boolean boolean10 = atomikosProperties0.enableLogging;
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test8544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8544");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setDefaultJtaTimeout((long) '#');
        java.lang.String str10 = atomikosProperties0.getService();
        java.lang.String str11 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.maxTimeout = 0L;
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test8545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8545");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long6 = atomikosProperties0.getMaxTimeout();
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        long long8 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setMaxActives((int) (short) -1);
        java.lang.String str12 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
    }

    @Test
    public void test8546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8546");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.threadedTwoPhaseCommit = true;
        atomikosProperties31.service = "tmlog";
        java.lang.String str49 = atomikosProperties31.logBaseName;
        atomikosProperties31.setForceShutdownOnVmExit(false);
        boolean boolean52 = atomikosProperties31.isThreadedTwoPhaseCommit();
        atomikosProperties31.maxTimeout = 0L;
        boolean boolean55 = atomikosProperties31.isSerialJtaTransactions();
        atomikosProperties31.defaultJtaTimeout = 0L;
        atomikosProperties31.forceShutdownOnVmExit = true;
        java.lang.String str60 = atomikosProperties31.getTransactionManagerUniqueName();
        java.lang.String str61 = atomikosProperties31.getLogBaseDir();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test8547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8547");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.checkpointInterval = (short) 0;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test8548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8548");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.storeToXML(outputStream8, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}", "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(properties7);
    }

    @Test
    public void test8549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8549");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.maxActives = '4';
        boolean boolean48 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean49 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        boolean boolean52 = atomikosProperties0.isEnableLogging();
        boolean boolean53 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test8550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8550");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        java.lang.Object obj16 = properties15.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setMaxActives((int) (byte) -1);
        boolean boolean23 = atomikosProperties17.isEnableLogging();
        atomikosProperties17.transactionManagerUniqueName = "";
        atomikosProperties17.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        java.lang.String str30 = atomikosProperties28.logBaseName;
        java.lang.String str31 = atomikosProperties28.getLogBaseDir();
        atomikosProperties28.setMaxActives((int) (byte) -1);
        java.lang.String str34 = atomikosProperties28.getService();
        java.lang.Object obj35 = properties15.getOrDefault((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        int int38 = atomikosProperties36.getMaxActives();
        java.lang.String str39 = atomikosProperties36.logBaseDir;
        java.lang.Object obj41 = properties15.putIfAbsent((java.lang.Object) atomikosProperties36, (java.lang.Object) "");
        int int42 = properties15.size();
        java.util.Collection<java.lang.Object> objCollection43 = properties15.values();
        boolean boolean45 = properties2.remove((java.lang.Object) properties15, (java.lang.Object) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setCheckpointInterval((long) 100);
        java.lang.String str49 = atomikosProperties46.getService();
        atomikosProperties46.defaultJtaTimeout = 'a';
        atomikosProperties46.enableLogging = false;
        atomikosProperties46.threadedTwoPhaseCommit = false;
        atomikosProperties46.setMaxActives(10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.logBaseDir;
        atomikosProperties58.setTransactionManagerUniqueName("");
        int int62 = atomikosProperties58.getMaxActives();
        java.lang.String str63 = atomikosProperties58.transactionManagerUniqueName;
        atomikosProperties58.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        properties68.clear();
        java.util.Properties properties70 = new java.util.Properties(properties68);
        atomikosProperties58.set(properties68, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj76 = properties68.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet77 = properties68.stringPropertyNames();
        boolean boolean78 = properties2.remove((java.lang.Object) 10, (java.lang.Object) strSet77);
        java.util.Set<java.lang.String> strSet79 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long81 = atomikosProperties80.checkpointInterval;
        java.util.Properties properties82 = atomikosProperties80.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties83.setCheckpointInterval((long) 100);
        boolean boolean86 = atomikosProperties83.isForceShutdownOnVmExit();
        atomikosProperties83.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean89 = properties82.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet90 = properties82.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration91 = properties82.elements();
        boolean boolean92 = properties2.containsValue((java.lang.Object) objEnumeration91);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 50 + "'", int62 == 50);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertNotNull(properties82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objEntrySet90);
        org.junit.Assert.assertNotNull(objEnumeration91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test8551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8551");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        int int31 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.util.Set<java.lang.String> strSet36 = properties35.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        java.lang.Object obj40 = properties39.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        atomikosProperties41.setMaxActives((int) (byte) -1);
        boolean boolean47 = atomikosProperties41.isEnableLogging();
        atomikosProperties41.transactionManagerUniqueName = "";
        atomikosProperties41.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        java.lang.String str55 = atomikosProperties52.getLogBaseDir();
        atomikosProperties52.setMaxActives((int) (byte) -1);
        java.lang.String str58 = atomikosProperties52.getService();
        java.lang.Object obj59 = properties39.getOrDefault((java.lang.Object) atomikosProperties41, (java.lang.Object) atomikosProperties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        boolean boolean64 = atomikosProperties60.isSerialJtaTransactions();
        long long65 = atomikosProperties60.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        properties68.clear();
        boolean boolean70 = properties68.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        atomikosProperties71.setTransactionManagerUniqueName("");
        int int75 = atomikosProperties71.getMaxActives();
        java.lang.String str76 = atomikosProperties71.transactionManagerUniqueName;
        boolean boolean77 = properties68.containsValue((java.lang.Object) atomikosProperties71);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties78.setCheckpointInterval((long) 100);
        atomikosProperties78.maxActives = (byte) 0;
        atomikosProperties78.setTransactionManagerUniqueName("");
        java.lang.Object obj85 = properties68.get((java.lang.Object) atomikosProperties78);
        boolean boolean87 = properties68.containsValue((java.lang.Object) 100.0d);
        boolean boolean88 = properties35.replace(obj59, (java.lang.Object) atomikosProperties60, (java.lang.Object) boolean87);
        boolean boolean89 = properties2.remove((java.lang.Object) (byte) 1, (java.lang.Object) atomikosProperties60);
        boolean boolean90 = atomikosProperties60.isEnableLogging();
        long long91 = atomikosProperties60.maxTimeout;
        long long92 = atomikosProperties60.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 500L + "'", long65 == 500L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 50 + "'", int75 == 50);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 300000L + "'", long91 == 300000L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 500L + "'", long92 == 500L);
    }

    @Test
    public void test8552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8552");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties15.setCheckpointInterval((long) 100);
        boolean boolean18 = atomikosProperties15.isForceShutdownOnVmExit();
        atomikosProperties15.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean21 = properties14.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.enableLogging = true;
        boolean boolean26 = properties11.replace((java.lang.Object) boolean21, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection27 = properties11.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        boolean boolean31 = properties11.contains((java.lang.Object) properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.util.Set<java.lang.String> strSet36 = properties35.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        java.lang.Object obj40 = properties39.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        atomikosProperties41.setMaxActives((int) (byte) -1);
        boolean boolean47 = atomikosProperties41.isEnableLogging();
        atomikosProperties41.transactionManagerUniqueName = "";
        atomikosProperties41.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        java.lang.String str55 = atomikosProperties52.getLogBaseDir();
        atomikosProperties52.setMaxActives((int) (byte) -1);
        java.lang.String str58 = atomikosProperties52.getService();
        java.lang.Object obj59 = properties39.getOrDefault((java.lang.Object) atomikosProperties41, (java.lang.Object) atomikosProperties52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        boolean boolean64 = atomikosProperties60.isSerialJtaTransactions();
        long long65 = atomikosProperties60.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        properties68.clear();
        boolean boolean70 = properties68.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        atomikosProperties71.setTransactionManagerUniqueName("");
        int int75 = atomikosProperties71.getMaxActives();
        java.lang.String str76 = atomikosProperties71.transactionManagerUniqueName;
        boolean boolean77 = properties68.containsValue((java.lang.Object) atomikosProperties71);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties78.setCheckpointInterval((long) 100);
        atomikosProperties78.maxActives = (byte) 0;
        atomikosProperties78.setTransactionManagerUniqueName("");
        java.lang.Object obj85 = properties68.get((java.lang.Object) atomikosProperties78);
        boolean boolean87 = properties68.containsValue((java.lang.Object) 100.0d);
        boolean boolean88 = properties35.replace(obj59, (java.lang.Object) atomikosProperties60, (java.lang.Object) boolean87);
        atomikosProperties0.set(properties11, "", (java.lang.Object) properties35);
        java.util.Set<java.lang.String> strSet90 = properties35.stringPropertyNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objCollection27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 500L + "'", long65 == 500L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 50 + "'", int75 == 50);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strSet90);
    }

    @Test
    public void test8553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8553");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        boolean boolean3 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setMaxTimeout((long) 52);
        java.lang.String str11 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test8554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8554");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setMaxActives(50);
        boolean boolean9 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test8555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8555");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        java.lang.Object obj15 = properties12.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str16 = properties12.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setMaxActives((int) (byte) -1);
        boolean boolean23 = atomikosProperties17.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) 100);
        boolean boolean27 = atomikosProperties24.isForceShutdownOnVmExit();
        java.lang.Object obj28 = properties12.putIfAbsent((java.lang.Object) atomikosProperties17, (java.lang.Object) boolean27);
        java.util.Set<java.lang.String> strSet29 = properties12.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet30 = properties12.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties12.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        atomikosProperties32.forceShutdownOnVmExit = false;
        atomikosProperties32.threadedTwoPhaseCommit = false;
        atomikosProperties32.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties32.threadedTwoPhaseCommit = false;
        atomikosProperties32.setDefaultJtaTimeout(500L);
        java.lang.Object obj44 = properties4.putIfAbsent((java.lang.Object) properties12, (java.lang.Object) 500L);
        properties4.clear();
        int int46 = properties4.size();
        properties4.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test8556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8556");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.logBaseName = "";
        boolean boolean13 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setSerialJtaTransactions(true);
        boolean boolean16 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setDefaultJtaTimeout((long) 'a');
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test8557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8557");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        java.util.Properties properties50 = atomikosProperties48.asProperties();
        java.lang.Object obj51 = properties50.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        java.lang.String str55 = atomikosProperties52.getLogBaseDir();
        atomikosProperties52.setMaxActives((int) (byte) -1);
        boolean boolean58 = atomikosProperties52.isEnableLogging();
        atomikosProperties52.transactionManagerUniqueName = "";
        atomikosProperties52.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        atomikosProperties63.setMaxActives((int) (byte) -1);
        java.lang.String str69 = atomikosProperties63.getService();
        java.lang.Object obj70 = properties50.getOrDefault((java.lang.Object) atomikosProperties52, (java.lang.Object) atomikosProperties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long72 = atomikosProperties71.checkpointInterval;
        int int73 = atomikosProperties71.getMaxActives();
        java.lang.String str74 = atomikosProperties71.logBaseDir;
        java.lang.Object obj76 = properties50.putIfAbsent((java.lang.Object) atomikosProperties71, (java.lang.Object) "");
        boolean boolean77 = atomikosProperties71.isThreadedTwoPhaseCommit();
        boolean boolean78 = properties7.contains((java.lang.Object) boolean77);
        java.util.Properties properties79 = new java.util.Properties(properties7);
        java.io.Writer writer80 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties79.store(writer80, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(obj51);
// flaky:         org.junit.Assert.assertEquals(obj51.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 500L + "'", long72 == 500L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 50 + "'", int73 == 50);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test8558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8558");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        boolean boolean46 = atomikosProperties44.isSerialJtaTransactions();
        java.lang.String str47 = atomikosProperties44.getLogBaseName();
        long long48 = atomikosProperties44.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.lang.Object obj54 = properties51.clone();
        java.util.Set<java.lang.Object> objSet55 = properties51.keySet();
        boolean boolean58 = properties51.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        java.lang.Object obj59 = properties15.replace((java.lang.Object) long48, (java.lang.Object) properties51);
        java.util.Properties properties60 = new java.util.Properties(properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setCheckpointInterval((long) 100);
        boolean boolean64 = atomikosProperties61.isForceShutdownOnVmExit();
        atomikosProperties61.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long67 = atomikosProperties61.getDefaultJtaTimeout();
        long long68 = atomikosProperties61.getMaxTimeout();
        long long69 = atomikosProperties61.getMaxTimeout();
        long long70 = atomikosProperties61.checkpointInterval;
        boolean boolean71 = properties51.containsValue((java.lang.Object) atomikosProperties61);
        atomikosProperties61.setCheckpointInterval((long) 10);
        atomikosProperties61.maxActives = (byte) 10;
        boolean boolean76 = atomikosProperties61.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 300000L + "'", long68 == 300000L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 300000L + "'", long69 == 300000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test8559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8559");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        int int7 = atomikosProperties0.maxActives;
        long long8 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = true;
        boolean boolean13 = atomikosProperties0.threadedTwoPhaseCommit;
        int int14 = atomikosProperties0.maxActives;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
    }

    @Test
    public void test8560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8560");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long8 = atomikosProperties0.maxTimeout;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        int int11 = properties9.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        atomikosProperties16.setTransactionManagerUniqueName("");
        int int20 = atomikosProperties16.getMaxActives();
        boolean boolean21 = properties14.containsValue((java.lang.Object) int20);
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties14);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        atomikosProperties23.setMaxActives((int) (byte) -1);
        java.lang.String str29 = atomikosProperties23.getService();
        atomikosProperties23.setDefaultJtaTimeout((long) (-1));
        int int32 = atomikosProperties23.maxActives;
        atomikosProperties23.setDefaultJtaTimeout(1L);
        atomikosProperties23.setEnableLogging(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        atomikosProperties37.forceShutdownOnVmExit = false;
        atomikosProperties37.threadedTwoPhaseCommit = false;
        java.lang.Object obj43 = properties9.putIfAbsent((java.lang.Object) true, (java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test8561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8561");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        java.lang.String str29 = atomikosProperties13.transactionManagerUniqueName;
        boolean boolean30 = atomikosProperties13.enableLogging;
        atomikosProperties13.setEnableLogging(false);
        atomikosProperties13.setCheckpointInterval((long) (short) 0);
        long long35 = atomikosProperties13.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10000L + "'", long35 == 10000L);
    }

    @Test
    public void test8562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8562");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.setService("{}");
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxActives = (-1);
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test8563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8563");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setLogBaseDir("tmlog");
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str9 = atomikosProperties0.service;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test8564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8564");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        java.lang.String str9 = atomikosProperties0.service;
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test8565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8565");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        java.util.Properties properties12 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setCheckpointInterval((long) 100);
        boolean boolean16 = atomikosProperties13.isForceShutdownOnVmExit();
        atomikosProperties13.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean19 = properties12.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties20.enableLogging = true;
        boolean boolean24 = properties9.replace((java.lang.Object) boolean19, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection25 = properties9.values();
        boolean boolean26 = properties2.contains((java.lang.Object) properties9);
        java.io.OutputStream outputStream27 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties9.storeToXML(outputStream27, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test8566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8566");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long8 = atomikosProperties0.getMaxTimeout();
        java.lang.String str9 = atomikosProperties0.getLogBaseName();
        long long10 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
    }

    @Test
    public void test8567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8567");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setTransactionManagerUniqueName("");
        atomikosProperties6.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass16 = atomikosProperties6.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        int int19 = atomikosProperties17.getMaxActives();
        java.lang.String str20 = atomikosProperties17.transactionManagerUniqueName;
        long long21 = atomikosProperties17.getCheckpointInterval();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        atomikosProperties27.transactionManagerUniqueName = "";
        atomikosProperties27.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        java.lang.Object obj45 = properties25.getOrDefault((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        int int48 = atomikosProperties46.getMaxActives();
        java.lang.String str49 = atomikosProperties46.logBaseDir;
        java.lang.Object obj51 = properties25.putIfAbsent((java.lang.Object) atomikosProperties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        atomikosProperties52.setService("");
        boolean boolean57 = atomikosProperties52.threadedTwoPhaseCommit;
        java.lang.String str58 = atomikosProperties52.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        boolean boolean63 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.serialJtaTransactions = true;
        java.lang.String str66 = atomikosProperties59.getService();
        java.lang.Object obj67 = properties25.putIfAbsent((java.lang.Object) str58, (java.lang.Object) atomikosProperties59);
        boolean boolean68 = properties3.replace((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties59);
        atomikosProperties17.setSerialJtaTransactions(true);
        int int71 = atomikosProperties17.getMaxActives();
        boolean boolean72 = atomikosProperties17.serialJtaTransactions;
        atomikosProperties17.serialJtaTransactions = true;
        java.lang.String str75 = atomikosProperties17.getTransactionManagerUniqueName();
        long long76 = atomikosProperties17.getCheckpointInterval();
        long long77 = atomikosProperties17.maxTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 50 + "'", int71 == 50);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 500L + "'", long76 == 500L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 300000L + "'", long77 == 300000L);
    }

    @Test
    public void test8568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8568");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.enableLogging;
        atomikosProperties0.defaultJtaTimeout = 9;
        java.lang.String str9 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test8569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8569");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseName = "";
        long long9 = atomikosProperties0.defaultJtaTimeout;
        long long10 = atomikosProperties0.maxTimeout;
        boolean boolean11 = atomikosProperties0.enableLogging;
        atomikosProperties0.checkpointInterval = '4';
        java.lang.String str14 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test8570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8570");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.transactionManagerUniqueName;
        long long14 = atomikosProperties10.getCheckpointInterval();
        boolean boolean15 = atomikosProperties10.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        int int18 = atomikosProperties16.getMaxActives();
        atomikosProperties16.setCheckpointInterval(1L);
        atomikosProperties16.setService("{}");
        boolean boolean23 = atomikosProperties16.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) 100);
        boolean boolean27 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long30 = atomikosProperties24.getDefaultJtaTimeout();
        long long31 = atomikosProperties24.getMaxTimeout();
        atomikosProperties24.logBaseName = "tmlog";
        long long34 = atomikosProperties24.getDefaultJtaTimeout();
        atomikosProperties24.setForceShutdownOnVmExit(true);
        java.lang.String str37 = atomikosProperties24.getLogBaseName();
        boolean boolean38 = properties9.replace((java.lang.Object) atomikosProperties10, (java.lang.Object) boolean23, (java.lang.Object) str37);
        java.lang.String str39 = atomikosProperties10.getService();
        atomikosProperties10.defaultJtaTimeout = 100;
        atomikosProperties10.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test8571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8571");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        properties10.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        java.util.Properties properties16 = new java.util.Properties(properties14);
        java.lang.Object obj19 = properties16.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        long long22 = atomikosProperties20.getDefaultJtaTimeout();
        java.util.Properties properties23 = atomikosProperties20.asProperties();
        boolean boolean24 = atomikosProperties20.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setCheckpointInterval((long) 100);
        boolean boolean28 = atomikosProperties25.isForceShutdownOnVmExit();
        atomikosProperties25.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties25.service = "";
        atomikosProperties25.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        properties37.clear();
        boolean boolean39 = properties37.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        java.lang.Object obj45 = properties42.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection46 = properties42.values();
        boolean boolean47 = properties37.containsKey((java.lang.Object) objCollection46);
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties37.keys();
        boolean boolean49 = properties16.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties25, (java.lang.Object) properties37);
        java.lang.Object obj50 = properties16.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long52 = atomikosProperties51.checkpointInterval;
        java.util.Properties properties53 = atomikosProperties51.asProperties();
        properties53.clear();
        java.util.Properties properties55 = new java.util.Properties(properties53);
        java.lang.Object obj58 = properties55.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str59 = properties55.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        atomikosProperties60.setMaxActives((int) (byte) -1);
        boolean boolean66 = atomikosProperties60.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties67.setCheckpointInterval((long) 100);
        boolean boolean70 = atomikosProperties67.isForceShutdownOnVmExit();
        java.lang.Object obj71 = properties55.putIfAbsent((java.lang.Object) atomikosProperties60, (java.lang.Object) boolean70);
        java.util.Set<java.lang.String> strSet72 = properties55.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet73 = properties55.keySet();
        java.lang.String str74 = properties55.toString();
        boolean boolean75 = properties10.remove((java.lang.Object) properties16, (java.lang.Object) properties55);
        java.util.Collection<java.lang.Object> objCollection76 = properties10.values();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj58, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(objSet73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objCollection76);
    }

    @Test
    public void test8572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8572");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.maxActives = ' ';
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setMaxActives((int) (short) 0);
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean21 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test8573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8573");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.logBaseDir = "hi!";
        boolean boolean9 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.checkpointInterval = 4;
        java.lang.String str12 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test8574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8574");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        boolean boolean20 = properties8.equals((java.lang.Object) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        atomikosProperties21.forceShutdownOnVmExit = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.maxTimeout = 50;
        boolean boolean33 = properties16.equals((java.lang.Object) 50);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties16.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.enableLogging = true;
        atomikosProperties35.maxActives = (byte) -1;
        atomikosProperties35.threadedTwoPhaseCommit = false;
        java.lang.String str42 = atomikosProperties35.getLogBaseName();
        atomikosProperties35.logBaseName = "tmlog";
        boolean boolean45 = atomikosProperties35.threadedTwoPhaseCommit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.enableLogging = true;
        boolean boolean49 = atomikosProperties46.forceShutdownOnVmExit;
        atomikosProperties46.setSerialJtaTransactions(false);
        java.lang.String str52 = atomikosProperties46.service;
        atomikosProperties46.maxActives = (byte) -1;
        atomikosProperties46.setMaxActives(52);
        boolean boolean57 = properties16.remove((java.lang.Object) boolean45, (java.lang.Object) atomikosProperties46);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test8575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8575");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        int int4 = atomikosProperties0.getMaxActives();
        long long5 = atomikosProperties0.maxTimeout;
        boolean boolean6 = atomikosProperties0.enableLogging;
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) -1);
        java.lang.String str9 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test8576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8576");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        long long6 = atomikosProperties0.maxTimeout;
        boolean boolean7 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.maxActives = (-1);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test8577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8577");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        java.util.Collection<java.lang.Object> objCollection57 = properties17.values();
        java.util.Collection<java.lang.Object> objCollection58 = properties17.values();
        java.lang.Object obj59 = properties17.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties17.elements();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(objCollection58);
        org.junit.Assert.assertNotNull(obj59);
// flaky:         org.junit.Assert.assertEquals(obj59.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration60);
    }

    @Test
    public void test8578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8578");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.maxActives = '4';
        long long48 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = 10000L;
        long long51 = atomikosProperties0.getCheckpointInterval();
        long long52 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
    }

    @Test
    public void test8579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8579");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.maxActives = '4';
        long long48 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str49 = atomikosProperties0.logBaseDir;
        long long50 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxActives = (byte) 100;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
    }

    @Test
    public void test8580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8580");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        java.lang.String str23 = properties2.toString();
        java.lang.Object obj26 = properties2.setProperty("tmlog", "{}");
        java.lang.Object obj27 = properties2.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration28 = properties2.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str23, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(obj27);
// flaky:         org.junit.Assert.assertEquals(obj27.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, tmlog={}}");
        org.junit.Assert.assertNotNull(objEnumeration28);
    }

    @Test
    public void test8581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8581");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.serialJtaTransactions;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str4 = atomikosProperties3.logBaseDir;
        atomikosProperties3.setTransactionManagerUniqueName("");
        int int7 = atomikosProperties3.getMaxActives();
        java.lang.String str8 = atomikosProperties3.getLogBaseDir();
        atomikosProperties3.setTransactionManagerUniqueName("");
        atomikosProperties3.setDefaultJtaTimeout(0L);
        int int13 = atomikosProperties3.maxActives;
        atomikosProperties3.setEnableLogging(false);
        long long16 = atomikosProperties3.getDefaultJtaTimeout();
        long long17 = atomikosProperties3.getMaxTimeout();
        atomikosProperties3.setMaxTimeout((long) 1);
        atomikosProperties3.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        java.util.Properties properties26 = new java.util.Properties(properties24);
        java.lang.Object obj29 = properties26.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str30 = properties26.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        boolean boolean37 = atomikosProperties31.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setCheckpointInterval((long) 100);
        boolean boolean41 = atomikosProperties38.isForceShutdownOnVmExit();
        java.lang.Object obj42 = properties26.putIfAbsent((java.lang.Object) atomikosProperties31, (java.lang.Object) boolean41);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet43 = properties26.entrySet();
        properties26.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        java.lang.String str52 = atomikosProperties46.getService();
        atomikosProperties46.setDefaultJtaTimeout((long) (-1));
        int int55 = atomikosProperties46.maxActives;
        long long56 = atomikosProperties46.maxTimeout;
        java.lang.String str57 = atomikosProperties46.getService();
        atomikosProperties46.maxActives = (byte) 0;
        java.util.Properties properties60 = atomikosProperties46.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration61 = properties60.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long63 = atomikosProperties62.checkpointInterval;
        java.util.Properties properties64 = atomikosProperties62.asProperties();
        properties64.clear();
        boolean boolean66 = properties64.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long68 = atomikosProperties67.checkpointInterval;
        java.util.Properties properties69 = atomikosProperties67.asProperties();
        java.lang.Object obj72 = properties69.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection73 = properties69.values();
        boolean boolean74 = properties64.containsKey((java.lang.Object) objCollection73);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.logBaseDir;
        java.lang.String str77 = atomikosProperties75.logBaseName;
        java.lang.String str78 = atomikosProperties75.getLogBaseName();
        int int79 = atomikosProperties75.getMaxActives();
        atomikosProperties75.setLogBaseDir("hi!");
        java.lang.String str82 = atomikosProperties75.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str84 = atomikosProperties83.logBaseDir;
        atomikosProperties83.setTransactionManagerUniqueName("");
        int int87 = atomikosProperties83.getMaxActives();
        java.lang.String str88 = atomikosProperties83.getLogBaseDir();
        java.lang.String str89 = atomikosProperties83.logBaseName;
        java.lang.Object obj90 = properties64.replace((java.lang.Object) atomikosProperties75, (java.lang.Object) atomikosProperties83);
        boolean boolean91 = properties64.isEmpty();
        java.lang.Object obj92 = properties64.clone();
        boolean boolean93 = properties60.equals(obj92);
        atomikosProperties3.set(properties26, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}", (java.lang.Object) properties60);
        java.util.Properties properties95 = new java.util.Properties(properties26);
        boolean boolean96 = properties2.contains((java.lang.Object) properties26);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj29, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{}" + "'", str30, "{}");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(objEntrySet43);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 300000L + "'", long56 == 300000L);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertNotNull(objEnumeration61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 500L + "'", long63 == 500L);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tmlog" + "'", str77, "tmlog");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 50 + "'", int79 == 50);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "tmlog" + "'", str82, "tmlog");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 50 + "'", int87 == 50);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "tmlog" + "'", str89, "tmlog");
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertEquals(obj92.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj92), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj92), "{}");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test8582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8582");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        atomikosProperties15.setThreadedTwoPhaseCommit(false);
        boolean boolean20 = properties2.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        boolean boolean27 = atomikosProperties21.isEnableLogging();
        long long28 = atomikosProperties21.checkpointInterval;
        atomikosProperties21.setCheckpointInterval(10L);
        boolean boolean31 = atomikosProperties21.isForceShutdownOnVmExit();
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties21.setLogBaseName("hi!");
        java.lang.String str36 = atomikosProperties21.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        int int39 = atomikosProperties37.getMaxActives();
        java.lang.String str40 = atomikosProperties37.transactionManagerUniqueName;
        boolean boolean41 = atomikosProperties37.isEnableLogging();
        boolean boolean42 = atomikosProperties37.forceShutdownOnVmExit;
        long long43 = atomikosProperties37.getCheckpointInterval();
        boolean boolean44 = properties2.remove((java.lang.Object) atomikosProperties21, (java.lang.Object) atomikosProperties37);
        atomikosProperties37.setSerialJtaTransactions(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test8583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8583");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        boolean boolean34 = atomikosProperties32.isSerialJtaTransactions();
        java.lang.Object obj35 = properties7.get((java.lang.Object) atomikosProperties32);
        java.lang.String str36 = atomikosProperties32.transactionManagerUniqueName;
        boolean boolean37 = atomikosProperties32.isSerialJtaTransactions();
        atomikosProperties32.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long40 = atomikosProperties32.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
    }

    @Test
    public void test8584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8584");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean13 = atomikosProperties0.isThreadedTwoPhaseCommit();
        java.lang.String str14 = atomikosProperties0.getLogBaseName();
        int int15 = atomikosProperties0.getMaxActives();
        boolean boolean16 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.logBaseDir = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test8585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8585");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        java.lang.String str6 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setDefaultJtaTimeout((long) 10);
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
    }

    @Test
    public void test8586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8586");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet24 = properties2.entrySet();
        java.util.Enumeration<?> wildcardEnumeration25 = properties2.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        properties28.clear();
        boolean boolean30 = properties28.isEmpty();
        java.lang.Object obj31 = properties28.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        properties34.clear();
        boolean boolean36 = properties34.isEmpty();
        java.util.Collection<java.lang.Object> objCollection37 = properties34.values();
        properties28.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        java.lang.Object obj41 = properties34.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.lang.Object obj42 = properties34.clone();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.logBaseDir;
        java.lang.String str46 = atomikosProperties44.logBaseName;
        java.lang.String str47 = atomikosProperties44.getLogBaseDir();
        atomikosProperties44.setMaxActives((int) (byte) -1);
        boolean boolean50 = atomikosProperties44.isEnableLogging();
        boolean boolean51 = atomikosProperties44.isEnableLogging();
        java.lang.Object obj52 = null;
        java.lang.Object obj53 = properties2.getOrDefault((java.lang.Object) atomikosProperties44, obj52);
        java.util.Enumeration<?> wildcardEnumeration54 = properties2.propertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(objEntrySet24);
        org.junit.Assert.assertNotNull(wildcardEnumeration25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{}");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(wildcardEnumeration54);
    }

    @Test
    public void test8587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8587");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        java.lang.String str72 = atomikosProperties66.getService();
        long long73 = atomikosProperties66.defaultJtaTimeout;
        atomikosProperties66.setEnableLogging(true);
        boolean boolean76 = properties53.equals((java.lang.Object) atomikosProperties66);
        boolean boolean77 = atomikosProperties66.isThreadedTwoPhaseCommit();
        atomikosProperties66.setMaxActives((int) (short) 100);
        boolean boolean80 = atomikosProperties66.serialJtaTransactions;
        atomikosProperties66.threadedTwoPhaseCommit = false;
        atomikosProperties66.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties66.forceShutdownOnVmExit = false;
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test8588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8588");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.threadedTwoPhaseCommit = true;
        atomikosProperties15.setTransactionManagerUniqueName("{com.atomikos.icatch.tmlog=0.0}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        java.util.Properties properties32 = atomikosProperties30.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) 100);
        boolean boolean36 = atomikosProperties33.isForceShutdownOnVmExit();
        atomikosProperties33.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean39 = properties32.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.enableLogging = true;
        boolean boolean44 = properties29.replace((java.lang.Object) boolean39, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection45 = properties29.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet46 = properties29.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet47 = properties29.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties49.setCheckpointInterval((long) 100);
        boolean boolean52 = atomikosProperties49.isForceShutdownOnVmExit();
        atomikosProperties49.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long55 = atomikosProperties49.getDefaultJtaTimeout();
        long long56 = atomikosProperties49.getMaxTimeout();
        atomikosProperties49.logBaseName = "tmlog";
        long long59 = atomikosProperties49.getDefaultJtaTimeout();
        long long60 = atomikosProperties49.defaultJtaTimeout;
        atomikosProperties49.maxTimeout = 10000L;
        boolean boolean63 = atomikosProperties49.threadedTwoPhaseCommit;
        long long64 = atomikosProperties49.getCheckpointInterval();
        atomikosProperties49.maxActives = (short) 1;
        atomikosProperties15.set(properties29, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}", (java.lang.Object) (short) 1);
        atomikosProperties15.setSerialJtaTransactions(false);
        java.lang.String str70 = atomikosProperties15.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertNotNull(objEntrySet46);
        org.junit.Assert.assertNotNull(objEntrySet47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 300000L + "'", long56 == 300000L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10000L + "'", long59 == 10000L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{com.atomikos.icatch.tmlog=0.0}" + "'", str70, "{com.atomikos.icatch.tmlog=0.0}");
    }

    @Test
    public void test8589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8589");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseName = "";
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        java.lang.String str16 = atomikosProperties10.getService();
        long long17 = atomikosProperties10.defaultJtaTimeout;
        java.lang.String str18 = atomikosProperties10.logBaseName;
        java.util.Properties properties19 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        int int22 = atomikosProperties20.getMaxActives();
        java.lang.String str23 = atomikosProperties20.transactionManagerUniqueName;
        long long24 = atomikosProperties20.getCheckpointInterval();
        boolean boolean25 = atomikosProperties20.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        int int28 = atomikosProperties26.getMaxActives();
        atomikosProperties26.setCheckpointInterval(1L);
        atomikosProperties26.setService("{}");
        boolean boolean33 = atomikosProperties26.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.setCheckpointInterval((long) 100);
        boolean boolean37 = atomikosProperties34.isForceShutdownOnVmExit();
        atomikosProperties34.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long40 = atomikosProperties34.getDefaultJtaTimeout();
        long long41 = atomikosProperties34.getMaxTimeout();
        atomikosProperties34.logBaseName = "tmlog";
        long long44 = atomikosProperties34.getDefaultJtaTimeout();
        atomikosProperties34.setForceShutdownOnVmExit(true);
        java.lang.String str47 = atomikosProperties34.getLogBaseName();
        boolean boolean48 = properties19.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) boolean33, (java.lang.Object) str47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        atomikosProperties50.setMaxActives((int) (byte) -1);
        boolean boolean56 = atomikosProperties50.isEnableLogging();
        long long57 = atomikosProperties50.checkpointInterval;
        atomikosProperties50.setCheckpointInterval(10L);
        atomikosProperties0.set(properties19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties50);
        java.lang.String str61 = atomikosProperties50.service;
        atomikosProperties50.setMaxTimeout(100L);
        long long64 = atomikosProperties50.maxTimeout;
        java.util.Properties properties65 = atomikosProperties50.asProperties();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10000L + "'", long40 == 10000L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 300000L + "'", long41 == 300000L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertNotNull(properties65);
    }

    @Test
    public void test8590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8590");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        boolean boolean46 = atomikosProperties44.isSerialJtaTransactions();
        java.lang.String str47 = atomikosProperties44.getLogBaseName();
        long long48 = atomikosProperties44.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.lang.Object obj54 = properties51.clone();
        java.util.Set<java.lang.Object> objSet55 = properties51.keySet();
        boolean boolean58 = properties51.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        java.lang.Object obj59 = properties15.replace((java.lang.Object) long48, (java.lang.Object) properties51);
        java.util.Properties properties60 = new java.util.Properties(properties51);
        java.lang.Object obj62 = properties60.get((java.lang.Object) 10.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.Object obj64 = properties60.remove((java.lang.Object) atomikosProperties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.logBaseDir;
        java.lang.String str67 = atomikosProperties65.logBaseName;
        atomikosProperties65.setService("");
        boolean boolean70 = atomikosProperties65.threadedTwoPhaseCommit;
        int int71 = atomikosProperties65.getMaxActives();
        boolean boolean72 = atomikosProperties65.isSerialJtaTransactions();
        boolean boolean73 = atomikosProperties65.threadedTwoPhaseCommit;
        boolean boolean74 = properties60.contains((java.lang.Object) boolean73);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 50 + "'", int71 == 50);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test8591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8591");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties17 = new java.util.Properties(properties2);
        java.lang.String str18 = properties2.toString();
        java.io.OutputStream outputStream19 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.tmlog=0.0}=, com.atomikos.icatch.log_base_name=tmlog, []=hi!}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test8592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8592");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.setService("tmlog");
        java.lang.String str25 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setDefaultJtaTimeout((long) (byte) 0);
        atomikosProperties15.setDefaultJtaTimeout((long) 1);
        atomikosProperties15.transactionManagerUniqueName = "{-1=1}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test8593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8593");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.transactionManagerUniqueName;
        boolean boolean11 = atomikosProperties8.enableLogging;
        java.lang.String str12 = atomikosProperties8.getTransactionManagerUniqueName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseDir();
        atomikosProperties13.setMaxActives((int) (byte) -1);
        boolean boolean19 = atomikosProperties13.isEnableLogging();
        atomikosProperties13.transactionManagerUniqueName = "";
        int int22 = atomikosProperties13.maxActives;
        boolean boolean23 = properties4.remove((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties13);
        atomikosProperties13.setMaxTimeout(10L);
        atomikosProperties13.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties13.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test8594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8594");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.util.Collection<java.lang.Object> objCollection15 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        boolean boolean20 = properties18.containsValue((java.lang.Object) 100L);
        java.lang.String str21 = properties18.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties18.elements();
        java.lang.String str24 = properties18.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        java.lang.Object obj30 = properties27.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection31 = properties27.values();
        int int32 = properties27.size();
        java.lang.Object obj33 = null;
        boolean boolean34 = properties27.equals(obj33);
        java.util.Collection<java.lang.Object> objCollection35 = properties27.values();
        java.lang.Object obj36 = properties18.get((java.lang.Object) properties27);
        java.lang.Object obj37 = properties18.clone();
        java.lang.Object obj38 = properties18.clone();
        boolean boolean39 = properties18.isEmpty();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties18);
        java.util.Properties properties41 = new java.util.Properties(properties18);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str21, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test8595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8595");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        boolean boolean18 = atomikosProperties14.isSerialJtaTransactions();
        atomikosProperties14.setLogBaseName("");
        atomikosProperties14.setTransactionManagerUniqueName("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        java.lang.Object obj28 = properties13.replace((java.lang.Object) "tmlog", (java.lang.Object) int27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        int int31 = atomikosProperties29.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        boolean boolean36 = properties34.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        java.lang.Object obj42 = properties39.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.String str46 = atomikosProperties43.getLogBaseDir();
        atomikosProperties43.setLogBaseName("");
        java.lang.Object obj49 = properties34.replace((java.lang.Object) properties39, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        boolean boolean57 = atomikosProperties51.isEnableLogging();
        atomikosProperties51.transactionManagerUniqueName = "";
        atomikosProperties51.setEnableLogging(false);
        boolean boolean62 = atomikosProperties51.isEnableLogging();
        boolean boolean63 = properties39.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean62);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet64 = properties39.entrySet();
        atomikosProperties29.set(properties39, "{}", (java.lang.Object) ' ');
        boolean boolean68 = properties13.contains((java.lang.Object) atomikosProperties29);
        atomikosProperties29.forceShutdownOnVmExit = true;
        long long71 = atomikosProperties29.getCheckpointInterval();
        java.lang.String str72 = atomikosProperties29.logBaseDir;
        boolean boolean73 = atomikosProperties29.serialJtaTransactions;
        atomikosProperties29.setService("{=}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objEntrySet64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 500L + "'", long71 == 500L);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test8596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8596");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        atomikosProperties44.threadedTwoPhaseCommit = true;
        boolean boolean50 = atomikosProperties44.isThreadedTwoPhaseCommit();
        boolean boolean51 = atomikosProperties44.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test8597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8597");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.threadedTwoPhaseCommit = true;
        atomikosProperties31.setService("{}");
        atomikosProperties31.forceShutdownOnVmExit = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test8598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8598");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) 100);
        boolean boolean20 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties17.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        java.lang.String str31 = atomikosProperties25.getService();
        long long32 = atomikosProperties25.defaultJtaTimeout;
        java.lang.String str33 = atomikosProperties25.logBaseName;
        java.lang.String str34 = atomikosProperties25.logBaseDir;
        java.lang.Class<?> wildcardClass35 = atomikosProperties25.getClass();
        boolean boolean36 = properties2.remove((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        atomikosProperties37.forceShutdownOnVmExit = false;
        boolean boolean41 = atomikosProperties37.isSerialJtaTransactions();
        java.lang.String str42 = atomikosProperties37.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.Object obj46 = properties2.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties43);
        java.lang.String str47 = properties2.toString();
        java.lang.Object obj48 = properties2.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(obj48);
    }

    @Test
    public void test8599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8599");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setCheckpointInterval((long) 9);
        atomikosProperties0.setLogBaseDir("{}");
        long long14 = atomikosProperties0.checkpointInterval;
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 9L + "'", long14 == 9L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test8600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8600");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        boolean boolean49 = properties47.containsValue((java.lang.Object) 100L);
        java.lang.String str50 = properties47.toString();
        java.lang.Object obj53 = properties47.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str55 = atomikosProperties54.logBaseDir;
        java.lang.String str56 = atomikosProperties54.logBaseName;
        java.lang.String str57 = atomikosProperties54.getLogBaseDir();
        atomikosProperties54.setMaxActives((int) (byte) -1);
        java.util.Properties properties60 = atomikosProperties54.asProperties();
        boolean boolean61 = properties47.equals((java.lang.Object) atomikosProperties54);
        atomikosProperties54.maxActives = 0;
        long long64 = atomikosProperties54.getMaxTimeout();
        atomikosProperties54.setThreadedTwoPhaseCommit(false);
        atomikosProperties54.maxActives = (byte) 100;
        java.lang.Object obj69 = properties2.get((java.lang.Object) (byte) 100);
        java.io.Reader reader70 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(reader70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str50, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tmlog" + "'", str56, "tmlog");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 300000L + "'", long64 == 300000L);
        org.junit.Assert.assertNull(obj69);
    }

    @Test
    public void test8601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8601");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        java.util.Collection<java.lang.Object> objCollection57 = properties17.values();
        java.lang.Object obj58 = properties17.clone();
        java.lang.Object obj59 = new java.lang.Object();
        boolean boolean60 = properties17.containsValue(obj59);
        java.util.Properties properties61 = new java.util.Properties(properties17);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(obj58);
// flaky:         org.junit.Assert.assertEquals(obj58.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test8602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8602");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        properties21.clear();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.lang.Object obj26 = properties23.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str27 = properties23.toString();
        java.lang.Object obj30 = properties23.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet31 = properties23.keySet();
        java.lang.Object obj32 = properties10.remove((java.lang.Object) properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        java.lang.Object obj38 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        boolean boolean43 = properties41.isEmpty();
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<?> wildcardEnumeration46 = properties35.propertyNames();
        java.lang.Object obj47 = properties10.get((java.lang.Object) properties35);
        java.lang.String str49 = properties35.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        properties35.clear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj26, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(wildcardEnumeration46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test8603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8603");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        boolean boolean20 = properties8.equals((java.lang.Object) properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        atomikosProperties21.forceShutdownOnVmExit = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.maxTimeout = 50;
        boolean boolean33 = properties16.equals((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.logBaseDir;
        atomikosProperties34.setTransactionManagerUniqueName("");
        int int38 = atomikosProperties34.getMaxActives();
        java.lang.String str39 = atomikosProperties34.transactionManagerUniqueName;
        boolean boolean40 = properties16.containsValue((java.lang.Object) atomikosProperties34);
        java.util.Properties properties41 = new java.util.Properties(properties16);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long43 = atomikosProperties42.checkpointInterval;
        java.util.Properties properties44 = atomikosProperties42.asProperties();
        java.lang.Object obj45 = properties44.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        boolean boolean52 = atomikosProperties46.isEnableLogging();
        atomikosProperties46.transactionManagerUniqueName = "";
        atomikosProperties46.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        java.lang.String str59 = atomikosProperties57.logBaseName;
        java.lang.String str60 = atomikosProperties57.getLogBaseDir();
        atomikosProperties57.setMaxActives((int) (byte) -1);
        java.lang.String str63 = atomikosProperties57.getService();
        java.lang.Object obj64 = properties44.getOrDefault((java.lang.Object) atomikosProperties46, (java.lang.Object) atomikosProperties57);
        int int65 = properties44.size();
        java.lang.String str67 = properties44.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        java.util.Properties properties70 = atomikosProperties68.asProperties();
        java.lang.Object obj71 = properties70.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str73 = atomikosProperties72.logBaseDir;
        java.lang.String str74 = atomikosProperties72.logBaseName;
        java.lang.String str75 = atomikosProperties72.getLogBaseDir();
        atomikosProperties72.setMaxActives((int) (byte) -1);
        java.lang.String str78 = atomikosProperties72.getService();
        long long79 = atomikosProperties72.defaultJtaTimeout;
        java.lang.String str80 = atomikosProperties72.logBaseName;
        boolean boolean81 = properties44.remove(obj71, (java.lang.Object) atomikosProperties72);
        java.util.Enumeration<java.lang.Object> objEnumeration82 = properties44.keys();
        boolean boolean83 = properties41.containsKey((java.lang.Object) objEnumeration82);
        java.util.Set<java.lang.Object> objSet84 = properties41.keySet();
        java.util.Enumeration<?> wildcardEnumeration85 = properties41.propertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertNotNull(obj45);
// flaky:         org.junit.Assert.assertEquals(obj45.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertNotNull(obj71);
// flaky:         org.junit.Assert.assertEquals(obj71.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "tmlog" + "'", str74, "tmlog");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10000L + "'", long79 == 10000L);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "tmlog" + "'", str80, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objEnumeration82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objSet84);
        org.junit.Assert.assertNotNull(wildcardEnumeration85);
    }

    @Test
    public void test8604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8604");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.maxActives = '4';
        atomikosProperties0.maxTimeout = 10;
        boolean boolean50 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test8605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8605");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.setCheckpointInterval((long) 100);
        boolean boolean13 = atomikosProperties10.isForceShutdownOnVmExit();
        atomikosProperties10.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long16 = atomikosProperties10.getDefaultJtaTimeout();
        long long17 = atomikosProperties10.getMaxTimeout();
        java.lang.String str18 = atomikosProperties10.service;
        atomikosProperties10.serialJtaTransactions = false;
        boolean boolean21 = properties9.containsValue((java.lang.Object) atomikosProperties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        atomikosProperties22.setTransactionManagerUniqueName("");
        int int26 = atomikosProperties22.getMaxActives();
        java.lang.String str27 = atomikosProperties22.transactionManagerUniqueName;
        atomikosProperties22.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        java.util.Properties properties32 = atomikosProperties30.asProperties();
        properties32.clear();
        java.util.Properties properties34 = new java.util.Properties(properties32);
        atomikosProperties22.set(properties32, "tmlog", (java.lang.Object) 0.0d);
        java.util.Collection<java.lang.Object> objCollection38 = properties32.values();
        properties32.clear();
        properties9.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        java.io.OutputStream outputStream41 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties32.store(outputStream41, "tmlog");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 300000L + "'", long17 == 300000L);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertNotNull(objCollection38);
    }

    @Test
    public void test8606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8606");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        int int14 = properties2.size();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties2.keys();
        java.util.Enumeration<?> wildcardEnumeration16 = properties2.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        atomikosProperties17.forceShutdownOnVmExit = false;
        atomikosProperties17.threadedTwoPhaseCommit = false;
        long long23 = atomikosProperties17.getMaxTimeout();
        long long24 = atomikosProperties17.getCheckpointInterval();
        java.lang.String str25 = atomikosProperties17.getTransactionManagerUniqueName();
        atomikosProperties17.setMaxTimeout(300000L);
        boolean boolean28 = properties2.contains((java.lang.Object) 300000L);
        boolean boolean29 = properties2.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNotNull(wildcardEnumeration16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 300000L + "'", long23 == 300000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test8607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8607");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        java.util.Set<java.lang.Object> objSet6 = properties2.keySet();
        java.util.Enumeration<?> wildcardEnumeration7 = properties2.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.logBaseName;
        java.lang.String str11 = atomikosProperties8.getLogBaseDir();
        boolean boolean12 = atomikosProperties8.isSerialJtaTransactions();
        atomikosProperties8.setEnableLogging(false);
        boolean boolean15 = atomikosProperties8.serialJtaTransactions;
        long long16 = atomikosProperties8.defaultJtaTimeout;
        java.lang.String str17 = atomikosProperties8.logBaseName;
        java.lang.String str18 = atomikosProperties8.logBaseName;
        java.lang.String str19 = atomikosProperties8.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        atomikosProperties20.forceShutdownOnVmExit = false;
        atomikosProperties20.threadedTwoPhaseCommit = false;
        long long26 = atomikosProperties20.getMaxTimeout();
        java.lang.String str27 = atomikosProperties20.transactionManagerUniqueName;
        boolean boolean28 = atomikosProperties20.isEnableLogging();
        java.lang.Object obj29 = properties2.replace((java.lang.Object) atomikosProperties8, (java.lang.Object) boolean28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        java.util.Properties properties32 = atomikosProperties30.asProperties();
        properties32.clear();
        boolean boolean34 = properties32.isEmpty();
        java.lang.Object obj35 = properties32.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        properties38.clear();
        boolean boolean40 = properties38.isEmpty();
        java.util.Collection<java.lang.Object> objCollection41 = properties38.values();
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties38);
        java.util.Enumeration<?> wildcardEnumeration43 = properties38.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.enableLogging = true;
        atomikosProperties44.maxActives = (byte) -1;
        boolean boolean49 = atomikosProperties44.isForceShutdownOnVmExit();
        boolean boolean50 = properties38.containsValue((java.lang.Object) atomikosProperties44);
        java.lang.String str51 = properties38.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration52 = properties38.elements();
        java.util.Set<java.lang.String> strSet53 = properties38.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        java.util.Properties properties56 = atomikosProperties54.asProperties();
        java.lang.Object obj57 = properties56.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.logBaseDir;
        java.lang.String str60 = atomikosProperties58.logBaseName;
        java.lang.String str61 = atomikosProperties58.getLogBaseDir();
        atomikosProperties58.setMaxActives((int) (byte) -1);
        boolean boolean64 = atomikosProperties58.isEnableLogging();
        atomikosProperties58.transactionManagerUniqueName = "";
        atomikosProperties58.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        java.lang.String str71 = atomikosProperties69.logBaseName;
        java.lang.String str72 = atomikosProperties69.getLogBaseDir();
        atomikosProperties69.setMaxActives((int) (byte) -1);
        java.lang.String str75 = atomikosProperties69.getService();
        java.lang.Object obj76 = properties56.getOrDefault((java.lang.Object) atomikosProperties58, (java.lang.Object) atomikosProperties69);
        java.lang.String str77 = atomikosProperties69.service;
        long long78 = atomikosProperties69.maxTimeout;
        long long79 = atomikosProperties69.getMaxTimeout();
        java.lang.String str80 = atomikosProperties69.getLogBaseDir();
        java.lang.Object obj81 = properties2.putIfAbsent((java.lang.Object) properties38, (java.lang.Object) atomikosProperties69);
        java.util.Set<java.lang.Object> objSet82 = properties2.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10000L + "'", long16 == 10000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "{}");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objCollection41);
        org.junit.Assert.assertNotNull(wildcardEnumeration43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertNotNull(objEnumeration52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertNotNull(obj57);
// flaky:         org.junit.Assert.assertEquals(obj57.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tmlog" + "'", str60, "tmlog");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tmlog" + "'", str71, "tmlog");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 300000L + "'", long78 == 300000L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 300000L + "'", long79 == 300000L);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNotNull(objSet82);
    }

    @Test
    public void test8608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8608");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) 100);
        boolean boolean20 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties17.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        java.lang.String str31 = atomikosProperties25.getService();
        long long32 = atomikosProperties25.defaultJtaTimeout;
        java.lang.String str33 = atomikosProperties25.logBaseName;
        java.lang.String str34 = atomikosProperties25.logBaseDir;
        java.lang.Class<?> wildcardClass35 = atomikosProperties25.getClass();
        boolean boolean36 = properties2.remove((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        atomikosProperties37.forceShutdownOnVmExit = false;
        boolean boolean41 = atomikosProperties37.isSerialJtaTransactions();
        java.lang.String str42 = atomikosProperties37.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.Object obj46 = properties2.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties43);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Enumeration<?> wildcardEnumeration47 = properties2.propertyNames();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.Integer cannot be cast to java.lang.String");
        } catch (java.lang.ClassCastException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNotNull(obj46);
    }

    @Test
    public void test8609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8609");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        long long10 = atomikosProperties8.getDefaultJtaTimeout();
        java.util.Properties properties11 = atomikosProperties8.asProperties();
        boolean boolean12 = atomikosProperties8.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setCheckpointInterval((long) 100);
        boolean boolean16 = atomikosProperties13.isForceShutdownOnVmExit();
        atomikosProperties13.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties13.service = "";
        atomikosProperties13.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        properties25.clear();
        boolean boolean27 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        java.lang.Object obj33 = properties30.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection34 = properties30.values();
        boolean boolean35 = properties25.containsKey((java.lang.Object) objCollection34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties25.keys();
        boolean boolean37 = properties4.replace((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties13, (java.lang.Object) properties25);
        java.lang.String str38 = atomikosProperties8.transactionManagerUniqueName;
        java.lang.String str39 = atomikosProperties8.logBaseDir;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test8610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8610");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        java.lang.Object obj29 = properties28.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        long long37 = atomikosProperties30.defaultJtaTimeout;
        java.lang.String str38 = atomikosProperties30.logBaseName;
        boolean boolean39 = properties2.remove(obj29, (java.lang.Object) atomikosProperties30);
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        atomikosProperties41.setMaxActives((int) (byte) -1);
        boolean boolean47 = atomikosProperties41.isEnableLogging();
        atomikosProperties41.transactionManagerUniqueName = "";
        atomikosProperties41.setEnableLogging(false);
        boolean boolean52 = atomikosProperties41.isEnableLogging();
        atomikosProperties41.maxActives = 1;
        boolean boolean55 = atomikosProperties41.isForceShutdownOnVmExit();
        boolean boolean56 = properties2.containsKey((java.lang.Object) boolean55);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        java.lang.String str59 = atomikosProperties57.logBaseName;
        atomikosProperties57.setService("");
        boolean boolean62 = atomikosProperties57.threadedTwoPhaseCommit;
        int int63 = atomikosProperties57.getMaxActives();
        boolean boolean64 = atomikosProperties57.isEnableLogging();
        long long65 = atomikosProperties57.getCheckpointInterval();
        boolean boolean66 = properties2.equals((java.lang.Object) atomikosProperties57);
        java.lang.Object obj69 = properties2.setProperty("", "tmlog");
        boolean boolean70 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration71 = properties2.elements();
        boolean boolean72 = properties2.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(obj29);
// flaky:         org.junit.Assert.assertEquals(obj29.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 50 + "'", int63 == 50);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 500L + "'", long65 == 500L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objEnumeration71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test8611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8611");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setEnableLogging(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str6 = atomikosProperties0.logBaseDir;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.Class<?> wildcardClass8 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test8612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8612");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 1);
        boolean boolean6 = atomikosProperties0.isSerialJtaTransactions();
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        boolean boolean8 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str9 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test8613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8613");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties2.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties2.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet15 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        int int18 = atomikosProperties16.getMaxActives();
        atomikosProperties16.setEnableLogging(true);
        boolean boolean21 = properties2.containsValue((java.lang.Object) atomikosProperties16);
        boolean boolean22 = atomikosProperties16.isThreadedTwoPhaseCommit();
        atomikosProperties16.setEnableLogging(false);
        atomikosProperties16.maxTimeout = (-1L);
        atomikosProperties16.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}";
        long long29 = atomikosProperties16.maxTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objEntrySet15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    }

    @Test
    public void test8614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8614");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        java.lang.String str19 = properties2.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        int int22 = atomikosProperties20.getMaxActives();
        java.lang.String str23 = atomikosProperties20.logBaseDir;
        boolean boolean24 = atomikosProperties20.serialJtaTransactions;
        java.lang.String str25 = atomikosProperties20.transactionManagerUniqueName;
        atomikosProperties20.threadedTwoPhaseCommit = false;
        atomikosProperties20.transactionManagerUniqueName = "{}";
        boolean boolean30 = properties2.contains((java.lang.Object) atomikosProperties20);
        long long31 = atomikosProperties20.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10000L + "'", long31 == 10000L);
    }

    @Test
    public void test8615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8615");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean8 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        long long11 = atomikosProperties0.checkpointInterval;
        long long12 = atomikosProperties0.getMaxTimeout();
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        properties13.clear();
        java.util.Enumeration<?> wildcardEnumeration15 = properties13.propertyNames();
        java.io.InputStream inputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.loadFromXML(inputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(wildcardEnumeration15);
    }

    @Test
    public void test8616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8616");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        int int4 = atomikosProperties0.maxActives;
        atomikosProperties0.setCheckpointInterval(97L);
        atomikosProperties0.defaultJtaTimeout = (byte) 0;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
    }

    @Test
    public void test8617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8617");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet19 = properties10.stringPropertyNames();
        java.lang.String str21 = properties10.getProperty("hi!");
        java.util.Enumeration<?> wildcardEnumeration22 = properties10.propertyNames();
        java.lang.Object obj25 = properties10.setProperty("", "{com.atomikos.icatch.tmlog=0.0}");
        java.lang.Object obj28 = properties10.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Enumeration<?> wildcardEnumeration29 = properties10.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        java.util.Properties properties32 = atomikosProperties30.asProperties();
        properties32.clear();
        boolean boolean34 = properties32.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        atomikosProperties35.setTransactionManagerUniqueName("");
        int int39 = atomikosProperties35.getMaxActives();
        java.lang.String str40 = atomikosProperties35.transactionManagerUniqueName;
        boolean boolean41 = properties32.containsValue((java.lang.Object) atomikosProperties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties42.setCheckpointInterval((long) 100);
        atomikosProperties42.maxActives = (byte) 0;
        atomikosProperties42.setTransactionManagerUniqueName("");
        java.lang.Object obj49 = properties32.get((java.lang.Object) atomikosProperties42);
        long long50 = atomikosProperties42.checkpointInterval;
        boolean boolean51 = atomikosProperties42.forceShutdownOnVmExit;
        atomikosProperties42.maxActives = 1;
        atomikosProperties42.setMaxTimeout(10000L);
        boolean boolean56 = properties10.equals((java.lang.Object) 10000L);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(wildcardEnumeration22);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj25, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(wildcardEnumeration29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test8618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8618");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        boolean boolean45 = atomikosProperties31.threadedTwoPhaseCommit;
        atomikosProperties31.maxTimeout = 10000L;
        boolean boolean48 = atomikosProperties31.forceShutdownOnVmExit;
        atomikosProperties31.service = "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test8619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8619");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.setLogBaseDir("tmlog");
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test8620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8620");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.lang.String str4 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long7 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setMaxTimeout((long) '#');
        boolean boolean12 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test8621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8621");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test8622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8622");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setCheckpointInterval((long) 9);
        atomikosProperties0.setLogBaseDir("{}");
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setMaxActives((int) (short) 100);
        atomikosProperties0.serialJtaTransactions = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test8623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8623");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        boolean boolean2 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean6 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test8624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8624");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.lang.Object obj13 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean23 = properties21.containsValue((java.lang.Object) 100L);
        boolean boolean24 = properties16.contains((java.lang.Object) properties21);
        java.util.Set<java.lang.String> strSet25 = properties21.stringPropertyNames();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<?> wildcardEnumeration27 = properties2.propertyNames();
        java.lang.Object obj28 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseName();
        int int33 = atomikosProperties29.getMaxActives();
        atomikosProperties29.setLogBaseDir("hi!");
        long long36 = atomikosProperties29.getDefaultJtaTimeout();
        atomikosProperties29.setForceShutdownOnVmExit(false);
        atomikosProperties29.setForceShutdownOnVmExit(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj41 = properties2.put(obj28, (java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(wildcardEnumeration27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 10000L + "'", long36 == 10000L);
    }

    @Test
    public void test8625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8625");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        atomikosProperties9.setLogBaseDir("{}");
        atomikosProperties9.setForceShutdownOnVmExit(false);
        atomikosProperties9.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties9.setDefaultJtaTimeout(35L);
        boolean boolean29 = atomikosProperties9.forceShutdownOnVmExit;
        atomikosProperties9.service = "";
        atomikosProperties9.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test8626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8626");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        java.util.Properties properties50 = atomikosProperties48.asProperties();
        java.lang.Object obj51 = properties50.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        java.lang.String str55 = atomikosProperties52.getLogBaseDir();
        atomikosProperties52.setMaxActives((int) (byte) -1);
        boolean boolean58 = atomikosProperties52.isEnableLogging();
        atomikosProperties52.transactionManagerUniqueName = "";
        atomikosProperties52.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        atomikosProperties63.setMaxActives((int) (byte) -1);
        java.lang.String str69 = atomikosProperties63.getService();
        java.lang.Object obj70 = properties50.getOrDefault((java.lang.Object) atomikosProperties52, (java.lang.Object) atomikosProperties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long72 = atomikosProperties71.checkpointInterval;
        int int73 = atomikosProperties71.getMaxActives();
        java.lang.String str74 = atomikosProperties71.logBaseDir;
        java.lang.Object obj76 = properties50.putIfAbsent((java.lang.Object) atomikosProperties71, (java.lang.Object) "");
        boolean boolean77 = atomikosProperties71.isThreadedTwoPhaseCommit();
        boolean boolean78 = properties7.contains((java.lang.Object) boolean77);
        java.io.Writer writer79 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.store(writer79, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertNotNull(obj51);
// flaky:         org.junit.Assert.assertEquals(obj51.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 500L + "'", long72 == 500L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 50 + "'", int73 == 50);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test8627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8627");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        long long4 = atomikosProperties0.getCheckpointInterval();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        java.io.InputStream inputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties5.load(inputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
    }

    @Test
    public void test8628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8628");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        int int4 = atomikosProperties0.getMaxActives();
        long long5 = atomikosProperties0.maxTimeout;
        atomikosProperties0.setTransactionManagerUniqueName("{}");
        long long8 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.maxActives = 'a';
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
    }

    @Test
    public void test8629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8629");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setCheckpointInterval(35L);
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet8 = properties7.entrySet();
        boolean boolean9 = properties7.isEmpty();
        java.lang.String str11 = properties7.getProperty("");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNotNull(objEntrySet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test8630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8630");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.checkpointInterval = (byte) 1;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        atomikosProperties0.setMaxTimeout((long) 9);
        java.util.Properties properties20 = atomikosProperties0.asProperties();
        java.lang.Object obj21 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        atomikosProperties22.setTransactionManagerUniqueName("");
        int int26 = atomikosProperties22.getMaxActives();
        java.lang.String str27 = atomikosProperties22.getLogBaseDir();
        java.lang.String str28 = atomikosProperties22.logBaseName;
        boolean boolean29 = atomikosProperties22.threadedTwoPhaseCommit;
        java.lang.String str30 = atomikosProperties22.logBaseDir;
        boolean boolean31 = properties20.equals((java.lang.Object) str30);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=1, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=9, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=1, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=9, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=1, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=9, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test8631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8631");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        atomikosProperties44.threadedTwoPhaseCommit = true;
        boolean boolean50 = atomikosProperties44.enableLogging;
        atomikosProperties44.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        long long53 = atomikosProperties44.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10000L + "'", long53 == 10000L);
    }

    @Test
    public void test8632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8632");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties2.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties2.keys();
        java.util.Collection<java.lang.Object> objCollection15 = properties2.values();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        atomikosProperties17.setService("");
        java.util.Properties properties22 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        boolean boolean36 = atomikosProperties29.forceShutdownOnVmExit;
        atomikosProperties17.set(properties22, "{}", (java.lang.Object) boolean36);
        java.util.Properties properties38 = new java.util.Properties(properties22);
        java.lang.Object obj39 = properties2.remove((java.lang.Object) properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        java.util.Set<java.lang.String> strSet43 = properties42.stringPropertyNames();
        properties22.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties42);
        java.lang.Object obj45 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = properties22.contains(obj45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNotNull(strSet43);
    }

    @Test
    public void test8633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8633");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        java.lang.String str8 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        java.lang.Object obj14 = properties11.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection15 = properties11.values();
        int int16 = properties11.size();
        java.lang.Object obj17 = null;
        boolean boolean18 = properties11.equals(obj17);
        java.util.Collection<java.lang.Object> objCollection19 = properties11.values();
        java.lang.Object obj20 = properties2.get((java.lang.Object) properties11);
        java.io.OutputStream outputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream21, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test8634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8634");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.setCheckpointInterval((long) 100);
        boolean boolean6 = atomikosProperties3.isForceShutdownOnVmExit();
        atomikosProperties3.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean9 = properties2.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties2.entrySet();
        java.lang.String str11 = properties2.toString();
        java.util.Collection<java.lang.Object> objCollection12 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet13 = properties2.entrySet();
        java.lang.Object obj14 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        atomikosProperties15.setTransactionManagerUniqueName("");
        int int19 = atomikosProperties15.getMaxActives();
        atomikosProperties15.logBaseName = "tmlog";
        long long22 = atomikosProperties15.checkpointInterval;
        atomikosProperties15.logBaseDir = "";
        atomikosProperties15.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = properties2.remove(obj14, (java.lang.Object) atomikosProperties15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str11, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNotNull(objEntrySet13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
    }

    @Test
    public void test8635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8635");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.lang.String str9 = atomikosProperties0.logBaseDir;
        boolean boolean10 = atomikosProperties0.threadedTwoPhaseCommit;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        atomikosProperties16.maxActives = ' ';
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.threadedTwoPhaseCommit = true;
        java.util.Properties properties48 = atomikosProperties37.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        properties52.clear();
        boolean boolean54 = properties52.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str56 = atomikosProperties55.logBaseDir;
        atomikosProperties55.setTransactionManagerUniqueName("");
        int int59 = atomikosProperties55.getMaxActives();
        java.lang.String str60 = atomikosProperties55.transactionManagerUniqueName;
        boolean boolean61 = properties52.containsValue((java.lang.Object) atomikosProperties55);
        java.util.Enumeration<java.lang.Object> objEnumeration62 = properties52.elements();
        atomikosProperties16.set(properties48, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) properties52);
        java.lang.String str65 = properties52.getProperty("{}");
        int int66 = properties52.size();
        java.lang.Object obj67 = properties11.get((java.lang.Object) properties52);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objEnumeration62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(obj67);
    }

    @Test
    public void test8636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8636");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        atomikosProperties0.setCheckpointInterval((long) (byte) 100);
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean8 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean9 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.checkpointInterval = 300000L;
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test8637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8637");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str10 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.defaultJtaTimeout = 'a';
        long long13 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 97L + "'", long13 == 97L);
    }

    @Test
    public void test8638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8638");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        long long6 = atomikosProperties0.getCheckpointInterval();
        boolean boolean7 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test8639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8639");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        java.lang.String str15 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        java.util.Properties properties16 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setMaxActives((int) (byte) -1);
        java.util.Properties properties23 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.transactionManagerUniqueName;
        boolean boolean35 = properties26.containsValue((java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties36.setCheckpointInterval((long) 100);
        atomikosProperties36.maxActives = (byte) 0;
        atomikosProperties36.setTransactionManagerUniqueName("");
        java.lang.Object obj43 = properties26.get((java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseDir = "{}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        boolean boolean50 = atomikosProperties46.isSerialJtaTransactions();
        atomikosProperties46.setEnableLogging(false);
        boolean boolean53 = atomikosProperties46.serialJtaTransactions;
        long long54 = atomikosProperties46.defaultJtaTimeout;
        java.lang.String str55 = atomikosProperties46.logBaseName;
        java.lang.Object obj56 = properties23.put((java.lang.Object) atomikosProperties36, (java.lang.Object) atomikosProperties46);
        java.util.Set<java.lang.String> strSet57 = properties23.stringPropertyNames();
        java.util.Set<java.lang.String> strSet58 = properties23.stringPropertyNames();
        properties16.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties60.enableLogging = true;
        boolean boolean63 = atomikosProperties60.isEnableLogging();
        boolean boolean64 = atomikosProperties60.isForceShutdownOnVmExit();
        boolean boolean65 = atomikosProperties60.threadedTwoPhaseCommit;
        boolean boolean66 = atomikosProperties60.isThreadedTwoPhaseCommit();
        boolean boolean67 = properties16.contains((java.lang.Object) atomikosProperties60);
        java.io.InputStream inputStream68 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties16.load(inputStream68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test8640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8640");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        boolean boolean9 = atomikosProperties0.enableLogging;
        atomikosProperties0.forceShutdownOnVmExit = true;
        java.lang.String str12 = atomikosProperties0.service;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test8641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8641");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str12 = atomikosProperties0.getLogBaseName();
        java.lang.String str13 = atomikosProperties0.getService();
        long long14 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test8642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8642");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.getOrDefault((java.lang.Object) 0.0f, (java.lang.Object) 0.0d);
        java.util.Enumeration<?> wildcardEnumeration4 = properties0.propertyNames();
        java.util.Set<java.lang.String> strSet5 = properties0.stringPropertyNames();
        java.io.Reader reader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.load(reader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 0.0d + "'", obj3, 0.0d);
        org.junit.Assert.assertNotNull(wildcardEnumeration4);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test8643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8643");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        atomikosProperties23.setMaxActives((int) (byte) -1);
        java.lang.String str29 = atomikosProperties23.getService();
        long long30 = atomikosProperties23.defaultJtaTimeout;
        java.lang.String str31 = atomikosProperties23.logBaseName;
        java.lang.String str32 = atomikosProperties23.logBaseDir;
        java.lang.Class<?> wildcardClass33 = atomikosProperties23.getClass();
        java.lang.Object obj34 = properties21.put((java.lang.Object) false, (java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.serialJtaTransactions = true;
        atomikosProperties35.checkpointInterval = (-1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        java.lang.Object obj47 = properties21.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties44);
        int int48 = atomikosProperties44.maxActives;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
    }

    @Test
    public void test8644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8644");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        atomikosProperties19.maxActives = (byte) 0;
        atomikosProperties19.setTransactionManagerUniqueName("");
        java.lang.Object obj26 = properties9.get((java.lang.Object) atomikosProperties19);
        atomikosProperties19.logBaseDir = "{}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        boolean boolean33 = atomikosProperties29.isSerialJtaTransactions();
        atomikosProperties29.setEnableLogging(false);
        boolean boolean36 = atomikosProperties29.serialJtaTransactions;
        long long37 = atomikosProperties29.defaultJtaTimeout;
        java.lang.String str38 = atomikosProperties29.logBaseName;
        java.lang.Object obj39 = properties6.put((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties29);
        atomikosProperties29.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        atomikosProperties29.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 10000L + "'", long37 == 10000L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(obj39);
    }

    @Test
    public void test8645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8645");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        boolean boolean48 = atomikosProperties45.isForceShutdownOnVmExit();
        atomikosProperties45.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long51 = atomikosProperties45.getDefaultJtaTimeout();
        long long52 = atomikosProperties45.getMaxTimeout();
        atomikosProperties45.logBaseName = "tmlog";
        long long55 = atomikosProperties45.getDefaultJtaTimeout();
        atomikosProperties45.maxActives = 9;
        boolean boolean58 = properties2.containsKey((java.lang.Object) atomikosProperties45);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet59 = properties2.entrySet();
        int int60 = properties2.size();
        properties2.clear();
        java.lang.Object obj62 = properties2.clone();
        java.io.InputStream inputStream63 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(inputStream63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objEntrySet59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
    }

    @Test
    public void test8646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8646");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.checkpointInterval = 10L;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test8647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8647");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        java.lang.String str12 = atomikosProperties0.logBaseName;
        long long13 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        long long16 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
    }

    @Test
    public void test8648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8648");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.lang.String str15 = properties14.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        java.lang.Object obj19 = properties18.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.logBaseDir;
        java.lang.String str22 = atomikosProperties20.logBaseName;
        java.lang.String str23 = atomikosProperties20.getLogBaseDir();
        atomikosProperties20.setMaxActives((int) (byte) -1);
        boolean boolean26 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.transactionManagerUniqueName = "";
        atomikosProperties20.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        java.lang.String str37 = atomikosProperties31.getService();
        java.lang.Object obj38 = properties18.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties31);
        int int39 = properties18.size();
        java.lang.String str40 = properties18.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties18.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        atomikosProperties42.setTransactionManagerUniqueName("");
        int int46 = atomikosProperties42.getMaxActives();
        java.lang.String str47 = atomikosProperties42.transactionManagerUniqueName;
        atomikosProperties42.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        properties52.clear();
        java.util.Properties properties54 = new java.util.Properties(properties52);
        atomikosProperties42.set(properties52, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj60 = properties52.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet61 = properties52.stringPropertyNames();
        java.lang.String str63 = properties52.getProperty("hi!");
        properties18.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        java.util.Set<java.lang.String> strSet65 = properties18.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        properties68.clear();
        boolean boolean70 = properties68.isEmpty();
        java.lang.Object obj71 = properties68.clone();
        java.util.Set<java.lang.Object> objSet72 = properties68.keySet();
        java.lang.Object obj73 = properties14.replace((java.lang.Object) properties18, (java.lang.Object) objSet72);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str75 = atomikosProperties74.logBaseDir;
        java.lang.String str76 = atomikosProperties74.logBaseName;
        java.lang.String str77 = atomikosProperties74.getLogBaseDir();
        atomikosProperties74.setMaxActives((int) (byte) -1);
        boolean boolean80 = atomikosProperties74.isEnableLogging();
        long long81 = atomikosProperties74.checkpointInterval;
        atomikosProperties74.setCheckpointInterval(10L);
        boolean boolean84 = atomikosProperties74.serialJtaTransactions;
        boolean boolean85 = properties18.containsValue((java.lang.Object) atomikosProperties74);
        long long86 = atomikosProperties74.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str40, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 50 + "'", int46 == 50);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "{}");
        org.junit.Assert.assertNotNull(objSet72);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "tmlog" + "'", str76, "tmlog");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10L + "'", long86 == 10L);
    }

    @Test
    public void test8649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8649");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        java.util.Properties properties15 = atomikosProperties9.asProperties();
        boolean boolean16 = properties2.equals((java.lang.Object) atomikosProperties9);
        atomikosProperties9.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties9.setMaxActives((int) 'a');
        boolean boolean21 = atomikosProperties9.isSerialJtaTransactions();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test8650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8650");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        java.lang.String str9 = atomikosProperties0.service;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.hi!=0, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test8651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8651");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.enableLogging = true;
        atomikosProperties14.maxActives = (byte) -1;
        boolean boolean19 = atomikosProperties14.isForceShutdownOnVmExit();
        boolean boolean20 = properties8.containsValue((java.lang.Object) atomikosProperties14);
        int int21 = atomikosProperties14.getMaxActives();
        atomikosProperties14.maxTimeout = 50L;
        java.lang.String str24 = atomikosProperties14.logBaseDir;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test8652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8652");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.serialJtaTransactions = true;
        boolean boolean9 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean10 = atomikosProperties0.enableLogging;
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test8653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8653");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        long long4 = atomikosProperties0.maxTimeout;
        java.lang.String str5 = atomikosProperties0.getService();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 300000L + "'", long4 == 300000L);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test8654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8654");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}";
        int int13 = atomikosProperties0.getMaxActives();
        atomikosProperties0.defaultJtaTimeout = 11;
        atomikosProperties0.forceShutdownOnVmExit = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
    }

    @Test
    public void test8655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8655");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        int int14 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        java.lang.Object obj18 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties30);
        int int38 = properties17.size();
        java.lang.String str39 = properties17.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties17.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.enableLogging = true;
        atomikosProperties41.maxActives = (byte) -1;
        java.lang.Object obj46 = properties2.putIfAbsent((java.lang.Object) properties17, (java.lang.Object) (byte) -1);
        java.lang.Object obj49 = properties2.setProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        java.io.InputStream inputStream50 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(inputStream50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str39, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test8656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8656");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        java.util.Properties properties10 = new java.util.Properties(properties8);
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str14 = properties10.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        boolean boolean21 = atomikosProperties15.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setCheckpointInterval((long) 100);
        boolean boolean25 = atomikosProperties22.isForceShutdownOnVmExit();
        java.lang.Object obj26 = properties10.putIfAbsent((java.lang.Object) atomikosProperties15, (java.lang.Object) boolean25);
        java.util.Set<java.lang.String> strSet27 = properties10.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet28 = properties10.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        int int31 = atomikosProperties29.getMaxActives();
        atomikosProperties29.setCheckpointInterval(1L);
        long long34 = atomikosProperties29.getMaxTimeout();
        java.lang.Object obj35 = properties10.get((java.lang.Object) atomikosProperties29);
        java.lang.Object obj36 = properties2.remove((java.lang.Object) properties10);
        boolean boolean37 = properties2.isEmpty();
        java.lang.Object obj38 = properties2.clone();
        java.io.Reader reader39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(reader39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 300000L + "'", long34 == 300000L);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8657");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.defaultJtaTimeout = 'a';
        atomikosProperties0.setLogBaseName("");
        atomikosProperties0.enableLogging = true;
        int int10 = atomikosProperties0.maxActives;
        atomikosProperties0.setMaxActives((int) (byte) 0);
        atomikosProperties0.setMaxTimeout(9L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
    }

    @Test
    public void test8658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8658");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties17 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration18 = properties17.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties19.service = "hi!";
        long long27 = atomikosProperties19.getMaxTimeout();
        atomikosProperties19.setMaxTimeout(10000L);
        atomikosProperties19.threadedTwoPhaseCommit = true;
        java.lang.String str32 = atomikosProperties19.getLogBaseDir();
        java.util.Properties properties33 = atomikosProperties19.asProperties();
        java.lang.Object obj34 = properties17.remove((java.lang.Object) properties33);
        java.util.Properties properties35 = new java.util.Properties(properties17);
        java.lang.Object obj38 = properties35.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        boolean boolean43 = properties41.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.logBaseDir;
        atomikosProperties44.setTransactionManagerUniqueName("");
        int int48 = atomikosProperties44.getMaxActives();
        java.lang.String str49 = atomikosProperties44.transactionManagerUniqueName;
        boolean boolean50 = properties41.containsValue((java.lang.Object) atomikosProperties44);
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties41.elements();
        java.util.Collection<java.lang.Object> objCollection52 = properties41.values();
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties41.keys();
        boolean boolean54 = properties35.containsValue((java.lang.Object) objEnumeration53);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objEnumeration18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 300000L + "'", long27 == 300000L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str32, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objEnumeration51);
        org.junit.Assert.assertNotNull(objCollection52);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test8659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8659");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setMaxActives((int) (byte) 0);
        atomikosProperties0.service = "hi!";
        java.lang.String str13 = atomikosProperties0.getService();
        long long14 = atomikosProperties0.getCheckpointInterval();
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        atomikosProperties0.setMaxActives(35);
        long long18 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
    }

    @Test
    public void test8660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8660");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        boolean boolean11 = atomikosProperties9.isSerialJtaTransactions();
        atomikosProperties9.transactionManagerUniqueName = "";
        atomikosProperties9.setTransactionManagerUniqueName("{}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        atomikosProperties16.setService("");
        java.util.Properties properties21 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        properties25.clear();
        boolean boolean27 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        atomikosProperties28.setTransactionManagerUniqueName("");
        int int32 = atomikosProperties28.getMaxActives();
        java.lang.String str33 = atomikosProperties28.transactionManagerUniqueName;
        boolean boolean34 = properties25.containsValue((java.lang.Object) atomikosProperties28);
        boolean boolean35 = atomikosProperties28.forceShutdownOnVmExit;
        atomikosProperties16.set(properties21, "{}", (java.lang.Object) boolean35);
        java.lang.Object obj39 = properties21.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{}");
        java.util.Set<java.lang.Object> objSet40 = properties21.keySet();
        java.lang.Object obj41 = properties2.replace((java.lang.Object) atomikosProperties9, (java.lang.Object) properties21);
        java.util.Set<java.lang.String> strSet42 = properties2.stringPropertyNames();
        java.io.Writer writer43 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(writer43, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(strSet42);
    }

    @Test
    public void test8661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8661");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        boolean boolean18 = atomikosProperties14.isSerialJtaTransactions();
        atomikosProperties14.setLogBaseName("");
        atomikosProperties14.setTransactionManagerUniqueName("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        java.lang.Object obj28 = properties13.replace((java.lang.Object) "tmlog", (java.lang.Object) int27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        int int31 = atomikosProperties29.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        boolean boolean36 = properties34.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        java.lang.Object obj42 = properties39.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.String str46 = atomikosProperties43.getLogBaseDir();
        atomikosProperties43.setLogBaseName("");
        java.lang.Object obj49 = properties34.replace((java.lang.Object) properties39, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        boolean boolean57 = atomikosProperties51.isEnableLogging();
        atomikosProperties51.transactionManagerUniqueName = "";
        atomikosProperties51.setEnableLogging(false);
        boolean boolean62 = atomikosProperties51.isEnableLogging();
        boolean boolean63 = properties39.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean62);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet64 = properties39.entrySet();
        atomikosProperties29.set(properties39, "{}", (java.lang.Object) ' ');
        boolean boolean68 = properties13.contains((java.lang.Object) atomikosProperties29);
        atomikosProperties29.forceShutdownOnVmExit = true;
        java.util.Properties properties71 = atomikosProperties29.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long73 = atomikosProperties72.checkpointInterval;
        atomikosProperties72.forceShutdownOnVmExit = false;
        atomikosProperties72.threadedTwoPhaseCommit = false;
        long long78 = atomikosProperties72.getMaxTimeout();
        java.lang.String str79 = atomikosProperties72.transactionManagerUniqueName;
        long long80 = atomikosProperties72.defaultJtaTimeout;
        long long81 = atomikosProperties72.maxTimeout;
        int int82 = atomikosProperties72.getMaxActives();
        java.lang.Object obj83 = properties71.remove((java.lang.Object) int82);
        java.util.Set<java.lang.Object> objSet84 = properties71.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objEntrySet64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 500L + "'", long73 == 500L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 300000L + "'", long78 == 300000L);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10000L + "'", long80 == 10000L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 300000L + "'", long81 == 300000L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 50 + "'", int82 == 50);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNotNull(objSet84);
    }

    @Test
    public void test8662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8662");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setMaxActives((int) 'a');
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.checkpointInterval = (byte) 1;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test8663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8663");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        java.lang.String str27 = properties2.getProperty("tmlog");
        boolean boolean28 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        atomikosProperties29.setTransactionManagerUniqueName("");
        int int33 = atomikosProperties29.getMaxActives();
        java.lang.String str34 = atomikosProperties29.getLogBaseDir();
        java.lang.String str35 = atomikosProperties29.logBaseName;
        atomikosProperties29.setSerialJtaTransactions(true);
        java.lang.String str38 = atomikosProperties29.logBaseName;
        long long39 = atomikosProperties29.getDefaultJtaTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        java.lang.String str46 = atomikosProperties40.getService();
        atomikosProperties40.setSerialJtaTransactions(false);
        long long49 = atomikosProperties40.defaultJtaTimeout;
        atomikosProperties40.setDefaultJtaTimeout((long) 'a');
        java.lang.String str52 = atomikosProperties40.getService();
        java.lang.Object obj53 = properties2.replace((java.lang.Object) long39, (java.lang.Object) atomikosProperties40);
        long long54 = atomikosProperties40.checkpointInterval;
        java.lang.String str55 = atomikosProperties40.getLogBaseName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 10000L + "'", long49 == 10000L);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 500L + "'", long54 == 500L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
    }

    @Test
    public void test8664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8664");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        atomikosProperties0.serialJtaTransactions = false;
        long long12 = atomikosProperties0.defaultJtaTimeout;
        long long13 = atomikosProperties0.getMaxTimeout();
        boolean boolean14 = atomikosProperties0.serialJtaTransactions;
        long long15 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
    }

    @Test
    public void test8665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8665");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        java.lang.Object obj19 = properties18.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str21 = atomikosProperties20.logBaseDir;
        java.lang.String str22 = atomikosProperties20.logBaseName;
        java.lang.String str23 = atomikosProperties20.getLogBaseDir();
        atomikosProperties20.setMaxActives((int) (byte) -1);
        boolean boolean26 = atomikosProperties20.isEnableLogging();
        atomikosProperties20.transactionManagerUniqueName = "";
        atomikosProperties20.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        java.lang.String str37 = atomikosProperties31.getService();
        java.lang.Object obj38 = properties18.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        int int41 = atomikosProperties39.getMaxActives();
        java.lang.String str42 = atomikosProperties39.logBaseDir;
        java.lang.Object obj44 = properties18.putIfAbsent((java.lang.Object) atomikosProperties39, (java.lang.Object) "");
        int int45 = properties18.size();
        java.util.Collection<java.lang.Object> objCollection46 = properties18.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        int int49 = atomikosProperties47.getMaxActives();
        java.lang.String str50 = atomikosProperties47.logBaseDir;
        java.lang.String str51 = atomikosProperties47.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        java.lang.String str55 = atomikosProperties52.getLogBaseDir();
        atomikosProperties52.setMaxActives((int) (byte) -1);
        boolean boolean58 = atomikosProperties52.isEnableLogging();
        java.lang.String str59 = atomikosProperties52.getLogBaseName();
        java.lang.Object obj60 = properties18.replace((java.lang.Object) atomikosProperties47, (java.lang.Object) atomikosProperties52);
        atomikosProperties47.threadedTwoPhaseCommit = true;
        atomikosProperties47.service = "tmlog";
        java.lang.String str65 = atomikosProperties47.logBaseName;
        atomikosProperties47.setForceShutdownOnVmExit(false);
        atomikosProperties47.logBaseDir = "";
        atomikosProperties47.setLogBaseDir("");
        atomikosProperties47.logBaseName = "tmlog";
        boolean boolean74 = atomikosProperties47.isForceShutdownOnVmExit();
        java.lang.Object obj76 = properties14.putIfAbsent((java.lang.Object) atomikosProperties47, (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str78 = atomikosProperties77.logBaseDir;
        java.lang.String str79 = atomikosProperties77.logBaseName;
        java.lang.String str80 = atomikosProperties77.getLogBaseDir();
        atomikosProperties77.setMaxActives((int) (byte) -1);
        boolean boolean83 = atomikosProperties77.isEnableLogging();
        java.lang.String str84 = atomikosProperties77.getLogBaseName();
        long long85 = atomikosProperties77.getMaxTimeout();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties86 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str87 = atomikosProperties86.logBaseDir;
        java.lang.String str88 = atomikosProperties86.logBaseName;
        java.lang.String str89 = atomikosProperties86.getLogBaseName();
        atomikosProperties86.setDefaultJtaTimeout((long) (byte) 1);
        boolean boolean92 = atomikosProperties86.isSerialJtaTransactions();
        java.util.Properties properties93 = atomikosProperties86.asProperties();
        java.lang.String str94 = atomikosProperties86.getLogBaseName();
        boolean boolean95 = properties14.remove((java.lang.Object) atomikosProperties77, (java.lang.Object) atomikosProperties86);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 50 + "'", int41 == 50);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 50 + "'", int49 == 50);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "tmlog" + "'", str84, "tmlog");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 300000L + "'", long85 == 300000L);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "tmlog" + "'", str88, "tmlog");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "tmlog" + "'", str89, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(properties93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "tmlog" + "'", str94, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test8666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8666");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        java.util.Set<java.lang.Object> objSet6 = properties2.keySet();
        boolean boolean9 = properties2.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        java.util.Properties properties12 = atomikosProperties10.asProperties();
        atomikosProperties10.threadedTwoPhaseCommit = false;
        boolean boolean15 = properties2.containsKey((java.lang.Object) atomikosProperties10);
        java.io.PrintWriter printWriter16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.list(printWriter16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test8667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8667");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        long long13 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.setService("hi!");
        atomikosProperties11.serialJtaTransactions = false;
        boolean boolean18 = atomikosProperties11.isForceShutdownOnVmExit();
        boolean boolean19 = properties10.containsKey((java.lang.Object) atomikosProperties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        int int22 = atomikosProperties20.getMaxActives();
        java.lang.String str23 = atomikosProperties20.transactionManagerUniqueName;
        boolean boolean24 = atomikosProperties20.isEnableLogging();
        long long25 = atomikosProperties20.checkpointInterval;
        atomikosProperties20.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        java.lang.Object obj31 = properties30.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        java.lang.String str34 = atomikosProperties32.logBaseName;
        java.lang.String str35 = atomikosProperties32.getLogBaseDir();
        atomikosProperties32.setMaxActives((int) (byte) -1);
        boolean boolean38 = atomikosProperties32.isEnableLogging();
        atomikosProperties32.transactionManagerUniqueName = "";
        atomikosProperties32.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.String str46 = atomikosProperties43.getLogBaseDir();
        atomikosProperties43.setMaxActives((int) (byte) -1);
        java.lang.String str49 = atomikosProperties43.getService();
        java.lang.Object obj50 = properties30.getOrDefault((java.lang.Object) atomikosProperties32, (java.lang.Object) atomikosProperties43);
        int int51 = properties30.size();
        java.lang.String str53 = properties30.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        java.util.Properties properties56 = atomikosProperties54.asProperties();
        java.lang.Object obj57 = properties56.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.logBaseDir;
        java.lang.String str60 = atomikosProperties58.logBaseName;
        java.lang.String str61 = atomikosProperties58.getLogBaseDir();
        atomikosProperties58.setMaxActives((int) (byte) -1);
        java.lang.String str64 = atomikosProperties58.getService();
        long long65 = atomikosProperties58.defaultJtaTimeout;
        java.lang.String str66 = atomikosProperties58.logBaseName;
        boolean boolean67 = properties30.remove(obj57, (java.lang.Object) atomikosProperties58);
        java.util.Enumeration<java.lang.Object> objEnumeration68 = properties30.elements();
        java.util.Set<java.lang.String> strSet69 = properties30.stringPropertyNames();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet70 = properties30.entrySet();
        java.lang.Object obj71 = properties10.getOrDefault((java.lang.Object) atomikosProperties20, (java.lang.Object) properties30);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertNotNull(obj57);
// flaky:         org.junit.Assert.assertEquals(obj57.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tmlog" + "'", str60, "tmlog");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10000L + "'", long65 == 10000L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "tmlog" + "'", str66, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objEnumeration68);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(objEntrySet70);
        org.junit.Assert.assertNotNull(obj71);
// flaky:         org.junit.Assert.assertEquals(obj71.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8668");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Collection<java.lang.Object> objCollection13 = properties2.values();
        java.lang.String str15 = properties2.getProperty("hi!");
        int int16 = properties2.size();
        java.lang.Object obj19 = properties2.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test8669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8669");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        int int6 = atomikosProperties0.getMaxActives();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        int int10 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        atomikosProperties16.setTransactionManagerUniqueName("");
        int int20 = atomikosProperties16.getMaxActives();
        java.lang.String str21 = atomikosProperties16.transactionManagerUniqueName;
        atomikosProperties16.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        java.util.Properties properties28 = new java.util.Properties(properties26);
        atomikosProperties16.set(properties26, "tmlog", (java.lang.Object) 0.0d);
        java.util.Properties properties32 = new java.util.Properties(properties26);
        java.lang.String str34 = properties32.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties35 = new java.util.Properties(properties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        atomikosProperties37.setTransactionManagerUniqueName("");
        int int41 = atomikosProperties37.getMaxActives();
        atomikosProperties37.logBaseName = "tmlog";
        int int44 = atomikosProperties37.maxActives;
        long long45 = atomikosProperties37.getCheckpointInterval();
        int int46 = atomikosProperties37.maxActives;
        long long47 = atomikosProperties37.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        atomikosProperties48.setTransactionManagerUniqueName("");
        int int52 = atomikosProperties48.getMaxActives();
        java.lang.String str53 = atomikosProperties48.transactionManagerUniqueName;
        atomikosProperties48.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        java.util.Properties properties58 = atomikosProperties56.asProperties();
        properties58.clear();
        java.util.Properties properties60 = new java.util.Properties(properties58);
        atomikosProperties48.set(properties58, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj66 = properties58.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet67 = properties58.stringPropertyNames();
        java.lang.String str69 = properties58.getProperty("hi!");
        java.util.Enumeration<java.lang.Object> objEnumeration70 = properties58.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str73 = atomikosProperties72.logBaseDir;
        java.lang.String str74 = atomikosProperties72.logBaseName;
        java.lang.String str75 = atomikosProperties72.getLogBaseDir();
        boolean boolean76 = atomikosProperties72.isSerialJtaTransactions();
        atomikosProperties72.setLogBaseName("");
        long long79 = atomikosProperties72.getMaxTimeout();
        java.lang.String str80 = atomikosProperties72.getService();
        java.util.Properties properties81 = atomikosProperties72.asProperties();
        atomikosProperties37.set(properties58, "", (java.lang.Object) atomikosProperties72);
        atomikosProperties0.set(properties35, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties37);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 50 + "'", int41 == 50);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 50 + "'", int46 == 50);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10000L + "'", long47 == 10000L);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(objEnumeration70);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "tmlog" + "'", str74, "tmlog");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 300000L + "'", long79 == 300000L);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(properties81);
    }

    @Test
    public void test8670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8670");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        java.lang.String str72 = atomikosProperties66.getService();
        long long73 = atomikosProperties66.defaultJtaTimeout;
        atomikosProperties66.setEnableLogging(true);
        boolean boolean76 = properties53.equals((java.lang.Object) atomikosProperties66);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str78 = atomikosProperties77.logBaseDir;
        java.lang.String str79 = atomikosProperties77.logBaseName;
        java.lang.String str80 = atomikosProperties77.getLogBaseDir();
        atomikosProperties77.setMaxActives((int) (byte) -1);
        java.lang.String str83 = atomikosProperties77.getService();
        atomikosProperties77.setDefaultJtaTimeout((long) (-1));
        int int86 = atomikosProperties77.maxActives;
        long long87 = atomikosProperties77.maxTimeout;
        long long88 = atomikosProperties77.getDefaultJtaTimeout();
        java.lang.Object obj89 = properties53.remove((java.lang.Object) atomikosProperties77);
        java.util.Enumeration<java.lang.Object> objEnumeration90 = properties53.keys();
        java.io.Writer writer91 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties53.store(writer91, "{com.atomikos.icatch.tmlog=0.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 300000L + "'", long87 == 300000L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNotNull(objEnumeration90);
    }

    @Test
    public void test8671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8671");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.forceShutdownOnVmExit;
        atomikosProperties36.forceShutdownOnVmExit = true;
        atomikosProperties36.setForceShutdownOnVmExit(true);
        boolean boolean52 = atomikosProperties36.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test8672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8672");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.setCheckpointInterval((long) (short) 10);
        java.lang.String str46 = atomikosProperties0.logBaseDir;
        java.util.Properties properties47 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet48 = properties47.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNotNull(strSet48);
    }

    @Test
    public void test8673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8673");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        boolean boolean34 = atomikosProperties32.isSerialJtaTransactions();
        java.lang.Object obj35 = properties7.get((java.lang.Object) atomikosProperties32);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties7.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.lang.Object obj42 = properties39.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        atomikosProperties44.forceShutdownOnVmExit = false;
        atomikosProperties44.setTransactionManagerUniqueName("");
        java.lang.Object obj50 = properties39.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        boolean boolean56 = properties54.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        java.util.Properties properties59 = atomikosProperties57.asProperties();
        java.lang.Object obj62 = properties59.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        atomikosProperties63.setLogBaseName("");
        java.lang.Object obj69 = properties54.replace((java.lang.Object) properties59, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long71 = atomikosProperties70.checkpointInterval;
        java.util.Properties properties72 = atomikosProperties70.asProperties();
        java.lang.Object obj73 = properties72.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str75 = atomikosProperties74.logBaseDir;
        java.lang.String str76 = atomikosProperties74.logBaseName;
        java.lang.String str77 = atomikosProperties74.getLogBaseDir();
        atomikosProperties74.setMaxActives((int) (byte) -1);
        boolean boolean80 = atomikosProperties74.isEnableLogging();
        atomikosProperties74.transactionManagerUniqueName = "";
        atomikosProperties74.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str86 = atomikosProperties85.logBaseDir;
        java.lang.String str87 = atomikosProperties85.logBaseName;
        java.lang.String str88 = atomikosProperties85.getLogBaseDir();
        atomikosProperties85.setMaxActives((int) (byte) -1);
        java.lang.String str91 = atomikosProperties85.getService();
        java.lang.Object obj92 = properties72.getOrDefault((java.lang.Object) atomikosProperties74, (java.lang.Object) atomikosProperties85);
        boolean boolean93 = properties39.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties54, (java.lang.Object) atomikosProperties85);
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.lang.Object obj97 = properties54.setProperty("hi!", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 500L + "'", long71 == 500L);
        org.junit.Assert.assertNotNull(properties72);
        org.junit.Assert.assertNotNull(obj73);
// flaky:         org.junit.Assert.assertEquals(obj73.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "tmlog" + "'", str76, "tmlog");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "tmlog" + "'", str87, "tmlog");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test8674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8674");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        boolean boolean9 = properties7.containsValue((java.lang.Object) 100L);
        boolean boolean10 = properties2.contains((java.lang.Object) properties7);
        java.util.Set<java.lang.String> strSet11 = properties2.stringPropertyNames();
        boolean boolean12 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        java.lang.Object obj16 = properties15.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setMaxActives((int) (byte) -1);
        boolean boolean23 = atomikosProperties17.isEnableLogging();
        atomikosProperties17.transactionManagerUniqueName = "";
        atomikosProperties17.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        java.lang.String str30 = atomikosProperties28.logBaseName;
        java.lang.String str31 = atomikosProperties28.getLogBaseDir();
        atomikosProperties28.setMaxActives((int) (byte) -1);
        java.lang.String str34 = atomikosProperties28.getService();
        java.lang.Object obj35 = properties15.getOrDefault((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties28);
        int int36 = properties15.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet37 = properties15.entrySet();
        java.util.Enumeration<?> wildcardEnumeration38 = properties15.propertyNames();
        java.lang.Object obj39 = properties15.clone();
        java.util.Enumeration<?> wildcardEnumeration40 = properties15.propertyNames();
        java.util.Set<java.lang.String> strSet41 = properties15.stringPropertyNames();
        java.lang.Object obj42 = properties2.remove((java.lang.Object) properties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.transactionManagerUniqueName;
        atomikosProperties43.serialJtaTransactions = true;
        long long48 = atomikosProperties43.maxTimeout;
        java.lang.Object obj49 = properties15.remove((java.lang.Object) atomikosProperties43);
        atomikosProperties43.setEnableLogging(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(objEntrySet37);
        org.junit.Assert.assertNotNull(wildcardEnumeration38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(wildcardEnumeration40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 300000L + "'", long48 == 300000L);
        org.junit.Assert.assertNull(obj49);
    }

    @Test
    public void test8675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8675");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        java.util.Set<java.lang.String> strSet21 = properties4.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet22 = properties4.keySet();
        java.lang.String str23 = properties4.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties4.elements();
        properties4.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) 100);
        java.lang.String str29 = atomikosProperties26.getService();
        atomikosProperties26.defaultJtaTimeout = 'a';
        atomikosProperties26.enableLogging = false;
        atomikosProperties26.logBaseName = "tmlog";
        atomikosProperties26.setCheckpointInterval((long) 9);
        atomikosProperties26.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        java.lang.Object obj45 = properties42.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection46 = properties42.values();
        java.util.Collection<java.lang.Object> objCollection47 = properties42.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        java.util.Properties properties50 = atomikosProperties48.asProperties();
        properties50.clear();
        boolean boolean52 = properties50.isEmpty();
        java.lang.Object obj53 = properties50.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        java.util.Properties properties56 = atomikosProperties54.asProperties();
        properties56.clear();
        boolean boolean58 = properties56.isEmpty();
        java.util.Collection<java.lang.Object> objCollection59 = properties56.values();
        properties50.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties56);
        java.util.Enumeration<?> wildcardEnumeration61 = properties56.propertyNames();
        java.util.Properties properties62 = new java.util.Properties(properties56);
        properties42.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties62);
        java.lang.Object obj64 = properties4.getOrDefault((java.lang.Object) atomikosProperties26, (java.lang.Object) properties62);
        int int65 = properties4.size();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objSet22);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objCollection59);
        org.junit.Assert.assertNotNull(wildcardEnumeration61);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{}");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test8676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8676");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        int int5 = properties4.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        boolean boolean12 = properties4.containsKey((java.lang.Object) objCollection11);
        int int13 = properties4.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.enableLogging = true;
        boolean boolean17 = atomikosProperties14.forceShutdownOnVmExit;
        atomikosProperties14.setSerialJtaTransactions(false);
        java.lang.String str20 = atomikosProperties14.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        boolean boolean23 = atomikosProperties21.isSerialJtaTransactions();
        atomikosProperties21.maxTimeout = 100;
        int int26 = atomikosProperties21.getMaxActives();
        atomikosProperties21.setEnableLogging(false);
        atomikosProperties21.logBaseDir = "{}";
        java.lang.Object obj31 = properties4.replace((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties21);
        atomikosProperties14.setMaxActives(9);
        java.lang.String str34 = atomikosProperties14.getService();
        boolean boolean35 = atomikosProperties14.isForceShutdownOnVmExit();
        long long36 = atomikosProperties14.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
    }

    @Test
    public void test8677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8677");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        java.lang.String str72 = atomikosProperties66.getService();
        long long73 = atomikosProperties66.defaultJtaTimeout;
        atomikosProperties66.setEnableLogging(true);
        boolean boolean76 = properties53.equals((java.lang.Object) atomikosProperties66);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str78 = atomikosProperties77.logBaseDir;
        java.lang.String str79 = atomikosProperties77.logBaseName;
        java.lang.String str80 = atomikosProperties77.getLogBaseDir();
        atomikosProperties77.setMaxActives((int) (byte) -1);
        java.lang.String str83 = atomikosProperties77.getService();
        atomikosProperties77.setDefaultJtaTimeout((long) (-1));
        int int86 = atomikosProperties77.maxActives;
        long long87 = atomikosProperties77.maxTimeout;
        long long88 = atomikosProperties77.getDefaultJtaTimeout();
        java.lang.Object obj89 = properties53.remove((java.lang.Object) atomikosProperties77);
        atomikosProperties77.setLogBaseDir("{com.atomikos.icatch.tmlog=0.0}");
        java.lang.String str92 = atomikosProperties77.service;
        boolean boolean93 = atomikosProperties77.isThreadedTwoPhaseCommit();
        long long94 = atomikosProperties77.checkpointInterval;
        java.lang.String str95 = atomikosProperties77.getTransactionManagerUniqueName();
        atomikosProperties77.setThreadedTwoPhaseCommit(false);
        atomikosProperties77.setTransactionManagerUniqueName("hi!");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 300000L + "'", long87 == 300000L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 500L + "'", long94 == 500L);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test8678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8678");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.maxActives = '4';
        long long48 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.maxTimeout = 10000L;
        long long51 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
        boolean boolean54 = atomikosProperties0.isEnableLogging();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test8679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8679");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        int int6 = atomikosProperties0.getMaxActives();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        int int10 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean18 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test8680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8680");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setLogBaseName("tmlog");
        long long8 = atomikosProperties0.maxTimeout;
        long long9 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean10 = atomikosProperties0.forceShutdownOnVmExit;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test8681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8681");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.tmlog=0.0}";
        atomikosProperties0.setForceShutdownOnVmExit(true);
        atomikosProperties0.setMaxTimeout((long) 0);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test8682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8682");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        boolean boolean7 = properties5.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        java.lang.Object obj13 = properties10.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        atomikosProperties14.setLogBaseName("");
        java.lang.Object obj20 = properties5.replace((java.lang.Object) properties10, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        boolean boolean28 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.transactionManagerUniqueName = "";
        atomikosProperties22.setEnableLogging(false);
        boolean boolean33 = atomikosProperties22.isEnableLogging();
        boolean boolean34 = properties10.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean33);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties10.entrySet();
        atomikosProperties0.set(properties10, "{}", (java.lang.Object) ' ');
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet39 = properties10.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) 100);
        boolean boolean43 = atomikosProperties40.isForceShutdownOnVmExit();
        atomikosProperties40.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long46 = atomikosProperties40.getDefaultJtaTimeout();
        long long47 = atomikosProperties40.getMaxTimeout();
        java.lang.String str48 = atomikosProperties40.service;
        java.lang.String str49 = atomikosProperties40.getLogBaseDir();
        boolean boolean50 = properties10.containsKey((java.lang.Object) atomikosProperties40);
        long long51 = atomikosProperties40.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertNotNull(objEntrySet39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 300000L + "'", long47 == 300000L);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str49, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
    }

    @Test
    public void test8683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8683");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties10.transactionManagerUniqueName = "hi!";
        java.lang.String str42 = atomikosProperties10.service;
        java.util.Properties properties43 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        boolean boolean46 = atomikosProperties44.isSerialJtaTransactions();
        atomikosProperties44.maxTimeout = 100;
        int int49 = atomikosProperties44.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        atomikosProperties50.setService("");
        boolean boolean55 = atomikosProperties50.threadedTwoPhaseCommit;
        int int56 = atomikosProperties50.getMaxActives();
        boolean boolean57 = atomikosProperties50.isEnableLogging();
        java.lang.String str58 = atomikosProperties50.getTransactionManagerUniqueName();
        atomikosProperties50.logBaseDir = "tmlog";
        boolean boolean61 = atomikosProperties50.enableLogging;
        atomikosProperties50.setMaxActives((int) (byte) 0);
        java.lang.Object obj64 = properties43.replace((java.lang.Object) atomikosProperties44, (java.lang.Object) atomikosProperties50);
        atomikosProperties50.setCheckpointInterval((long) (byte) 100);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 50 + "'", int49 == 50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(obj64);
    }

    @Test
    public void test8684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8684");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        int int10 = atomikosProperties0.maxActives;
        atomikosProperties0.setEnableLogging(true);
        boolean boolean13 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test8685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8685");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        int int14 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        java.lang.Object obj18 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties30);
        int int38 = properties17.size();
        java.lang.String str39 = properties17.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties17.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.enableLogging = true;
        atomikosProperties41.maxActives = (byte) -1;
        java.lang.Object obj46 = properties2.putIfAbsent((java.lang.Object) properties17, (java.lang.Object) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        boolean boolean51 = properties49.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        java.lang.Object obj57 = properties54.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.logBaseDir;
        java.lang.String str60 = atomikosProperties58.logBaseName;
        java.lang.String str61 = atomikosProperties58.getLogBaseDir();
        atomikosProperties58.setLogBaseName("");
        java.lang.Object obj64 = properties49.replace((java.lang.Object) properties54, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        boolean boolean72 = atomikosProperties66.isEnableLogging();
        atomikosProperties66.transactionManagerUniqueName = "";
        atomikosProperties66.setEnableLogging(false);
        boolean boolean77 = atomikosProperties66.isEnableLogging();
        boolean boolean78 = properties54.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean77);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str81 = atomikosProperties80.logBaseDir;
        java.lang.Object obj82 = properties54.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str81);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str84 = atomikosProperties83.logBaseDir;
        java.lang.String str85 = atomikosProperties83.logBaseName;
        java.lang.String str86 = atomikosProperties83.getLogBaseDir();
        atomikosProperties83.setMaxActives((int) (byte) -1);
        boolean boolean89 = atomikosProperties83.isEnableLogging();
        java.lang.Class<?> wildcardClass90 = atomikosProperties83.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties91 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties91.setCheckpointInterval((long) 100);
        boolean boolean94 = properties54.remove((java.lang.Object) wildcardClass90, (java.lang.Object) atomikosProperties91);
        properties54.clear();
        boolean boolean96 = properties2.contains((java.lang.Object) properties54);
        java.util.Enumeration<java.lang.Object> objEnumeration97 = properties54.keys();
        java.util.Enumeration<java.lang.Object> objEnumeration98 = properties54.keys();
        java.util.Set<java.lang.Object> objSet99 = properties54.keySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str39, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tmlog" + "'", str60, "tmlog");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "tmlog" + "'", str85, "tmlog");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(objEnumeration97);
        org.junit.Assert.assertNotNull(objEnumeration98);
        org.junit.Assert.assertNotNull(objSet99);
    }

    @Test
    public void test8686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8686");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        java.lang.Object obj21 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        boolean boolean28 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.transactionManagerUniqueName = "";
        atomikosProperties22.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        java.lang.String str39 = atomikosProperties33.getService();
        java.lang.Object obj40 = properties20.getOrDefault((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties33);
        int int41 = properties20.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet42 = properties20.entrySet();
        java.lang.Object obj43 = properties2.remove((java.lang.Object) objEntrySet42);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties2.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration46 = properties2.keys();
        boolean boolean47 = properties2.isEmpty();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        boolean boolean55 = atomikosProperties49.isEnableLogging();
        atomikosProperties49.transactionManagerUniqueName = "";
        atomikosProperties49.setEnableLogging(false);
        boolean boolean60 = atomikosProperties49.isEnableLogging();
        atomikosProperties49.maxActives = 1;
        boolean boolean63 = atomikosProperties49.isForceShutdownOnVmExit();
        atomikosProperties49.transactionManagerUniqueName = "{}";
        atomikosProperties49.setSerialJtaTransactions(false);
        boolean boolean68 = properties2.equals((java.lang.Object) false);
        java.lang.String str69 = properties2.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(objEntrySet42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objEnumeration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{}" + "'", str69, "{}");
    }

    @Test
    public void test8687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8687");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.transactionManagerUniqueName;
        atomikosProperties21.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        properties31.clear();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        atomikosProperties21.set(properties31, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj39 = properties31.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties40 = new java.util.Properties(properties31);
        int int41 = properties40.size();
        java.lang.String str42 = properties40.toString();
        int int43 = properties40.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        properties47.clear();
        java.util.Properties properties49 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        atomikosProperties50.setTransactionManagerUniqueName("");
        int int54 = atomikosProperties50.getMaxActives();
        atomikosProperties50.logBaseName = "tmlog";
        int int57 = atomikosProperties50.maxActives;
        boolean boolean58 = properties47.containsValue((java.lang.Object) int57);
        java.util.Properties properties59 = new java.util.Properties(properties47);
        atomikosProperties9.set(properties40, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", (java.lang.Object) properties59);
        long long61 = atomikosProperties9.getDefaultJtaTimeout();
        atomikosProperties9.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
        atomikosProperties9.setMaxTimeout((long) 3);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10000L + "'", long61 == 10000L);
    }

    @Test
    public void test8688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8688");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        long long9 = atomikosProperties0.maxTimeout;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        java.lang.String str11 = atomikosProperties0.transactionManagerUniqueName;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        long long13 = atomikosProperties0.maxTimeout;
        java.lang.Class<?> wildcardClass14 = atomikosProperties0.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test8689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8689");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        properties42.clear();
        boolean boolean44 = properties42.isEmpty();
        java.lang.Object obj45 = properties42.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        java.lang.Object obj50 = properties49.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        boolean boolean57 = atomikosProperties51.isEnableLogging();
        atomikosProperties51.transactionManagerUniqueName = "";
        atomikosProperties51.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str63 = atomikosProperties62.logBaseDir;
        java.lang.String str64 = atomikosProperties62.logBaseName;
        java.lang.String str65 = atomikosProperties62.getLogBaseDir();
        atomikosProperties62.setMaxActives((int) (byte) -1);
        java.lang.String str68 = atomikosProperties62.getService();
        java.lang.Object obj69 = properties49.getOrDefault((java.lang.Object) atomikosProperties51, (java.lang.Object) atomikosProperties62);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long71 = atomikosProperties70.checkpointInterval;
        int int72 = atomikosProperties70.getMaxActives();
        java.lang.String str73 = atomikosProperties70.logBaseDir;
        java.lang.Object obj75 = properties49.putIfAbsent((java.lang.Object) atomikosProperties70, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str77 = atomikosProperties76.logBaseDir;
        java.lang.String str78 = atomikosProperties76.logBaseName;
        java.lang.String str79 = atomikosProperties76.getLogBaseDir();
        boolean boolean80 = atomikosProperties76.isSerialJtaTransactions();
        atomikosProperties76.setEnableLogging(false);
        boolean boolean83 = properties42.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties76);
        atomikosProperties76.logBaseName = "{}";
        long long86 = atomikosProperties76.getDefaultJtaTimeout();
        boolean boolean87 = atomikosProperties76.isThreadedTwoPhaseCommit();
        atomikosProperties76.threadedTwoPhaseCommit = true;
        atomikosProperties76.setCheckpointInterval((long) 100);
        boolean boolean92 = properties2.containsValue((java.lang.Object) atomikosProperties76);
        java.lang.String str93 = properties2.toString();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet94 = properties2.entrySet();
        java.util.Enumeration<java.lang.Object> objEnumeration95 = properties2.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{}");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNotNull(obj50);
// flaky:         org.junit.Assert.assertEquals(obj50.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "tmlog" + "'", str64, "tmlog");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 500L + "'", long71 == 500L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10000L + "'", long86 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objEntrySet94);
        org.junit.Assert.assertNotNull(objEnumeration95);
    }

    @Test
    public void test8690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8690");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties2.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet46 = properties2.entrySet();
        java.util.Properties properties47 = new java.util.Properties(properties2);
        java.lang.String str49 = properties2.getProperty("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties50.setEnableLogging(true);
        boolean boolean53 = properties2.containsKey((java.lang.Object) atomikosProperties50);
        atomikosProperties50.setLogBaseDir("{{com.atomikos.icatch.tmlog=0.0}={com.atomikos.icatch.tmlog=0.0}}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objEntrySet46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test8691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8691");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet9 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        long long12 = atomikosProperties10.getDefaultJtaTimeout();
        java.util.Properties properties13 = atomikosProperties10.asProperties();
        java.lang.String str14 = properties13.toString();
        boolean boolean15 = properties2.equals((java.lang.Object) properties13);
        java.util.Set<java.lang.String> strSet16 = properties13.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        java.lang.Object obj22 = properties19.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection23 = properties19.values();
        int int24 = properties19.size();
        java.lang.Object obj25 = properties13.remove((java.lang.Object) int24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        properties28.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        atomikosProperties30.setTransactionManagerUniqueName("");
        int int34 = atomikosProperties30.getMaxActives();
        boolean boolean35 = properties28.containsValue((java.lang.Object) int34);
        java.lang.Object obj38 = properties28.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties39 = new java.util.Properties(properties28);
        java.util.Set<java.lang.Object> objSet40 = properties28.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        atomikosProperties41.forceShutdownOnVmExit = false;
        atomikosProperties41.threadedTwoPhaseCommit = false;
        atomikosProperties41.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean49 = atomikosProperties41.isSerialJtaTransactions();
        boolean boolean50 = atomikosProperties41.forceShutdownOnVmExit;
        long long51 = atomikosProperties41.getDefaultJtaTimeout();
        java.lang.String str52 = atomikosProperties41.getLogBaseName();
        boolean boolean53 = properties13.remove((java.lang.Object) properties28, (java.lang.Object) atomikosProperties41);
        java.util.Properties properties54 = atomikosProperties41.asProperties();
        java.util.Enumeration<?> wildcardEnumeration55 = properties54.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        java.util.Properties properties58 = atomikosProperties56.asProperties();
        properties58.clear();
        java.util.Properties properties60 = new java.util.Properties(properties58);
        int int61 = properties60.size();
        boolean boolean62 = properties60.isEmpty();
        java.util.Collection<java.lang.Object> objCollection63 = properties60.values();
        java.lang.String str64 = properties60.toString();
        int int65 = properties60.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        properties68.clear();
        boolean boolean70 = properties68.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        atomikosProperties71.setTransactionManagerUniqueName("");
        int int75 = atomikosProperties71.getMaxActives();
        java.lang.String str76 = atomikosProperties71.transactionManagerUniqueName;
        boolean boolean77 = properties68.containsValue((java.lang.Object) atomikosProperties71);
        boolean boolean78 = atomikosProperties71.forceShutdownOnVmExit;
        java.lang.Object obj79 = properties54.replace((java.lang.Object) int65, (java.lang.Object) atomikosProperties71);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(objEntrySet9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertNotNull(properties13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str14, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(objSet40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertNotNull(wildcardEnumeration55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objCollection63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "{}" + "'", str64, "{}");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 50 + "'", int75 == 50);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj79);
    }

    @Test
    public void test8692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8692");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.setMaxActives((int) ' ');
        java.lang.String str10 = atomikosProperties0.service;
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setCheckpointInterval(300000L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test8693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8693");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.checkpointInterval = 100L;
        atomikosProperties31.transactionManagerUniqueName = "{}";
        java.lang.String str49 = atomikosProperties31.getLogBaseDir();
        long long50 = atomikosProperties31.defaultJtaTimeout;
        java.lang.String str51 = atomikosProperties31.service;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test8694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8694");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setLogBaseName("");
        int int6 = atomikosProperties0.getMaxActives();
        atomikosProperties0.service = "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}";
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.setMaxTimeout(50L);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
    }

    @Test
    public void test8695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8695");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str6 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        java.util.Properties properties11 = new java.util.Properties(properties9);
        java.lang.Object obj14 = properties11.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str15 = properties11.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties23.setCheckpointInterval((long) 100);
        boolean boolean26 = atomikosProperties23.isForceShutdownOnVmExit();
        java.lang.Object obj27 = properties11.putIfAbsent((java.lang.Object) atomikosProperties16, (java.lang.Object) boolean26);
        java.util.Set<java.lang.String> strSet28 = properties11.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet29 = properties11.keySet();
        java.lang.Object obj30 = properties2.remove((java.lang.Object) properties11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties31.setCheckpointInterval((long) 100);
        boolean boolean34 = atomikosProperties31.isForceShutdownOnVmExit();
        atomikosProperties31.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties31.forceShutdownOnVmExit = false;
        boolean boolean39 = properties2.contains((java.lang.Object) false);
        java.io.InputStream inputStream40 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(inputStream40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj14, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(objSet29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test8696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8696");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.setCheckpointInterval(0L);
        atomikosProperties0.setMaxActives((int) (byte) 1);
        java.lang.String str16 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.tmlog=0.0}");
        atomikosProperties0.setSerialJtaTransactions(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
    }

    @Test
    public void test8697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8697");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        properties21.clear();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.lang.Object obj26 = properties23.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str27 = properties23.toString();
        java.lang.Object obj30 = properties23.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet31 = properties23.keySet();
        java.lang.Object obj32 = properties10.remove((java.lang.Object) properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        java.lang.Object obj38 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        boolean boolean43 = properties41.isEmpty();
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<?> wildcardEnumeration46 = properties35.propertyNames();
        java.lang.Object obj47 = properties10.get((java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        java.util.Properties properties50 = atomikosProperties48.asProperties();
        properties50.clear();
        boolean boolean52 = properties50.isEmpty();
        java.lang.Object obj53 = properties50.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        java.util.Properties properties57 = atomikosProperties55.asProperties();
        java.lang.Object obj58 = properties57.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        atomikosProperties59.setMaxActives((int) (byte) -1);
        boolean boolean65 = atomikosProperties59.isEnableLogging();
        atomikosProperties59.transactionManagerUniqueName = "";
        atomikosProperties59.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str71 = atomikosProperties70.logBaseDir;
        java.lang.String str72 = atomikosProperties70.logBaseName;
        java.lang.String str73 = atomikosProperties70.getLogBaseDir();
        atomikosProperties70.setMaxActives((int) (byte) -1);
        java.lang.String str76 = atomikosProperties70.getService();
        java.lang.Object obj77 = properties57.getOrDefault((java.lang.Object) atomikosProperties59, (java.lang.Object) atomikosProperties70);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long79 = atomikosProperties78.checkpointInterval;
        int int80 = atomikosProperties78.getMaxActives();
        java.lang.String str81 = atomikosProperties78.logBaseDir;
        java.lang.Object obj83 = properties57.putIfAbsent((java.lang.Object) atomikosProperties78, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties84 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str85 = atomikosProperties84.logBaseDir;
        java.lang.String str86 = atomikosProperties84.logBaseName;
        java.lang.String str87 = atomikosProperties84.getLogBaseDir();
        boolean boolean88 = atomikosProperties84.isSerialJtaTransactions();
        atomikosProperties84.setEnableLogging(false);
        boolean boolean91 = properties50.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties84);
        atomikosProperties84.setSerialJtaTransactions(false);
        java.lang.Object obj94 = properties10.remove((java.lang.Object) false);
        boolean boolean95 = properties10.isEmpty();
        java.lang.Object obj98 = properties10.setProperty("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj26, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(wildcardEnumeration46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertNotNull(obj58);
// flaky:         org.junit.Assert.assertEquals(obj58.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tmlog" + "'", str72, "tmlog");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 500L + "'", long79 == 500L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 50 + "'", int80 == 50);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "tmlog" + "'", str86, "tmlog");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(obj98);
    }

    @Test
    public void test8698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8698");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        properties68.clear();
        java.lang.Object obj70 = properties53.get((java.lang.Object) properties68);
        java.lang.Object obj71 = properties53.clone();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "{com.atomikos.icatch.{}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "{com.atomikos.icatch.{}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "{com.atomikos.icatch.{}=}");
    }

    @Test
    public void test8699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8699");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        boolean boolean46 = atomikosProperties44.isSerialJtaTransactions();
        java.lang.String str47 = atomikosProperties44.getLogBaseName();
        long long48 = atomikosProperties44.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.lang.Object obj54 = properties51.clone();
        java.util.Set<java.lang.Object> objSet55 = properties51.keySet();
        boolean boolean58 = properties51.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        java.lang.Object obj59 = properties15.replace((java.lang.Object) long48, (java.lang.Object) properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        java.util.Properties properties62 = atomikosProperties60.asProperties();
        properties62.clear();
        boolean boolean64 = properties62.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.logBaseDir;
        atomikosProperties65.setTransactionManagerUniqueName("");
        int int69 = atomikosProperties65.getMaxActives();
        java.lang.String str70 = atomikosProperties65.transactionManagerUniqueName;
        boolean boolean71 = properties62.containsValue((java.lang.Object) atomikosProperties65);
        boolean boolean72 = atomikosProperties65.isEnableLogging();
        java.lang.String str73 = atomikosProperties65.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties74.setCheckpointInterval((long) 100);
        boolean boolean77 = atomikosProperties74.isForceShutdownOnVmExit();
        atomikosProperties74.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long80 = atomikosProperties74.getDefaultJtaTimeout();
        long long81 = atomikosProperties74.getMaxTimeout();
        long long82 = atomikosProperties74.getMaxTimeout();
        long long83 = atomikosProperties74.checkpointInterval;
        atomikosProperties74.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.Object obj86 = properties51.getOrDefault((java.lang.Object) str73, (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str88 = properties51.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        java.io.Writer writer89 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties51.store(writer89, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 50 + "'", int69 == 50);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tmlog" + "'", str73, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10000L + "'", long80 == 10000L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 300000L + "'", long81 == 300000L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 300000L + "'", long82 == 300000L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 100L + "'", long83 == 100L);
        org.junit.Assert.assertEquals("'" + obj86 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj86, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test8700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8700");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str7 = atomikosProperties0.logBaseDir;
        java.lang.Class<?> wildcardClass8 = atomikosProperties0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test8701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8701");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet19 = properties10.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        boolean boolean24 = properties22.containsValue((java.lang.Object) 100L);
        java.lang.String str25 = properties22.toString();
        java.lang.Object obj28 = properties22.setProperty("", "hi!");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet29 = properties22.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        atomikosProperties30.setTransactionManagerUniqueName("");
        int int34 = atomikosProperties30.getMaxActives();
        java.lang.String str35 = atomikosProperties30.transactionManagerUniqueName;
        atomikosProperties30.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        properties40.clear();
        java.util.Properties properties42 = new java.util.Properties(properties40);
        atomikosProperties30.set(properties40, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj48 = properties40.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties49 = new java.util.Properties(properties40);
        int int50 = properties49.size();
        java.lang.String str51 = properties49.toString();
        java.lang.Object obj52 = properties10.putIfAbsent((java.lang.Object) properties22, (java.lang.Object) properties49);
        java.util.Enumeration<java.lang.Object> objEnumeration53 = properties10.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str55 = atomikosProperties54.logBaseDir;
        java.lang.String str56 = atomikosProperties54.logBaseName;
        java.lang.String str57 = atomikosProperties54.getLogBaseDir();
        atomikosProperties54.setMaxActives((int) (byte) -1);
        boolean boolean60 = atomikosProperties54.isEnableLogging();
        long long61 = atomikosProperties54.checkpointInterval;
        atomikosProperties54.setCheckpointInterval(10L);
        boolean boolean64 = atomikosProperties54.isForceShutdownOnVmExit();
        atomikosProperties54.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties54.setLogBaseName("hi!");
        boolean boolean69 = atomikosProperties54.isThreadedTwoPhaseCommit();
        atomikosProperties54.maxActives = 100;
        java.lang.String str72 = atomikosProperties54.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str74 = atomikosProperties73.logBaseDir;
        atomikosProperties73.setTransactionManagerUniqueName("");
        int int77 = atomikosProperties73.getMaxActives();
        java.lang.String str78 = atomikosProperties73.getLogBaseDir();
        atomikosProperties73.setTransactionManagerUniqueName("");
        atomikosProperties73.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties73.setSerialJtaTransactions(false);
        atomikosProperties73.threadedTwoPhaseCommit = false;
        java.lang.Object obj87 = properties10.replace((java.lang.Object) str72, (java.lang.Object) false);
        boolean boolean88 = properties10.isEmpty();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str25, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objEntrySet29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{}" + "'", str51, "{}");
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(objEnumeration53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tmlog" + "'", str56, "tmlog");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 50 + "'", int77 == 50);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test8702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8702");
        java.util.Properties properties0 = new java.util.Properties();
        java.lang.Object obj3 = properties0.getOrDefault((java.lang.Object) 0.0f, (java.lang.Object) 0.0d);
        java.lang.Object obj6 = properties0.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str8 = atomikosProperties7.logBaseDir;
        atomikosProperties7.setTransactionManagerUniqueName("");
        int int11 = atomikosProperties7.getMaxActives();
        java.lang.String str12 = atomikosProperties7.transactionManagerUniqueName;
        atomikosProperties7.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        properties17.clear();
        java.util.Properties properties19 = new java.util.Properties(properties17);
        atomikosProperties7.set(properties17, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj25 = properties17.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        properties28.clear();
        java.util.Properties properties30 = new java.util.Properties(properties28);
        java.lang.Object obj33 = properties30.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str34 = properties30.toString();
        java.lang.Object obj37 = properties30.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet38 = properties30.keySet();
        java.lang.Object obj39 = properties17.remove((java.lang.Object) properties30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        properties42.clear();
        boolean boolean44 = properties42.isEmpty();
        java.lang.Object obj45 = properties42.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        properties48.clear();
        boolean boolean50 = properties48.isEmpty();
        java.util.Collection<java.lang.Object> objCollection51 = properties48.values();
        properties42.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.util.Enumeration<?> wildcardEnumeration53 = properties42.propertyNames();
        java.lang.Object obj54 = properties17.get((java.lang.Object) properties42);
        properties0.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties17);
        java.util.Collection<java.lang.Object> objCollection56 = properties0.values();
        java.io.Writer writer57 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties0.store(writer57, "{-1=1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + obj3 + "' != '" + 0.0d + "'", obj3, 0.0d);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj33, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{}" + "'", str34, "{}");
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(objSet38);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{}");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objCollection51);
        org.junit.Assert.assertNotNull(wildcardEnumeration53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objCollection56);
    }

    @Test
    public void test8703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8703");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.lang.Object obj20 = properties19.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet21 = properties19.entrySet();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertNotNull(objEntrySet21);
    }

    @Test
    public void test8704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8704");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setLogBaseDir("hi!");
        java.lang.String str7 = atomikosProperties0.logBaseName;
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        java.lang.String str9 = atomikosProperties0.logBaseName;
        java.lang.String str10 = atomikosProperties0.getService();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test8705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8705");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.service = "{com.atomikos.icatch.tmlog=0.0}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test8706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8706");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str8 = atomikosProperties0.logBaseName;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.checkpointInterval = (short) 100;
        java.lang.String str13 = atomikosProperties0.getService();
        atomikosProperties0.forceShutdownOnVmExit = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test8707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8707");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        java.lang.String str16 = properties13.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.tmlog=0.0}=, com.atomikos.icatch.log_base_name=tmlog, []=hi!}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.tmlog=0.0}=, com.atomikos.icatch.log_base_name=tmlog, []=hi!}" + "'", str16, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.tmlog=0.0}=, com.atomikos.icatch.log_base_name=tmlog, []=hi!}");
    }

    @Test
    public void test8708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8708");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Collection<java.lang.Object> objCollection13 = properties2.values();
        java.lang.String str15 = properties2.getProperty("hi!");
        java.util.Set<java.lang.String> strSet16 = properties2.stringPropertyNames();
        boolean boolean17 = properties2.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet18 = properties2.entrySet();
        java.util.Set<java.lang.String> strSet19 = properties2.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objEntrySet18);
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test8709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8709");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream5, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test8710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8710");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setDefaultJtaTimeout((long) 50);
        boolean boolean16 = properties9.contains((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        atomikosProperties17.setTransactionManagerUniqueName("");
        int int21 = atomikosProperties17.getMaxActives();
        java.lang.String str22 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setTransactionManagerUniqueName("");
        atomikosProperties17.setDefaultJtaTimeout(0L);
        int int27 = atomikosProperties17.maxActives;
        atomikosProperties17.setEnableLogging(false);
        java.util.Properties properties30 = atomikosProperties17.asProperties();
        boolean boolean31 = properties9.equals((java.lang.Object) atomikosProperties17);
        java.util.Set<java.lang.String> strSet32 = properties9.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet32);
    }

    @Test
    public void test8711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8711");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        java.lang.String str19 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setTransactionManagerUniqueName("");
        atomikosProperties21.setDefaultJtaTimeout(0L);
        boolean boolean31 = atomikosProperties21.isForceShutdownOnVmExit();
        atomikosProperties21.setMaxActives((int) (short) 100);
        atomikosProperties21.maxActives = (short) 100;
        boolean boolean36 = properties2.containsValue((java.lang.Object) atomikosProperties21);
        java.io.OutputStream outputStream37 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream37, "tmlog", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test8712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8712");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.transactionManagerUniqueName = "{=}";
        atomikosProperties0.setService("{=}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test8713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8713");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.setMaxActives(50);
        long long25 = atomikosProperties15.getCheckpointInterval();
        long long26 = atomikosProperties15.getMaxTimeout();
        long long27 = atomikosProperties15.checkpointInterval;
        java.lang.String str28 = atomikosProperties15.transactionManagerUniqueName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test8714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8714");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.keys();
        properties14.clear();
        java.lang.String str17 = properties14.toString();
        properties14.clear();
        java.util.Collection<java.lang.Object> objCollection19 = properties14.values();
        java.util.Enumeration<java.lang.Object> objEnumeration20 = properties14.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(objEnumeration20);
    }

    @Test
    public void test8715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8715");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        properties21.clear();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.lang.Object obj26 = properties23.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str27 = properties23.toString();
        java.lang.Object obj30 = properties23.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet31 = properties23.keySet();
        java.lang.Object obj32 = properties10.remove((java.lang.Object) properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        java.lang.Object obj38 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        boolean boolean43 = properties41.isEmpty();
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<?> wildcardEnumeration46 = properties35.propertyNames();
        java.lang.Object obj47 = properties10.get((java.lang.Object) properties35);
        java.lang.String str49 = properties35.getProperty("");
        java.util.Set<java.lang.String> strSet50 = properties35.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration51 = properties35.keys();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj26, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(wildcardEnumeration46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(objEnumeration51);
    }

    @Test
    public void test8716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8716");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        atomikosProperties0.serialJtaTransactions = false;
        long long12 = atomikosProperties0.defaultJtaTimeout;
        long long13 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setTransactionManagerUniqueName("hi!");
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str18 = atomikosProperties0.logBaseName;
        atomikosProperties0.setMaxTimeout((long) 50);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
    }

    @Test
    public void test8717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8717");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        int int5 = properties4.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet6 = properties4.entrySet();
        java.util.Properties properties7 = new java.util.Properties(properties4);
        java.lang.String str9 = properties7.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        atomikosProperties10.setTransactionManagerUniqueName("");
        int int14 = atomikosProperties10.getMaxActives();
        java.lang.String str15 = atomikosProperties10.getLogBaseDir();
        java.lang.String str16 = atomikosProperties10.logBaseName;
        boolean boolean17 = atomikosProperties10.enableLogging;
        java.lang.String str18 = atomikosProperties10.service;
        int int19 = atomikosProperties10.maxActives;
        java.lang.Object obj20 = properties7.remove((java.lang.Object) int19);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(objEntrySet6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test8718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8718");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.enableLogging = true;
        java.lang.String str13 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.maxActives = (byte) 10;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8719");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.transactionManagerUniqueName;
        atomikosProperties21.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        properties31.clear();
        java.util.Properties properties33 = new java.util.Properties(properties31);
        atomikosProperties21.set(properties31, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj39 = properties31.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties40 = new java.util.Properties(properties31);
        int int41 = properties40.size();
        java.lang.String str42 = properties40.toString();
        int int43 = properties40.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        properties47.clear();
        java.util.Properties properties49 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        atomikosProperties50.setTransactionManagerUniqueName("");
        int int54 = atomikosProperties50.getMaxActives();
        atomikosProperties50.logBaseName = "tmlog";
        int int57 = atomikosProperties50.maxActives;
        boolean boolean58 = properties47.containsValue((java.lang.Object) int57);
        java.util.Properties properties59 = new java.util.Properties(properties47);
        atomikosProperties9.set(properties40, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", (java.lang.Object) properties59);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        atomikosProperties61.setCheckpointInterval((-1L));
        java.lang.String str66 = atomikosProperties61.logBaseDir;
        atomikosProperties61.setSerialJtaTransactions(false);
        atomikosProperties61.setCheckpointInterval((long) (byte) 1);
        boolean boolean71 = properties40.contains((java.lang.Object) atomikosProperties61);
        java.lang.Object obj74 = properties40.setProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str76 = properties40.getProperty("{{com.atomikos.icatch.tmlog=0.0}={com.atomikos.icatch.tmlog=0.0}}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{}" + "'", str42, "{}");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 50 + "'", int54 == 50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test8720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8720");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        java.util.Collection<java.lang.Object> objCollection12 = properties9.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        atomikosProperties13.setTransactionManagerUniqueName("");
        int int17 = atomikosProperties13.getMaxActives();
        java.lang.String str18 = atomikosProperties13.transactionManagerUniqueName;
        atomikosProperties13.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        properties23.clear();
        java.util.Properties properties25 = new java.util.Properties(properties23);
        atomikosProperties13.set(properties23, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj31 = properties23.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet32 = properties23.stringPropertyNames();
        java.lang.String str34 = properties23.getProperty("hi!");
        java.lang.Object obj35 = properties2.putIfAbsent((java.lang.Object) objCollection12, (java.lang.Object) "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        java.lang.Object obj39 = properties38.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        boolean boolean46 = atomikosProperties40.isEnableLogging();
        atomikosProperties40.transactionManagerUniqueName = "";
        atomikosProperties40.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        java.lang.String str57 = atomikosProperties51.getService();
        java.lang.Object obj58 = properties38.getOrDefault((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties51);
        int int59 = properties38.size();
        boolean boolean60 = properties2.containsValue((java.lang.Object) properties38);
        java.lang.Object obj63 = properties2.setProperty("{com.atomikos.icatch.tmlog=0.0}", "");
        int int64 = properties2.size();
        java.util.Enumeration<java.lang.Object> objEnumeration65 = properties2.elements();
        java.util.Properties properties66 = new java.util.Properties(properties2);
        boolean boolean67 = properties66.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 11 + "'", int64 == 11);
        org.junit.Assert.assertNotNull(objEnumeration65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test8721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8721");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.setCheckpointInterval((long) 100);
        int int6 = atomikosProperties0.getMaxActives();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setLogBaseDir("{-1=1}");
        java.lang.String str13 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test8722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8722");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection20 = properties10.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setCheckpointInterval((long) 100);
        boolean boolean30 = atomikosProperties27.isForceShutdownOnVmExit();
        atomikosProperties27.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean33 = properties26.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.enableLogging = true;
        boolean boolean38 = properties23.replace((java.lang.Object) boolean33, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection39 = properties23.values();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties23.keys();
        java.lang.Object obj41 = properties10.remove((java.lang.Object) objEnumeration40);
        boolean boolean42 = properties10.isEmpty();
        int int43 = properties10.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        boolean boolean48 = properties46.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        atomikosProperties49.setTransactionManagerUniqueName("");
        int int53 = atomikosProperties49.getMaxActives();
        java.lang.String str54 = atomikosProperties49.transactionManagerUniqueName;
        boolean boolean55 = properties46.containsValue((java.lang.Object) atomikosProperties49);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties46.elements();
        java.util.Collection<java.lang.Object> objCollection57 = properties46.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet58 = properties46.entrySet();
        boolean boolean59 = properties10.containsValue((java.lang.Object) properties46);
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties10.elements();
        boolean boolean61 = properties10.isEmpty();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 50 + "'", int53 == 50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(objEntrySet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test8723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8723");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        java.lang.String str4 = atomikosProperties0.service;
        atomikosProperties0.maxActives = (byte) 1;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test8724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8724");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.maxTimeout = 10000L;
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        java.lang.String str17 = atomikosProperties0.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        properties20.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        atomikosProperties22.setTransactionManagerUniqueName("");
        int int26 = atomikosProperties22.getMaxActives();
        boolean boolean27 = properties20.containsValue((java.lang.Object) int26);
        java.lang.Object obj30 = properties20.setProperty("", "");
        java.util.Properties properties31 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        java.lang.String str34 = atomikosProperties32.logBaseName;
        java.lang.String str35 = atomikosProperties32.getLogBaseDir();
        atomikosProperties32.setMaxActives((int) (byte) -1);
        boolean boolean38 = atomikosProperties32.isEnableLogging();
        atomikosProperties32.transactionManagerUniqueName = "";
        atomikosProperties32.threadedTwoPhaseCommit = true;
        java.util.Properties properties43 = atomikosProperties32.asProperties();
        atomikosProperties32.maxTimeout = 10L;
        java.lang.Object obj46 = properties20.remove((java.lang.Object) atomikosProperties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        boolean boolean54 = atomikosProperties48.isEnableLogging();
        atomikosProperties48.transactionManagerUniqueName = "";
        atomikosProperties48.setDefaultJtaTimeout((long) (-1));
        atomikosProperties0.set(properties20, "tmlog", (java.lang.Object) atomikosProperties48);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        java.util.Properties properties62 = atomikosProperties60.asProperties();
        properties62.clear();
        boolean boolean64 = properties62.isEmpty();
        java.lang.Object obj65 = properties62.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        properties68.clear();
        boolean boolean70 = properties68.isEmpty();
        java.util.Collection<java.lang.Object> objCollection71 = properties68.values();
        properties62.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties68);
        java.lang.Object obj75 = properties68.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties76 = new java.util.Properties(properties68);
        java.lang.Object obj77 = properties20.get((java.lang.Object) properties68);
        java.util.Set<java.lang.Object> objSet78 = properties20.keySet();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "{}");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objCollection71);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(objSet78);
    }

    @Test
    public void test8725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8725");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        java.util.Enumeration<java.lang.Object> objEnumeration26 = properties2.keys();
        java.lang.Object obj29 = properties2.setProperty("{}", "");
        java.lang.Object obj32 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        java.lang.String str56 = atomikosProperties48.service;
        long long57 = atomikosProperties48.maxTimeout;
        long long58 = atomikosProperties48.getMaxTimeout();
        atomikosProperties48.transactionManagerUniqueName = "";
        atomikosProperties48.setEnableLogging(true);
        atomikosProperties48.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        java.util.Properties properties67 = atomikosProperties65.asProperties();
        properties67.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        java.lang.String str71 = atomikosProperties69.logBaseName;
        java.lang.String str72 = atomikosProperties69.getLogBaseDir();
        atomikosProperties69.setMaxActives((int) (byte) -1);
        boolean boolean75 = atomikosProperties69.isEnableLogging();
        long long76 = atomikosProperties69.checkpointInterval;
        atomikosProperties69.setCheckpointInterval(10L);
        boolean boolean79 = atomikosProperties69.serialJtaTransactions;
        boolean boolean80 = properties67.equals((java.lang.Object) boolean79);
        java.util.Properties properties81 = new java.util.Properties(properties67);
        java.util.Collection<java.lang.Object> objCollection82 = properties67.values();
        java.lang.Object obj83 = properties2.put((java.lang.Object) atomikosProperties48, (java.lang.Object) properties67);
        atomikosProperties48.setCheckpointInterval((long) 1);
        boolean boolean86 = atomikosProperties48.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(objEnumeration26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 300000L + "'", long57 == 300000L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 300000L + "'", long58 == 300000L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tmlog" + "'", str71, "tmlog");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 500L + "'", long76 == 500L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objCollection82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test8726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8726");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) 100);
        boolean boolean20 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties17.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        java.lang.String str31 = atomikosProperties25.getService();
        long long32 = atomikosProperties25.defaultJtaTimeout;
        java.lang.String str33 = atomikosProperties25.logBaseName;
        java.lang.String str34 = atomikosProperties25.logBaseDir;
        java.lang.Class<?> wildcardClass35 = atomikosProperties25.getClass();
        boolean boolean36 = properties2.remove((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        atomikosProperties37.forceShutdownOnVmExit = false;
        boolean boolean41 = atomikosProperties37.isSerialJtaTransactions();
        java.lang.String str42 = atomikosProperties37.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.Object obj46 = properties2.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties43);
        boolean boolean47 = atomikosProperties37.serialJtaTransactions;
        atomikosProperties37.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test8727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8727");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties9.setCheckpointInterval((long) 100);
        boolean boolean12 = atomikosProperties9.isForceShutdownOnVmExit();
        atomikosProperties9.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long15 = atomikosProperties9.getDefaultJtaTimeout();
        long long16 = atomikosProperties9.getMaxTimeout();
        atomikosProperties9.logBaseName = "tmlog";
        long long19 = atomikosProperties9.getDefaultJtaTimeout();
        atomikosProperties9.setForceShutdownOnVmExit(true);
        atomikosProperties9.maxTimeout = (short) 100;
        java.lang.Object obj24 = properties2.remove((java.lang.Object) atomikosProperties9);
        atomikosProperties9.forceShutdownOnVmExit = true;
        atomikosProperties9.setDefaultJtaTimeout(100L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 300000L + "'", long16 == 300000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test8728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8728");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        boolean boolean18 = atomikosProperties14.isSerialJtaTransactions();
        atomikosProperties14.setLogBaseName("");
        atomikosProperties14.setTransactionManagerUniqueName("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        java.lang.Object obj28 = properties13.replace((java.lang.Object) "tmlog", (java.lang.Object) int27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        int int31 = atomikosProperties29.getMaxActives();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        boolean boolean36 = properties34.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        java.lang.Object obj42 = properties39.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.String str46 = atomikosProperties43.getLogBaseDir();
        atomikosProperties43.setLogBaseName("");
        java.lang.Object obj49 = properties34.replace((java.lang.Object) properties39, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        boolean boolean57 = atomikosProperties51.isEnableLogging();
        atomikosProperties51.transactionManagerUniqueName = "";
        atomikosProperties51.setEnableLogging(false);
        boolean boolean62 = atomikosProperties51.isEnableLogging();
        boolean boolean63 = properties39.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean62);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet64 = properties39.entrySet();
        atomikosProperties29.set(properties39, "{}", (java.lang.Object) ' ');
        boolean boolean68 = properties13.contains((java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long70 = atomikosProperties69.checkpointInterval;
        java.util.Properties properties71 = atomikosProperties69.asProperties();
        properties71.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str74 = atomikosProperties73.logBaseDir;
        atomikosProperties73.setTransactionManagerUniqueName("");
        int int77 = atomikosProperties73.getMaxActives();
        boolean boolean78 = properties71.containsValue((java.lang.Object) int77);
        java.lang.Object obj81 = properties71.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties82 = new java.util.Properties(properties71);
        java.util.Set<java.lang.Object> objSet83 = properties71.keySet();
        java.lang.Object obj84 = properties13.get((java.lang.Object) properties71);
        boolean boolean85 = properties71.isEmpty();
        boolean boolean86 = properties71.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objEntrySet64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 500L + "'", long70 == 500L);
        org.junit.Assert.assertNotNull(properties71);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 50 + "'", int77 == 50);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNotNull(objSet83);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test8729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8729");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.maxActives = '4';
        atomikosProperties0.maxTimeout = 10;
        int int50 = atomikosProperties0.maxActives;
        long long51 = atomikosProperties0.getMaxTimeout();
        boolean boolean52 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test8730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8730");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        java.lang.Object obj16 = properties15.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setMaxActives((int) (byte) -1);
        boolean boolean23 = atomikosProperties17.isEnableLogging();
        atomikosProperties17.transactionManagerUniqueName = "";
        atomikosProperties17.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        java.lang.String str30 = atomikosProperties28.logBaseName;
        java.lang.String str31 = atomikosProperties28.getLogBaseDir();
        atomikosProperties28.setMaxActives((int) (byte) -1);
        java.lang.String str34 = atomikosProperties28.getService();
        java.lang.Object obj35 = properties15.getOrDefault((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties28);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        int int38 = atomikosProperties36.getMaxActives();
        java.lang.String str39 = atomikosProperties36.logBaseDir;
        java.lang.Object obj41 = properties15.putIfAbsent((java.lang.Object) atomikosProperties36, (java.lang.Object) "");
        int int42 = properties15.size();
        java.util.Collection<java.lang.Object> objCollection43 = properties15.values();
        boolean boolean45 = properties2.remove((java.lang.Object) properties15, (java.lang.Object) 1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties46.setCheckpointInterval((long) 100);
        boolean boolean49 = atomikosProperties46.isForceShutdownOnVmExit();
        atomikosProperties46.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long52 = atomikosProperties46.getDefaultJtaTimeout();
        long long53 = atomikosProperties46.getMaxTimeout();
        atomikosProperties46.logBaseName = "tmlog";
        long long56 = atomikosProperties46.getDefaultJtaTimeout();
        atomikosProperties46.setForceShutdownOnVmExit(true);
        java.lang.String str59 = atomikosProperties46.getLogBaseName();
        long long60 = atomikosProperties46.defaultJtaTimeout;
        boolean boolean61 = atomikosProperties46.isEnableLogging();
        boolean boolean62 = properties15.contains((java.lang.Object) boolean61);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long64 = atomikosProperties63.checkpointInterval;
        java.util.Properties properties65 = atomikosProperties63.asProperties();
        boolean boolean67 = properties65.containsValue((java.lang.Object) 100L);
        java.lang.String str69 = properties65.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.Object> objSet70 = properties65.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        java.lang.String str73 = atomikosProperties71.logBaseName;
        java.lang.String str74 = atomikosProperties71.getLogBaseDir();
        atomikosProperties71.setMaxActives((int) (byte) -1);
        java.lang.String str77 = atomikosProperties71.transactionManagerUniqueName;
        long long78 = atomikosProperties71.defaultJtaTimeout;
        atomikosProperties71.forceShutdownOnVmExit = true;
        atomikosProperties71.logBaseDir = "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        java.lang.Object obj83 = properties15.putIfAbsent((java.lang.Object) properties65, (java.lang.Object) atomikosProperties71);
        java.lang.Object obj84 = properties65.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10000L + "'", long52 == 10000L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 300000L + "'", long53 == 300000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 500L + "'", long64 == 500L);
        org.junit.Assert.assertNotNull(properties65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(objSet70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tmlog" + "'", str73, "tmlog");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 10000L + "'", long78 == 10000L);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNotNull(obj84);
// flaky:         org.junit.Assert.assertEquals(obj84.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8731");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.lang.Object obj8 = properties2.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        java.util.Properties properties15 = atomikosProperties9.asProperties();
        boolean boolean16 = properties2.equals((java.lang.Object) atomikosProperties9);
        java.lang.Object obj17 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        atomikosProperties18.setTransactionManagerUniqueName("");
        long long22 = atomikosProperties18.defaultJtaTimeout;
        java.lang.Object obj23 = null;
        java.lang.Object obj24 = properties2.getOrDefault((java.lang.Object) long22, obj23);
        int int25 = properties2.size();
        boolean boolean26 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        java.lang.Object obj30 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str32 = atomikosProperties31.logBaseDir;
        java.lang.String str33 = atomikosProperties31.logBaseName;
        java.lang.String str34 = atomikosProperties31.getLogBaseDir();
        atomikosProperties31.setMaxActives((int) (byte) -1);
        boolean boolean37 = atomikosProperties31.isEnableLogging();
        atomikosProperties31.transactionManagerUniqueName = "";
        atomikosProperties31.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setMaxActives((int) (byte) -1);
        java.lang.String str48 = atomikosProperties42.getService();
        java.lang.Object obj49 = properties29.getOrDefault((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        int int52 = atomikosProperties50.getMaxActives();
        java.lang.String str53 = atomikosProperties50.logBaseDir;
        java.lang.Object obj55 = properties29.putIfAbsent((java.lang.Object) atomikosProperties50, (java.lang.Object) "");
        int int56 = properties29.size();
        java.util.Collection<java.lang.Object> objCollection57 = properties29.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        int int60 = atomikosProperties58.getMaxActives();
        java.lang.String str61 = atomikosProperties58.logBaseDir;
        java.lang.String str62 = atomikosProperties58.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        atomikosProperties63.setMaxActives((int) (byte) -1);
        boolean boolean69 = atomikosProperties63.isEnableLogging();
        java.lang.String str70 = atomikosProperties63.getLogBaseName();
        java.lang.Object obj71 = properties29.replace((java.lang.Object) atomikosProperties58, (java.lang.Object) atomikosProperties63);
        atomikosProperties58.setLogBaseName("hi!");
        java.lang.String str74 = atomikosProperties58.getService();
        atomikosProperties58.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean77 = atomikosProperties58.enableLogging;
        boolean boolean78 = properties2.equals((java.lang.Object) boolean77);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "tmlog" + "'", str70, "tmlog");
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test8732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8732");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setMaxActives((int) (byte) 0);
        atomikosProperties0.setMaxActives((int) (short) 1);
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str14 = atomikosProperties0.getLogBaseDir();
        boolean boolean15 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean16 = atomikosProperties0.isSerialJtaTransactions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test8733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8733");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        boolean boolean46 = atomikosProperties44.isSerialJtaTransactions();
        java.lang.String str47 = atomikosProperties44.getLogBaseName();
        long long48 = atomikosProperties44.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.lang.Object obj54 = properties51.clone();
        java.util.Set<java.lang.Object> objSet55 = properties51.keySet();
        boolean boolean58 = properties51.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        java.lang.Object obj59 = properties15.replace((java.lang.Object) long48, (java.lang.Object) properties51);
        java.util.Properties properties60 = new java.util.Properties(properties51);
        java.lang.Object obj62 = properties60.get((java.lang.Object) 10.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.Object obj64 = properties60.remove((java.lang.Object) atomikosProperties63);
        java.io.Reader reader65 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties60.load(reader65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(obj64);
    }

    @Test
    public void test8734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8734");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.tmlog=0.0}");
        long long12 = atomikosProperties0.getMaxTimeout();
        java.lang.String str13 = atomikosProperties0.getLogBaseDir();
        int int14 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{com.atomikos.icatch.tmlog=0.0}" + "'", str13, "{com.atomikos.icatch.tmlog=0.0}");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
    }

    @Test
    public void test8735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8735");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        java.util.Collection<java.lang.Object> objCollection12 = properties9.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        atomikosProperties13.setTransactionManagerUniqueName("");
        int int17 = atomikosProperties13.getMaxActives();
        java.lang.String str18 = atomikosProperties13.transactionManagerUniqueName;
        atomikosProperties13.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        properties23.clear();
        java.util.Properties properties25 = new java.util.Properties(properties23);
        atomikosProperties13.set(properties23, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj31 = properties23.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet32 = properties23.stringPropertyNames();
        java.lang.String str34 = properties23.getProperty("hi!");
        java.lang.Object obj35 = properties2.putIfAbsent((java.lang.Object) objCollection12, (java.lang.Object) "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        java.lang.Object obj39 = properties38.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        boolean boolean46 = atomikosProperties40.isEnableLogging();
        atomikosProperties40.transactionManagerUniqueName = "";
        atomikosProperties40.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        java.lang.String str57 = atomikosProperties51.getService();
        java.lang.Object obj58 = properties38.getOrDefault((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties51);
        int int59 = properties38.size();
        boolean boolean60 = properties2.containsValue((java.lang.Object) properties38);
        java.io.PrintStream printStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties38.list(printStream61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test8736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8736");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        java.util.Collection<java.lang.Object> objCollection12 = properties9.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        atomikosProperties13.setTransactionManagerUniqueName("");
        int int17 = atomikosProperties13.getMaxActives();
        java.lang.String str18 = atomikosProperties13.transactionManagerUniqueName;
        atomikosProperties13.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        properties23.clear();
        java.util.Properties properties25 = new java.util.Properties(properties23);
        atomikosProperties13.set(properties23, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj31 = properties23.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet32 = properties23.stringPropertyNames();
        java.lang.String str34 = properties23.getProperty("hi!");
        java.lang.Object obj35 = properties2.putIfAbsent((java.lang.Object) objCollection12, (java.lang.Object) "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        java.lang.Object obj39 = properties38.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        boolean boolean46 = atomikosProperties40.isEnableLogging();
        atomikosProperties40.transactionManagerUniqueName = "";
        atomikosProperties40.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        java.lang.String str57 = atomikosProperties51.getService();
        java.lang.Object obj58 = properties38.getOrDefault((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties51);
        int int59 = properties38.size();
        boolean boolean60 = properties2.containsValue((java.lang.Object) properties38);
        java.lang.Object obj62 = properties38.get((java.lang.Object) 300000L);
        java.util.Collection<java.lang.Object> objCollection63 = properties38.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long65 = atomikosProperties64.checkpointInterval;
        java.util.Properties properties66 = atomikosProperties64.asProperties();
        properties66.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.logBaseDir;
        atomikosProperties68.setTransactionManagerUniqueName("");
        int int72 = atomikosProperties68.getMaxActives();
        boolean boolean73 = properties66.containsValue((java.lang.Object) int72);
        java.lang.Object obj76 = properties66.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Collection<java.lang.Object> objCollection77 = properties66.values();
        java.util.Collection<java.lang.Object> objCollection78 = properties66.values();
        boolean boolean79 = properties38.containsKey((java.lang.Object) properties66);
        java.io.OutputStream outputStream80 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties38.save(outputStream80, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog, tmlog=1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNotNull(objCollection63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 500L + "'", long65 == 500L);
        org.junit.Assert.assertNotNull(properties66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(objCollection77);
        org.junit.Assert.assertNotNull(objCollection78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test8737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8737");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        atomikosProperties36.threadedTwoPhaseCommit = true;
        atomikosProperties36.threadedTwoPhaseCommit = false;
        long long52 = atomikosProperties36.maxTimeout;
        atomikosProperties36.transactionManagerUniqueName = "hi!";
        long long55 = atomikosProperties36.maxTimeout;
        atomikosProperties36.setEnableLogging(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 300000L + "'", long55 == 300000L);
    }

    @Test
    public void test8738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8738");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.setMaxActives(50);
        long long25 = atomikosProperties15.getCheckpointInterval();
        long long26 = atomikosProperties15.getMaxTimeout();
        boolean boolean27 = atomikosProperties15.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 300000L + "'", long26 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test8739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8739");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection20 = properties10.values();
        java.util.Properties properties21 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        atomikosProperties29.forceShutdownOnVmExit = false;
        atomikosProperties29.setTransactionManagerUniqueName("");
        java.lang.Object obj35 = properties24.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties29);
        java.util.Set<java.lang.Object> objSet36 = properties24.keySet();
        java.lang.String str38 = properties24.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        boolean boolean43 = properties41.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        java.lang.Object obj49 = properties46.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        atomikosProperties50.setLogBaseName("");
        java.lang.Object obj56 = properties41.replace((java.lang.Object) properties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        java.util.Properties properties59 = atomikosProperties57.asProperties();
        java.lang.Object obj60 = properties59.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        java.lang.String str64 = atomikosProperties61.getLogBaseDir();
        atomikosProperties61.setMaxActives((int) (byte) -1);
        boolean boolean67 = atomikosProperties61.isEnableLogging();
        atomikosProperties61.transactionManagerUniqueName = "";
        atomikosProperties61.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str73 = atomikosProperties72.logBaseDir;
        java.lang.String str74 = atomikosProperties72.logBaseName;
        java.lang.String str75 = atomikosProperties72.getLogBaseDir();
        atomikosProperties72.setMaxActives((int) (byte) -1);
        java.lang.String str78 = atomikosProperties72.getService();
        java.lang.Object obj79 = properties59.getOrDefault((java.lang.Object) atomikosProperties61, (java.lang.Object) atomikosProperties72);
        int int80 = properties59.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet81 = properties59.entrySet();
        java.lang.Object obj82 = properties41.remove((java.lang.Object) objEntrySet81);
        java.lang.Object obj83 = properties24.remove((java.lang.Object) properties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties84 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str85 = atomikosProperties84.logBaseDir;
        atomikosProperties84.setTransactionManagerUniqueName("");
        int int88 = atomikosProperties84.getMaxActives();
        atomikosProperties84.logBaseName = "tmlog";
        java.lang.String str91 = atomikosProperties84.getLogBaseDir();
        boolean boolean92 = atomikosProperties84.serialJtaTransactions;
        java.lang.Object obj93 = properties10.putIfAbsent((java.lang.Object) properties24, (java.lang.Object) atomikosProperties84);
        int int94 = properties10.size();
        java.util.Set<java.lang.String> strSet95 = properties10.stringPropertyNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(objSet36);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNotNull(obj60);
// flaky:         org.junit.Assert.assertEquals(obj60.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "tmlog" + "'", str74, "tmlog");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertNotNull(objEntrySet81);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 50 + "'", int88 == 50);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
        org.junit.Assert.assertNotNull(strSet95);
    }

    @Test
    public void test8740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8740");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.threadedTwoPhaseCommit = true;
        atomikosProperties31.service = "tmlog";
        java.lang.String str49 = atomikosProperties31.getService();
        long long50 = atomikosProperties31.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
    }

    @Test
    public void test8741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8741");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setDefaultJtaTimeout(500L);
        long long12 = atomikosProperties0.getDefaultJtaTimeout();
        boolean boolean13 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setCheckpointInterval(2L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test8742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8742");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection20 = properties10.values();
        java.util.Properties properties21 = new java.util.Properties(properties10);
        java.lang.Object obj24 = properties10.setProperty("{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        atomikosProperties25.forceShutdownOnVmExit = false;
        atomikosProperties25.threadedTwoPhaseCommit = false;
        long long31 = atomikosProperties25.getMaxTimeout();
        java.lang.String str32 = atomikosProperties25.transactionManagerUniqueName;
        long long33 = atomikosProperties25.defaultJtaTimeout;
        java.lang.String str34 = atomikosProperties25.logBaseDir;
        atomikosProperties25.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        java.lang.Object obj37 = properties10.get((java.lang.Object) atomikosProperties25);
        atomikosProperties25.maxActives = (byte) 100;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test8743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8743");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setLogBaseName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.setCheckpointInterval((long) 100);
        boolean boolean44 = atomikosProperties41.isForceShutdownOnVmExit();
        atomikosProperties41.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean47 = properties40.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties48.enableLogging = true;
        boolean boolean52 = properties37.replace((java.lang.Object) boolean47, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection53 = properties37.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet54 = properties37.entrySet();
        java.lang.Object obj55 = properties2.replace((java.lang.Object) "", (java.lang.Object) properties37);
        java.util.Set<java.lang.Object> objSet56 = properties2.keySet();
        properties2.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objCollection53);
        org.junit.Assert.assertNotNull(objEntrySet54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(objSet56);
    }

    @Test
    public void test8744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8744");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        java.lang.Object obj16 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        atomikosProperties17.setTransactionManagerUniqueName("");
        int int21 = atomikosProperties17.getMaxActives();
        java.lang.String str22 = atomikosProperties17.getLogBaseDir();
        java.lang.String str23 = atomikosProperties17.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.logBaseDir;
        java.lang.String str26 = atomikosProperties24.logBaseName;
        java.lang.String str27 = atomikosProperties24.getLogBaseDir();
        boolean boolean28 = atomikosProperties24.isSerialJtaTransactions();
        atomikosProperties24.setEnableLogging(false);
        boolean boolean31 = atomikosProperties24.isForceShutdownOnVmExit();
        java.lang.Object obj32 = properties2.getOrDefault((java.lang.Object) str23, (java.lang.Object) boolean31);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        java.lang.String str56 = atomikosProperties48.service;
        long long57 = atomikosProperties48.maxTimeout;
        long long58 = atomikosProperties48.getDefaultJtaTimeout();
        atomikosProperties48.setThreadedTwoPhaseCommit(false);
        atomikosProperties48.logBaseName = "{}";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties63.setCheckpointInterval((long) 100);
        java.lang.String str66 = atomikosProperties63.getService();
        atomikosProperties63.defaultJtaTimeout = 'a';
        atomikosProperties63.enableLogging = false;
        atomikosProperties63.logBaseName = "tmlog";
        atomikosProperties63.setCheckpointInterval((long) 9);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long76 = atomikosProperties75.checkpointInterval;
        long long77 = atomikosProperties75.getDefaultJtaTimeout();
        atomikosProperties75.setService("hi!");
        atomikosProperties75.serialJtaTransactions = false;
        atomikosProperties75.logBaseDir = "{}";
        boolean boolean84 = properties2.replace((java.lang.Object) "{}", (java.lang.Object) atomikosProperties63, (java.lang.Object) atomikosProperties75);
        atomikosProperties63.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + "tmlog" + "'", obj16, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + false + "'", obj32, false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 300000L + "'", long57 == 300000L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10000L + "'", long58 == 10000L);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 500L + "'", long76 == 500L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test8745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8745");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        int int7 = atomikosProperties0.maxActives;
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setMaxActives((int) (byte) 100);
        boolean boolean12 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.checkpointInterval = 9L;
        java.lang.String str15 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test8746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8746");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        atomikosProperties23.setMaxActives((int) (byte) -1);
        java.lang.String str29 = atomikosProperties23.getService();
        long long30 = atomikosProperties23.defaultJtaTimeout;
        java.lang.String str31 = atomikosProperties23.logBaseName;
        java.lang.String str32 = atomikosProperties23.logBaseDir;
        java.lang.Class<?> wildcardClass33 = atomikosProperties23.getClass();
        java.lang.Object obj34 = properties21.put((java.lang.Object) false, (java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.serialJtaTransactions = true;
        atomikosProperties35.checkpointInterval = (-1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        java.lang.Object obj47 = properties21.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties44);
        atomikosProperties44.transactionManagerUniqueName = "tmlog";
        boolean boolean50 = atomikosProperties44.isEnableLogging();
        java.lang.String str51 = atomikosProperties44.logBaseName;
        atomikosProperties44.setCheckpointInterval((long) 'a');
        atomikosProperties44.setThreadedTwoPhaseCommit(false);
        atomikosProperties44.setCheckpointInterval(500L);
        java.lang.String str58 = atomikosProperties44.getLogBaseDir();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test8747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8747");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        long long10 = atomikosProperties8.getDefaultJtaTimeout();
        java.util.Properties properties11 = atomikosProperties8.asProperties();
        boolean boolean12 = atomikosProperties8.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setCheckpointInterval((long) 100);
        boolean boolean16 = atomikosProperties13.isForceShutdownOnVmExit();
        atomikosProperties13.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties13.service = "";
        atomikosProperties13.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        properties25.clear();
        boolean boolean27 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        java.lang.Object obj33 = properties30.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection34 = properties30.values();
        boolean boolean35 = properties25.containsKey((java.lang.Object) objCollection34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties25.keys();
        boolean boolean37 = properties4.replace((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties13, (java.lang.Object) properties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        properties40.clear();
        java.util.Properties properties42 = new java.util.Properties(properties40);
        java.lang.Object obj45 = properties42.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str46 = properties42.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setMaxActives((int) (byte) -1);
        boolean boolean53 = atomikosProperties47.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.setCheckpointInterval((long) 100);
        boolean boolean57 = atomikosProperties54.isForceShutdownOnVmExit();
        java.lang.Object obj58 = properties42.putIfAbsent((java.lang.Object) atomikosProperties47, (java.lang.Object) boolean57);
        java.util.Set<java.lang.String> strSet59 = properties42.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet60 = properties42.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str62 = atomikosProperties61.logBaseDir;
        java.lang.String str63 = atomikosProperties61.logBaseName;
        java.lang.String str64 = atomikosProperties61.getLogBaseName();
        int int65 = atomikosProperties61.getMaxActives();
        atomikosProperties61.setLogBaseDir("hi!");
        java.lang.String str68 = atomikosProperties61.logBaseName;
        java.lang.Object obj69 = properties4.replace((java.lang.Object) properties42, (java.lang.Object) str68);
        java.lang.String str72 = properties4.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertEquals("'" + obj45 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj45, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{}" + "'", str46, "{}");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(objSet60);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "tmlog" + "'", str63, "tmlog");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "tmlog" + "'", str64, "tmlog");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 50 + "'", int65 == 50);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}" + "'", str72, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8748");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setLogBaseName("hi!");
        boolean boolean15 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean16 = atomikosProperties0.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        java.lang.Object obj22 = properties19.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection23 = properties19.values();
        java.util.Collection<java.lang.Object> objCollection24 = properties19.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        properties27.clear();
        boolean boolean29 = properties27.isEmpty();
        java.lang.Object obj30 = properties27.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        properties33.clear();
        boolean boolean35 = properties33.isEmpty();
        java.util.Collection<java.lang.Object> objCollection36 = properties33.values();
        properties27.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties33);
        java.util.Enumeration<?> wildcardEnumeration38 = properties33.propertyNames();
        java.util.Properties properties39 = new java.util.Properties(properties33);
        properties19.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties39);
        java.lang.String str41 = properties19.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long44 = atomikosProperties43.checkpointInterval;
        java.util.Properties properties45 = atomikosProperties43.asProperties();
        properties45.clear();
        boolean boolean47 = properties45.isEmpty();
        java.lang.Object obj48 = properties45.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.util.Collection<java.lang.Object> objCollection54 = properties51.values();
        properties45.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties51);
        atomikosProperties0.set(properties19, "tmlog", (java.lang.Object) properties45);
        int int57 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setMaxActives(4);
        java.lang.String str60 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "{}");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objCollection36);
        org.junit.Assert.assertNotNull(wildcardEnumeration38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str41, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "{}");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
    }

    @Test
    public void test8749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8749");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str12 = atomikosProperties0.transactionManagerUniqueName;
        java.lang.String str13 = atomikosProperties0.service;
        boolean boolean14 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test8750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8750");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean6 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setTransactionManagerUniqueName("hi!");
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.tmlog=0.0}";
        long long12 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
    }

    @Test
    public void test8751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8751");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        properties13.clear();
        boolean boolean15 = properties13.isEmpty();
        java.lang.Object obj16 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        java.lang.Object obj21 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        boolean boolean28 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.transactionManagerUniqueName = "";
        atomikosProperties22.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        java.lang.String str39 = atomikosProperties33.getService();
        java.lang.Object obj40 = properties20.getOrDefault((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        int int43 = atomikosProperties41.getMaxActives();
        java.lang.String str44 = atomikosProperties41.logBaseDir;
        java.lang.Object obj46 = properties20.putIfAbsent((java.lang.Object) atomikosProperties41, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        boolean boolean51 = atomikosProperties47.isSerialJtaTransactions();
        atomikosProperties47.setEnableLogging(false);
        boolean boolean54 = properties13.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        java.util.Properties properties57 = atomikosProperties55.asProperties();
        properties57.clear();
        java.util.Properties properties59 = new java.util.Properties(properties57);
        java.lang.Object obj62 = properties59.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str63 = properties59.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.logBaseDir;
        java.lang.String str66 = atomikosProperties64.logBaseName;
        java.lang.String str67 = atomikosProperties64.getLogBaseDir();
        atomikosProperties64.setMaxActives((int) (byte) -1);
        boolean boolean70 = atomikosProperties64.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties71.setCheckpointInterval((long) 100);
        boolean boolean74 = atomikosProperties71.isForceShutdownOnVmExit();
        java.lang.Object obj75 = properties59.putIfAbsent((java.lang.Object) atomikosProperties64, (java.lang.Object) boolean74);
        atomikosProperties64.setLogBaseDir("{}");
        boolean boolean78 = properties13.containsValue((java.lang.Object) "{}");
        java.util.Set<java.lang.String> strSet79 = properties13.stringPropertyNames();
        java.lang.Object obj80 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str82 = atomikosProperties81.logBaseDir;
        java.lang.String str83 = atomikosProperties81.transactionManagerUniqueName;
        boolean boolean84 = atomikosProperties81.enableLogging;
        java.lang.String str85 = atomikosProperties81.getTransactionManagerUniqueName();
        java.lang.String str86 = atomikosProperties81.getTransactionManagerUniqueName();
        atomikosProperties81.setCheckpointInterval(10L);
        java.lang.String str89 = atomikosProperties81.getLogBaseName();
        int int90 = atomikosProperties81.maxActives;
        java.lang.Object obj91 = properties10.putIfAbsent(obj80, (java.lang.Object) int90);
        java.util.Properties properties92 = new java.util.Properties(properties10);
        java.io.PrintStream printStream93 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.list(printStream93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "{}");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj62, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{}" + "'", str63, "{}");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "tmlog" + "'", str66, "tmlog");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "{}");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "tmlog" + "'", str89, "tmlog");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 50 + "'", int90 == 50);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test8752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8752");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        boolean boolean4 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        java.lang.String str8 = atomikosProperties6.transactionManagerUniqueName;
        boolean boolean9 = atomikosProperties6.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        java.util.Properties properties12 = atomikosProperties10.asProperties();
        java.lang.Object obj13 = properties12.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        atomikosProperties14.setMaxActives((int) (byte) -1);
        boolean boolean20 = atomikosProperties14.isEnableLogging();
        atomikosProperties14.transactionManagerUniqueName = "";
        atomikosProperties14.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        java.lang.String str31 = atomikosProperties25.getService();
        java.lang.Object obj32 = properties12.getOrDefault((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties25);
        int int33 = properties12.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.serialJtaTransactions = true;
        java.lang.String str42 = atomikosProperties35.getService();
        atomikosProperties6.set(properties12, "hi!", (java.lang.Object) str42);
        java.lang.String str45 = properties12.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseName();
        long long51 = atomikosProperties47.maxTimeout;
        java.lang.String str52 = atomikosProperties47.getTransactionManagerUniqueName();
        atomikosProperties0.set(properties12, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties47);
        atomikosProperties47.setLogBaseDir("tmlog");
        atomikosProperties47.maxTimeout = (byte) 100;
        boolean boolean58 = atomikosProperties47.isForceShutdownOnVmExit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 300000L + "'", long51 == 300000L);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test8753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8753");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.lang.String str15 = properties14.toString();
        java.util.Set<java.lang.String> strSet16 = properties14.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test8754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8754");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        int int6 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertNotNull(properties9);
    }

    @Test
    public void test8755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8755");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        int int5 = properties2.size();
        java.util.Set<java.lang.String> strSet6 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        boolean boolean10 = atomikosProperties7.isEnableLogging();
        atomikosProperties7.setSerialJtaTransactions(true);
        java.lang.String str13 = atomikosProperties7.logBaseDir;
        atomikosProperties7.setForceShutdownOnVmExit(true);
        java.util.Properties properties16 = atomikosProperties7.asProperties();
        boolean boolean17 = properties2.equals((java.lang.Object) properties16);
        java.util.Set<java.lang.String> strSet18 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        java.lang.String str25 = atomikosProperties19.getService();
        long long26 = atomikosProperties19.defaultJtaTimeout;
        java.lang.String str27 = atomikosProperties19.logBaseName;
        java.lang.String str28 = atomikosProperties19.logBaseDir;
        boolean boolean29 = atomikosProperties19.threadedTwoPhaseCommit;
        long long30 = atomikosProperties19.maxTimeout;
        atomikosProperties19.forceShutdownOnVmExit = false;
        boolean boolean33 = properties2.containsValue((java.lang.Object) atomikosProperties19);
        java.util.Properties properties34 = new java.util.Properties(properties2);
        java.util.Set<java.lang.String> strSet35 = properties2.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10000L + "'", long26 == 10000L);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 300000L + "'", long30 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet35);
    }

    @Test
    public void test8756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8756");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval(1L);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.checkpointInterval = 100;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test8757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8757");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.tmlog=0.0}");
        atomikosProperties0.maxTimeout = '4';
        boolean boolean14 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test8758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8758");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str5 = atomikosProperties0.logBaseName;
        long long6 = atomikosProperties0.getMaxTimeout();
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives((int) (byte) 100);
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties11.enableLogging = true;
        boolean boolean14 = atomikosProperties11.forceShutdownOnVmExit;
        atomikosProperties11.setSerialJtaTransactions(false);
        atomikosProperties11.setThreadedTwoPhaseCommit(false);
        boolean boolean19 = atomikosProperties11.isThreadedTwoPhaseCommit();
        atomikosProperties11.setMaxTimeout((long) 52);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        java.lang.Object obj25 = properties24.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setMaxActives((int) (byte) -1);
        boolean boolean32 = atomikosProperties26.isEnableLogging();
        atomikosProperties26.transactionManagerUniqueName = "";
        atomikosProperties26.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        java.lang.String str43 = atomikosProperties37.getService();
        java.lang.Object obj44 = properties24.getOrDefault((java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties37);
        int int45 = properties24.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet46 = properties24.entrySet();
        java.util.Enumeration<?> wildcardEnumeration47 = properties24.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        java.util.Properties properties50 = atomikosProperties48.asProperties();
        properties50.clear();
        boolean boolean52 = properties50.isEmpty();
        java.lang.Object obj53 = properties50.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        java.util.Properties properties56 = atomikosProperties54.asProperties();
        properties56.clear();
        boolean boolean58 = properties56.isEmpty();
        java.util.Collection<java.lang.Object> objCollection59 = properties56.values();
        properties50.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties56);
        java.lang.Object obj63 = properties56.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        java.lang.Object obj64 = properties56.clone();
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties56);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        boolean boolean72 = atomikosProperties66.isEnableLogging();
        boolean boolean73 = atomikosProperties66.isEnableLogging();
        java.lang.Object obj74 = null;
        java.lang.Object obj75 = properties24.getOrDefault((java.lang.Object) atomikosProperties66, obj74);
        java.lang.String str76 = properties24.toString();
        boolean boolean77 = properties10.remove((java.lang.Object) 52, (java.lang.Object) str76);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tmlog" + "'", str5, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(objEntrySet46);
        org.junit.Assert.assertNotNull(wildcardEnumeration47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{}");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objCollection59);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=}");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(obj75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}" + "'", str76, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test8759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8759");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.maxTimeout = 50;
        atomikosProperties0.serialJtaTransactions = true;
        long long14 = atomikosProperties0.getMaxTimeout();
        boolean boolean15 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.maxActives = (byte) 0;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 50L + "'", long14 == 50L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test8760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8760");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        boolean boolean21 = properties2.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        java.util.Set<java.lang.Object> objSet28 = properties24.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.threadedTwoPhaseCommit = false;
        int int39 = atomikosProperties29.maxActives;
        atomikosProperties29.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj42 = properties2.getOrDefault((java.lang.Object) properties24, (java.lang.Object) atomikosProperties29);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties24.elements();
        java.lang.Object obj46 = properties24.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "");
        boolean boolean47 = properties24.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        atomikosProperties48.setTransactionManagerUniqueName("");
        int int52 = atomikosProperties48.getMaxActives();
        java.lang.String str53 = atomikosProperties48.transactionManagerUniqueName;
        atomikosProperties48.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        java.util.Properties properties58 = atomikosProperties56.asProperties();
        properties58.clear();
        java.util.Properties properties60 = new java.util.Properties(properties58);
        atomikosProperties48.set(properties58, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj66 = properties58.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long68 = atomikosProperties67.checkpointInterval;
        java.util.Properties properties69 = atomikosProperties67.asProperties();
        properties69.clear();
        java.util.Properties properties71 = new java.util.Properties(properties69);
        java.lang.Object obj74 = properties71.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str75 = properties71.toString();
        java.lang.Object obj78 = properties71.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet79 = properties71.keySet();
        java.lang.Object obj80 = properties58.remove((java.lang.Object) properties71);
        boolean boolean81 = properties24.containsKey((java.lang.Object) properties58);
        java.util.Collection<java.lang.Object> objCollection82 = properties24.values();
        java.util.Enumeration<java.lang.Object> objEnumeration83 = properties24.keys();
        java.util.Collection<java.lang.Object> objCollection84 = properties24.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj74, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "{}" + "'", str75, "{}");
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(objSet79);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objCollection82);
        org.junit.Assert.assertNotNull(objEnumeration83);
        org.junit.Assert.assertNotNull(objCollection84);
    }

    @Test
    public void test8761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8761");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        boolean boolean4 = atomikosProperties0.isThreadedTwoPhaseCommit();
        boolean boolean5 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        java.lang.String str8 = atomikosProperties6.transactionManagerUniqueName;
        boolean boolean9 = atomikosProperties6.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        java.util.Properties properties12 = atomikosProperties10.asProperties();
        java.lang.Object obj13 = properties12.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        atomikosProperties14.setMaxActives((int) (byte) -1);
        boolean boolean20 = atomikosProperties14.isEnableLogging();
        atomikosProperties14.transactionManagerUniqueName = "";
        atomikosProperties14.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        java.lang.String str31 = atomikosProperties25.getService();
        java.lang.Object obj32 = properties12.getOrDefault((java.lang.Object) atomikosProperties14, (java.lang.Object) atomikosProperties25);
        int int33 = properties12.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.serialJtaTransactions = true;
        java.lang.String str42 = atomikosProperties35.getService();
        atomikosProperties6.set(properties12, "hi!", (java.lang.Object) str42);
        java.lang.String str45 = properties12.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseName();
        long long51 = atomikosProperties47.maxTimeout;
        java.lang.String str52 = atomikosProperties47.getTransactionManagerUniqueName();
        atomikosProperties0.set(properties12, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) atomikosProperties47);
        boolean boolean54 = atomikosProperties0.forceShutdownOnVmExit;
        long long55 = atomikosProperties0.getDefaultJtaTimeout();
        long long56 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties57 = atomikosProperties0.asProperties();
        atomikosProperties0.defaultJtaTimeout = 3;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertNotNull(properties12);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 300000L + "'", long51 == 300000L);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10000L + "'", long56 == 10000L);
        org.junit.Assert.assertNotNull(properties57);
    }

    @Test
    public void test8762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8762");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        boolean boolean23 = atomikosProperties4.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        java.lang.Object obj29 = properties26.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        java.lang.Object obj34 = properties33.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        atomikosProperties35.setMaxActives((int) (byte) -1);
        boolean boolean41 = atomikosProperties35.isEnableLogging();
        atomikosProperties35.transactionManagerUniqueName = "";
        atomikosProperties35.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        java.lang.String str52 = atomikosProperties46.getService();
        java.lang.Object obj53 = properties33.getOrDefault((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties46);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        int int56 = atomikosProperties54.getMaxActives();
        java.lang.String str57 = atomikosProperties54.logBaseDir;
        java.lang.Object obj59 = properties33.putIfAbsent((java.lang.Object) atomikosProperties54, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        boolean boolean64 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.setEnableLogging(false);
        boolean boolean67 = properties26.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties60);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long69 = atomikosProperties68.checkpointInterval;
        java.util.Properties properties70 = atomikosProperties68.asProperties();
        properties70.clear();
        java.util.Properties properties72 = new java.util.Properties(properties70);
        java.lang.Object obj75 = properties72.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str76 = properties72.toString();
        boolean boolean77 = properties26.containsValue((java.lang.Object) properties72);
        java.util.Set<java.lang.Object> objSet78 = properties72.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties80 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long81 = atomikosProperties80.checkpointInterval;
        int int82 = atomikosProperties80.getMaxActives();
        atomikosProperties4.set(properties72, "hi!", (java.lang.Object) atomikosProperties80);
        atomikosProperties4.threadedTwoPhaseCommit = false;
        boolean boolean86 = atomikosProperties4.isThreadedTwoPhaseCommit();
        boolean boolean87 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.maxTimeout = ' ';
        java.lang.String str90 = atomikosProperties4.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 50 + "'", int56 == 50);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 500L + "'", long69 == 500L);
        org.junit.Assert.assertNotNull(properties70);
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj75, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{}" + "'", str76, "{}");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objSet78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 500L + "'", long81 == 500L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 50 + "'", int82 == 50);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
    }

    @Test
    public void test8763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8763");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        boolean boolean10 = atomikosProperties0.forceShutdownOnVmExit;
        boolean boolean11 = atomikosProperties0.isForceShutdownOnVmExit();
        long long12 = atomikosProperties0.getDefaultJtaTimeout();
        long long13 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10000L + "'", long12 == 10000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
    }

    @Test
    public void test8764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8764");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        boolean boolean3 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties4 = atomikosProperties0.asProperties();
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.serialJtaTransactions = true;
        atomikosProperties0.service = "";
        int int11 = atomikosProperties0.getMaxActives();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(properties4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
    }

    @Test
    public void test8765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8765");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.setService("tmlog");
        java.lang.String str25 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setDefaultJtaTimeout((long) (byte) 0);
        java.lang.String str28 = atomikosProperties15.logBaseName;
        int int29 = atomikosProperties15.maxActives;
        java.lang.String str30 = atomikosProperties15.getLogBaseName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
    }

    @Test
    public void test8766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8766");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        java.lang.String str29 = atomikosProperties13.transactionManagerUniqueName;
        boolean boolean30 = atomikosProperties13.enableLogging;
        atomikosProperties13.setEnableLogging(false);
        boolean boolean33 = atomikosProperties13.serialJtaTransactions;
        atomikosProperties13.setSerialJtaTransactions(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test8767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8767");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = atomikosProperties5.isEnableLogging();
        atomikosProperties5.setMaxActives((int) (byte) -1);
        java.lang.String str15 = atomikosProperties5.getService();
        boolean boolean16 = atomikosProperties5.isThreadedTwoPhaseCommit();
        atomikosProperties5.forceShutdownOnVmExit = true;
        java.util.Properties properties19 = atomikosProperties5.asProperties();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(properties19);
    }

    @Test
    public void test8768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8768");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.maxActives = 9;
        boolean boolean10 = atomikosProperties0.enableLogging;
        java.lang.String str11 = atomikosProperties0.transactionManagerUniqueName;
        long long12 = atomikosProperties0.maxTimeout;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
    }

    @Test
    public void test8769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8769");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean8 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.maxTimeout = ' ';
        boolean boolean11 = atomikosProperties0.isSerialJtaTransactions();
        boolean boolean12 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test8770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8770");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.setMaxActives(50);
        atomikosProperties15.setLogBaseName("");
        atomikosProperties15.service = "tmlog";
        java.lang.String str29 = atomikosProperties15.logBaseName;
        atomikosProperties15.logBaseName = "{}";
        atomikosProperties15.forceShutdownOnVmExit = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test8771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8771");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection20 = properties10.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setCheckpointInterval((long) 100);
        boolean boolean30 = atomikosProperties27.isForceShutdownOnVmExit();
        atomikosProperties27.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean33 = properties26.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.enableLogging = true;
        boolean boolean38 = properties23.replace((java.lang.Object) boolean33, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection39 = properties23.values();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties23.keys();
        java.lang.Object obj41 = properties10.remove((java.lang.Object) objEnumeration40);
        boolean boolean42 = properties10.isEmpty();
        int int43 = properties10.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        boolean boolean48 = properties46.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        atomikosProperties49.setTransactionManagerUniqueName("");
        int int53 = atomikosProperties49.getMaxActives();
        java.lang.String str54 = atomikosProperties49.transactionManagerUniqueName;
        boolean boolean55 = properties46.containsValue((java.lang.Object) atomikosProperties49);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties46.elements();
        java.util.Collection<java.lang.Object> objCollection57 = properties46.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet58 = properties46.entrySet();
        boolean boolean59 = properties10.containsValue((java.lang.Object) properties46);
        java.util.Properties properties60 = new java.util.Properties(properties46);
        java.io.OutputStream outputStream61 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties46.storeToXML(outputStream61, "{{com.atomikos.icatch.tmlog=0.0}={com.atomikos.icatch.tmlog=0.0}}", "{com.atomikos.icatch.{}=false, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 50 + "'", int53 == 50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(objEntrySet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test8772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8772");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties10.transactionManagerUniqueName = "hi!";
        long long42 = atomikosProperties10.getMaxTimeout();
        atomikosProperties10.setCheckpointInterval((long) (-1));
        atomikosProperties10.forceShutdownOnVmExit = true;
        java.util.Properties properties47 = atomikosProperties10.asProperties();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 300000L + "'", long42 == 300000L);
        org.junit.Assert.assertNotNull(properties47);
    }

    @Test
    public void test8773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8773");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setCheckpointInterval((-1L));
        java.lang.String str5 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.setCheckpointInterval((long) (byte) 1);
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        int int11 = atomikosProperties0.maxActives;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog, tmlog=1}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
    }

    @Test
    public void test8774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8774");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.service = "hi!";
        long long8 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setLogBaseDir("");
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8775");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = 1;
        atomikosProperties0.defaultJtaTimeout = 300000L;
        long long16 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str17 = atomikosProperties0.logBaseName;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
    }

    @Test
    public void test8776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8776");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.checkpointInterval = (byte) 1;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        atomikosProperties0.setMaxTimeout((long) 9);
        java.util.Properties properties20 = atomikosProperties0.asProperties();
        java.lang.Object obj21 = properties20.clone();
        java.util.Properties properties22 = new java.util.Properties(properties20);
        java.util.Collection<java.lang.Object> objCollection23 = properties20.values();
        java.util.Enumeration<java.lang.Object> objEnumeration24 = properties20.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.enableLogging = true;
        atomikosProperties25.setThreadedTwoPhaseCommit(true);
        java.lang.String str30 = atomikosProperties25.service;
        atomikosProperties25.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean33 = properties20.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties20.elements();
        java.lang.String str37 = properties20.getProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=1, com.atomikos.icatch.log_base_name=tmlog}", "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=1, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=9, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=1, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=9, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=1, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=9, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=tmlog, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objCollection23);
        org.junit.Assert.assertNotNull(objEnumeration24);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}" + "'", str37, "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
    }

    @Test
    public void test8777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8777");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setEnableLogging(false);
        java.lang.String str7 = atomikosProperties0.logBaseDir;
        java.lang.String str8 = atomikosProperties0.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test8778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8778");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.setLogBaseName("tmlog");
        java.lang.String str8 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setCheckpointInterval((long) 50);
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
        atomikosProperties0.setLogBaseName("{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test8779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8779");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties2.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties2.keys();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet15 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        int int18 = atomikosProperties16.getMaxActives();
        atomikosProperties16.setEnableLogging(true);
        boolean boolean21 = properties2.containsValue((java.lang.Object) atomikosProperties16);
        java.lang.String str22 = atomikosProperties16.getService();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(objEntrySet15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test8780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8780");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        boolean boolean20 = properties8.equals((java.lang.Object) properties16);
        java.util.Enumeration<?> wildcardEnumeration21 = properties16.propertyNames();
        java.util.Properties properties22 = new java.util.Properties(properties16);
        boolean boolean23 = properties22.isEmpty();
        java.lang.Object obj24 = properties22.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardEnumeration21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{}");
    }

    @Test
    public void test8781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8781");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties29.defaultJtaTimeout = (byte) 10;
        atomikosProperties29.setService("hi!");
        atomikosProperties29.enableLogging = false;
        boolean boolean46 = atomikosProperties29.isSerialJtaTransactions();
        atomikosProperties29.setCheckpointInterval((long) 35);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test8782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8782");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        int int9 = atomikosProperties0.maxActives;
        long long10 = atomikosProperties0.maxTimeout;
        java.lang.String str11 = atomikosProperties0.getService();
        atomikosProperties0.maxActives = (byte) 0;
        boolean boolean14 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean17 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = 11;
        atomikosProperties0.maxTimeout = (byte) 0;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test8783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8783");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        atomikosProperties23.setMaxActives((int) (byte) -1);
        boolean boolean29 = atomikosProperties23.isEnableLogging();
        long long30 = atomikosProperties23.checkpointInterval;
        atomikosProperties23.setCheckpointInterval(10L);
        boolean boolean33 = atomikosProperties23.isForceShutdownOnVmExit();
        atomikosProperties23.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties23.setLogBaseName("hi!");
        long long38 = atomikosProperties23.checkpointInterval;
        atomikosProperties23.serialJtaTransactions = true;
        atomikosProperties23.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean43 = atomikosProperties23.isForceShutdownOnVmExit();
        boolean boolean44 = properties2.equals((java.lang.Object) boolean43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        atomikosProperties45.forceShutdownOnVmExit = false;
        atomikosProperties45.threadedTwoPhaseCommit = false;
        int int51 = atomikosProperties45.maxActives;
        long long52 = atomikosProperties45.checkpointInterval;
        atomikosProperties45.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties45.checkpointInterval = 0L;
        atomikosProperties45.setMaxActives((int) (byte) 100);
        boolean boolean59 = properties2.contains((java.lang.Object) (byte) 100);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test8784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8784");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval(10L);
        boolean boolean10 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean15 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        java.lang.String str18 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test8785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8785");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        java.lang.String str8 = atomikosProperties0.logBaseName;
        long long9 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str10 = atomikosProperties0.service;
        atomikosProperties0.logBaseName = "";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test8786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8786");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        java.lang.String str9 = atomikosProperties0.service;
        boolean boolean10 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.service = "{}";
        java.lang.String str13 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test8787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8787");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        int int9 = atomikosProperties0.maxActives;
        long long10 = atomikosProperties0.maxTimeout;
        java.lang.String str11 = atomikosProperties0.getService();
        atomikosProperties0.maxActives = (byte) 0;
        java.util.Properties properties14 = atomikosProperties0.asProperties();
        java.lang.String str15 = properties14.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties14.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        atomikosProperties17.setTransactionManagerUniqueName("");
        int int21 = atomikosProperties17.getMaxActives();
        java.lang.String str22 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setTransactionManagerUniqueName("");
        atomikosProperties17.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties17.setCheckpointInterval((long) 9);
        atomikosProperties17.setLogBaseDir("{}");
        atomikosProperties17.setEnableLogging(false);
        java.util.Properties properties33 = atomikosProperties17.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties33.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.transactionManagerUniqueName;
        atomikosProperties35.serialJtaTransactions = true;
        long long40 = atomikosProperties35.maxTimeout;
        atomikosProperties35.setCheckpointInterval(10000L);
        atomikosProperties35.defaultJtaTimeout = 1L;
        boolean boolean45 = properties33.contains((java.lang.Object) atomikosProperties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        java.lang.String str52 = atomikosProperties46.getService();
        java.lang.String str53 = atomikosProperties46.getLogBaseName();
        atomikosProperties46.enableLogging = false;
        java.lang.Object obj56 = properties14.putIfAbsent((java.lang.Object) boolean45, (java.lang.Object) false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 300000L + "'", long10 == 300000L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(properties14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}" + "'", str15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 300000L + "'", long40 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(obj56);
    }

    @Test
    public void test8788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8788");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Set<java.lang.String> strSet14 = properties2.stringPropertyNames();
        java.util.Set<java.lang.String> strSet15 = properties2.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet16 = properties2.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties2.elements();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(objSet16);
        org.junit.Assert.assertNotNull(objEnumeration17);
    }

    @Test
    public void test8789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8789");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.setService("{}");
        boolean boolean7 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.forceShutdownOnVmExit = false;
        java.lang.String str10 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.serialJtaTransactions = false;
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.serialJtaTransactions = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test8790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8790");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        long long4 = atomikosProperties0.getCheckpointInterval();
        java.util.Properties properties5 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        java.lang.String str8 = atomikosProperties6.logBaseName;
        atomikosProperties6.setService("");
        java.util.Properties properties11 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        properties15.clear();
        boolean boolean17 = properties15.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        atomikosProperties18.setTransactionManagerUniqueName("");
        int int22 = atomikosProperties18.getMaxActives();
        java.lang.String str23 = atomikosProperties18.transactionManagerUniqueName;
        boolean boolean24 = properties15.containsValue((java.lang.Object) atomikosProperties18);
        boolean boolean25 = atomikosProperties18.forceShutdownOnVmExit;
        atomikosProperties6.set(properties11, "{}", (java.lang.Object) boolean25);
        java.util.Properties properties27 = new java.util.Properties(properties11);
        java.util.Collection<java.lang.Object> objCollection28 = properties27.values();
        boolean boolean29 = properties5.containsValue((java.lang.Object) properties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        boolean boolean34 = atomikosProperties30.isSerialJtaTransactions();
        long long35 = atomikosProperties30.checkpointInterval;
        atomikosProperties30.setMaxTimeout((long) (byte) 10);
        long long38 = atomikosProperties30.maxTimeout;
        boolean boolean39 = atomikosProperties30.isForceShutdownOnVmExit();
        boolean boolean40 = atomikosProperties30.isThreadedTwoPhaseCommit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        atomikosProperties41.setMaxActives((int) (byte) -1);
        java.lang.String str47 = atomikosProperties41.getService();
        long long48 = atomikosProperties41.defaultJtaTimeout;
        java.lang.String str49 = atomikosProperties41.logBaseName;
        java.lang.String str50 = atomikosProperties41.logBaseDir;
        atomikosProperties41.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean53 = atomikosProperties41.threadedTwoPhaseCommit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties54.transactionManagerUniqueName = "{}";
        boolean boolean57 = properties5.replace((java.lang.Object) boolean40, (java.lang.Object) boolean53, (java.lang.Object) atomikosProperties54);
        atomikosProperties54.forceShutdownOnVmExit = false;
        long long60 = atomikosProperties54.maxTimeout;
        java.lang.String str61 = atomikosProperties54.service;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objCollection28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 300000L + "'", long60 == 300000L);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test8791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8791");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setMaxActives((int) (byte) -1);
        java.lang.String str32 = atomikosProperties26.transactionManagerUniqueName;
        long long33 = atomikosProperties26.defaultJtaTimeout;
        boolean boolean34 = properties2.containsKey((java.lang.Object) long33);
        java.util.Enumeration<java.lang.Object> objEnumeration35 = properties2.keys();
        java.io.Reader reader36 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(reader36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objEnumeration35);
    }

    @Test
    public void test8792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8792");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties2.entrySet();
        int int20 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        atomikosProperties21.forceShutdownOnVmExit = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setDefaultJtaTimeout(500L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties33.setCheckpointInterval((long) 100);
        boolean boolean36 = atomikosProperties33.isForceShutdownOnVmExit();
        atomikosProperties33.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties33.service = "hi!";
        java.lang.Object obj41 = properties2.put((java.lang.Object) atomikosProperties21, (java.lang.Object) "hi!");
        java.lang.String str43 = properties2.getProperty("tmlog");
        boolean boolean44 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        java.util.Set<java.lang.String> strSet49 = properties48.stringPropertyNames();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties48);
        java.util.Set<java.lang.Object> objSet51 = properties2.keySet();
        java.lang.String str52 = properties2.toString();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet53 = properties2.entrySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(objSet51);
        org.junit.Assert.assertNotNull(objEntrySet53);
    }

    @Test
    public void test8793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8793");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.util.Properties properties6 = atomikosProperties0.asProperties();
        java.lang.String str7 = atomikosProperties0.getService();
        boolean boolean8 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.checkpointInterval = (byte) 100;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        long long14 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10000L + "'", long14 == 10000L);
    }

    @Test
    public void test8794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8794");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        boolean boolean48 = atomikosProperties36.forceShutdownOnVmExit;
        long long49 = atomikosProperties36.getCheckpointInterval();
        boolean boolean50 = atomikosProperties36.enableLogging;
        atomikosProperties36.setSerialJtaTransactions(true);
        java.lang.String str53 = atomikosProperties36.transactionManagerUniqueName;
        atomikosProperties36.setMaxActives((int) 'a');
        java.lang.String str56 = atomikosProperties36.logBaseName;
        long long57 = atomikosProperties36.maxTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{}" + "'", str56, "{}");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 300000L + "'", long57 == 300000L);
    }

    @Test
    public void test8795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8795");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.forceShutdownOnVmExit = true;
        java.lang.String str6 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
    }

    @Test
    public void test8796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8796");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setMaxActives((int) (byte) -1);
        java.lang.String str32 = atomikosProperties26.transactionManagerUniqueName;
        long long33 = atomikosProperties26.defaultJtaTimeout;
        boolean boolean34 = properties2.containsKey((java.lang.Object) long33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.transactionManagerUniqueName;
        boolean boolean38 = atomikosProperties35.enableLogging;
        boolean boolean39 = atomikosProperties35.isThreadedTwoPhaseCommit();
        boolean boolean40 = atomikosProperties35.isThreadedTwoPhaseCommit();
        atomikosProperties35.maxTimeout = 9L;
        java.lang.String str43 = atomikosProperties35.logBaseName;
        boolean boolean44 = atomikosProperties35.serialJtaTransactions;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.lang.String str47 = atomikosProperties45.service;
        boolean boolean48 = atomikosProperties45.isForceShutdownOnVmExit();
        atomikosProperties45.setForceShutdownOnVmExit(true);
        java.lang.Object obj51 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = properties2.replace((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties45, obj51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10000L + "'", long33 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test8797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8797");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        java.lang.String str72 = atomikosProperties66.getService();
        long long73 = atomikosProperties66.defaultJtaTimeout;
        atomikosProperties66.setEnableLogging(true);
        boolean boolean76 = properties53.equals((java.lang.Object) atomikosProperties66);
        boolean boolean77 = atomikosProperties66.isThreadedTwoPhaseCommit();
        atomikosProperties66.setMaxActives((int) (short) 100);
        atomikosProperties66.threadedTwoPhaseCommit = false;
        boolean boolean82 = atomikosProperties66.isEnableLogging();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test8798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8798");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setLogBaseName("");
        int int6 = atomikosProperties0.getMaxActives();
        atomikosProperties0.serialJtaTransactions = true;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
    }

    @Test
    public void test8799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8799");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.maxActives = '4';
        atomikosProperties0.maxTimeout = 10;
        long long50 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setMaxActives((int) (byte) 0);
        boolean boolean53 = atomikosProperties0.serialJtaTransactions;
        long long54 = atomikosProperties0.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10000L + "'", long54 == 10000L);
    }

    @Test
    public void test8800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8800");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.setCheckpointInterval((long) 100);
        boolean boolean6 = atomikosProperties3.isForceShutdownOnVmExit();
        atomikosProperties3.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean9 = properties2.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties2.entrySet();
        java.lang.String str11 = properties2.toString();
        java.lang.Object obj12 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        atomikosProperties13.setService("");
        boolean boolean18 = atomikosProperties13.threadedTwoPhaseCommit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        properties21.clear();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.logBaseDir;
        atomikosProperties24.setTransactionManagerUniqueName("");
        int int28 = atomikosProperties24.getMaxActives();
        atomikosProperties24.logBaseName = "tmlog";
        int int31 = atomikosProperties24.maxActives;
        boolean boolean32 = properties21.containsValue((java.lang.Object) int31);
        java.util.Properties properties33 = new java.util.Properties(properties21);
        java.util.Enumeration<java.lang.Object> objEnumeration34 = properties33.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        java.lang.Object obj38 = properties37.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        java.lang.String str41 = atomikosProperties39.logBaseName;
        java.lang.String str42 = atomikosProperties39.getLogBaseDir();
        atomikosProperties39.setMaxActives((int) (byte) -1);
        boolean boolean45 = atomikosProperties39.isEnableLogging();
        atomikosProperties39.transactionManagerUniqueName = "";
        atomikosProperties39.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        atomikosProperties50.setMaxActives((int) (byte) -1);
        java.lang.String str56 = atomikosProperties50.getService();
        java.lang.Object obj57 = properties37.getOrDefault((java.lang.Object) atomikosProperties39, (java.lang.Object) atomikosProperties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        int int60 = atomikosProperties58.getMaxActives();
        java.lang.String str61 = atomikosProperties58.logBaseDir;
        java.lang.Object obj63 = properties37.putIfAbsent((java.lang.Object) atomikosProperties58, (java.lang.Object) "");
        int int64 = properties37.size();
        java.util.Collection<java.lang.Object> objCollection65 = properties37.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        int int68 = atomikosProperties66.getMaxActives();
        java.lang.String str69 = atomikosProperties66.logBaseDir;
        java.lang.String str70 = atomikosProperties66.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        java.lang.String str73 = atomikosProperties71.logBaseName;
        java.lang.String str74 = atomikosProperties71.getLogBaseDir();
        atomikosProperties71.setMaxActives((int) (byte) -1);
        boolean boolean77 = atomikosProperties71.isEnableLogging();
        java.lang.String str78 = atomikosProperties71.getLogBaseName();
        java.lang.Object obj79 = properties37.replace((java.lang.Object) atomikosProperties66, (java.lang.Object) atomikosProperties71);
        atomikosProperties66.threadedTwoPhaseCommit = true;
        atomikosProperties66.service = "tmlog";
        java.lang.String str84 = atomikosProperties66.logBaseName;
        atomikosProperties66.setForceShutdownOnVmExit(false);
        atomikosProperties66.logBaseDir = "";
        atomikosProperties66.setLogBaseDir("");
        atomikosProperties66.logBaseName = "tmlog";
        boolean boolean93 = atomikosProperties66.isForceShutdownOnVmExit();
        java.lang.Object obj95 = properties33.putIfAbsent((java.lang.Object) atomikosProperties66, (java.lang.Object) 0L);
        java.util.Collection<java.lang.Object> objCollection96 = properties33.values();
        java.lang.Object obj97 = properties2.putIfAbsent((java.lang.Object) atomikosProperties13, (java.lang.Object) objCollection96);
        atomikosProperties13.setCheckpointInterval(9L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str11, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 50 + "'", int28 == 50);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objEnumeration34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 50 + "'", int60 == 50);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(objCollection65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 50 + "'", int68 == 50);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tmlog" + "'", str73, "tmlog");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "tmlog" + "'", str84, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(obj95);
        org.junit.Assert.assertNotNull(objCollection96);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test8801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8801");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.setCheckpointInterval((long) 100);
        boolean boolean6 = atomikosProperties3.isForceShutdownOnVmExit();
        atomikosProperties3.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean9 = properties2.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties10.enableLogging = true;
        boolean boolean13 = atomikosProperties10.forceShutdownOnVmExit;
        java.util.Properties properties14 = atomikosProperties10.asProperties();
        boolean boolean15 = properties2.containsValue((java.lang.Object) atomikosProperties10);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet16 = properties2.entrySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objEntrySet16);
    }

    @Test
    public void test8802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8802");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        int int14 = properties2.size();
        java.lang.String str16 = properties2.getProperty("tmlog");
        java.util.Collection<java.lang.Object> objCollection17 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        properties20.clear();
        java.util.Properties properties22 = new java.util.Properties(properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        atomikosProperties23.logBaseName = "tmlog";
        int int30 = atomikosProperties23.maxActives;
        boolean boolean31 = properties20.containsValue((java.lang.Object) int30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        atomikosProperties33.setThreadedTwoPhaseCommit(false);
        boolean boolean38 = properties20.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties39.setCheckpointInterval((long) 100);
        atomikosProperties39.maxActives = (byte) 0;
        java.lang.Object obj44 = properties20.remove((java.lang.Object) atomikosProperties39);
        boolean boolean45 = properties2.containsKey((java.lang.Object) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        properties48.clear();
        boolean boolean50 = properties48.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        atomikosProperties51.setTransactionManagerUniqueName("");
        int int55 = atomikosProperties51.getMaxActives();
        java.lang.String str56 = atomikosProperties51.transactionManagerUniqueName;
        boolean boolean57 = properties48.containsValue((java.lang.Object) atomikosProperties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties58.setCheckpointInterval((long) 100);
        atomikosProperties58.maxActives = (byte) 0;
        atomikosProperties58.setTransactionManagerUniqueName("");
        java.lang.Object obj65 = properties48.get((java.lang.Object) atomikosProperties58);
        java.lang.String str66 = atomikosProperties58.getTransactionManagerUniqueName();
        atomikosProperties58.setService("tmlog");
        java.lang.String str69 = atomikosProperties58.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str71 = atomikosProperties70.logBaseDir;
        java.lang.String str72 = atomikosProperties70.logBaseName;
        java.lang.String str73 = atomikosProperties70.getLogBaseDir();
        atomikosProperties70.setMaxActives((int) (byte) -1);
        java.lang.String str76 = atomikosProperties70.getService();
        atomikosProperties70.setEnableLogging(false);
        long long79 = atomikosProperties70.checkpointInterval;
        java.lang.Object obj80 = properties20.getOrDefault((java.lang.Object) str69, (java.lang.Object) atomikosProperties70);
        java.io.OutputStream outputStream81 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties20.store(outputStream81, "{com.atomikos.icatch.tmlog=0.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 50 + "'", int30 == 50);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 50 + "'", int55 == 50);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tmlog" + "'", str72, "tmlog");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 500L + "'", long79 == 500L);
        org.junit.Assert.assertNotNull(obj80);
    }

    @Test
    public void test8803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8803");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = atomikosProperties5.isEnableLogging();
        atomikosProperties5.setMaxActives((int) (byte) -1);
        atomikosProperties5.maxActives = 32;
        int int17 = atomikosProperties5.getMaxActives();
        atomikosProperties5.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties5.service = "{{com.atomikos.icatch.tmlog=0.0}={com.atomikos.icatch.tmlog=0.0}}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 32 + "'", int17 == 32);
    }

    @Test
    public void test8804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8804");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties2.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet46 = properties2.entrySet();
        java.util.Properties properties47 = new java.util.Properties(properties2);
        java.lang.String str49 = properties2.getProperty("hi!");
        java.util.Set<java.lang.String> strSet50 = properties2.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(objEntrySet46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strSet50);
    }

    @Test
    public void test8805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8805");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        int int6 = atomikosProperties0.getMaxActives();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        boolean boolean9 = atomikosProperties0.serialJtaTransactions;
        int int10 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setForceShutdownOnVmExit(false);
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean15 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean18 = atomikosProperties0.enableLogging;
        java.lang.String str19 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}" + "'", str19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8806");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        atomikosProperties0.enableLogging = true;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test8807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8807");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties13 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.enableLogging = true;
        atomikosProperties14.maxActives = (byte) -1;
        boolean boolean19 = atomikosProperties14.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        int int22 = atomikosProperties20.getMaxActives();
        java.lang.String str23 = atomikosProperties20.transactionManagerUniqueName;
        boolean boolean24 = atomikosProperties20.isEnableLogging();
        java.lang.Object obj25 = properties13.put((java.lang.Object) boolean19, (java.lang.Object) boolean24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        atomikosProperties26.setService("");
        boolean boolean31 = atomikosProperties26.threadedTwoPhaseCommit;
        int int32 = atomikosProperties26.getMaxActives();
        boolean boolean33 = atomikosProperties26.isEnableLogging();
        java.lang.String str34 = atomikosProperties26.getTransactionManagerUniqueName();
        atomikosProperties26.setTransactionManagerUniqueName("hi!");
        java.lang.Object obj37 = properties13.remove((java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        atomikosProperties38.setTransactionManagerUniqueName("");
        int int42 = atomikosProperties38.getMaxActives();
        atomikosProperties38.logBaseName = "tmlog";
        long long45 = atomikosProperties38.checkpointInterval;
        atomikosProperties38.logBaseDir = "";
        atomikosProperties38.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties38.setForceShutdownOnVmExit(true);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        boolean boolean54 = atomikosProperties52.isSerialJtaTransactions();
        atomikosProperties52.maxTimeout = 100;
        int int57 = atomikosProperties52.getMaxActives();
        atomikosProperties52.setEnableLogging(false);
        atomikosProperties52.logBaseDir = "{}";
        atomikosProperties52.setDefaultJtaTimeout(0L);
        atomikosProperties52.defaultJtaTimeout = (-1);
        boolean boolean66 = properties13.remove((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties52);
        java.io.OutputStream outputStream67 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.storeToXML(outputStream67, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 50 + "'", int22 == 50);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test8808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8808");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        properties21.clear();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.lang.Object obj26 = properties23.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str27 = properties23.toString();
        java.lang.Object obj30 = properties23.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet31 = properties23.keySet();
        java.lang.Object obj32 = properties10.remove((java.lang.Object) properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        java.lang.Object obj38 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        boolean boolean43 = properties41.isEmpty();
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<?> wildcardEnumeration46 = properties35.propertyNames();
        java.lang.Object obj47 = properties10.get((java.lang.Object) properties35);
        java.lang.String str49 = properties35.getProperty("");
        java.io.OutputStream outputStream50 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties35.storeToXML(outputStream50, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj26, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(wildcardEnumeration46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test8809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8809");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        long long5 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setCheckpointInterval((long) (byte) -1);
        java.lang.String str8 = atomikosProperties0.service;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test8810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8810");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long6 = atomikosProperties0.getMaxTimeout();
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        java.lang.String str8 = atomikosProperties0.getService();
        atomikosProperties0.setSerialJtaTransactions(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test8811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8811");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setLogBaseDir("{}");
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        long long11 = atomikosProperties0.getMaxTimeout();
        long long12 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.forceShutdownOnVmExit = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
    }

    @Test
    public void test8812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8812");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection6 = properties2.values();
        java.util.Collection<java.lang.Object> objCollection7 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        boolean boolean12 = properties10.isEmpty();
        java.lang.Object obj13 = properties10.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Enumeration<?> wildcardEnumeration21 = properties16.propertyNames();
        java.util.Properties properties22 = new java.util.Properties(properties16);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        java.util.Properties properties24 = new java.util.Properties(properties22);
        java.io.Reader reader25 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties24.load(reader25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(wildcardEnumeration21);
    }

    @Test
    public void test8813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8813");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        int int6 = atomikosProperties0.maxActives;
        long long7 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long10 = atomikosProperties0.checkpointInterval;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
    }

    @Test
    public void test8814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8814");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long6 = atomikosProperties0.getMaxTimeout();
        long long7 = atomikosProperties0.getCheckpointInterval();
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setMaxTimeout(0L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
    }

    @Test
    public void test8815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8815");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        int int14 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        java.lang.Object obj18 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        java.lang.String str36 = atomikosProperties30.getService();
        java.lang.Object obj37 = properties17.getOrDefault((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties30);
        int int38 = properties17.size();
        java.lang.String str39 = properties17.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties17.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties41.enableLogging = true;
        atomikosProperties41.maxActives = (byte) -1;
        java.lang.Object obj46 = properties2.putIfAbsent((java.lang.Object) properties17, (java.lang.Object) (byte) -1);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        properties49.clear();
        java.util.Properties properties51 = new java.util.Properties(properties49);
        int int52 = properties51.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet53 = properties51.entrySet();
        java.util.Set<java.lang.String> strSet54 = properties51.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration55 = properties51.keys();
        java.util.Set<java.lang.Object> objSet56 = properties51.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        atomikosProperties57.setTransactionManagerUniqueName("");
        int int61 = atomikosProperties57.getMaxActives();
        java.lang.String str62 = atomikosProperties57.getLogBaseDir();
        atomikosProperties57.setTransactionManagerUniqueName("");
        atomikosProperties57.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties57.setSerialJtaTransactions(false);
        atomikosProperties57.threadedTwoPhaseCommit = false;
        atomikosProperties57.maxTimeout = 0L;
        java.lang.String str73 = atomikosProperties57.transactionManagerUniqueName;
        java.lang.String str74 = atomikosProperties57.logBaseName;
        java.lang.Object obj75 = properties2.getOrDefault((java.lang.Object) properties51, (java.lang.Object) atomikosProperties57);
        java.lang.Object obj78 = properties51.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}", "hi!");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str39, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objEntrySet53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(objEnumeration55);
        org.junit.Assert.assertNotNull(objSet56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 50 + "'", int61 == 50);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "tmlog" + "'", str74, "tmlog");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNull(obj78);
    }

    @Test
    public void test8816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8816");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        atomikosProperties0.service = "tmlog";
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test8817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8817");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        java.lang.Object obj12 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        atomikosProperties14.forceShutdownOnVmExit = false;
        atomikosProperties14.setTransactionManagerUniqueName("");
        java.lang.Object obj20 = properties9.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties14);
        java.util.Set<java.lang.Object> objSet21 = properties9.keySet();
        java.lang.String str23 = properties9.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) 100);
        boolean boolean27 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties24.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        java.lang.String str34 = atomikosProperties32.logBaseName;
        java.lang.String str35 = atomikosProperties32.getLogBaseDir();
        atomikosProperties32.setMaxActives((int) (byte) -1);
        java.lang.String str38 = atomikosProperties32.getService();
        long long39 = atomikosProperties32.defaultJtaTimeout;
        java.lang.String str40 = atomikosProperties32.logBaseName;
        java.lang.String str41 = atomikosProperties32.logBaseDir;
        java.lang.Class<?> wildcardClass42 = atomikosProperties32.getClass();
        boolean boolean43 = properties9.remove((java.lang.Object) atomikosProperties24, (java.lang.Object) atomikosProperties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        atomikosProperties44.forceShutdownOnVmExit = false;
        boolean boolean48 = atomikosProperties44.isSerialJtaTransactions();
        java.lang.String str49 = atomikosProperties44.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.Object obj53 = properties9.getOrDefault((java.lang.Object) atomikosProperties44, (java.lang.Object) atomikosProperties50);
        atomikosProperties50.setCheckpointInterval((long) 'a');
        atomikosProperties50.forceShutdownOnVmExit = false;
        java.lang.Object obj58 = properties3.replace((java.lang.Object) "", (java.lang.Object) atomikosProperties50);
        java.util.Properties properties59 = atomikosProperties50.asProperties();
        java.io.OutputStream outputStream60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties59.store(outputStream60, "{com.atomikos.icatch.{}=false, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objSet21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10000L + "'", long39 == 10000L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(properties59);
    }

    @Test
    public void test8818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8818");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Collection<java.lang.Object> objCollection20 = properties10.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties27.setCheckpointInterval((long) 100);
        boolean boolean30 = atomikosProperties27.isForceShutdownOnVmExit();
        atomikosProperties27.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean33 = properties26.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.enableLogging = true;
        boolean boolean38 = properties23.replace((java.lang.Object) boolean33, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection39 = properties23.values();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties23.keys();
        java.lang.Object obj41 = properties10.remove((java.lang.Object) objEnumeration40);
        boolean boolean42 = properties10.isEmpty();
        int int43 = properties10.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        boolean boolean48 = properties46.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        atomikosProperties49.setTransactionManagerUniqueName("");
        int int53 = atomikosProperties49.getMaxActives();
        java.lang.String str54 = atomikosProperties49.transactionManagerUniqueName;
        boolean boolean55 = properties46.containsValue((java.lang.Object) atomikosProperties49);
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties46.elements();
        java.util.Collection<java.lang.Object> objCollection57 = properties46.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet58 = properties46.entrySet();
        boolean boolean59 = properties10.containsValue((java.lang.Object) properties46);
        java.io.PrintWriter printWriter60 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.list(printWriter60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objCollection39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 50 + "'", int53 == 50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(objEntrySet58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test8819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8819");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        java.util.Properties properties14 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        properties17.clear();
        java.util.Properties properties19 = new java.util.Properties(properties17);
        java.lang.Object obj22 = properties19.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str23 = properties19.toString();
        java.lang.Object obj26 = properties19.setProperty("tmlog", "");
        boolean boolean27 = properties8.equals(obj26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        atomikosProperties28.setTransactionManagerUniqueName("");
        int int32 = atomikosProperties28.getMaxActives();
        atomikosProperties28.logBaseName = "tmlog";
        atomikosProperties28.setEnableLogging(true);
        long long37 = atomikosProperties28.maxTimeout;
        int int38 = atomikosProperties28.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        atomikosProperties39.setTransactionManagerUniqueName("");
        int int43 = atomikosProperties39.getMaxActives();
        java.lang.String str44 = atomikosProperties39.transactionManagerUniqueName;
        atomikosProperties39.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        properties49.clear();
        java.util.Properties properties51 = new java.util.Properties(properties49);
        atomikosProperties39.set(properties49, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj57 = properties49.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet58 = properties49.stringPropertyNames();
        java.lang.Object obj59 = properties8.getOrDefault((java.lang.Object) atomikosProperties28, (java.lang.Object) properties49);
        java.util.Properties properties60 = new java.util.Properties(properties8);
        int int61 = properties8.size();
        java.lang.Object obj62 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        atomikosProperties63.setTransactionManagerUniqueName("");
        int int67 = atomikosProperties63.getMaxActives();
        java.lang.String str68 = atomikosProperties63.getLogBaseDir();
        java.lang.String str69 = atomikosProperties63.logBaseName;
        boolean boolean70 = atomikosProperties63.threadedTwoPhaseCommit;
        java.lang.String str71 = atomikosProperties63.logBaseDir;
        atomikosProperties63.enableLogging = false;
        atomikosProperties63.setMaxTimeout((long) (byte) -1);
        atomikosProperties63.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties63.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}";
        int int80 = atomikosProperties63.getMaxActives();
        boolean boolean81 = atomikosProperties63.enableLogging;
        atomikosProperties63.setMaxActives((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = properties8.getOrDefault(obj62, (java.lang.Object) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj22, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{}" + "'", str23, "{}");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 300000L + "'", long37 == 300000L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(obj59);
// flaky:         org.junit.Assert.assertEquals(obj59.toString(), "{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "tmlog" + "'", str69, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 50 + "'", int80 == 50);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test8820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8820");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        java.lang.Object obj7 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.logBaseName;
        java.lang.String str11 = atomikosProperties8.getLogBaseDir();
        atomikosProperties8.setMaxActives((int) (byte) -1);
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        atomikosProperties8.transactionManagerUniqueName = "";
        atomikosProperties8.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        java.lang.String str25 = atomikosProperties19.getService();
        java.lang.Object obj26 = properties6.getOrDefault((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties19);
        int int27 = properties6.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        boolean boolean33 = atomikosProperties29.isSerialJtaTransactions();
        atomikosProperties29.serialJtaTransactions = true;
        java.lang.String str36 = atomikosProperties29.getService();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) str36);
        java.lang.Object obj38 = properties6.clone();
        java.lang.Object obj39 = null;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.transactionManagerUniqueName;
        boolean boolean43 = atomikosProperties40.enableLogging;
        boolean boolean44 = atomikosProperties40.isThreadedTwoPhaseCommit();
        atomikosProperties40.setCheckpointInterval((long) '4');
        java.lang.String str47 = atomikosProperties40.getTransactionManagerUniqueName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj48 = properties6.putIfAbsent(obj39, (java.lang.Object) str47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test8821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8821");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.lang.Object obj13 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean23 = properties21.containsValue((java.lang.Object) 100L);
        boolean boolean24 = properties16.contains((java.lang.Object) properties21);
        java.util.Set<java.lang.String> strSet25 = properties21.stringPropertyNames();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Enumeration<?> wildcardEnumeration27 = properties2.propertyNames();
        java.io.InputStream inputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(inputStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(wildcardEnumeration27);
    }

    @Test
    public void test8822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8822");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet21 = properties4.entrySet();
        java.util.Set<java.lang.String> strSet22 = properties4.stringPropertyNames();
        properties4.clear();
        java.lang.String str25 = properties4.getProperty("{com.atomikos.icatch.tmlog=0.0}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long27 = atomikosProperties26.checkpointInterval;
        java.util.Properties properties28 = atomikosProperties26.asProperties();
        java.lang.Object obj29 = properties28.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setMaxActives((int) (byte) -1);
        boolean boolean36 = atomikosProperties30.isEnableLogging();
        atomikosProperties30.transactionManagerUniqueName = "";
        atomikosProperties30.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        atomikosProperties41.setMaxActives((int) (byte) -1);
        java.lang.String str47 = atomikosProperties41.getService();
        java.lang.Object obj48 = properties28.getOrDefault((java.lang.Object) atomikosProperties30, (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        int int51 = atomikosProperties49.getMaxActives();
        java.lang.String str52 = atomikosProperties49.logBaseDir;
        java.lang.Object obj54 = properties28.putIfAbsent((java.lang.Object) atomikosProperties49, (java.lang.Object) "");
        java.util.Set<java.lang.Object> objSet55 = properties28.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        java.util.Properties properties58 = atomikosProperties56.asProperties();
        properties58.clear();
        boolean boolean60 = properties58.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.checkpointInterval;
        java.util.Properties properties63 = atomikosProperties61.asProperties();
        java.lang.Object obj66 = properties63.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection67 = properties63.values();
        boolean boolean68 = properties58.containsKey((java.lang.Object) objCollection67);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        java.lang.String str71 = atomikosProperties69.logBaseName;
        java.lang.String str72 = atomikosProperties69.getLogBaseName();
        int int73 = atomikosProperties69.getMaxActives();
        atomikosProperties69.setLogBaseDir("hi!");
        java.lang.String str76 = atomikosProperties69.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str78 = atomikosProperties77.logBaseDir;
        atomikosProperties77.setTransactionManagerUniqueName("");
        int int81 = atomikosProperties77.getMaxActives();
        java.lang.String str82 = atomikosProperties77.getLogBaseDir();
        java.lang.String str83 = atomikosProperties77.logBaseName;
        java.lang.Object obj84 = properties58.replace((java.lang.Object) atomikosProperties69, (java.lang.Object) atomikosProperties77);
        java.lang.String str85 = atomikosProperties77.transactionManagerUniqueName;
        boolean boolean86 = atomikosProperties77.serialJtaTransactions;
        int int87 = atomikosProperties77.maxActives;
        java.lang.Object obj88 = properties4.getOrDefault((java.lang.Object) properties28, (java.lang.Object) atomikosProperties77);
        java.lang.String str89 = atomikosProperties77.logBaseDir;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objEntrySet21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 500L + "'", long27 == 500L);
        org.junit.Assert.assertNotNull(properties28);
        org.junit.Assert.assertNotNull(obj29);
// flaky:         org.junit.Assert.assertEquals(obj29.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNotNull(objCollection67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tmlog" + "'", str71, "tmlog");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "tmlog" + "'", str72, "tmlog");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 50 + "'", int73 == 50);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "tmlog" + "'", str76, "tmlog");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 50 + "'", int81 == 50);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "tmlog" + "'", str83, "tmlog");
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 50 + "'", int87 == 50);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test8823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8823");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean11 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setSerialJtaTransactions(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8824");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Properties properties13 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties2.elements();
        java.lang.Object obj17 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}", "");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test8825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8825");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = atomikosProperties5.isEnableLogging();
        atomikosProperties5.setEnableLogging(false);
        long long15 = atomikosProperties5.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
    }

    @Test
    public void test8826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8826");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        properties10.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        java.util.Properties properties16 = new java.util.Properties(properties14);
        java.lang.Object obj19 = properties16.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        long long22 = atomikosProperties20.getDefaultJtaTimeout();
        java.util.Properties properties23 = atomikosProperties20.asProperties();
        boolean boolean24 = atomikosProperties20.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties25.setCheckpointInterval((long) 100);
        boolean boolean28 = atomikosProperties25.isForceShutdownOnVmExit();
        atomikosProperties25.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties25.service = "";
        atomikosProperties25.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        properties37.clear();
        boolean boolean39 = properties37.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        java.lang.Object obj45 = properties42.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection46 = properties42.values();
        boolean boolean47 = properties37.containsKey((java.lang.Object) objCollection46);
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties37.keys();
        boolean boolean49 = properties16.replace((java.lang.Object) atomikosProperties20, (java.lang.Object) atomikosProperties25, (java.lang.Object) properties37);
        java.lang.Object obj50 = properties16.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long52 = atomikosProperties51.checkpointInterval;
        java.util.Properties properties53 = atomikosProperties51.asProperties();
        properties53.clear();
        java.util.Properties properties55 = new java.util.Properties(properties53);
        java.lang.Object obj58 = properties55.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str59 = properties55.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        atomikosProperties60.setMaxActives((int) (byte) -1);
        boolean boolean66 = atomikosProperties60.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties67.setCheckpointInterval((long) 100);
        boolean boolean70 = atomikosProperties67.isForceShutdownOnVmExit();
        java.lang.Object obj71 = properties55.putIfAbsent((java.lang.Object) atomikosProperties60, (java.lang.Object) boolean70);
        java.util.Set<java.lang.String> strSet72 = properties55.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet73 = properties55.keySet();
        java.lang.String str74 = properties55.toString();
        boolean boolean75 = properties10.remove((java.lang.Object) properties16, (java.lang.Object) properties55);
        java.lang.Object obj78 = properties10.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str80 = atomikosProperties79.logBaseDir;
        java.lang.String str81 = atomikosProperties79.logBaseName;
        java.lang.String str82 = atomikosProperties79.getLogBaseDir();
        long long83 = atomikosProperties79.getDefaultJtaTimeout();
        long long84 = atomikosProperties79.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long86 = atomikosProperties85.checkpointInterval;
        java.util.Properties properties87 = atomikosProperties85.asProperties();
        properties87.clear();
        boolean boolean89 = properties10.remove((java.lang.Object) long84, (java.lang.Object) properties87);
        java.lang.Object obj92 = properties10.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.io.InputStream inputStream93 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.load(inputStream93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10000L + "'", long22 == 10000L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(objCollection46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objEnumeration48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj58, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "{}" + "'", str59, "{}");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(objSet73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "tmlog" + "'", str81, "tmlog");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10000L + "'", long83 == 10000L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 500L + "'", long86 == 500L);
        org.junit.Assert.assertNotNull(properties87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test8827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8827");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        java.lang.String str3 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 'a';
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setMaxActives(10);
        java.lang.String str12 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setSerialJtaTransactions(true);
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setCheckpointInterval((long) 32);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
    }

    @Test
    public void test8828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8828");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet19 = properties2.entrySet();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet20 = properties2.entrySet();
        boolean boolean21 = properties2.isEmpty();
        int int22 = properties2.size();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertNotNull(objEntrySet19);
        org.junit.Assert.assertNotNull(objEntrySet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
    }

    @Test
    public void test8829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8829");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setCheckpointInterval((-1L));
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        atomikosProperties0.setDefaultJtaTimeout((-1L));
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
    }

    @Test
    public void test8830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8830");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.enableLogging = false;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
    }

    @Test
    public void test8831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8831");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.setCheckpointInterval((long) 9);
        boolean boolean46 = atomikosProperties36.serialJtaTransactions;
        java.lang.String str47 = atomikosProperties36.service;
        atomikosProperties36.defaultJtaTimeout = (short) 1;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test8832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8832");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        atomikosProperties0.enableLogging = true;
        long long8 = atomikosProperties0.checkpointInterval;
        long long9 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setMaxActives((int) (byte) 0);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
    }

    @Test
    public void test8833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8833");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        int int29 = properties2.size();
        java.util.Collection<java.lang.Object> objCollection30 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        int int33 = atomikosProperties31.getMaxActives();
        java.lang.String str34 = atomikosProperties31.logBaseDir;
        java.lang.String str35 = atomikosProperties31.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.String str43 = atomikosProperties36.getLogBaseName();
        java.lang.Object obj44 = properties2.replace((java.lang.Object) atomikosProperties31, (java.lang.Object) atomikosProperties36);
        atomikosProperties31.threadedTwoPhaseCommit = true;
        atomikosProperties31.service = "tmlog";
        java.lang.String str49 = atomikosProperties31.logBaseName;
        atomikosProperties31.setForceShutdownOnVmExit(false);
        atomikosProperties31.logBaseDir = "";
        atomikosProperties31.checkpointInterval = (byte) 1;
        boolean boolean56 = atomikosProperties31.isForceShutdownOnVmExit();
        boolean boolean57 = atomikosProperties31.serialJtaTransactions;
        boolean boolean58 = atomikosProperties31.enableLogging;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(objCollection30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 50 + "'", int33 == 50);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test8834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8834");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        java.lang.String str12 = atomikosProperties0.getService();
        atomikosProperties0.setSerialJtaTransactions(false);
        java.util.Properties properties15 = atomikosProperties0.asProperties();
        java.lang.String str16 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
    }

    @Test
    public void test8835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8835");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties10.transactionManagerUniqueName = "hi!";
        java.lang.String str42 = atomikosProperties10.service;
        java.util.Properties properties43 = atomikosProperties10.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        properties46.clear();
        boolean boolean48 = properties46.isEmpty();
        java.lang.Object obj49 = properties46.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        properties52.clear();
        boolean boolean54 = properties52.isEmpty();
        java.util.Collection<java.lang.Object> objCollection55 = properties52.values();
        properties46.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties52);
        java.lang.Object obj59 = properties46.setProperty("", "");
        java.util.Collection<java.lang.Object> objCollection60 = properties46.values();
        java.lang.Object obj61 = properties43.remove((java.lang.Object) properties46);
        java.io.OutputStream outputStream62 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties46.storeToXML(outputStream62, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objCollection55);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(objCollection60);
        org.junit.Assert.assertNull(obj61);
    }

    @Test
    public void test8836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8836");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        boolean boolean6 = atomikosProperties4.isSerialJtaTransactions();
        atomikosProperties4.maxTimeout = 100;
        int int9 = atomikosProperties4.getMaxActives();
        atomikosProperties4.setEnableLogging(false);
        java.lang.String str12 = atomikosProperties4.getService();
        int int13 = atomikosProperties4.getMaxActives();
        java.lang.Object obj15 = properties2.replace((java.lang.Object) int13, (java.lang.Object) (short) 0);
        java.util.Set<java.lang.String> strSet16 = properties2.stringPropertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration17 = properties2.elements();
        java.io.OutputStream outputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream18, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 50 + "'", int13 == 50);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(objEnumeration17);
    }

    @Test
    public void test8837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8837");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean22 = properties2.contains((java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        properties29.clear();
        boolean boolean31 = properties29.isEmpty();
        java.lang.Object obj32 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        java.lang.Object obj37 = properties36.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        boolean boolean44 = atomikosProperties38.isEnableLogging();
        atomikosProperties38.transactionManagerUniqueName = "";
        atomikosProperties38.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        java.lang.String str55 = atomikosProperties49.getService();
        java.lang.Object obj56 = properties36.getOrDefault((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        int int59 = atomikosProperties57.getMaxActives();
        java.lang.String str60 = atomikosProperties57.logBaseDir;
        java.lang.Object obj62 = properties36.putIfAbsent((java.lang.Object) atomikosProperties57, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        boolean boolean67 = atomikosProperties63.isSerialJtaTransactions();
        atomikosProperties63.setEnableLogging(false);
        boolean boolean70 = properties29.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties63);
        atomikosProperties63.logBaseName = "{}";
        long long73 = atomikosProperties63.getDefaultJtaTimeout();
        atomikosProperties63.setThreadedTwoPhaseCommit(true);
        java.lang.Object obj76 = properties2.getOrDefault(obj26, (java.lang.Object) atomikosProperties63);
        atomikosProperties63.setDefaultJtaTimeout((long) (byte) 0);
        atomikosProperties63.setThreadedTwoPhaseCommit(false);
        atomikosProperties63.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties63.forceShutdownOnVmExit = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertNotNull(obj76);
    }

    @Test
    public void test8838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8838");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.lang.String str25 = properties2.getProperty("");
        java.lang.String str27 = properties2.getProperty("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        properties30.clear();
        boolean boolean32 = properties30.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        atomikosProperties33.setTransactionManagerUniqueName("");
        int int37 = atomikosProperties33.getMaxActives();
        java.lang.String str38 = atomikosProperties33.transactionManagerUniqueName;
        boolean boolean39 = properties30.containsValue((java.lang.Object) atomikosProperties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties40.setCheckpointInterval((long) 100);
        atomikosProperties40.maxActives = (byte) 0;
        atomikosProperties40.setTransactionManagerUniqueName("");
        java.lang.Object obj47 = properties30.get((java.lang.Object) atomikosProperties40);
        boolean boolean49 = properties30.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        properties52.clear();
        boolean boolean54 = properties52.isEmpty();
        java.lang.Object obj55 = properties52.clone();
        java.util.Set<java.lang.Object> objSet56 = properties52.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) 100);
        java.lang.String str60 = atomikosProperties57.getService();
        atomikosProperties57.defaultJtaTimeout = 'a';
        atomikosProperties57.enableLogging = false;
        atomikosProperties57.threadedTwoPhaseCommit = false;
        int int67 = atomikosProperties57.maxActives;
        atomikosProperties57.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj70 = properties30.getOrDefault((java.lang.Object) properties52, (java.lang.Object) atomikosProperties57);
        java.lang.Object obj71 = properties2.remove((java.lang.Object) atomikosProperties57);
        atomikosProperties57.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean74 = atomikosProperties57.isSerialJtaTransactions();
        atomikosProperties57.threadedTwoPhaseCommit = false;
        atomikosProperties57.setForceShutdownOnVmExit(true);
        boolean boolean79 = atomikosProperties57.threadedTwoPhaseCommit;
        long long80 = atomikosProperties57.getDefaultJtaTimeout();
        atomikosProperties57.maxActives = 32;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{}");
        org.junit.Assert.assertNotNull(objSet56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 97L + "'", long80 == 97L);
    }

    @Test
    public void test8839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8839");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        java.lang.String str8 = atomikosProperties6.logBaseName;
        java.lang.String str9 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setMaxActives((int) (byte) -1);
        boolean boolean12 = atomikosProperties6.isEnableLogging();
        atomikosProperties6.transactionManagerUniqueName = "";
        atomikosProperties6.setEnableLogging(false);
        boolean boolean17 = atomikosProperties6.isEnableLogging();
        atomikosProperties6.maxActives = 1;
        java.util.Properties properties20 = atomikosProperties6.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        boolean boolean28 = atomikosProperties21.threadedTwoPhaseCommit;
        java.lang.String str29 = atomikosProperties21.logBaseDir;
        atomikosProperties21.enableLogging = false;
        java.lang.Object obj32 = properties2.getOrDefault((java.lang.Object) atomikosProperties6, (java.lang.Object) false);
        atomikosProperties6.setEnableLogging(false);
        java.util.Properties properties35 = atomikosProperties6.asProperties();
        atomikosProperties6.setSerialJtaTransactions(true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + false + "'", obj32, false);
        org.junit.Assert.assertNotNull(properties35);
    }

    @Test
    public void test8840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8840");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        java.lang.String str7 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.defaultJtaTimeout = 10;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        long long12 = atomikosProperties0.getMaxTimeout();
        java.lang.String str13 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 300000L + "'", long12 == 300000L);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test8841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8841");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        java.util.Properties properties10 = new java.util.Properties(properties8);
        java.lang.Object obj13 = properties10.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str14 = properties10.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        boolean boolean21 = atomikosProperties15.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setCheckpointInterval((long) 100);
        boolean boolean25 = atomikosProperties22.isForceShutdownOnVmExit();
        java.lang.Object obj26 = properties10.putIfAbsent((java.lang.Object) atomikosProperties15, (java.lang.Object) boolean25);
        java.util.Set<java.lang.String> strSet27 = properties10.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet28 = properties10.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        int int31 = atomikosProperties29.getMaxActives();
        atomikosProperties29.setCheckpointInterval(1L);
        long long34 = atomikosProperties29.getMaxTimeout();
        java.lang.Object obj35 = properties10.get((java.lang.Object) atomikosProperties29);
        java.lang.Object obj36 = properties2.remove((java.lang.Object) properties10);
        boolean boolean37 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        java.lang.Object obj43 = properties40.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection44 = properties40.values();
        java.util.Collection<java.lang.Object> objCollection45 = properties40.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        properties48.clear();
        boolean boolean50 = properties48.isEmpty();
        java.lang.Object obj51 = properties48.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        properties54.clear();
        boolean boolean56 = properties54.isEmpty();
        java.util.Collection<java.lang.Object> objCollection57 = properties54.values();
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.util.Enumeration<?> wildcardEnumeration59 = properties54.propertyNames();
        java.util.Properties properties60 = new java.util.Properties(properties54);
        properties40.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties60);
        int int62 = properties40.size();
        boolean boolean63 = properties40.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties64.setCheckpointInterval((long) 100);
        boolean boolean67 = atomikosProperties64.isForceShutdownOnVmExit();
        atomikosProperties64.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties64.service = "";
        atomikosProperties64.setTransactionManagerUniqueName("{}");
        atomikosProperties64.setMaxActives((int) (short) -1);
        java.lang.Object obj76 = properties2.getOrDefault((java.lang.Object) properties40, (java.lang.Object) (short) -1);
        java.lang.String str78 = properties2.getProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        java.io.OutputStream outputStream79 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream79, "{com.atomikos.icatch.tmlog=0.0}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj13, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{}" + "'", str14, "{}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 50 + "'", int31 == 50);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 300000L + "'", long34 == 300000L);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(objCollection45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{}");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(wildcardEnumeration59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + (short) -1 + "'", obj76, (short) -1);
        org.junit.Assert.assertNull(str78);
    }

    @Test
    public void test8842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8842");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        java.util.Properties properties5 = new java.util.Properties(properties3);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        java.util.Properties properties10 = new java.util.Properties(properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        atomikosProperties11.setTransactionManagerUniqueName("");
        int int15 = atomikosProperties11.getMaxActives();
        atomikosProperties11.logBaseName = "tmlog";
        int int18 = atomikosProperties11.maxActives;
        boolean boolean19 = properties8.containsValue((java.lang.Object) int18);
        java.util.Properties properties20 = new java.util.Properties(properties8);
        java.lang.Object obj21 = properties3.remove((java.lang.Object) properties20);
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties3.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.setCheckpointInterval((long) 100);
        boolean boolean29 = atomikosProperties26.isForceShutdownOnVmExit();
        atomikosProperties26.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean32 = properties25.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet33 = properties25.entrySet();
        java.lang.String str34 = properties25.toString();
        java.util.Collection<java.lang.Object> objCollection35 = properties25.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet36 = properties25.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        boolean boolean39 = atomikosProperties37.isSerialJtaTransactions();
        atomikosProperties37.transactionManagerUniqueName = "";
        int int42 = atomikosProperties37.getMaxActives();
        java.lang.String str43 = atomikosProperties37.logBaseName;
        java.lang.Object obj44 = properties3.putIfAbsent((java.lang.Object) properties25, (java.lang.Object) str43);
        java.util.Collection<java.lang.Object> objCollection45 = properties25.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50 + "'", int15 == 50);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objEntrySet33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str34, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNotNull(objEntrySet36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(objCollection45);
    }

    @Test
    public void test8843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8843");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Set<java.lang.Object> objSet20 = properties19.keySet();
        java.util.Properties properties21 = new java.util.Properties(properties19);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objSet20);
    }

    @Test
    public void test8844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8844");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties4.maxActives = ' ';
        java.lang.String str25 = atomikosProperties4.getTransactionManagerUniqueName();
        atomikosProperties4.setMaxTimeout(1L);
        boolean boolean28 = atomikosProperties4.isThreadedTwoPhaseCommit();
        boolean boolean29 = atomikosProperties4.isForceShutdownOnVmExit();
        boolean boolean30 = atomikosProperties4.enableLogging;
        java.lang.String str31 = atomikosProperties4.service;
        atomikosProperties4.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test8845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8845");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        java.util.Set<java.lang.Object> objSet6 = properties2.keySet();
        boolean boolean9 = properties2.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        java.util.Properties properties10 = new java.util.Properties(properties2);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet11 = properties10.entrySet();
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties10.save(outputStream12, "{-1=1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertNotNull(objSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet11);
    }

    @Test
    public void test8846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8846");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet24 = properties2.entrySet();
        java.util.Set<java.lang.String> strSet25 = properties2.stringPropertyNames();
        java.io.InputStream inputStream26 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(inputStream26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(objEntrySet24);
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test8847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8847");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 1);
        boolean boolean6 = atomikosProperties0.isSerialJtaTransactions();
        java.util.Properties properties7 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        java.lang.Object obj15 = properties12.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        long long18 = atomikosProperties16.getDefaultJtaTimeout();
        java.util.Properties properties19 = atomikosProperties16.asProperties();
        boolean boolean20 = atomikosProperties16.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setCheckpointInterval((long) 100);
        boolean boolean24 = atomikosProperties21.isForceShutdownOnVmExit();
        atomikosProperties21.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties21.service = "";
        atomikosProperties21.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        properties33.clear();
        boolean boolean35 = properties33.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        java.lang.Object obj41 = properties38.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection42 = properties38.values();
        boolean boolean43 = properties33.containsKey((java.lang.Object) objCollection42);
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties33.keys();
        boolean boolean45 = properties12.replace((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties21, (java.lang.Object) properties33);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        java.util.Properties properties48 = atomikosProperties46.asProperties();
        properties48.clear();
        boolean boolean50 = properties48.isEmpty();
        java.lang.Object obj51 = properties48.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long53 = atomikosProperties52.checkpointInterval;
        java.util.Properties properties54 = atomikosProperties52.asProperties();
        properties54.clear();
        boolean boolean56 = properties54.isEmpty();
        java.util.Collection<java.lang.Object> objCollection57 = properties54.values();
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties54);
        java.util.Enumeration<?> wildcardEnumeration59 = properties54.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        java.util.Properties properties62 = atomikosProperties60.asProperties();
        properties62.clear();
        boolean boolean64 = properties62.isEmpty();
        java.util.Collection<java.lang.Object> objCollection65 = properties62.values();
        boolean boolean66 = properties54.equals((java.lang.Object) properties62);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long68 = atomikosProperties67.checkpointInterval;
        atomikosProperties67.forceShutdownOnVmExit = false;
        atomikosProperties67.threadedTwoPhaseCommit = false;
        atomikosProperties67.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties67.threadedTwoPhaseCommit = false;
        atomikosProperties67.maxTimeout = 50;
        boolean boolean79 = properties62.equals((java.lang.Object) 50);
        properties33.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties62);
        int int81 = properties33.size();
        java.util.Enumeration<?> wildcardEnumeration82 = properties33.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str84 = atomikosProperties83.logBaseDir;
        java.lang.String str85 = atomikosProperties83.logBaseName;
        java.lang.String str86 = atomikosProperties83.getLogBaseName();
        atomikosProperties83.setDefaultJtaTimeout((long) (byte) 1);
        long long89 = atomikosProperties83.getCheckpointInterval();
        long long90 = atomikosProperties83.getDefaultJtaTimeout();
        atomikosProperties83.threadedTwoPhaseCommit = false;
        boolean boolean93 = properties7.remove((java.lang.Object) properties33, (java.lang.Object) false);
        java.io.OutputStream outputStream94 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties7.save(outputStream94, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10000L + "'", long18 == 10000L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objEnumeration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{}");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 500L + "'", long53 == 500L);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(wildcardEnumeration59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objCollection65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(wildcardEnumeration82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "tmlog" + "'", str85, "tmlog");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "tmlog" + "'", str86, "tmlog");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 500L + "'", long89 == 500L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1L + "'", long90 == 1L);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test8848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8848");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        java.lang.String str23 = atomikosProperties15.service;
        long long24 = atomikosProperties15.maxTimeout;
        long long25 = atomikosProperties15.getMaxTimeout();
        atomikosProperties15.transactionManagerUniqueName = "";
        atomikosProperties15.setEnableLogging(true);
        java.lang.String str30 = atomikosProperties15.transactionManagerUniqueName;
        atomikosProperties15.service = "";
        atomikosProperties15.setService("hi!");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 300000L + "'", long24 == 300000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test8849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8849");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        atomikosProperties0.forceShutdownOnVmExit = false;
        boolean boolean46 = atomikosProperties0.threadedTwoPhaseCommit;
        boolean boolean47 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test8850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8850");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.lang.String str16 = properties2.getProperty("hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        properties19.clear();
        boolean boolean21 = properties19.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        atomikosProperties22.setTransactionManagerUniqueName("");
        int int26 = atomikosProperties22.getMaxActives();
        java.lang.String str27 = atomikosProperties22.transactionManagerUniqueName;
        boolean boolean28 = properties19.containsValue((java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        atomikosProperties29.maxActives = (byte) 0;
        atomikosProperties29.setTransactionManagerUniqueName("");
        java.lang.Object obj36 = properties19.get((java.lang.Object) atomikosProperties29);
        atomikosProperties29.logBaseDir = "{}";
        atomikosProperties29.maxActives = (-1);
        atomikosProperties29.enableLogging = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.String str46 = atomikosProperties43.getLogBaseDir();
        atomikosProperties43.setMaxActives((int) (byte) -1);
        boolean boolean49 = atomikosProperties43.isEnableLogging();
        atomikosProperties43.transactionManagerUniqueName = "";
        atomikosProperties43.threadedTwoPhaseCommit = true;
        java.util.Properties properties54 = atomikosProperties43.asProperties();
        java.lang.String str55 = atomikosProperties43.logBaseName;
        boolean boolean56 = atomikosProperties43.threadedTwoPhaseCommit;
        atomikosProperties43.forceShutdownOnVmExit = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        java.util.Properties properties61 = atomikosProperties59.asProperties();
        properties61.clear();
        java.util.Properties properties63 = new java.util.Properties(properties61);
        int int64 = properties63.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        java.util.Properties properties67 = atomikosProperties65.asProperties();
        properties67.clear();
        boolean boolean69 = properties67.isEmpty();
        java.util.Collection<java.lang.Object> objCollection70 = properties67.values();
        boolean boolean71 = properties63.containsKey((java.lang.Object) objCollection70);
        java.util.Properties properties72 = new java.util.Properties(properties63);
        java.util.Set<java.lang.String> strSet73 = properties63.stringPropertyNames();
        boolean boolean74 = properties2.replace((java.lang.Object) false, (java.lang.Object) atomikosProperties43, (java.lang.Object) strSet73);
        long long75 = atomikosProperties43.getMaxTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(properties54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objCollection70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 300000L + "'", long75 == 300000L);
    }

    @Test
    public void test8851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8851");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        atomikosProperties23.setMaxActives((int) (byte) -1);
        java.lang.String str29 = atomikosProperties23.getService();
        long long30 = atomikosProperties23.defaultJtaTimeout;
        java.lang.String str31 = atomikosProperties23.logBaseName;
        java.lang.String str32 = atomikosProperties23.logBaseDir;
        java.lang.Class<?> wildcardClass33 = atomikosProperties23.getClass();
        java.lang.Object obj34 = properties21.put((java.lang.Object) false, (java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.serialJtaTransactions = true;
        atomikosProperties35.checkpointInterval = (-1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        java.lang.Object obj47 = properties21.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties44);
        atomikosProperties44.transactionManagerUniqueName = "tmlog";
        boolean boolean50 = atomikosProperties44.isEnableLogging();
        boolean boolean51 = atomikosProperties44.isSerialJtaTransactions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test8852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8852");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet19 = properties10.stringPropertyNames();
        java.util.Collection<java.lang.Object> objCollection20 = properties10.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        atomikosProperties21.setService("");
        java.util.Properties properties26 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        properties30.clear();
        boolean boolean32 = properties30.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        atomikosProperties33.setTransactionManagerUniqueName("");
        int int37 = atomikosProperties33.getMaxActives();
        java.lang.String str38 = atomikosProperties33.transactionManagerUniqueName;
        boolean boolean39 = properties30.containsValue((java.lang.Object) atomikosProperties33);
        boolean boolean40 = atomikosProperties33.forceShutdownOnVmExit;
        atomikosProperties21.set(properties26, "{}", (java.lang.Object) boolean40);
        java.util.Properties properties42 = new java.util.Properties(properties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.logBaseDir;
        java.lang.String str46 = atomikosProperties44.logBaseName;
        java.lang.String str47 = atomikosProperties44.getLogBaseDir();
        atomikosProperties44.setMaxActives((int) (byte) -1);
        java.lang.String str50 = atomikosProperties44.getService();
        long long51 = atomikosProperties44.defaultJtaTimeout;
        java.lang.String str52 = atomikosProperties44.logBaseName;
        java.lang.String str53 = atomikosProperties44.logBaseDir;
        java.lang.Class<?> wildcardClass54 = atomikosProperties44.getClass();
        java.lang.Object obj55 = properties42.put((java.lang.Object) false, (java.lang.Object) atomikosProperties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str57 = atomikosProperties56.logBaseDir;
        java.lang.String str58 = atomikosProperties56.logBaseName;
        java.lang.String str59 = atomikosProperties56.getLogBaseDir();
        boolean boolean60 = atomikosProperties56.isSerialJtaTransactions();
        atomikosProperties56.serialJtaTransactions = true;
        atomikosProperties56.checkpointInterval = (-1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        java.util.Properties properties67 = atomikosProperties65.asProperties();
        java.lang.Object obj68 = properties42.putIfAbsent((java.lang.Object) atomikosProperties56, (java.lang.Object) atomikosProperties65);
        java.util.Properties properties69 = atomikosProperties65.asProperties();
        boolean boolean70 = properties10.contains((java.lang.Object) atomikosProperties65);
        java.lang.String str71 = atomikosProperties65.getTransactionManagerUniqueName();
        long long72 = atomikosProperties65.getCheckpointInterval();
        boolean boolean73 = atomikosProperties65.isSerialJtaTransactions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(properties69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 500L + "'", long72 == 500L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test8853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8853");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.maxActives = (byte) 0;
        atomikosProperties0.checkpointInterval = (-1L);
        atomikosProperties0.setCheckpointInterval((long) (byte) 10);
        boolean boolean16 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        atomikosProperties0.setDefaultJtaTimeout(2L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test8854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8854");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long4 = atomikosProperties3.checkpointInterval;
        java.util.Properties properties5 = atomikosProperties3.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties6.setCheckpointInterval((long) 100);
        boolean boolean9 = atomikosProperties6.isForceShutdownOnVmExit();
        atomikosProperties6.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean12 = properties5.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.enableLogging = true;
        boolean boolean17 = properties2.replace((java.lang.Object) boolean12, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection18 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean22 = properties2.contains((java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        properties29.clear();
        boolean boolean31 = properties29.isEmpty();
        java.lang.Object obj32 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        java.lang.Object obj37 = properties36.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        boolean boolean44 = atomikosProperties38.isEnableLogging();
        atomikosProperties38.transactionManagerUniqueName = "";
        atomikosProperties38.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        java.lang.String str55 = atomikosProperties49.getService();
        java.lang.Object obj56 = properties36.getOrDefault((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        int int59 = atomikosProperties57.getMaxActives();
        java.lang.String str60 = atomikosProperties57.logBaseDir;
        java.lang.Object obj62 = properties36.putIfAbsent((java.lang.Object) atomikosProperties57, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        boolean boolean67 = atomikosProperties63.isSerialJtaTransactions();
        atomikosProperties63.setEnableLogging(false);
        boolean boolean70 = properties29.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties63);
        atomikosProperties63.logBaseName = "{}";
        long long73 = atomikosProperties63.getDefaultJtaTimeout();
        atomikosProperties63.setThreadedTwoPhaseCommit(true);
        java.lang.Object obj76 = properties2.getOrDefault(obj26, (java.lang.Object) atomikosProperties63);
        boolean boolean77 = atomikosProperties63.forceShutdownOnVmExit;
        atomikosProperties63.setCheckpointInterval((long) (short) 1);
        boolean boolean80 = atomikosProperties63.isForceShutdownOnVmExit();
        atomikosProperties63.forceShutdownOnVmExit = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNotNull(properties5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objCollection18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test8855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8855");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        java.lang.String str48 = atomikosProperties44.logBaseName;
        atomikosProperties44.setService("{}");
        java.lang.String str51 = atomikosProperties44.getLogBaseDir();
        java.lang.String str52 = atomikosProperties44.logBaseDir;
        boolean boolean53 = atomikosProperties44.serialJtaTransactions;
        java.lang.String str54 = atomikosProperties44.getService();
        long long55 = atomikosProperties44.defaultJtaTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{}" + "'", str54, "{}");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
    }

    @Test
    public void test8856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8856");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean4 = atomikosProperties0.isEnableLogging();
        long long5 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str8 = atomikosProperties0.getService();
        long long9 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setCheckpointInterval(100L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10000L + "'", long9 == 10000L);
    }

    @Test
    public void test8857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8857");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.serialJtaTransactions;
        long long8 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str9 = atomikosProperties0.logBaseName;
        java.lang.String str10 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
    }

    @Test
    public void test8858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8858");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        int int9 = atomikosProperties0.maxActives;
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.serialJtaTransactions = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test8859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8859");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        long long11 = atomikosProperties0.checkpointInterval;
        long long12 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        java.lang.String str14 = properties13.toString();
        java.io.Reader reader15 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties13.load(reader15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str14, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8860");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.lang.Object obj16 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties17 = new java.util.Properties(properties2);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test8861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8861");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        long long4 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setCheckpointInterval((long) 10);
        int int7 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        long long10 = atomikosProperties8.getDefaultJtaTimeout();
        java.util.Properties properties11 = atomikosProperties8.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setCheckpointInterval((long) 100);
        atomikosProperties13.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        properties20.clear();
        boolean boolean22 = properties20.isEmpty();
        java.lang.Object obj23 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        java.lang.Object obj28 = properties27.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setMaxActives((int) (byte) -1);
        boolean boolean35 = atomikosProperties29.isEnableLogging();
        atomikosProperties29.transactionManagerUniqueName = "";
        atomikosProperties29.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        java.lang.String str46 = atomikosProperties40.getService();
        java.lang.Object obj47 = properties27.getOrDefault((java.lang.Object) atomikosProperties29, (java.lang.Object) atomikosProperties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        int int50 = atomikosProperties48.getMaxActives();
        java.lang.String str51 = atomikosProperties48.logBaseDir;
        java.lang.Object obj53 = properties27.putIfAbsent((java.lang.Object) atomikosProperties48, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str55 = atomikosProperties54.logBaseDir;
        java.lang.String str56 = atomikosProperties54.logBaseName;
        java.lang.String str57 = atomikosProperties54.getLogBaseDir();
        boolean boolean58 = atomikosProperties54.isSerialJtaTransactions();
        atomikosProperties54.setEnableLogging(false);
        boolean boolean61 = properties20.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long63 = atomikosProperties62.checkpointInterval;
        java.util.Properties properties64 = atomikosProperties62.asProperties();
        properties64.clear();
        java.util.Properties properties66 = new java.util.Properties(properties64);
        java.lang.Object obj69 = properties66.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str70 = properties66.toString();
        boolean boolean71 = properties20.containsValue((java.lang.Object) properties66);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long74 = atomikosProperties73.checkpointInterval;
        boolean boolean75 = atomikosProperties73.isSerialJtaTransactions();
        atomikosProperties73.transactionManagerUniqueName = "";
        atomikosProperties13.set(properties66, "{}", (java.lang.Object) "");
        java.lang.Object obj81 = properties66.setProperty("tmlog", "hi!");
        atomikosProperties0.set(properties11, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", (java.lang.Object) "tmlog");
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setMaxActives((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tmlog" + "'", str56, "tmlog");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 500L + "'", long63 == 500L);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj69, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{}" + "'", str70, "{}");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 500L + "'", long74 == 500L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(obj81);
    }

    @Test
    public void test8862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8862");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        boolean boolean5 = atomikosProperties0.isSerialJtaTransactions();
        java.lang.String str6 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxTimeout((long) 'a');
        boolean boolean9 = atomikosProperties0.isEnableLogging();
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        atomikosProperties0.defaultJtaTimeout = 3;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test8863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8863");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = 1;
        atomikosProperties0.defaultJtaTimeout = 300000L;
        atomikosProperties0.logBaseDir = "{}";
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
        atomikosProperties0.enableLogging = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8864");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        boolean boolean48 = atomikosProperties45.isForceShutdownOnVmExit();
        atomikosProperties45.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long51 = atomikosProperties45.getDefaultJtaTimeout();
        long long52 = atomikosProperties45.getMaxTimeout();
        atomikosProperties45.logBaseName = "tmlog";
        long long55 = atomikosProperties45.getDefaultJtaTimeout();
        atomikosProperties45.maxActives = 9;
        boolean boolean58 = properties2.containsKey((java.lang.Object) atomikosProperties45);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet59 = properties2.entrySet();
        int int60 = properties2.size();
        properties2.clear();
        java.lang.Object obj62 = properties2.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet63 = properties2.entrySet();
        java.lang.String str64 = properties2.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10000L + "'", long51 == 10000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 300000L + "'", long52 == 300000L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10000L + "'", long55 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objEntrySet59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{}");
        org.junit.Assert.assertNotNull(objEntrySet63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "{}" + "'", str64, "{}");
    }

    @Test
    public void test8865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8865");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.maxTimeout = (-1);
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        atomikosProperties0.setEnableLogging(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test8866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8866");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        atomikosProperties23.setMaxActives((int) (byte) -1);
        java.lang.String str29 = atomikosProperties23.getService();
        long long30 = atomikosProperties23.defaultJtaTimeout;
        java.lang.String str31 = atomikosProperties23.logBaseName;
        java.lang.String str32 = atomikosProperties23.logBaseDir;
        java.lang.Class<?> wildcardClass33 = atomikosProperties23.getClass();
        java.lang.Object obj34 = properties21.put((java.lang.Object) false, (java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.serialJtaTransactions = true;
        atomikosProperties35.checkpointInterval = (-1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        java.lang.Object obj47 = properties21.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties44);
        java.util.Properties properties48 = atomikosProperties44.asProperties();
        int int49 = properties48.size();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
    }

    @Test
    public void test8867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8867");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.setCheckpointInterval((long) 100);
        boolean boolean6 = atomikosProperties3.isForceShutdownOnVmExit();
        atomikosProperties3.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean9 = properties2.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties2.entrySet();
        java.lang.String str11 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration12 = properties2.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        long long15 = atomikosProperties13.getDefaultJtaTimeout();
        java.util.Properties properties16 = atomikosProperties13.asProperties();
        java.util.Set<java.lang.Object> objSet17 = properties16.keySet();
        int int18 = properties16.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        atomikosProperties19.setTransactionManagerUniqueName("");
        int int23 = atomikosProperties19.getMaxActives();
        java.lang.String str24 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setTransactionManagerUniqueName("");
        atomikosProperties19.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass29 = atomikosProperties19.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.transactionManagerUniqueName;
        long long34 = atomikosProperties30.getCheckpointInterval();
        java.util.Properties properties35 = atomikosProperties30.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        java.lang.Object obj39 = properties38.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        boolean boolean46 = atomikosProperties40.isEnableLogging();
        atomikosProperties40.transactionManagerUniqueName = "";
        atomikosProperties40.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        atomikosProperties51.setMaxActives((int) (byte) -1);
        java.lang.String str57 = atomikosProperties51.getService();
        java.lang.Object obj58 = properties38.getOrDefault((java.lang.Object) atomikosProperties40, (java.lang.Object) atomikosProperties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        int int61 = atomikosProperties59.getMaxActives();
        java.lang.String str62 = atomikosProperties59.logBaseDir;
        java.lang.Object obj64 = properties38.putIfAbsent((java.lang.Object) atomikosProperties59, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.logBaseDir;
        java.lang.String str67 = atomikosProperties65.logBaseName;
        atomikosProperties65.setService("");
        boolean boolean70 = atomikosProperties65.threadedTwoPhaseCommit;
        java.lang.String str71 = atomikosProperties65.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str73 = atomikosProperties72.logBaseDir;
        java.lang.String str74 = atomikosProperties72.logBaseName;
        java.lang.String str75 = atomikosProperties72.getLogBaseDir();
        boolean boolean76 = atomikosProperties72.isSerialJtaTransactions();
        atomikosProperties72.serialJtaTransactions = true;
        java.lang.String str79 = atomikosProperties72.getService();
        java.lang.Object obj80 = properties38.putIfAbsent((java.lang.Object) str71, (java.lang.Object) atomikosProperties72);
        boolean boolean81 = properties16.replace((java.lang.Object) atomikosProperties19, (java.lang.Object) atomikosProperties30, (java.lang.Object) atomikosProperties72);
        java.util.Properties properties82 = new java.util.Properties(properties16);
        java.util.Properties properties83 = new java.util.Properties(properties16);
        java.util.Enumeration<?> wildcardEnumeration84 = properties83.propertyNames();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties83);
        java.util.Properties properties86 = new java.util.Properties(properties83);
        java.io.InputStream inputStream87 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties83.loadFromXML(inputStream87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str11, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 10000L + "'", long15 == 10000L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(objSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 50 + "'", int23 == 50);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 50 + "'", int61 == 50);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tmlog" + "'", str71, "tmlog");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "tmlog" + "'", str74, "tmlog");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration84);
    }

    @Test
    public void test8868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8868");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str10 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.forceShutdownOnVmExit = true;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str10, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8869");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        int int14 = properties2.size();
        java.lang.String str16 = properties2.getProperty("tmlog");
        java.util.Collection<java.lang.Object> objCollection17 = properties2.values();
        java.lang.Object obj20 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str23 = properties2.getProperty("", "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(objCollection17);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}" + "'", str23, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
    }

    @Test
    public void test8870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8870");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.threadedTwoPhaseCommit = true;
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        boolean boolean12 = atomikosProperties0.isEnableLogging();
        int int13 = atomikosProperties0.maxActives;
        atomikosProperties0.serialJtaTransactions = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test8871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8871");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet24 = properties2.entrySet();
        java.util.Enumeration<?> wildcardEnumeration25 = properties2.propertyNames();
        java.lang.Object obj26 = properties2.clone();
        java.lang.Object obj29 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        long long32 = atomikosProperties30.getDefaultJtaTimeout();
        java.util.Properties properties33 = atomikosProperties30.asProperties();
        boolean boolean34 = atomikosProperties30.isForceShutdownOnVmExit();
        int int35 = atomikosProperties30.getMaxActives();
        boolean boolean36 = properties2.equals((java.lang.Object) int35);
        int int37 = properties2.size();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(objEntrySet24);
        org.junit.Assert.assertNotNull(wildcardEnumeration25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
    }

    @Test
    public void test8872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8872");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        java.lang.String str3 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 'a';
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setMaxActives(10);
        boolean boolean12 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long13 = atomikosProperties0.getMaxTimeout();
        java.lang.String str14 = atomikosProperties0.getService();
        atomikosProperties0.setLogBaseDir("{}");
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 100);
        java.lang.String str19 = atomikosProperties0.getService();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test8873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8873");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = 1;
        boolean boolean14 = atomikosProperties0.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        int int56 = properties35.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet57 = properties35.entrySet();
        java.lang.Object obj58 = properties17.remove((java.lang.Object) objEntrySet57);
        java.util.Properties properties59 = new java.util.Properties(properties17);
        java.util.Enumeration<java.lang.Object> objEnumeration60 = properties17.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long63 = atomikosProperties62.checkpointInterval;
        java.util.Properties properties64 = atomikosProperties62.asProperties();
        properties64.clear();
        boolean boolean66 = properties64.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str68 = atomikosProperties67.logBaseDir;
        atomikosProperties67.setTransactionManagerUniqueName("");
        int int71 = atomikosProperties67.getMaxActives();
        java.lang.String str72 = atomikosProperties67.transactionManagerUniqueName;
        boolean boolean73 = properties64.containsValue((java.lang.Object) atomikosProperties67);
        boolean boolean74 = atomikosProperties67.isEnableLogging();
        atomikosProperties67.setThreadedTwoPhaseCommit(false);
        long long77 = atomikosProperties67.getDefaultJtaTimeout();
        atomikosProperties0.set(properties17, "{com.atomikos.icatch.tmlog=0.0}", (java.lang.Object) long77);
        properties17.clear();
        java.lang.Object obj82 = properties17.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", "");
        java.io.PrintStream printStream83 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties17.list(printStream83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(objEntrySet57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(objEnumeration60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 500L + "'", long63 == 500L);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 50 + "'", int71 == 50);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test8874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8874");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        atomikosProperties29.defaultJtaTimeout = (byte) 10;
        atomikosProperties29.setService("hi!");
        java.lang.String str44 = atomikosProperties29.getService();
        java.lang.String str45 = atomikosProperties29.getTransactionManagerUniqueName();
        atomikosProperties29.setEnableLogging(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test8875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8875");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        atomikosProperties23.setMaxActives((int) (byte) -1);
        java.lang.String str29 = atomikosProperties23.getService();
        long long30 = atomikosProperties23.defaultJtaTimeout;
        java.lang.String str31 = atomikosProperties23.logBaseName;
        java.lang.String str32 = atomikosProperties23.logBaseDir;
        java.lang.Class<?> wildcardClass33 = atomikosProperties23.getClass();
        java.lang.Object obj34 = properties21.put((java.lang.Object) false, (java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.serialJtaTransactions = true;
        atomikosProperties35.checkpointInterval = (-1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        java.lang.Object obj47 = properties21.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties44);
        java.util.Properties properties48 = atomikosProperties44.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        atomikosProperties49.setTransactionManagerUniqueName("");
        int int53 = atomikosProperties49.getMaxActives();
        java.lang.String str54 = atomikosProperties49.transactionManagerUniqueName;
        atomikosProperties49.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        java.util.Properties properties59 = atomikosProperties57.asProperties();
        properties59.clear();
        java.util.Properties properties61 = new java.util.Properties(properties59);
        atomikosProperties49.set(properties59, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj67 = properties59.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet68 = properties59.stringPropertyNames();
        java.lang.String str70 = properties59.getProperty("hi!");
        java.util.Enumeration<?> wildcardEnumeration71 = properties59.propertyNames();
        java.lang.Object obj74 = properties59.setProperty("", "{com.atomikos.icatch.tmlog=0.0}");
        java.lang.Object obj77 = properties59.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        properties48.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties59);
        int int79 = properties48.size();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(properties48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 50 + "'", int53 == 50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(wildcardEnumeration71);
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj74, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 12 + "'", int79 == 12);
    }

    @Test
    public void test8876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8876");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setLogBaseName("");
        long long9 = atomikosProperties0.maxTimeout;
        long long10 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test8877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8877");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        boolean boolean21 = properties2.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        java.util.Set<java.lang.Object> objSet28 = properties24.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.threadedTwoPhaseCommit = false;
        int int39 = atomikosProperties29.maxActives;
        atomikosProperties29.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj42 = properties2.getOrDefault((java.lang.Object) properties24, (java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long44 = atomikosProperties43.checkpointInterval;
        java.util.Properties properties45 = atomikosProperties43.asProperties();
        properties45.clear();
        java.util.Properties properties47 = new java.util.Properties(properties45);
        int int48 = properties47.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.util.Collection<java.lang.Object> objCollection54 = properties51.values();
        boolean boolean55 = properties47.containsKey((java.lang.Object) objCollection54);
        java.util.Properties properties56 = new java.util.Properties(properties47);
        properties24.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties56);
        java.io.InputStream inputStream58 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties24.load(inputStream58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objCollection54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test8878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8878");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        boolean boolean46 = atomikosProperties44.isSerialJtaTransactions();
        java.lang.String str47 = atomikosProperties44.getLogBaseName();
        long long48 = atomikosProperties44.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.lang.Object obj54 = properties51.clone();
        java.util.Set<java.lang.Object> objSet55 = properties51.keySet();
        boolean boolean58 = properties51.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        java.lang.Object obj59 = properties15.replace((java.lang.Object) long48, (java.lang.Object) properties51);
        java.util.Properties properties60 = new java.util.Properties(properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.checkpointInterval;
        java.util.Properties properties63 = atomikosProperties61.asProperties();
        properties63.clear();
        boolean boolean65 = properties63.isEmpty();
        java.lang.Object obj66 = properties63.clone();
        java.util.Set<java.lang.Object> objSet67 = properties63.keySet();
        java.util.Enumeration<?> wildcardEnumeration68 = properties63.propertyNames();
        boolean boolean69 = properties51.containsKey((java.lang.Object) properties63);
        boolean boolean70 = properties63.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        atomikosProperties71.setTransactionManagerUniqueName("");
        int int75 = atomikosProperties71.getMaxActives();
        atomikosProperties71.logBaseName = "tmlog";
        atomikosProperties71.setEnableLogging(true);
        long long80 = atomikosProperties71.maxTimeout;
        atomikosProperties71.forceShutdownOnVmExit = true;
        atomikosProperties71.maxTimeout = (short) 10;
        boolean boolean85 = atomikosProperties71.isEnableLogging();
        boolean boolean86 = properties63.containsValue((java.lang.Object) atomikosProperties71);
        atomikosProperties71.setMaxTimeout(10L);
        boolean boolean89 = atomikosProperties71.isThreadedTwoPhaseCommit();
        atomikosProperties71.defaultJtaTimeout = 2;
        atomikosProperties71.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{}");
        org.junit.Assert.assertNotNull(objSet67);
        org.junit.Assert.assertNotNull(wildcardEnumeration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 50 + "'", int75 == 50);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 300000L + "'", long80 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test8879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8879");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        long long7 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str8 = atomikosProperties0.logBaseName;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long11 = atomikosProperties10.checkpointInterval;
        int int12 = atomikosProperties10.getMaxActives();
        java.lang.String str13 = atomikosProperties10.transactionManagerUniqueName;
        long long14 = atomikosProperties10.getCheckpointInterval();
        boolean boolean15 = atomikosProperties10.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        int int18 = atomikosProperties16.getMaxActives();
        atomikosProperties16.setCheckpointInterval(1L);
        atomikosProperties16.setService("{}");
        boolean boolean23 = atomikosProperties16.isSerialJtaTransactions();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) 100);
        boolean boolean27 = atomikosProperties24.isForceShutdownOnVmExit();
        atomikosProperties24.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long30 = atomikosProperties24.getDefaultJtaTimeout();
        long long31 = atomikosProperties24.getMaxTimeout();
        atomikosProperties24.logBaseName = "tmlog";
        long long34 = atomikosProperties24.getDefaultJtaTimeout();
        atomikosProperties24.setForceShutdownOnVmExit(true);
        java.lang.String str37 = atomikosProperties24.getLogBaseName();
        boolean boolean38 = properties9.replace((java.lang.Object) atomikosProperties10, (java.lang.Object) boolean23, (java.lang.Object) str37);
        java.lang.String str39 = atomikosProperties10.getService();
        boolean boolean40 = atomikosProperties10.enableLogging;
        boolean boolean41 = atomikosProperties10.serialJtaTransactions;
        boolean boolean42 = atomikosProperties10.threadedTwoPhaseCommit;
        atomikosProperties10.setForceShutdownOnVmExit(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 300000L + "'", long31 == 300000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10000L + "'", long34 == 10000L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test8880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8880");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        long long4 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        boolean boolean10 = atomikosProperties0.isEnableLogging();
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        atomikosProperties0.serialJtaTransactions = false;
        boolean boolean14 = atomikosProperties0.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test8881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8881");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        java.util.Collection<java.lang.Object> objCollection57 = properties17.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet58 = properties17.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        java.util.Properties properties61 = atomikosProperties59.asProperties();
        properties61.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        atomikosProperties63.setTransactionManagerUniqueName("");
        int int67 = atomikosProperties63.getMaxActives();
        boolean boolean68 = properties61.containsValue((java.lang.Object) int67);
        java.lang.Object obj71 = properties61.setProperty("", "");
        java.util.Properties properties72 = new java.util.Properties(properties61);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str74 = atomikosProperties73.logBaseDir;
        java.lang.String str75 = atomikosProperties73.logBaseName;
        java.lang.String str76 = atomikosProperties73.getLogBaseDir();
        atomikosProperties73.setMaxActives((int) (byte) -1);
        boolean boolean79 = atomikosProperties73.isEnableLogging();
        atomikosProperties73.transactionManagerUniqueName = "";
        atomikosProperties73.threadedTwoPhaseCommit = true;
        java.util.Properties properties84 = atomikosProperties73.asProperties();
        atomikosProperties73.maxTimeout = 10L;
        java.lang.Object obj87 = properties61.remove((java.lang.Object) atomikosProperties73);
        atomikosProperties73.serialJtaTransactions = false;
        boolean boolean90 = properties17.containsKey((java.lang.Object) atomikosProperties73);
        atomikosProperties73.setForceShutdownOnVmExit(false);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertNotNull(objEntrySet58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 50 + "'", int67 == 50);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tmlog" + "'", str75, "tmlog");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(properties84);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test8882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8882");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        long long10 = atomikosProperties8.getDefaultJtaTimeout();
        java.util.Properties properties11 = atomikosProperties8.asProperties();
        boolean boolean12 = atomikosProperties8.isForceShutdownOnVmExit();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setCheckpointInterval((long) 100);
        boolean boolean16 = atomikosProperties13.isForceShutdownOnVmExit();
        atomikosProperties13.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties13.service = "";
        atomikosProperties13.threadedTwoPhaseCommit = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        properties25.clear();
        boolean boolean27 = properties25.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long29 = atomikosProperties28.checkpointInterval;
        java.util.Properties properties30 = atomikosProperties28.asProperties();
        java.lang.Object obj33 = properties30.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection34 = properties30.values();
        boolean boolean35 = properties25.containsKey((java.lang.Object) objCollection34);
        java.util.Enumeration<java.lang.Object> objEnumeration36 = properties25.keys();
        boolean boolean37 = properties4.replace((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties13, (java.lang.Object) properties25);
        java.lang.Object obj38 = properties4.clone();
        java.io.OutputStream outputStream39 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties4.store(outputStream39, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 500L + "'", long29 == 500L);
        org.junit.Assert.assertNotNull(properties30);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(objCollection34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objEnumeration36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
    }

    @Test
    public void test8883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8883");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        properties6.clear();
        boolean boolean8 = properties6.isEmpty();
        java.lang.Object obj9 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        java.lang.Object obj14 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        boolean boolean21 = atomikosProperties15.isEnableLogging();
        atomikosProperties15.transactionManagerUniqueName = "";
        atomikosProperties15.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setMaxActives((int) (byte) -1);
        java.lang.String str32 = atomikosProperties26.getService();
        java.lang.Object obj33 = properties13.getOrDefault((java.lang.Object) atomikosProperties15, (java.lang.Object) atomikosProperties26);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        int int36 = atomikosProperties34.getMaxActives();
        java.lang.String str37 = atomikosProperties34.logBaseDir;
        java.lang.Object obj39 = properties13.putIfAbsent((java.lang.Object) atomikosProperties34, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        boolean boolean44 = atomikosProperties40.isSerialJtaTransactions();
        atomikosProperties40.setEnableLogging(false);
        boolean boolean47 = properties6.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties40);
        atomikosProperties40.logBaseName = "{}";
        long long50 = atomikosProperties40.getDefaultJtaTimeout();
        boolean boolean51 = atomikosProperties40.isThreadedTwoPhaseCommit();
        atomikosProperties40.threadedTwoPhaseCommit = true;
        atomikosProperties40.checkpointInterval = 0;
        long long56 = atomikosProperties40.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        java.util.Properties properties59 = atomikosProperties57.asProperties();
        properties59.clear();
        java.util.Properties properties61 = new java.util.Properties(properties59);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str63 = atomikosProperties62.logBaseDir;
        atomikosProperties62.setTransactionManagerUniqueName("");
        int int66 = atomikosProperties62.getMaxActives();
        atomikosProperties62.logBaseName = "tmlog";
        int int69 = atomikosProperties62.maxActives;
        boolean boolean70 = properties59.containsValue((java.lang.Object) int69);
        java.util.Properties properties71 = new java.util.Properties(properties59);
        java.util.Enumeration<java.lang.Object> objEnumeration72 = properties71.keys();
        java.lang.Object obj73 = properties2.replace((java.lang.Object) long56, (java.lang.Object) objEnumeration72);
        java.lang.String str75 = properties2.getProperty("{com.atomikos.icatch.tmlog=0.0}");
        java.io.OutputStream outputStream76 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream76, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{}");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 50 + "'", int36 == 50);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10000L + "'", long50 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertNotNull(properties59);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 50 + "'", int66 == 50);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 50 + "'", int69 == 50);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objEnumeration72);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test8884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8884");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        java.lang.Object obj7 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.logBaseName;
        java.lang.String str11 = atomikosProperties8.getLogBaseDir();
        atomikosProperties8.setMaxActives((int) (byte) -1);
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        atomikosProperties8.transactionManagerUniqueName = "";
        atomikosProperties8.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        java.lang.String str25 = atomikosProperties19.getService();
        java.lang.Object obj26 = properties6.getOrDefault((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties19);
        int int27 = properties6.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        boolean boolean33 = atomikosProperties29.isSerialJtaTransactions();
        atomikosProperties29.serialJtaTransactions = true;
        java.lang.String str36 = atomikosProperties29.getService();
        atomikosProperties0.set(properties6, "hi!", (java.lang.Object) str36);
        java.lang.Object obj38 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        java.lang.String str41 = atomikosProperties39.logBaseName;
        java.lang.String str42 = atomikosProperties39.getLogBaseName();
        int int43 = atomikosProperties39.getMaxActives();
        long long44 = atomikosProperties39.maxTimeout;
        int int45 = atomikosProperties39.maxActives;
        boolean boolean46 = properties6.containsKey((java.lang.Object) int45);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        java.lang.String str49 = atomikosProperties47.logBaseName;
        java.lang.String str50 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setMaxActives((int) (byte) -1);
        boolean boolean53 = atomikosProperties47.isEnableLogging();
        long long54 = atomikosProperties47.checkpointInterval;
        atomikosProperties47.setCheckpointInterval(10L);
        atomikosProperties47.serialJtaTransactions = false;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        java.util.Properties properties61 = atomikosProperties59.asProperties();
        properties61.clear();
        boolean boolean63 = properties61.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.logBaseDir;
        atomikosProperties64.setTransactionManagerUniqueName("");
        int int68 = atomikosProperties64.getMaxActives();
        java.lang.String str69 = atomikosProperties64.transactionManagerUniqueName;
        boolean boolean70 = properties61.containsValue((java.lang.Object) atomikosProperties64);
        boolean boolean71 = properties61.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long73 = atomikosProperties72.checkpointInterval;
        java.lang.Object obj74 = properties61.remove((java.lang.Object) atomikosProperties72);
        java.util.Enumeration<java.lang.Object> objEnumeration75 = properties61.elements();
        java.lang.Object obj76 = properties6.put((java.lang.Object) false, (java.lang.Object) properties61);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str78 = atomikosProperties77.logBaseDir;
        java.lang.String str79 = atomikosProperties77.logBaseName;
        atomikosProperties77.setService("");
        boolean boolean82 = atomikosProperties77.threadedTwoPhaseCommit;
        int int83 = atomikosProperties77.getMaxActives();
        boolean boolean84 = properties6.equals((java.lang.Object) atomikosProperties77);
        atomikosProperties77.maxTimeout = 50;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 300000L + "'", long44 == 300000L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 50 + "'", int45 == 50);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "tmlog" + "'", str49, "tmlog");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 500L + "'", long54 == 500L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 50 + "'", int68 == 50);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 500L + "'", long73 == 500L);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(objEnumeration75);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 50 + "'", int83 == 50);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test8885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8885");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        java.lang.String str19 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        properties22.clear();
        java.util.Properties properties24 = new java.util.Properties(properties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        atomikosProperties25.setTransactionManagerUniqueName("");
        int int29 = atomikosProperties25.getMaxActives();
        atomikosProperties25.logBaseName = "tmlog";
        int int32 = atomikosProperties25.maxActives;
        boolean boolean33 = properties22.containsValue((java.lang.Object) int32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties34.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.lang.Object obj42 = properties39.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        java.lang.Object obj47 = properties46.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        boolean boolean54 = atomikosProperties48.isEnableLogging();
        atomikosProperties48.transactionManagerUniqueName = "";
        atomikosProperties48.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        atomikosProperties59.setMaxActives((int) (byte) -1);
        java.lang.String str65 = atomikosProperties59.getService();
        java.lang.Object obj66 = properties46.getOrDefault((java.lang.Object) atomikosProperties48, (java.lang.Object) atomikosProperties59);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties67 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long68 = atomikosProperties67.checkpointInterval;
        int int69 = atomikosProperties67.getMaxActives();
        java.lang.String str70 = atomikosProperties67.logBaseDir;
        java.lang.Object obj72 = properties46.putIfAbsent((java.lang.Object) atomikosProperties67, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str74 = atomikosProperties73.logBaseDir;
        java.lang.String str75 = atomikosProperties73.logBaseName;
        java.lang.String str76 = atomikosProperties73.getLogBaseDir();
        boolean boolean77 = atomikosProperties73.isSerialJtaTransactions();
        atomikosProperties73.setEnableLogging(false);
        boolean boolean80 = properties39.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties73);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties81 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long82 = atomikosProperties81.checkpointInterval;
        java.util.Properties properties83 = atomikosProperties81.asProperties();
        properties83.clear();
        java.util.Properties properties85 = new java.util.Properties(properties83);
        java.lang.Object obj88 = properties85.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str89 = properties85.toString();
        boolean boolean90 = properties39.containsValue((java.lang.Object) properties85);
        java.util.Set<java.lang.Object> objSet91 = properties85.keySet();
        boolean boolean92 = properties2.replace((java.lang.Object) properties22, (java.lang.Object) atomikosProperties34, (java.lang.Object) properties85);
        boolean boolean93 = properties85.isEmpty();
        java.lang.Object obj94 = properties85.clone();
        java.io.InputStream inputStream95 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties85.loadFromXML(inputStream95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNotNull(obj47);
// flaky:         org.junit.Assert.assertEquals(obj47.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 500L + "'", long68 == 500L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 50 + "'", int69 == 50);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "tmlog" + "'", str75, "tmlog");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 500L + "'", long82 == 500L);
        org.junit.Assert.assertNotNull(properties83);
        org.junit.Assert.assertEquals("'" + obj88 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj88, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "{}" + "'", str89, "{}");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objSet91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(obj94);
        org.junit.Assert.assertEquals(obj94.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj94), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj94), "{}");
    }

    @Test
    public void test8886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8886");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        long long4 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean5 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.checkpointInterval = 0L;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        boolean boolean9 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.setLogBaseName("{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test8887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8887");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxTimeout(1L);
        java.lang.String str6 = atomikosProperties0.transactionManagerUniqueName;
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
    }

    @Test
    public void test8888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8888");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        boolean boolean9 = properties7.containsValue((java.lang.Object) 100L);
        boolean boolean10 = properties2.contains((java.lang.Object) properties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        properties13.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        atomikosProperties15.setTransactionManagerUniqueName("");
        int int19 = atomikosProperties15.getMaxActives();
        boolean boolean20 = properties13.containsValue((java.lang.Object) int19);
        java.lang.Object obj23 = properties13.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.lang.Object obj24 = properties13.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        boolean boolean27 = atomikosProperties25.isSerialJtaTransactions();
        atomikosProperties25.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        atomikosProperties30.setTransactionManagerUniqueName("");
        int int34 = atomikosProperties30.getMaxActives();
        java.lang.String str35 = atomikosProperties30.getLogBaseDir();
        atomikosProperties30.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long42 = atomikosProperties41.checkpointInterval;
        java.util.Properties properties43 = atomikosProperties41.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = atomikosProperties44.isForceShutdownOnVmExit();
        atomikosProperties44.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean50 = properties43.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.enableLogging = true;
        boolean boolean55 = properties40.replace((java.lang.Object) boolean50, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection56 = properties40.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet57 = properties40.entrySet();
        atomikosProperties30.set(properties40, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long63 = atomikosProperties62.checkpointInterval;
        java.util.Properties properties64 = atomikosProperties62.asProperties();
        properties64.clear();
        boolean boolean66 = properties64.isEmpty();
        java.util.Collection<java.lang.Object> objCollection67 = properties64.values();
        atomikosProperties25.set(properties40, "hi!", (java.lang.Object) objCollection67);
        atomikosProperties25.forceShutdownOnVmExit = false;
        atomikosProperties25.maxActives = '4';
        atomikosProperties25.maxTimeout = 10;
        boolean boolean75 = properties2.remove(obj24, (java.lang.Object) atomikosProperties25);
        atomikosProperties25.maxActives = 100;
        java.util.Properties properties78 = atomikosProperties25.asProperties();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet79 = properties78.entrySet();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 50 + "'", int34 == 50);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 500L + "'", long42 == 500L);
        org.junit.Assert.assertNotNull(properties43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objCollection56);
        org.junit.Assert.assertNotNull(objEntrySet57);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 500L + "'", long63 == 500L);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objCollection67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(properties78);
        org.junit.Assert.assertNotNull(objEntrySet79);
    }

    @Test
    public void test8889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8889");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        long long21 = atomikosProperties9.maxTimeout;
        java.lang.String str22 = atomikosProperties9.getLogBaseDir();
        java.lang.String str23 = atomikosProperties9.getTransactionManagerUniqueName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 300000L + "'", long21 == 300000L);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test8890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8890");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("", "");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        java.lang.String str15 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        atomikosProperties16.setTransactionManagerUniqueName("");
        int int20 = atomikosProperties16.getMaxActives();
        java.lang.String str21 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties30.setCheckpointInterval((long) 100);
        boolean boolean33 = atomikosProperties30.isForceShutdownOnVmExit();
        atomikosProperties30.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean36 = properties29.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties37.enableLogging = true;
        boolean boolean41 = properties26.replace((java.lang.Object) boolean36, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection42 = properties26.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet43 = properties26.entrySet();
        atomikosProperties16.set(properties26, "hi!", (java.lang.Object) 0L);
        atomikosProperties16.setEnableLogging(false);
        atomikosProperties16.setTransactionManagerUniqueName("tmlog");
        atomikosProperties16.setEnableLogging(false);
        long long53 = atomikosProperties16.getDefaultJtaTimeout();
        boolean boolean54 = properties2.contains((java.lang.Object) long53);
        java.io.OutputStream outputStream55 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.storeToXML(outputStream55, "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 50 + "'", int20 == 50);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertNotNull(objEntrySet43);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10000L + "'", long53 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test8891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8891");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.lang.Object obj13 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        boolean boolean23 = properties21.containsValue((java.lang.Object) 100L);
        boolean boolean24 = properties16.contains((java.lang.Object) properties21);
        java.util.Set<java.lang.String> strSet25 = properties21.stringPropertyNames();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.util.Properties properties27 = new java.util.Properties();
        java.lang.Object obj30 = properties27.getOrDefault((java.lang.Object) 0.0f, (java.lang.Object) 0.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties31 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long32 = atomikosProperties31.checkpointInterval;
        java.util.Properties properties33 = atomikosProperties31.asProperties();
        boolean boolean35 = properties33.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long37 = atomikosProperties36.checkpointInterval;
        java.util.Properties properties38 = atomikosProperties36.asProperties();
        java.lang.Object obj41 = properties38.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str43 = atomikosProperties42.logBaseDir;
        java.lang.String str44 = atomikosProperties42.logBaseName;
        java.lang.String str45 = atomikosProperties42.getLogBaseDir();
        atomikosProperties42.setLogBaseName("");
        java.lang.Object obj48 = properties33.replace((java.lang.Object) properties38, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        atomikosProperties50.setMaxActives((int) (byte) -1);
        boolean boolean56 = atomikosProperties50.isEnableLogging();
        atomikosProperties50.transactionManagerUniqueName = "";
        atomikosProperties50.setEnableLogging(false);
        boolean boolean61 = atomikosProperties50.isEnableLogging();
        boolean boolean62 = properties38.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean61);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet63 = properties38.entrySet();
        boolean boolean64 = properties27.containsValue((java.lang.Object) objEntrySet63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.logBaseDir;
        java.lang.String str67 = atomikosProperties65.logBaseName;
        java.lang.String str68 = atomikosProperties65.getLogBaseDir();
        boolean boolean69 = atomikosProperties65.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long71 = atomikosProperties70.checkpointInterval;
        int int72 = atomikosProperties70.getMaxActives();
        atomikosProperties70.setCheckpointInterval(1L);
        atomikosProperties70.setService("{}");
        atomikosProperties70.logBaseName = "tmlog";
        atomikosProperties70.enableLogging = false;
        atomikosProperties70.setService("{com.atomikos.icatch.tmlog=0.0}");
        boolean boolean83 = properties21.replace((java.lang.Object) boolean64, (java.lang.Object) atomikosProperties65, (java.lang.Object) atomikosProperties70);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties84 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str85 = atomikosProperties84.logBaseDir;
        java.lang.String str86 = atomikosProperties84.logBaseName;
        java.lang.String str87 = atomikosProperties84.getLogBaseName();
        int int88 = atomikosProperties84.getMaxActives();
        atomikosProperties84.maxActives = (short) -1;
        java.lang.Object obj91 = properties21.remove((java.lang.Object) (short) -1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}=tmlog}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + 0.0d + "'", obj30, 0.0d);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 500L + "'", long37 == 500L);
        org.junit.Assert.assertNotNull(properties38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "tmlog" + "'", str44, "tmlog");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objEntrySet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 500L + "'", long71 == 500L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "tmlog" + "'", str86, "tmlog");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "tmlog" + "'", str87, "tmlog");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 50 + "'", int88 == 50);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test8892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8892");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setService("hi!");
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.enableLogging = false;
        java.lang.String str9 = atomikosProperties0.getLogBaseName();
        java.lang.String str10 = atomikosProperties0.getService();
        java.lang.String str11 = atomikosProperties0.service;
        boolean boolean12 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8893");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setMaxActives((int) (byte) 0);
        atomikosProperties0.setMaxActives((int) (short) 1);
        boolean boolean13 = atomikosProperties0.isSerialJtaTransactions();
        long long14 = atomikosProperties0.getMaxTimeout();
        boolean boolean15 = atomikosProperties0.enableLogging;
        java.lang.String str16 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setCheckpointInterval(52L);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 300000L + "'", long14 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
    }

    @Test
    public void test8894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8894");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        java.lang.String str3 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 'a';
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setMaxActives(10);
        boolean boolean12 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long13 = atomikosProperties0.getMaxTimeout();
        java.lang.String str14 = atomikosProperties0.getService();
        boolean boolean15 = atomikosProperties0.enableLogging;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test8895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8895");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.forceShutdownOnVmExit;
        atomikosProperties0.setSerialJtaTransactions(false);
        java.lang.String str8 = atomikosProperties0.logBaseName;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.checkpointInterval = (short) 100;
        atomikosProperties0.setLogBaseDir("{=}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
    }

    @Test
    public void test8896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8896");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        java.lang.Object obj15 = properties12.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str16 = properties12.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseDir();
        atomikosProperties17.setMaxActives((int) (byte) -1);
        boolean boolean23 = atomikosProperties17.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties24.setCheckpointInterval((long) 100);
        boolean boolean27 = atomikosProperties24.isForceShutdownOnVmExit();
        java.lang.Object obj28 = properties12.putIfAbsent((java.lang.Object) atomikosProperties17, (java.lang.Object) boolean27);
        java.util.Set<java.lang.String> strSet29 = properties12.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet30 = properties12.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration31 = properties12.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        atomikosProperties32.forceShutdownOnVmExit = false;
        atomikosProperties32.threadedTwoPhaseCommit = false;
        atomikosProperties32.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties32.threadedTwoPhaseCommit = false;
        atomikosProperties32.setDefaultJtaTimeout(500L);
        java.lang.Object obj44 = properties4.putIfAbsent((java.lang.Object) properties12, (java.lang.Object) 500L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        atomikosProperties45.forceShutdownOnVmExit = false;
        atomikosProperties45.threadedTwoPhaseCommit = false;
        atomikosProperties45.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean53 = atomikosProperties45.isSerialJtaTransactions();
        atomikosProperties45.setForceShutdownOnVmExit(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        java.util.Properties properties58 = atomikosProperties56.asProperties();
        properties58.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str61 = atomikosProperties60.logBaseDir;
        java.lang.String str62 = atomikosProperties60.logBaseName;
        java.lang.String str63 = atomikosProperties60.getLogBaseDir();
        atomikosProperties60.setMaxActives((int) (byte) -1);
        boolean boolean66 = atomikosProperties60.isEnableLogging();
        long long67 = atomikosProperties60.checkpointInterval;
        atomikosProperties60.setCheckpointInterval(10L);
        boolean boolean70 = atomikosProperties60.serialJtaTransactions;
        boolean boolean71 = properties58.equals((java.lang.Object) boolean70);
        java.util.Properties properties72 = new java.util.Properties(properties58);
        java.lang.Object obj73 = properties12.putIfAbsent((java.lang.Object) atomikosProperties45, (java.lang.Object) properties58);
        boolean boolean74 = atomikosProperties45.enableLogging;
        long long75 = atomikosProperties45.defaultJtaTimeout;
        atomikosProperties45.threadedTwoPhaseCommit = true;
        boolean boolean78 = atomikosProperties45.isForceShutdownOnVmExit();
        atomikosProperties45.enableLogging = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj15, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{}" + "'", str16, "{}");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objSet30);
        org.junit.Assert.assertNotNull(objEnumeration31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "tmlog" + "'", str62, "tmlog");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10000L + "'", long75 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test8897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8897");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        int int4 = atomikosProperties0.maxActives;
        boolean boolean5 = atomikosProperties0.serialJtaTransactions;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test8898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8898");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        java.lang.String str4 = atomikosProperties0.service;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.service = "";
        java.lang.String str9 = atomikosProperties0.logBaseName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
    }

    @Test
    public void test8899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8899");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.serialJtaTransactions;
        long long8 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str9 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        atomikosProperties0.defaultJtaTimeout = 32;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
    }

    @Test
    public void test8900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8900");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setTransactionManagerUniqueName("");
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setSerialJtaTransactions(false);
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.maxTimeout = 0L;
        java.lang.String str16 = atomikosProperties0.transactionManagerUniqueName;
        java.lang.String str17 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.transactionManagerUniqueName = "{{com.atomikos.icatch.tmlog=0.0}={com.atomikos.icatch.tmlog=0.0}}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
    }

    @Test
    public void test8901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8901");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        int int9 = atomikosProperties0.maxActives;
        java.lang.String str10 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.maxActives = 4;
        boolean boolean13 = atomikosProperties0.isForceShutdownOnVmExit();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test8902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8902");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        boolean boolean12 = atomikosProperties5.isEnableLogging();
        atomikosProperties5.setMaxActives((int) (byte) -1);
        atomikosProperties5.forceShutdownOnVmExit = true;
        java.lang.String str17 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean20 = atomikosProperties5.threadedTwoPhaseCommit;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test8903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8903");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties15.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        boolean boolean25 = atomikosProperties15.serialJtaTransactions;
        atomikosProperties15.setForceShutdownOnVmExit(false);
        atomikosProperties15.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test8904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8904");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        java.lang.String str29 = atomikosProperties13.transactionManagerUniqueName;
        boolean boolean30 = atomikosProperties13.forceShutdownOnVmExit;
        boolean boolean31 = atomikosProperties13.isThreadedTwoPhaseCommit();
        java.lang.String str32 = atomikosProperties13.getTransactionManagerUniqueName();
        long long33 = atomikosProperties13.maxTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 300000L + "'", long33 == 300000L);
    }

    @Test
    public void test8905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8905");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        int int23 = properties2.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet24 = properties2.entrySet();
        java.util.Enumeration<?> wildcardEnumeration25 = properties2.propertyNames();
        java.lang.Object obj26 = properties2.clone();
        java.lang.Object obj29 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        long long32 = atomikosProperties30.getDefaultJtaTimeout();
        java.util.Properties properties33 = atomikosProperties30.asProperties();
        boolean boolean34 = atomikosProperties30.isForceShutdownOnVmExit();
        int int35 = atomikosProperties30.getMaxActives();
        boolean boolean36 = properties2.equals((java.lang.Object) int35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.lang.Object obj42 = properties39.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long44 = atomikosProperties43.checkpointInterval;
        java.util.Properties properties45 = atomikosProperties43.asProperties();
        properties45.clear();
        boolean boolean47 = properties45.isEmpty();
        java.util.Collection<java.lang.Object> objCollection48 = properties45.values();
        properties39.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties45);
        java.util.Enumeration<?> wildcardEnumeration50 = properties45.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties51.enableLogging = true;
        atomikosProperties51.maxActives = (byte) -1;
        boolean boolean56 = atomikosProperties51.isForceShutdownOnVmExit();
        boolean boolean57 = properties45.containsValue((java.lang.Object) atomikosProperties51);
        atomikosProperties51.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties51.maxTimeout = 32;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str63 = atomikosProperties62.logBaseDir;
        java.lang.String str64 = atomikosProperties62.logBaseName;
        java.lang.String str65 = atomikosProperties62.getLogBaseDir();
        boolean boolean66 = atomikosProperties62.isThreadedTwoPhaseCommit();
        java.lang.Object obj67 = properties2.putIfAbsent((java.lang.Object) 32, (java.lang.Object) atomikosProperties62);
        long long68 = atomikosProperties62.defaultJtaTimeout;
        atomikosProperties62.maxTimeout = ' ';
        java.lang.String str71 = atomikosProperties62.transactionManagerUniqueName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(objEntrySet24);
        org.junit.Assert.assertNotNull(wildcardEnumeration25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertNotNull(properties33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 50 + "'", int35 == 50);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "{}");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objCollection48);
        org.junit.Assert.assertNotNull(wildcardEnumeration50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "tmlog" + "'", str64, "tmlog");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10000L + "'", long68 == 10000L);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test8906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8906");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        java.util.Collection<java.lang.Object> objCollection22 = properties21.values();
        java.lang.Object obj23 = properties21.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        properties26.clear();
        boolean boolean28 = properties26.isEmpty();
        java.lang.Object obj29 = properties26.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        java.util.Properties properties32 = atomikosProperties30.asProperties();
        properties32.clear();
        boolean boolean34 = properties32.isEmpty();
        java.util.Collection<java.lang.Object> objCollection35 = properties32.values();
        properties26.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties32);
        java.util.Enumeration<?> wildcardEnumeration37 = properties32.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        properties40.clear();
        boolean boolean42 = properties40.isEmpty();
        java.util.Collection<java.lang.Object> objCollection43 = properties40.values();
        boolean boolean44 = properties32.equals((java.lang.Object) properties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        atomikosProperties45.forceShutdownOnVmExit = false;
        atomikosProperties45.threadedTwoPhaseCommit = false;
        atomikosProperties45.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties45.threadedTwoPhaseCommit = false;
        atomikosProperties45.maxTimeout = 50;
        boolean boolean57 = properties40.equals((java.lang.Object) 50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str59 = atomikosProperties58.logBaseDir;
        atomikosProperties58.setTransactionManagerUniqueName("");
        int int62 = atomikosProperties58.getMaxActives();
        java.lang.String str63 = atomikosProperties58.transactionManagerUniqueName;
        boolean boolean64 = properties40.containsValue((java.lang.Object) atomikosProperties58);
        java.util.Properties properties65 = new java.util.Properties(properties40);
        boolean boolean66 = properties21.containsKey((java.lang.Object) properties65);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet67 = properties21.entrySet();
        java.lang.Object obj68 = properties21.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        atomikosProperties69.setTransactionManagerUniqueName("");
        int int73 = atomikosProperties69.getMaxActives();
        atomikosProperties69.logBaseName = "tmlog";
        java.lang.String str76 = atomikosProperties69.getLogBaseDir();
        boolean boolean77 = atomikosProperties69.serialJtaTransactions;
        boolean boolean78 = atomikosProperties69.isThreadedTwoPhaseCommit();
        java.lang.Object obj79 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj80 = properties21.putIfAbsent((java.lang.Object) boolean78, obj79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objCollection22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "{}");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertNotNull(wildcardEnumeration37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objCollection43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 50 + "'", int62 == 50);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objEntrySet67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{}");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 50 + "'", int73 == 50);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test8907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8907");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.transactionManagerUniqueName = "{}";
        atomikosProperties0.setSerialJtaTransactions(false);
        boolean boolean12 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.maxTimeout = 10L;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8908");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        atomikosProperties0.setForceShutdownOnVmExit(true);
        java.lang.String str10 = atomikosProperties0.getService();
        java.util.Properties properties11 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        java.lang.String str14 = atomikosProperties12.logBaseName;
        java.lang.String str15 = atomikosProperties12.getLogBaseDir();
        atomikosProperties12.setMaxActives((int) (byte) -1);
        boolean boolean18 = atomikosProperties12.isEnableLogging();
        long long19 = atomikosProperties12.checkpointInterval;
        atomikosProperties12.setCheckpointInterval(10L);
        atomikosProperties12.serialJtaTransactions = false;
        atomikosProperties12.setCheckpointInterval(0L);
        atomikosProperties12.setMaxActives((int) (byte) 1);
        atomikosProperties12.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties12.setLogBaseDir("tmlog");
        java.lang.Object obj32 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = properties11.remove((java.lang.Object) "tmlog", obj32);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "tmlog" + "'", str14, "tmlog");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
    }

    @Test
    public void test8909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8909");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        int int14 = properties2.size();
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties2.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        long long23 = atomikosProperties16.checkpointInterval;
        atomikosProperties16.setCheckpointInterval(10L);
        boolean boolean26 = atomikosProperties16.isForceShutdownOnVmExit();
        atomikosProperties16.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean29 = atomikosProperties16.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str31 = atomikosProperties30.logBaseDir;
        java.lang.String str32 = atomikosProperties30.logBaseName;
        java.lang.String str33 = atomikosProperties30.getLogBaseDir();
        boolean boolean34 = atomikosProperties30.isSerialJtaTransactions();
        atomikosProperties30.setEnableLogging(false);
        boolean boolean37 = atomikosProperties30.serialJtaTransactions;
        long long38 = atomikosProperties30.defaultJtaTimeout;
        java.lang.String str39 = atomikosProperties30.logBaseName;
        java.lang.String str40 = atomikosProperties30.getLogBaseName();
        atomikosProperties30.setLogBaseName("");
        java.lang.Object obj43 = properties2.put((java.lang.Object) boolean29, (java.lang.Object) atomikosProperties30);
        boolean boolean44 = atomikosProperties30.enableLogging;
        boolean boolean45 = atomikosProperties30.isEnableLogging();
        boolean boolean46 = atomikosProperties30.isThreadedTwoPhaseCommit();
        atomikosProperties30.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tmlog" + "'", str32, "tmlog");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10000L + "'", long38 == 10000L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test8910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8910");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setDefaultJtaTimeout((long) (byte) 1);
        long long6 = atomikosProperties0.getCheckpointInterval();
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        int int11 = atomikosProperties0.maxActives;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 50 + "'", int11 == 50);
    }

    @Test
    public void test8911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8911");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        boolean boolean5 = atomikosProperties0.isForceShutdownOnVmExit();
        int int6 = atomikosProperties0.maxActives;
        atomikosProperties0.defaultJtaTimeout = 50;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
    }

    @Test
    public void test8912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8912");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.transactionManagerUniqueName;
        long long4 = atomikosProperties0.getCheckpointInterval();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        long long6 = atomikosProperties0.maxTimeout;
        int int7 = atomikosProperties0.getMaxActives();
        atomikosProperties0.defaultJtaTimeout = 0L;
        java.lang.String str10 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 500L + "'", long4 == 500L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test8913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8913");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        long long3 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setMaxActives(100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 500L + "'", long3 == 500L);
    }

    @Test
    public void test8914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8914");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        java.lang.Object obj9 = properties8.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties10 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str11 = atomikosProperties10.logBaseDir;
        java.lang.String str12 = atomikosProperties10.logBaseName;
        java.lang.String str13 = atomikosProperties10.getLogBaseDir();
        atomikosProperties10.setMaxActives((int) (byte) -1);
        boolean boolean16 = atomikosProperties10.isEnableLogging();
        atomikosProperties10.transactionManagerUniqueName = "";
        atomikosProperties10.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        java.lang.String str27 = atomikosProperties21.getService();
        java.lang.Object obj28 = properties8.getOrDefault((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.logBaseName = "tmlog";
        java.lang.Object obj39 = properties2.putIfAbsent((java.lang.Object) atomikosProperties10, (java.lang.Object) atomikosProperties29);
        long long40 = atomikosProperties29.getMaxTimeout();
        atomikosProperties29.setLogBaseDir("tmlog");
        boolean boolean43 = atomikosProperties29.isForceShutdownOnVmExit();
        int int44 = atomikosProperties29.getMaxActives();
        atomikosProperties29.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tmlog" + "'", str12, "tmlog");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 300000L + "'", long40 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 50 + "'", int44 == 50);
    }

    @Test
    public void test8915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8915");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        atomikosProperties36.logBaseName = "{}";
        long long46 = atomikosProperties36.getDefaultJtaTimeout();
        boolean boolean47 = atomikosProperties36.isThreadedTwoPhaseCommit();
        atomikosProperties36.threadedTwoPhaseCommit = true;
        atomikosProperties36.setCheckpointInterval((long) 100);
        atomikosProperties36.setLogBaseName("");
        atomikosProperties36.setThreadedTwoPhaseCommit(true);
        atomikosProperties36.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        atomikosProperties36.setDefaultJtaTimeout((long) 10);
        long long60 = atomikosProperties36.maxTimeout;
        long long61 = atomikosProperties36.getCheckpointInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10000L + "'", long46 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 300000L + "'", long60 == 300000L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L + "'", long61 == 100L);
    }

    @Test
    public void test8916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8916");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.util.Properties properties16 = new java.util.Properties(properties10);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        java.lang.Object obj20 = properties19.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        java.lang.String str23 = atomikosProperties21.logBaseName;
        java.lang.String str24 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.setMaxActives((int) (byte) -1);
        boolean boolean27 = atomikosProperties21.isEnableLogging();
        atomikosProperties21.transactionManagerUniqueName = "";
        atomikosProperties21.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str33 = atomikosProperties32.logBaseDir;
        java.lang.String str34 = atomikosProperties32.logBaseName;
        java.lang.String str35 = atomikosProperties32.getLogBaseDir();
        atomikosProperties32.setMaxActives((int) (byte) -1);
        java.lang.String str38 = atomikosProperties32.getService();
        java.lang.Object obj39 = properties19.getOrDefault((java.lang.Object) atomikosProperties21, (java.lang.Object) atomikosProperties32);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        int int42 = atomikosProperties40.getMaxActives();
        java.lang.String str43 = atomikosProperties40.logBaseDir;
        java.lang.Object obj45 = properties19.putIfAbsent((java.lang.Object) atomikosProperties40, (java.lang.Object) "");
        int int46 = properties19.size();
        java.util.Collection<java.lang.Object> objCollection47 = properties19.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        int int50 = atomikosProperties48.getMaxActives();
        java.lang.String str51 = atomikosProperties48.logBaseDir;
        java.lang.String str52 = atomikosProperties48.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        java.lang.String str55 = atomikosProperties53.logBaseName;
        java.lang.String str56 = atomikosProperties53.getLogBaseDir();
        atomikosProperties53.setMaxActives((int) (byte) -1);
        boolean boolean59 = atomikosProperties53.isEnableLogging();
        java.lang.String str60 = atomikosProperties53.getLogBaseName();
        java.lang.Object obj61 = properties19.replace((java.lang.Object) atomikosProperties48, (java.lang.Object) atomikosProperties53);
        boolean boolean62 = atomikosProperties48.threadedTwoPhaseCommit;
        java.lang.String str63 = atomikosProperties48.transactionManagerUniqueName;
        boolean boolean64 = properties16.containsValue((java.lang.Object) atomikosProperties48);
        atomikosProperties48.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties48.enableLogging = true;
        atomikosProperties48.threadedTwoPhaseCommit = true;
        int int71 = atomikosProperties48.getMaxActives();
        boolean boolean72 = atomikosProperties48.isSerialJtaTransactions();
        java.util.Properties properties73 = atomikosProperties48.asProperties();
        java.lang.Object obj76 = properties73.setProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tmlog" + "'", str23, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "tmlog" + "'", str34, "tmlog");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(objCollection47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "tmlog" + "'", str60, "tmlog");
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 50 + "'", int71 == 50);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertNull(obj76);
    }

    @Test
    public void test8917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8917");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        java.lang.String str5 = properties2.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties2.elements();
        java.util.Enumeration<?> wildcardEnumeration7 = properties2.propertyNames();
        java.util.Set<java.lang.String> strSet8 = properties2.stringPropertyNames();
        java.lang.String str10 = properties2.getProperty("hi!");
        java.util.Enumeration<?> wildcardEnumeration11 = properties2.propertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str5, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration6);
        org.junit.Assert.assertNotNull(wildcardEnumeration7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(wildcardEnumeration11);
    }

    @Test
    public void test8918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8918");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.util.Enumeration<java.lang.Object> objEnumeration15 = properties14.keys();
        properties14.clear();
        java.lang.String str17 = properties14.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        properties20.clear();
        boolean boolean22 = properties20.isEmpty();
        java.lang.Object obj23 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        java.lang.Object obj28 = properties27.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setMaxActives((int) (byte) -1);
        boolean boolean35 = atomikosProperties29.isEnableLogging();
        atomikosProperties29.transactionManagerUniqueName = "";
        atomikosProperties29.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        java.lang.String str46 = atomikosProperties40.getService();
        java.lang.Object obj47 = properties27.getOrDefault((java.lang.Object) atomikosProperties29, (java.lang.Object) atomikosProperties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        int int50 = atomikosProperties48.getMaxActives();
        java.lang.String str51 = atomikosProperties48.logBaseDir;
        java.lang.Object obj53 = properties27.putIfAbsent((java.lang.Object) atomikosProperties48, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str55 = atomikosProperties54.logBaseDir;
        java.lang.String str56 = atomikosProperties54.logBaseName;
        java.lang.String str57 = atomikosProperties54.getLogBaseDir();
        boolean boolean58 = atomikosProperties54.isSerialJtaTransactions();
        atomikosProperties54.setEnableLogging(false);
        boolean boolean61 = properties20.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long63 = atomikosProperties62.checkpointInterval;
        java.util.Properties properties64 = atomikosProperties62.asProperties();
        properties64.clear();
        java.util.Properties properties66 = new java.util.Properties(properties64);
        java.lang.Object obj69 = properties66.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str70 = properties66.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        java.lang.String str73 = atomikosProperties71.logBaseName;
        java.lang.String str74 = atomikosProperties71.getLogBaseDir();
        atomikosProperties71.setMaxActives((int) (byte) -1);
        boolean boolean77 = atomikosProperties71.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties78.setCheckpointInterval((long) 100);
        boolean boolean81 = atomikosProperties78.isForceShutdownOnVmExit();
        java.lang.Object obj82 = properties66.putIfAbsent((java.lang.Object) atomikosProperties71, (java.lang.Object) boolean81);
        atomikosProperties71.setLogBaseDir("{}");
        boolean boolean85 = properties20.containsValue((java.lang.Object) "{}");
        java.util.Set<java.lang.String> strSet86 = properties20.stringPropertyNames();
        boolean boolean87 = properties14.equals((java.lang.Object) properties20);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties88 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long89 = atomikosProperties88.checkpointInterval;
        java.util.Properties properties90 = atomikosProperties88.asProperties();
        java.lang.Object obj91 = properties90.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration92 = properties90.elements();
        java.util.Enumeration<?> wildcardEnumeration93 = properties90.propertyNames();
        properties14.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties90);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objEnumeration15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{}" + "'", str17, "{}");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tmlog" + "'", str56, "tmlog");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 500L + "'", long63 == 500L);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj69, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{}" + "'", str70, "{}");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tmlog" + "'", str73, "tmlog");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 500L + "'", long89 == 500L);
        org.junit.Assert.assertNotNull(properties90);
        org.junit.Assert.assertNotNull(obj91);
// flaky:         org.junit.Assert.assertEquals(obj91.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration92);
        org.junit.Assert.assertNotNull(wildcardEnumeration93);
    }

    @Test
    public void test8919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8919");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setCheckpointInterval((long) (short) 1);
        int int12 = atomikosProperties0.maxActives;
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.setThreadedTwoPhaseCommit(true);
        long long17 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10000L + "'", long17 == 10000L);
    }

    @Test
    public void test8920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8920");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        java.lang.String str48 = atomikosProperties44.logBaseName;
        atomikosProperties44.setService("{}");
        java.lang.String str51 = atomikosProperties44.getTransactionManagerUniqueName();
        atomikosProperties44.forceShutdownOnVmExit = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test8921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8921");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        java.util.Properties properties14 = new java.util.Properties(properties2);
        java.lang.String str15 = properties14.toString();
        java.io.PrintStream printStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties14.list(printStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{}" + "'", str15, "{}");
    }

    @Test
    public void test8922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8922");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.getLogBaseDir();
        java.lang.String str6 = atomikosProperties0.logBaseName;
        boolean boolean7 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str8 = atomikosProperties0.logBaseDir;
        java.lang.String str9 = atomikosProperties0.service;
        boolean boolean10 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.threadedTwoPhaseCommit = true;
        atomikosProperties0.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test8923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8923");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.setEnableLogging(false);
        boolean boolean43 = properties2.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties36);
        java.util.Properties properties44 = new java.util.Properties(properties2);
        java.util.Set<java.lang.String> strSet45 = properties44.stringPropertyNames();
        java.lang.String str47 = properties44.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Enumeration<java.lang.Object> objEnumeration48 = properties44.keys();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(objEnumeration48);
    }

    @Test
    public void test8924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8924");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        properties21.clear();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.lang.Object obj26 = properties23.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str27 = properties23.toString();
        java.lang.Object obj30 = properties23.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet31 = properties23.keySet();
        java.lang.Object obj32 = properties10.remove((java.lang.Object) properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        java.lang.Object obj38 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        boolean boolean43 = properties41.isEmpty();
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<?> wildcardEnumeration46 = properties35.propertyNames();
        java.lang.Object obj47 = properties10.get((java.lang.Object) properties35);
        java.lang.String str49 = properties35.getProperty("");
        java.util.Properties properties50 = new java.util.Properties(properties35);
        java.util.Properties properties51 = new java.util.Properties(properties50);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet52 = properties50.entrySet();
        java.io.Reader reader53 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties50.load(reader53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj26, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(wildcardEnumeration46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(objEntrySet52);
    }

    @Test
    public void test8925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8925");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        atomikosProperties0.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        java.lang.Object obj15 = properties14.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str17 = atomikosProperties16.logBaseDir;
        java.lang.String str18 = atomikosProperties16.logBaseName;
        java.lang.String str19 = atomikosProperties16.getLogBaseDir();
        atomikosProperties16.setMaxActives((int) (byte) -1);
        boolean boolean22 = atomikosProperties16.isEnableLogging();
        atomikosProperties16.transactionManagerUniqueName = "";
        atomikosProperties16.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        java.lang.String str33 = atomikosProperties27.getService();
        java.lang.Object obj34 = properties14.getOrDefault((java.lang.Object) atomikosProperties16, (java.lang.Object) atomikosProperties27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        int int37 = atomikosProperties35.getMaxActives();
        java.lang.String str38 = atomikosProperties35.logBaseDir;
        java.lang.Object obj40 = properties14.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties41 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str42 = atomikosProperties41.logBaseDir;
        java.lang.String str43 = atomikosProperties41.logBaseName;
        java.lang.String str44 = atomikosProperties41.getLogBaseDir();
        boolean boolean45 = atomikosProperties41.isSerialJtaTransactions();
        atomikosProperties41.setEnableLogging(false);
        boolean boolean48 = properties7.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties41);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        java.util.Properties properties53 = new java.util.Properties(properties51);
        java.lang.Object obj56 = properties53.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str57 = properties53.toString();
        boolean boolean58 = properties7.containsValue((java.lang.Object) properties53);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties60 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long61 = atomikosProperties60.checkpointInterval;
        boolean boolean62 = atomikosProperties60.isSerialJtaTransactions();
        atomikosProperties60.transactionManagerUniqueName = "";
        atomikosProperties0.set(properties53, "{}", (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        java.lang.String str68 = atomikosProperties66.logBaseName;
        java.lang.String str69 = atomikosProperties66.getLogBaseDir();
        atomikosProperties66.setMaxActives((int) (byte) -1);
        java.lang.String str72 = atomikosProperties66.getService();
        long long73 = atomikosProperties66.defaultJtaTimeout;
        atomikosProperties66.setEnableLogging(true);
        boolean boolean76 = properties53.equals((java.lang.Object) atomikosProperties66);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str78 = atomikosProperties77.logBaseDir;
        java.lang.String str79 = atomikosProperties77.logBaseName;
        java.lang.String str80 = atomikosProperties77.getLogBaseDir();
        atomikosProperties77.setMaxActives((int) (byte) -1);
        java.lang.String str83 = atomikosProperties77.getService();
        atomikosProperties77.setDefaultJtaTimeout((long) (-1));
        int int86 = atomikosProperties77.maxActives;
        long long87 = atomikosProperties77.maxTimeout;
        long long88 = atomikosProperties77.getDefaultJtaTimeout();
        java.lang.Object obj89 = properties53.remove((java.lang.Object) atomikosProperties77);
        java.util.Set<java.lang.String> strSet90 = properties53.stringPropertyNames();
        java.io.OutputStream outputStream91 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties53.storeToXML(outputStream91, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "tmlog" + "'", str43, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj56, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "{}" + "'", str57, "{}");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 500L + "'", long61 == 500L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "tmlog" + "'", str68, "tmlog");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10000L + "'", long73 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 300000L + "'", long87 == 300000L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNull(obj89);
        org.junit.Assert.assertNotNull(strSet90);
    }

    @Test
    public void test8926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8926");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setTransactionManagerUniqueName("");
        atomikosProperties6.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass16 = atomikosProperties6.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        int int19 = atomikosProperties17.getMaxActives();
        java.lang.String str20 = atomikosProperties17.transactionManagerUniqueName;
        long long21 = atomikosProperties17.getCheckpointInterval();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        atomikosProperties27.transactionManagerUniqueName = "";
        atomikosProperties27.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        java.lang.Object obj45 = properties25.getOrDefault((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        int int48 = atomikosProperties46.getMaxActives();
        java.lang.String str49 = atomikosProperties46.logBaseDir;
        java.lang.Object obj51 = properties25.putIfAbsent((java.lang.Object) atomikosProperties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        atomikosProperties52.setService("");
        boolean boolean57 = atomikosProperties52.threadedTwoPhaseCommit;
        java.lang.String str58 = atomikosProperties52.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        boolean boolean63 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.serialJtaTransactions = true;
        java.lang.String str66 = atomikosProperties59.getService();
        java.lang.Object obj67 = properties25.putIfAbsent((java.lang.Object) str58, (java.lang.Object) atomikosProperties59);
        boolean boolean68 = properties3.replace((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties59);
        atomikosProperties59.checkpointInterval = (byte) 100;
        java.lang.String str71 = atomikosProperties59.getService();
        atomikosProperties59.defaultJtaTimeout = 1L;
        int int74 = atomikosProperties59.maxActives;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 50 + "'", int74 == 50);
    }

    @Test
    public void test8927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8927");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        int int6 = atomikosProperties0.getMaxActives();
        boolean boolean7 = atomikosProperties0.isForceShutdownOnVmExit();
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setDefaultJtaTimeout((long) 100);
        java.lang.String str11 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.checkpointInterval = 50L;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test8928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8928");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval(1L);
        long long5 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.serialJtaTransactions = true;
        boolean boolean8 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.defaultJtaTimeout = 0L;
        atomikosProperties0.setDefaultJtaTimeout((long) (short) 0);
        java.util.Properties properties13 = atomikosProperties0.asProperties();
        boolean boolean14 = properties13.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test8929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8929");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test8930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8930");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        int int20 = properties19.size();
        java.io.PrintWriter printWriter21 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties19.list(printWriter21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test8931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8931");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        boolean boolean4 = atomikosProperties0.isThreadedTwoPhaseCommit();
        atomikosProperties0.enableLogging = false;
        java.lang.String str7 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setMaxTimeout((long) (short) 100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test8932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8932");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setMaxActives(50);
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
    }

    @Test
    public void test8933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8933");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties17.setCheckpointInterval((long) 100);
        boolean boolean20 = atomikosProperties17.isForceShutdownOnVmExit();
        atomikosProperties17.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties17.service = "hi!";
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        java.lang.String str31 = atomikosProperties25.getService();
        long long32 = atomikosProperties25.defaultJtaTimeout;
        java.lang.String str33 = atomikosProperties25.logBaseName;
        java.lang.String str34 = atomikosProperties25.logBaseDir;
        java.lang.Class<?> wildcardClass35 = atomikosProperties25.getClass();
        boolean boolean36 = properties2.remove((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties25);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        atomikosProperties37.forceShutdownOnVmExit = false;
        boolean boolean41 = atomikosProperties37.isSerialJtaTransactions();
        java.lang.String str42 = atomikosProperties37.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.Object obj46 = properties2.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties43);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str48 = atomikosProperties47.logBaseDir;
        atomikosProperties47.setTransactionManagerUniqueName("");
        int int51 = atomikosProperties47.getMaxActives();
        java.lang.String str52 = atomikosProperties47.getLogBaseDir();
        atomikosProperties47.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long56 = atomikosProperties55.checkpointInterval;
        java.util.Properties properties57 = atomikosProperties55.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties61.setCheckpointInterval((long) 100);
        boolean boolean64 = atomikosProperties61.isForceShutdownOnVmExit();
        atomikosProperties61.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean67 = properties60.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties68.enableLogging = true;
        boolean boolean72 = properties57.replace((java.lang.Object) boolean67, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection73 = properties57.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet74 = properties57.entrySet();
        atomikosProperties47.set(properties57, "hi!", (java.lang.Object) 0L);
        atomikosProperties47.setEnableLogging(false);
        atomikosProperties47.setTransactionManagerUniqueName("tmlog");
        atomikosProperties47.setEnableLogging(false);
        long long84 = atomikosProperties47.checkpointInterval;
        boolean boolean85 = atomikosProperties47.isThreadedTwoPhaseCommit();
        atomikosProperties47.setForceShutdownOnVmExit(true);
        int int88 = atomikosProperties47.maxActives;
        java.lang.Object obj89 = properties2.get((java.lang.Object) atomikosProperties47);
        atomikosProperties47.setLogBaseDir("");
        atomikosProperties47.setMaxTimeout((long) 11);
        atomikosProperties47.enableLogging = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10000L + "'", long32 == 10000L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "tmlog" + "'", str33, "tmlog");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 50 + "'", int51 == 50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 500L + "'", long56 == 500L);
        org.junit.Assert.assertNotNull(properties57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objCollection73);
        org.junit.Assert.assertNotNull(objEntrySet74);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 500L + "'", long84 == 500L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 50 + "'", int88 == 50);
        org.junit.Assert.assertNull(obj89);
    }

    @Test
    public void test8934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8934");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.getLogBaseDir();
        atomikosProperties5.setTransactionManagerUniqueName("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long17 = atomikosProperties16.checkpointInterval;
        java.util.Properties properties18 = atomikosProperties16.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties19.setCheckpointInterval((long) 100);
        boolean boolean22 = atomikosProperties19.isForceShutdownOnVmExit();
        atomikosProperties19.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean25 = properties18.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties26.enableLogging = true;
        boolean boolean30 = properties15.replace((java.lang.Object) boolean25, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection31 = properties15.values();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet32 = properties15.entrySet();
        atomikosProperties5.set(properties15, "hi!", (java.lang.Object) 0L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        properties39.clear();
        boolean boolean41 = properties39.isEmpty();
        java.util.Collection<java.lang.Object> objCollection42 = properties39.values();
        atomikosProperties0.set(properties15, "hi!", (java.lang.Object) objCollection42);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        boolean boolean46 = atomikosProperties44.isSerialJtaTransactions();
        java.lang.String str47 = atomikosProperties44.getLogBaseName();
        long long48 = atomikosProperties44.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long50 = atomikosProperties49.checkpointInterval;
        java.util.Properties properties51 = atomikosProperties49.asProperties();
        properties51.clear();
        boolean boolean53 = properties51.isEmpty();
        java.lang.Object obj54 = properties51.clone();
        java.util.Set<java.lang.Object> objSet55 = properties51.keySet();
        boolean boolean58 = properties51.remove((java.lang.Object) 1L, (java.lang.Object) (byte) 10);
        java.lang.Object obj59 = properties15.replace((java.lang.Object) long48, (java.lang.Object) properties51);
        java.util.Properties properties60 = new java.util.Properties(properties51);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.checkpointInterval;
        java.util.Properties properties63 = atomikosProperties61.asProperties();
        properties63.clear();
        boolean boolean65 = properties63.isEmpty();
        java.lang.Object obj66 = properties63.clone();
        java.util.Set<java.lang.Object> objSet67 = properties63.keySet();
        java.util.Enumeration<?> wildcardEnumeration68 = properties63.propertyNames();
        boolean boolean69 = properties51.containsKey((java.lang.Object) properties63);
        boolean boolean70 = properties63.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        atomikosProperties71.setTransactionManagerUniqueName("");
        int int75 = atomikosProperties71.getMaxActives();
        atomikosProperties71.logBaseName = "tmlog";
        atomikosProperties71.setEnableLogging(true);
        long long80 = atomikosProperties71.maxTimeout;
        atomikosProperties71.forceShutdownOnVmExit = true;
        atomikosProperties71.maxTimeout = (short) 10;
        boolean boolean85 = atomikosProperties71.isEnableLogging();
        boolean boolean86 = properties63.containsValue((java.lang.Object) atomikosProperties71);
        java.util.Enumeration<?> wildcardEnumeration87 = properties63.propertyNames();
        java.io.Reader reader88 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties63.load(reader88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 500L + "'", long17 == 500L);
        org.junit.Assert.assertNotNull(properties18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objCollection31);
        org.junit.Assert.assertNotNull(objEntrySet32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tmlog" + "'", str47, "tmlog");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 500L + "'", long50 == 500L);
        org.junit.Assert.assertNotNull(properties51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "{}");
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "{}");
        org.junit.Assert.assertNotNull(objSet67);
        org.junit.Assert.assertNotNull(wildcardEnumeration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 50 + "'", int75 == 50);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 300000L + "'", long80 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration87);
    }

    @Test
    public void test8935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8935");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        boolean boolean21 = properties2.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        java.util.Set<java.lang.Object> objSet28 = properties24.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.threadedTwoPhaseCommit = false;
        int int39 = atomikosProperties29.maxActives;
        atomikosProperties29.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj42 = properties2.getOrDefault((java.lang.Object) properties24, (java.lang.Object) atomikosProperties29);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties24.elements();
        java.lang.Object obj44 = properties24.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration45 = properties24.elements();
        java.util.Set<java.lang.String> strSet46 = properties24.stringPropertyNames();
        java.util.Collection<java.lang.Object> objCollection47 = properties24.values();
        java.io.OutputStream outputStream48 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties24.storeToXML(outputStream48, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog, tmlog=1}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "{}");
        org.junit.Assert.assertNotNull(objEnumeration45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(objCollection47);
    }

    @Test
    public void test8936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8936");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        java.lang.String str3 = atomikosProperties0.logBaseDir;
        boolean boolean4 = atomikosProperties0.serialJtaTransactions;
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long8 = atomikosProperties0.maxTimeout;
        java.util.Properties properties9 = atomikosProperties0.asProperties();
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties9.elements();
        java.lang.Object obj11 = properties9.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 300000L + "'", long8 == 300000L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8937");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        int int3 = properties2.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        java.lang.String str9 = atomikosProperties4.transactionManagerUniqueName;
        atomikosProperties4.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        java.util.Properties properties16 = new java.util.Properties(properties14);
        atomikosProperties4.set(properties14, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj22 = properties14.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.lang.String> strSet23 = properties14.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        java.util.Properties properties26 = atomikosProperties24.asProperties();
        boolean boolean28 = properties26.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        java.lang.Object obj34 = properties31.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        atomikosProperties35.setLogBaseName("");
        java.lang.Object obj41 = properties26.replace((java.lang.Object) properties31, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties42 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long43 = atomikosProperties42.checkpointInterval;
        java.util.Properties properties44 = atomikosProperties42.asProperties();
        java.lang.Object obj45 = properties44.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        java.lang.String str48 = atomikosProperties46.logBaseName;
        java.lang.String str49 = atomikosProperties46.getLogBaseDir();
        atomikosProperties46.setMaxActives((int) (byte) -1);
        boolean boolean52 = atomikosProperties46.isEnableLogging();
        atomikosProperties46.transactionManagerUniqueName = "";
        atomikosProperties46.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        java.lang.String str59 = atomikosProperties57.logBaseName;
        java.lang.String str60 = atomikosProperties57.getLogBaseDir();
        atomikosProperties57.setMaxActives((int) (byte) -1);
        java.lang.String str63 = atomikosProperties57.getService();
        java.lang.Object obj64 = properties44.getOrDefault((java.lang.Object) atomikosProperties46, (java.lang.Object) atomikosProperties57);
        int int65 = properties44.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet66 = properties44.entrySet();
        java.lang.Object obj67 = properties26.remove((java.lang.Object) objEntrySet66);
        java.util.Properties properties68 = new java.util.Properties(properties26);
        java.lang.String str70 = properties68.getProperty("hi!");
        properties68.clear();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet72 = properties68.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties73.setCheckpointInterval((long) 100);
        boolean boolean76 = atomikosProperties73.isForceShutdownOnVmExit();
        atomikosProperties73.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long79 = atomikosProperties73.getDefaultJtaTimeout();
        atomikosProperties73.checkpointInterval = (short) 10;
        atomikosProperties73.setLogBaseName("{}");
        boolean boolean84 = properties2.replace((java.lang.Object) properties14, (java.lang.Object) properties68, (java.lang.Object) atomikosProperties73);
        atomikosProperties73.forceShutdownOnVmExit = false;
        java.lang.String str87 = atomikosProperties73.logBaseName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNotNull(properties26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 500L + "'", long43 == 500L);
        org.junit.Assert.assertNotNull(properties44);
        org.junit.Assert.assertNotNull(obj45);
// flaky:         org.junit.Assert.assertEquals(obj45.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tmlog" + "'", str48, "tmlog");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(objEntrySet66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(objEntrySet72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 10000L + "'", long79 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "{}" + "'", str87, "{}");
    }

    @Test
    public void test8938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8938");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        java.util.Collection<java.lang.Object> objCollection22 = properties21.values();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.io.PrintWriter printWriter24 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties23.list(printWriter24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objCollection22);
    }

    @Test
    public void test8939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8939");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        boolean boolean21 = properties2.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        java.util.Set<java.lang.Object> objSet28 = properties24.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.threadedTwoPhaseCommit = false;
        int int39 = atomikosProperties29.maxActives;
        atomikosProperties29.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj42 = properties2.getOrDefault((java.lang.Object) properties24, (java.lang.Object) atomikosProperties29);
        atomikosProperties29.forceShutdownOnVmExit = true;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(obj42);
    }

    @Test
    public void test8940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8940");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties3 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties3.setCheckpointInterval((long) 100);
        boolean boolean6 = atomikosProperties3.isForceShutdownOnVmExit();
        atomikosProperties3.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean9 = properties2.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet10 = properties2.entrySet();
        java.lang.String str11 = properties2.toString();
        java.util.Collection<java.lang.Object> objCollection12 = properties2.values();
        java.util.Properties properties13 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.lang.Object obj19 = properties16.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        java.util.Properties properties23 = atomikosProperties21.asProperties();
        java.lang.Object obj24 = properties23.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        boolean boolean31 = atomikosProperties25.isEnableLogging();
        atomikosProperties25.transactionManagerUniqueName = "";
        atomikosProperties25.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        java.lang.String str42 = atomikosProperties36.getService();
        java.lang.Object obj43 = properties23.getOrDefault((java.lang.Object) atomikosProperties25, (java.lang.Object) atomikosProperties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        int int46 = atomikosProperties44.getMaxActives();
        java.lang.String str47 = atomikosProperties44.logBaseDir;
        java.lang.Object obj49 = properties23.putIfAbsent((java.lang.Object) atomikosProperties44, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        boolean boolean54 = atomikosProperties50.isSerialJtaTransactions();
        atomikosProperties50.setEnableLogging(false);
        boolean boolean57 = properties16.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties50);
        atomikosProperties50.logBaseName = "{}";
        long long60 = atomikosProperties50.getDefaultJtaTimeout();
        boolean boolean61 = atomikosProperties50.isThreadedTwoPhaseCommit();
        atomikosProperties50.threadedTwoPhaseCommit = true;
        atomikosProperties50.setCheckpointInterval((long) 100);
        atomikosProperties50.defaultJtaTimeout = 1;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties68 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str69 = atomikosProperties68.logBaseDir;
        atomikosProperties68.setTransactionManagerUniqueName("");
        int int72 = atomikosProperties68.getMaxActives();
        atomikosProperties68.logBaseName = "tmlog";
        int int75 = atomikosProperties68.maxActives;
        atomikosProperties68.enableLogging = true;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long79 = atomikosProperties78.checkpointInterval;
        java.util.Properties properties80 = atomikosProperties78.asProperties();
        properties80.clear();
        java.util.Properties properties82 = new java.util.Properties(properties80);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties83 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str84 = atomikosProperties83.logBaseDir;
        atomikosProperties83.setTransactionManagerUniqueName("");
        int int87 = atomikosProperties83.getMaxActives();
        atomikosProperties83.logBaseName = "tmlog";
        int int90 = atomikosProperties83.maxActives;
        boolean boolean91 = properties80.containsValue((java.lang.Object) int90);
        java.util.Properties properties92 = new java.util.Properties(properties80);
        java.util.Collection<java.lang.Object> objCollection93 = properties80.values();
        boolean boolean94 = properties2.replace((java.lang.Object) 1, (java.lang.Object) atomikosProperties68, (java.lang.Object) properties80);
        java.util.Properties properties95 = new java.util.Properties(properties80);
        boolean boolean97 = properties80.equals((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Enumeration<?> wildcardEnumeration98 = properties80.propertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEntrySet10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str11, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objCollection12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "{}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertNotNull(properties23);
        org.junit.Assert.assertNotNull(obj24);
// flaky:         org.junit.Assert.assertEquals(obj24.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 50 + "'", int46 == 50);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10000L + "'", long60 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 50 + "'", int72 == 50);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 50 + "'", int75 == 50);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 500L + "'", long79 == 500L);
        org.junit.Assert.assertNotNull(properties80);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 50 + "'", int87 == 50);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 50 + "'", int90 == 50);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objCollection93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration98);
    }

    @Test
    public void test8941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8941");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        properties21.clear();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.lang.Object obj26 = properties23.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str27 = properties23.toString();
        java.lang.Object obj30 = properties23.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet31 = properties23.keySet();
        java.lang.Object obj32 = properties10.remove((java.lang.Object) properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        java.lang.Object obj38 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        boolean boolean43 = properties41.isEmpty();
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<?> wildcardEnumeration46 = properties35.propertyNames();
        java.lang.Object obj47 = properties10.get((java.lang.Object) properties35);
        java.util.Collection<java.lang.Object> objCollection48 = properties35.values();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj26, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(wildcardEnumeration46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNotNull(objCollection48);
    }

    @Test
    public void test8942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8942");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        properties21.clear();
        java.util.Properties properties23 = new java.util.Properties(properties21);
        java.lang.Object obj26 = properties23.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str27 = properties23.toString();
        java.lang.Object obj30 = properties23.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet31 = properties23.keySet();
        java.lang.Object obj32 = properties10.remove((java.lang.Object) properties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        java.lang.Object obj38 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        boolean boolean43 = properties41.isEmpty();
        java.util.Collection<java.lang.Object> objCollection44 = properties41.values();
        properties35.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties41);
        java.util.Enumeration<?> wildcardEnumeration46 = properties35.propertyNames();
        java.lang.Object obj47 = properties10.get((java.lang.Object) properties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        java.util.Properties properties50 = atomikosProperties48.asProperties();
        properties50.clear();
        boolean boolean52 = properties50.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        atomikosProperties53.setTransactionManagerUniqueName("");
        int int57 = atomikosProperties53.getMaxActives();
        java.lang.String str58 = atomikosProperties53.transactionManagerUniqueName;
        boolean boolean59 = properties50.containsValue((java.lang.Object) atomikosProperties53);
        atomikosProperties53.service = "tmlog";
        boolean boolean62 = atomikosProperties53.serialJtaTransactions;
        boolean boolean63 = properties35.containsKey((java.lang.Object) boolean62);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet64 = properties35.entrySet();
        properties35.clear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj26, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{}" + "'", str27, "{}");
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(objSet31);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{}");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertNotNull(wildcardEnumeration46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertNotNull(properties50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 50 + "'", int57 == 50);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objEntrySet64);
    }

    @Test
    public void test8943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8943");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        boolean boolean25 = atomikosProperties19.isEnableLogging();
        atomikosProperties19.transactionManagerUniqueName = "";
        atomikosProperties19.setEnableLogging(false);
        boolean boolean30 = atomikosProperties19.isEnableLogging();
        boolean boolean31 = properties7.remove((java.lang.Object) (short) 1, (java.lang.Object) boolean30);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.Object obj35 = properties7.getOrDefault((java.lang.Object) (short) -1, (java.lang.Object) str34);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        atomikosProperties36.setMaxActives((int) (byte) -1);
        boolean boolean42 = atomikosProperties36.isEnableLogging();
        java.lang.Class<?> wildcardClass43 = atomikosProperties36.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties44.setCheckpointInterval((long) 100);
        boolean boolean47 = properties7.remove((java.lang.Object) wildcardClass43, (java.lang.Object) atomikosProperties44);
        atomikosProperties44.threadedTwoPhaseCommit = true;
        atomikosProperties44.logBaseName = "";
        java.lang.String str52 = atomikosProperties44.getLogBaseName();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test8944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8944");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties12.setCheckpointInterval((long) 100);
        atomikosProperties12.maxActives = (byte) 0;
        atomikosProperties12.setTransactionManagerUniqueName("");
        java.lang.Object obj19 = properties2.get((java.lang.Object) atomikosProperties12);
        boolean boolean21 = properties2.containsValue((java.lang.Object) 100.0d);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        properties24.clear();
        boolean boolean26 = properties24.isEmpty();
        java.lang.Object obj27 = properties24.clone();
        java.util.Set<java.lang.Object> objSet28 = properties24.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties29.setCheckpointInterval((long) 100);
        java.lang.String str32 = atomikosProperties29.getService();
        atomikosProperties29.defaultJtaTimeout = 'a';
        atomikosProperties29.enableLogging = false;
        atomikosProperties29.threadedTwoPhaseCommit = false;
        int int39 = atomikosProperties29.maxActives;
        atomikosProperties29.setThreadedTwoPhaseCommit(false);
        java.lang.Object obj42 = properties2.getOrDefault((java.lang.Object) properties24, (java.lang.Object) atomikosProperties29);
        java.util.Enumeration<java.lang.Object> objEnumeration43 = properties24.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.logBaseDir;
        java.lang.String str46 = atomikosProperties44.logBaseName;
        java.lang.String str47 = atomikosProperties44.getLogBaseDir();
        long long48 = atomikosProperties44.getDefaultJtaTimeout();
        atomikosProperties44.defaultJtaTimeout = 50;
        java.lang.String str51 = atomikosProperties44.getTransactionManagerUniqueName();
        atomikosProperties44.threadedTwoPhaseCommit = false;
        atomikosProperties44.forceShutdownOnVmExit = false;
        java.lang.String str56 = atomikosProperties44.transactionManagerUniqueName;
        java.lang.String str57 = atomikosProperties44.service;
        java.lang.Object obj58 = properties24.remove((java.lang.Object) atomikosProperties44);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        atomikosProperties59.setMaxActives((int) (byte) -1);
        boolean boolean65 = atomikosProperties59.isEnableLogging();
        long long66 = atomikosProperties59.checkpointInterval;
        atomikosProperties59.setCheckpointInterval(10L);
        boolean boolean69 = atomikosProperties59.serialJtaTransactions;
        atomikosProperties59.serialJtaTransactions = false;
        atomikosProperties59.setSerialJtaTransactions(false);
        boolean boolean74 = properties24.containsValue((java.lang.Object) atomikosProperties59);
        int int75 = atomikosProperties59.maxActives;
        java.util.Properties properties76 = atomikosProperties59.asProperties();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "{}");
        org.junit.Assert.assertNotNull(objSet28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(objEnumeration43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tmlog" + "'", str46, "tmlog");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(properties76);
    }

    @Test
    public void test8945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8945");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties2.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration14 = properties2.keys();
        java.lang.Object obj15 = properties2.clone();
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        properties19.clear();
        boolean boolean21 = properties19.isEmpty();
        java.lang.Object obj22 = properties19.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long25 = atomikosProperties24.checkpointInterval;
        atomikosProperties24.forceShutdownOnVmExit = false;
        atomikosProperties24.setTransactionManagerUniqueName("");
        java.lang.Object obj30 = properties19.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties24);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties32 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long33 = atomikosProperties32.checkpointInterval;
        java.util.Properties properties34 = atomikosProperties32.asProperties();
        boolean boolean36 = properties34.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        java.lang.Object obj42 = properties39.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.String str46 = atomikosProperties43.getLogBaseDir();
        atomikosProperties43.setLogBaseName("");
        java.lang.Object obj49 = properties34.replace((java.lang.Object) properties39, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long51 = atomikosProperties50.checkpointInterval;
        java.util.Properties properties52 = atomikosProperties50.asProperties();
        java.lang.Object obj53 = properties52.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str55 = atomikosProperties54.logBaseDir;
        java.lang.String str56 = atomikosProperties54.logBaseName;
        java.lang.String str57 = atomikosProperties54.getLogBaseDir();
        atomikosProperties54.setMaxActives((int) (byte) -1);
        boolean boolean60 = atomikosProperties54.isEnableLogging();
        atomikosProperties54.transactionManagerUniqueName = "";
        atomikosProperties54.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str66 = atomikosProperties65.logBaseDir;
        java.lang.String str67 = atomikosProperties65.logBaseName;
        java.lang.String str68 = atomikosProperties65.getLogBaseDir();
        atomikosProperties65.setMaxActives((int) (byte) -1);
        java.lang.String str71 = atomikosProperties65.getService();
        java.lang.Object obj72 = properties52.getOrDefault((java.lang.Object) atomikosProperties54, (java.lang.Object) atomikosProperties65);
        boolean boolean73 = properties19.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties34, (java.lang.Object) atomikosProperties65);
        java.lang.Class<?> wildcardClass74 = properties19.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.logBaseDir;
        atomikosProperties75.setTransactionManagerUniqueName("");
        int int79 = atomikosProperties75.getMaxActives();
        java.lang.String str80 = atomikosProperties75.getLogBaseDir();
        boolean boolean81 = atomikosProperties75.isEnableLogging();
        long long82 = atomikosProperties75.getDefaultJtaTimeout();
        atomikosProperties75.service = "";
        int int85 = atomikosProperties75.maxActives;
        java.lang.Object obj86 = properties2.replace((java.lang.Object) wildcardClass74, (java.lang.Object) atomikosProperties75);
        java.util.Enumeration<?> wildcardEnumeration87 = properties2.propertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertNotNull(objEnumeration14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{}");
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertNotNull(properties34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 500L + "'", long51 == 500L);
        org.junit.Assert.assertNotNull(properties52);
        org.junit.Assert.assertNotNull(obj53);
// flaky:         org.junit.Assert.assertEquals(obj53.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tmlog" + "'", str56, "tmlog");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "tmlog" + "'", str67, "tmlog");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 50 + "'", int79 == 50);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 50 + "'", int85 == 50);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(wildcardEnumeration87);
    }

    @Test
    public void test8946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8946");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        java.util.Properties properties16 = new java.util.Properties(properties14);
        java.lang.Object obj19 = properties16.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str20 = properties16.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        boolean boolean23 = atomikosProperties21.isSerialJtaTransactions();
        atomikosProperties21.maxTimeout = 100;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.Object obj27 = properties2.replace((java.lang.Object) properties16, (java.lang.Object) int26);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet28 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        boolean boolean33 = properties31.containsValue((java.lang.Object) 100L);
        java.lang.String str34 = properties31.toString();
        java.lang.Object obj37 = properties31.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setCheckpointInterval((long) 100);
        boolean boolean41 = atomikosProperties38.isForceShutdownOnVmExit();
        atomikosProperties38.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long44 = atomikosProperties38.getDefaultJtaTimeout();
        long long45 = atomikosProperties38.getMaxTimeout();
        atomikosProperties38.logBaseName = "tmlog";
        long long48 = atomikosProperties38.getDefaultJtaTimeout();
        atomikosProperties38.setForceShutdownOnVmExit(true);
        atomikosProperties38.maxTimeout = (short) 100;
        java.lang.Object obj53 = properties31.remove((java.lang.Object) atomikosProperties38);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.util.Set<java.lang.String> strSet55 = properties2.stringPropertyNames();
        java.io.OutputStream outputStream56 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(outputStream56, "{{com.atomikos.icatch.tmlog=0.0, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}={}, com.atomikos.icatch.{}=false}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEntrySet28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str34, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 300000L + "'", long45 == 300000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(strSet55);
    }

    @Test
    public void test8947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8947");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        long long4 = atomikosProperties0.defaultJtaTimeout;
        boolean boolean5 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.checkpointInterval = 0L;
        long long8 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.service = "";
        long long11 = atomikosProperties0.getDefaultJtaTimeout();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
    }

    @Test
    public void test8948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8948");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection6 = properties2.values();
        java.util.Collection<java.lang.Object> objCollection7 = properties2.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        boolean boolean12 = properties10.isEmpty();
        java.lang.Object obj13 = properties10.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        properties16.clear();
        boolean boolean18 = properties16.isEmpty();
        java.util.Collection<java.lang.Object> objCollection19 = properties16.values();
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Enumeration<?> wildcardEnumeration21 = properties16.propertyNames();
        java.util.Properties properties22 = new java.util.Properties(properties16);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties22);
        int int24 = properties2.size();
        boolean boolean25 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setMaxActives((int) (byte) -1);
        java.lang.String str32 = atomikosProperties26.getService();
        atomikosProperties26.setDefaultJtaTimeout((long) (-1));
        int int35 = atomikosProperties26.maxActives;
        long long36 = atomikosProperties26.maxTimeout;
        atomikosProperties26.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long40 = atomikosProperties39.checkpointInterval;
        java.util.Properties properties41 = atomikosProperties39.asProperties();
        properties41.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        atomikosProperties43.setTransactionManagerUniqueName("");
        int int47 = atomikosProperties43.getMaxActives();
        boolean boolean48 = properties41.containsValue((java.lang.Object) int47);
        java.lang.Object obj51 = properties41.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties52 = new java.util.Properties(properties41);
        int int53 = properties41.size();
        java.util.Enumeration<java.lang.Object> objEnumeration54 = properties41.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties55 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str56 = atomikosProperties55.logBaseDir;
        java.lang.String str57 = atomikosProperties55.logBaseName;
        java.lang.String str58 = atomikosProperties55.getLogBaseDir();
        atomikosProperties55.setMaxActives((int) (byte) -1);
        boolean boolean61 = atomikosProperties55.isEnableLogging();
        long long62 = atomikosProperties55.checkpointInterval;
        atomikosProperties55.setCheckpointInterval(10L);
        boolean boolean65 = atomikosProperties55.isForceShutdownOnVmExit();
        atomikosProperties55.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean68 = atomikosProperties55.forceShutdownOnVmExit;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties69 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str70 = atomikosProperties69.logBaseDir;
        java.lang.String str71 = atomikosProperties69.logBaseName;
        java.lang.String str72 = atomikosProperties69.getLogBaseDir();
        boolean boolean73 = atomikosProperties69.isSerialJtaTransactions();
        atomikosProperties69.setEnableLogging(false);
        boolean boolean76 = atomikosProperties69.serialJtaTransactions;
        long long77 = atomikosProperties69.defaultJtaTimeout;
        java.lang.String str78 = atomikosProperties69.logBaseName;
        java.lang.String str79 = atomikosProperties69.getLogBaseName();
        atomikosProperties69.setLogBaseName("");
        java.lang.Object obj82 = properties41.put((java.lang.Object) boolean68, (java.lang.Object) atomikosProperties69);
        java.util.Enumeration<java.lang.Object> objEnumeration83 = properties41.elements();
        java.util.Collection<java.lang.Object> objCollection84 = properties41.values();
        java.lang.Object obj85 = properties2.replace((java.lang.Object) atomikosProperties26, (java.lang.Object) properties41);
        boolean boolean86 = properties2.isEmpty();
        java.util.Enumeration<java.lang.Object> objEnumeration87 = properties2.elements();
        boolean boolean89 = properties2.equals((java.lang.Object) (byte) 10);
        java.lang.Object obj90 = properties2.clone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(objCollection7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "{}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objCollection19);
        org.junit.Assert.assertNotNull(wildcardEnumeration21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 300000L + "'", long36 == 300000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 500L + "'", long40 == 500L);
        org.junit.Assert.assertNotNull(properties41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objEnumeration54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tmlog" + "'", str57, "tmlog");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "tmlog" + "'", str71, "tmlog");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10000L + "'", long77 == 10000L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "tmlog" + "'", str78, "tmlog");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "tmlog" + "'", str79, "tmlog");
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(objEnumeration83);
        org.junit.Assert.assertNotNull(objCollection84);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objEnumeration87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(obj90);
// flaky:         org.junit.Assert.assertEquals(obj90.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8949");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        properties7.clear();
        boolean boolean9 = properties7.isEmpty();
        java.lang.Object obj10 = properties7.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        java.util.Properties properties13 = atomikosProperties11.asProperties();
        properties13.clear();
        boolean boolean15 = properties13.isEmpty();
        java.util.Collection<java.lang.Object> objCollection16 = properties13.values();
        properties7.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties13);
        java.util.Enumeration<?> wildcardEnumeration18 = properties7.propertyNames();
        java.util.Enumeration<java.lang.Object> objEnumeration19 = properties7.keys();
        java.util.Collection<java.lang.Object> objCollection20 = properties7.values();
        properties7.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties22.setCheckpointInterval((long) 100);
        atomikosProperties22.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long28 = atomikosProperties27.checkpointInterval;
        java.util.Properties properties29 = atomikosProperties27.asProperties();
        properties29.clear();
        boolean boolean31 = properties29.isEmpty();
        java.lang.Object obj32 = properties29.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        java.lang.Object obj37 = properties36.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        boolean boolean44 = atomikosProperties38.isEnableLogging();
        atomikosProperties38.transactionManagerUniqueName = "";
        atomikosProperties38.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties49 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str50 = atomikosProperties49.logBaseDir;
        java.lang.String str51 = atomikosProperties49.logBaseName;
        java.lang.String str52 = atomikosProperties49.getLogBaseDir();
        atomikosProperties49.setMaxActives((int) (byte) -1);
        java.lang.String str55 = atomikosProperties49.getService();
        java.lang.Object obj56 = properties36.getOrDefault((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties49);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long58 = atomikosProperties57.checkpointInterval;
        int int59 = atomikosProperties57.getMaxActives();
        java.lang.String str60 = atomikosProperties57.logBaseDir;
        java.lang.Object obj62 = properties36.putIfAbsent((java.lang.Object) atomikosProperties57, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        boolean boolean67 = atomikosProperties63.isSerialJtaTransactions();
        atomikosProperties63.setEnableLogging(false);
        boolean boolean70 = properties29.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties63);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long72 = atomikosProperties71.checkpointInterval;
        java.util.Properties properties73 = atomikosProperties71.asProperties();
        properties73.clear();
        java.util.Properties properties75 = new java.util.Properties(properties73);
        java.lang.Object obj78 = properties75.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str79 = properties75.toString();
        boolean boolean80 = properties29.containsValue((java.lang.Object) properties75);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties82 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long83 = atomikosProperties82.checkpointInterval;
        boolean boolean84 = atomikosProperties82.isSerialJtaTransactions();
        atomikosProperties82.transactionManagerUniqueName = "";
        atomikosProperties22.set(properties75, "{}", (java.lang.Object) "");
        int int88 = properties75.size();
        java.util.Enumeration<java.lang.Object> objEnumeration89 = properties75.keys();
        java.util.Enumeration<?> wildcardEnumeration90 = properties75.propertyNames();
        java.lang.Object obj91 = properties4.putIfAbsent((java.lang.Object) properties7, (java.lang.Object) properties75);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet92 = properties75.entrySet();
        java.lang.Object obj93 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj94 = properties75.get(obj93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{}");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertNotNull(properties13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(objCollection16);
        org.junit.Assert.assertNotNull(wildcardEnumeration18);
        org.junit.Assert.assertNotNull(objEnumeration19);
        org.junit.Assert.assertNotNull(objCollection20);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 500L + "'", long28 == 500L);
        org.junit.Assert.assertNotNull(properties29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "{}");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 500L + "'", long58 == 500L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 50 + "'", int59 == 50);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 500L + "'", long72 == 500L);
        org.junit.Assert.assertNotNull(properties73);
        org.junit.Assert.assertEquals("'" + obj78 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj78, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{}" + "'", str79, "{}");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 500L + "'", long83 == 500L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(objEnumeration89);
        org.junit.Assert.assertNotNull(wildcardEnumeration90);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNotNull(objEntrySet92);
    }

    @Test
    public void test8950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8950");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        long long4 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.setCheckpointInterval((long) 10);
        int int7 = atomikosProperties0.maxActives;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        long long10 = atomikosProperties8.getDefaultJtaTimeout();
        java.util.Properties properties11 = atomikosProperties8.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties13.setCheckpointInterval((long) 100);
        atomikosProperties13.maxActives = (byte) 0;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        properties20.clear();
        boolean boolean22 = properties20.isEmpty();
        java.lang.Object obj23 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long26 = atomikosProperties25.checkpointInterval;
        java.util.Properties properties27 = atomikosProperties25.asProperties();
        java.lang.Object obj28 = properties27.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setMaxActives((int) (byte) -1);
        boolean boolean35 = atomikosProperties29.isEnableLogging();
        atomikosProperties29.transactionManagerUniqueName = "";
        atomikosProperties29.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str41 = atomikosProperties40.logBaseDir;
        java.lang.String str42 = atomikosProperties40.logBaseName;
        java.lang.String str43 = atomikosProperties40.getLogBaseDir();
        atomikosProperties40.setMaxActives((int) (byte) -1);
        java.lang.String str46 = atomikosProperties40.getService();
        java.lang.Object obj47 = properties27.getOrDefault((java.lang.Object) atomikosProperties29, (java.lang.Object) atomikosProperties40);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long49 = atomikosProperties48.checkpointInterval;
        int int50 = atomikosProperties48.getMaxActives();
        java.lang.String str51 = atomikosProperties48.logBaseDir;
        java.lang.Object obj53 = properties27.putIfAbsent((java.lang.Object) atomikosProperties48, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str55 = atomikosProperties54.logBaseDir;
        java.lang.String str56 = atomikosProperties54.logBaseName;
        java.lang.String str57 = atomikosProperties54.getLogBaseDir();
        boolean boolean58 = atomikosProperties54.isSerialJtaTransactions();
        atomikosProperties54.setEnableLogging(false);
        boolean boolean61 = properties20.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties54);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long63 = atomikosProperties62.checkpointInterval;
        java.util.Properties properties64 = atomikosProperties62.asProperties();
        properties64.clear();
        java.util.Properties properties66 = new java.util.Properties(properties64);
        java.lang.Object obj69 = properties66.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str70 = properties66.toString();
        boolean boolean71 = properties20.containsValue((java.lang.Object) properties66);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long74 = atomikosProperties73.checkpointInterval;
        boolean boolean75 = atomikosProperties73.isSerialJtaTransactions();
        atomikosProperties73.transactionManagerUniqueName = "";
        atomikosProperties13.set(properties66, "{}", (java.lang.Object) "");
        java.lang.Object obj81 = properties66.setProperty("tmlog", "hi!");
        atomikosProperties0.set(properties11, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}", (java.lang.Object) "tmlog");
        boolean boolean83 = properties11.isEmpty();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10000L + "'", long4 == 10000L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "{}");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 500L + "'", long26 == 500L);
        org.junit.Assert.assertNotNull(properties27);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "tmlog" + "'", str42, "tmlog");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 500L + "'", long49 == 500L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tmlog" + "'", str56, "tmlog");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 500L + "'", long63 == 500L);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj69, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{}" + "'", str70, "{}");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 500L + "'", long74 == 500L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test8951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8951");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.getDefaultJtaTimeout();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        atomikosProperties0.checkpointInterval = (byte) 1;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        boolean boolean16 = atomikosProperties0.isThreadedTwoPhaseCommit();
        int int17 = atomikosProperties0.maxActives;
        atomikosProperties0.defaultJtaTimeout = 1;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10000L + "'", long11 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
    }

    @Test
    public void test8952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8952");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean3 = atomikosProperties0.isForceShutdownOnVmExit();
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long6 = atomikosProperties0.getDefaultJtaTimeout();
        long long7 = atomikosProperties0.getMaxTimeout();
        atomikosProperties0.logBaseName = "tmlog";
        long long10 = atomikosProperties0.defaultJtaTimeout;
        long long11 = atomikosProperties0.maxTimeout;
        java.lang.String str12 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str15 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10000L + "'", long6 == 10000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 300000L + "'", long7 == 300000L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10000L + "'", long10 == 10000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 300000L + "'", long11 == 300000L);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str15, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8953");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        atomikosProperties15.setThreadedTwoPhaseCommit(false);
        boolean boolean20 = properties2.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        atomikosProperties22.setDefaultJtaTimeout((long) (-1));
        int int31 = atomikosProperties22.maxActives;
        atomikosProperties22.setDefaultJtaTimeout(1L);
        java.lang.String str34 = atomikosProperties22.getService();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties35.enableLogging = true;
        boolean boolean38 = atomikosProperties35.forceShutdownOnVmExit;
        java.lang.Object obj39 = properties2.replace((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties35);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties40 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long41 = atomikosProperties40.checkpointInterval;
        java.util.Properties properties42 = atomikosProperties40.asProperties();
        properties42.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str45 = atomikosProperties44.logBaseDir;
        atomikosProperties44.setTransactionManagerUniqueName("");
        int int48 = atomikosProperties44.getMaxActives();
        boolean boolean49 = properties42.containsValue((java.lang.Object) int48);
        java.lang.Object obj52 = properties42.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties53 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str54 = atomikosProperties53.logBaseDir;
        java.lang.String str55 = atomikosProperties53.logBaseName;
        java.lang.String str56 = atomikosProperties53.getLogBaseDir();
        atomikosProperties53.setMaxActives((int) (byte) -1);
        boolean boolean59 = atomikosProperties53.isEnableLogging();
        long long60 = atomikosProperties53.checkpointInterval;
        atomikosProperties53.setCheckpointInterval(10L);
        boolean boolean63 = atomikosProperties53.serialJtaTransactions;
        java.lang.Object obj64 = properties2.put((java.lang.Object) properties42, (java.lang.Object) boolean63);
        java.io.Writer writer65 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.store(writer65, "{com.atomikos.icatch.{}=false, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 500L + "'", long41 == 500L);
        org.junit.Assert.assertNotNull(properties42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "tmlog" + "'", str55, "tmlog");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj64);
    }

    @Test
    public void test8954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8954");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.setCheckpointInterval((long) 100);
        java.lang.String str3 = atomikosProperties0.getService();
        atomikosProperties0.defaultJtaTimeout = 'a';
        atomikosProperties0.enableLogging = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        atomikosProperties0.setMaxActives(10);
        boolean boolean12 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long13 = atomikosProperties0.getMaxTimeout();
        java.lang.String str14 = atomikosProperties0.getService();
        boolean boolean15 = atomikosProperties0.enableLogging;
        atomikosProperties0.maxActives = (short) 1;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=100, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.log_base_dir={}, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test8955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8955");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        java.lang.String str23 = atomikosProperties15.service;
        atomikosProperties15.logBaseDir = "tmlog";
        atomikosProperties15.maxActives = (byte) 1;
        boolean boolean28 = atomikosProperties15.forceShutdownOnVmExit;
        atomikosProperties15.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test8956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8956");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        java.util.Properties properties5 = new java.util.Properties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        properties9.clear();
        boolean boolean11 = properties9.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        atomikosProperties12.setTransactionManagerUniqueName("");
        int int16 = atomikosProperties12.getMaxActives();
        java.lang.String str17 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean18 = properties9.containsValue((java.lang.Object) atomikosProperties12);
        boolean boolean19 = atomikosProperties12.forceShutdownOnVmExit;
        atomikosProperties0.set(properties5, "{}", (java.lang.Object) boolean19);
        java.util.Properties properties21 = new java.util.Properties(properties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        atomikosProperties23.setMaxActives((int) (byte) -1);
        java.lang.String str29 = atomikosProperties23.getService();
        long long30 = atomikosProperties23.defaultJtaTimeout;
        java.lang.String str31 = atomikosProperties23.logBaseName;
        java.lang.String str32 = atomikosProperties23.logBaseDir;
        java.lang.Class<?> wildcardClass33 = atomikosProperties23.getClass();
        java.lang.Object obj34 = properties21.put((java.lang.Object) false, (java.lang.Object) atomikosProperties23);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        java.lang.String str37 = atomikosProperties35.logBaseName;
        java.lang.String str38 = atomikosProperties35.getLogBaseDir();
        boolean boolean39 = atomikosProperties35.isSerialJtaTransactions();
        atomikosProperties35.serialJtaTransactions = true;
        atomikosProperties35.checkpointInterval = (-1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties44 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long45 = atomikosProperties44.checkpointInterval;
        java.util.Properties properties46 = atomikosProperties44.asProperties();
        java.lang.Object obj47 = properties21.putIfAbsent((java.lang.Object) atomikosProperties35, (java.lang.Object) atomikosProperties44);
        atomikosProperties44.transactionManagerUniqueName = "tmlog";
        boolean boolean50 = atomikosProperties44.isEnableLogging();
        java.lang.String str51 = atomikosProperties44.logBaseName;
        atomikosProperties44.setCheckpointInterval((long) 'a');
        atomikosProperties44.setThreadedTwoPhaseCommit(false);
        boolean boolean56 = atomikosProperties44.isEnableLogging();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 50 + "'", int16 == 50);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10000L + "'", long30 == 10000L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "tmlog" + "'", str37, "tmlog");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 500L + "'", long45 == 500L);
        org.junit.Assert.assertNotNull(properties46);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "tmlog" + "'", str51, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test8957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8957");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        atomikosProperties0.serialJtaTransactions = false;
        java.lang.String str18 = atomikosProperties0.logBaseName;
        long long19 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str20 = atomikosProperties0.service;
        atomikosProperties0.logBaseDir = "{-1=1}";
        atomikosProperties0.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties0.setService("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, 500=hi!, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tmlog" + "'", str18, "tmlog");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test8958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8958");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        boolean boolean9 = atomikosProperties0.forceShutdownOnVmExit;
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        java.lang.String str12 = properties10.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        int int13 = properties10.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        java.lang.Object obj17 = properties16.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        java.lang.String str20 = atomikosProperties18.logBaseName;
        java.lang.String str21 = atomikosProperties18.getLogBaseDir();
        atomikosProperties18.setMaxActives((int) (byte) -1);
        boolean boolean24 = atomikosProperties18.isEnableLogging();
        atomikosProperties18.transactionManagerUniqueName = "";
        atomikosProperties18.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setMaxActives((int) (byte) -1);
        java.lang.String str35 = atomikosProperties29.getService();
        java.lang.Object obj36 = properties16.getOrDefault((java.lang.Object) atomikosProperties18, (java.lang.Object) atomikosProperties29);
        int int37 = properties16.size();
        java.lang.String str39 = properties16.getProperty("");
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties16.keys();
        java.lang.Object obj43 = properties16.setProperty("{}", "");
        java.lang.Object obj46 = properties16.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        properties10.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties16);
        java.util.Enumeration<?> wildcardEnumeration48 = properties16.propertyNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(wildcardEnumeration48);
    }

    @Test
    public void test8959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8959");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        java.io.InputStream inputStream29 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties2.load(inputStream29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test8960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8960");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean3 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.setSerialJtaTransactions(true);
        java.lang.String str6 = atomikosProperties0.logBaseDir;
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test8961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8961");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        int int25 = atomikosProperties23.getMaxActives();
        java.lang.String str26 = atomikosProperties23.logBaseDir;
        java.lang.Object obj28 = properties2.putIfAbsent((java.lang.Object) atomikosProperties23, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        atomikosProperties29.setService("");
        boolean boolean34 = atomikosProperties29.threadedTwoPhaseCommit;
        java.lang.String str35 = atomikosProperties29.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties36 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str37 = atomikosProperties36.logBaseDir;
        java.lang.String str38 = atomikosProperties36.logBaseName;
        java.lang.String str39 = atomikosProperties36.getLogBaseDir();
        boolean boolean40 = atomikosProperties36.isSerialJtaTransactions();
        atomikosProperties36.serialJtaTransactions = true;
        java.lang.String str43 = atomikosProperties36.getService();
        java.lang.Object obj44 = properties2.putIfAbsent((java.lang.Object) str35, (java.lang.Object) atomikosProperties36);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        properties47.clear();
        boolean boolean49 = properties47.isEmpty();
        java.lang.Object obj50 = properties47.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long52 = atomikosProperties51.checkpointInterval;
        java.util.Properties properties53 = atomikosProperties51.asProperties();
        properties53.clear();
        boolean boolean55 = properties53.isEmpty();
        java.util.Collection<java.lang.Object> objCollection56 = properties53.values();
        properties47.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties53);
        java.util.Collection<java.lang.Object> objCollection58 = properties47.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        java.util.Properties properties61 = atomikosProperties59.asProperties();
        java.lang.Object obj62 = properties61.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties63 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str64 = atomikosProperties63.logBaseDir;
        java.lang.String str65 = atomikosProperties63.logBaseName;
        java.lang.String str66 = atomikosProperties63.getLogBaseDir();
        atomikosProperties63.setMaxActives((int) (byte) -1);
        boolean boolean69 = atomikosProperties63.isEnableLogging();
        atomikosProperties63.transactionManagerUniqueName = "";
        atomikosProperties63.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties74 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str75 = atomikosProperties74.logBaseDir;
        java.lang.String str76 = atomikosProperties74.logBaseName;
        java.lang.String str77 = atomikosProperties74.getLogBaseDir();
        atomikosProperties74.setMaxActives((int) (byte) -1);
        java.lang.String str80 = atomikosProperties74.getService();
        java.lang.Object obj81 = properties61.getOrDefault((java.lang.Object) atomikosProperties63, (java.lang.Object) atomikosProperties74);
        boolean boolean82 = atomikosProperties63.isForceShutdownOnVmExit();
        java.lang.Object obj83 = properties2.getOrDefault((java.lang.Object) properties47, (java.lang.Object) boolean82);
        java.io.InputStream inputStream84 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties47.loadFromXML(inputStream84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tmlog" + "'", str38, "tmlog");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "{}");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 500L + "'", long52 == 500L);
        org.junit.Assert.assertNotNull(properties53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objCollection56);
        org.junit.Assert.assertNotNull(objCollection58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertNotNull(obj62);
// flaky:         org.junit.Assert.assertEquals(obj62.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "tmlog" + "'", str65, "tmlog");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "tmlog" + "'", str76, "tmlog");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + obj83 + "' != '" + false + "'", obj83, false);
    }

    @Test
    public void test8962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8962");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        properties6.clear();
        boolean boolean8 = properties6.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long10 = atomikosProperties9.checkpointInterval;
        java.util.Properties properties11 = atomikosProperties9.asProperties();
        java.lang.Object obj14 = properties11.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection15 = properties11.values();
        boolean boolean16 = properties6.containsKey((java.lang.Object) objCollection15);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str18 = atomikosProperties17.logBaseDir;
        java.lang.String str19 = atomikosProperties17.logBaseName;
        java.lang.String str20 = atomikosProperties17.getLogBaseName();
        int int21 = atomikosProperties17.getMaxActives();
        atomikosProperties17.setLogBaseDir("hi!");
        java.lang.String str24 = atomikosProperties17.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        atomikosProperties25.setTransactionManagerUniqueName("");
        int int29 = atomikosProperties25.getMaxActives();
        java.lang.String str30 = atomikosProperties25.getLogBaseDir();
        java.lang.String str31 = atomikosProperties25.logBaseName;
        java.lang.Object obj32 = properties6.replace((java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties25);
        boolean boolean33 = properties6.isEmpty();
        java.lang.Object obj34 = properties6.clone();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet35 = properties6.entrySet();
        java.lang.Object obj36 = properties6.clone();
        boolean boolean37 = properties2.equals((java.lang.Object) properties6);
        java.lang.Class<?> wildcardClass38 = properties6.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 500L + "'", long10 == 500L);
        org.junit.Assert.assertNotNull(properties11);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(objCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tmlog" + "'", str19, "tmlog");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 50 + "'", int21 == 50);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 50 + "'", int29 == 50);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "{}");
        org.junit.Assert.assertNotNull(objEntrySet35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{}");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test8963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8963");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        boolean boolean11 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.maxActives = 1;
        atomikosProperties0.defaultJtaTimeout = 300000L;
        atomikosProperties0.logBaseDir = "{}";
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test8964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8964");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        int int2 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setCheckpointInterval(1L);
        atomikosProperties0.setService("{}");
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.maxTimeout = (short) 100;
        boolean boolean11 = atomikosProperties0.enableLogging;
        java.lang.String str12 = atomikosProperties0.service;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 50 + "'", int2 == 50);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
    }

    @Test
    public void test8965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8965");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        atomikosProperties0.setService("");
        boolean boolean5 = atomikosProperties0.threadedTwoPhaseCommit;
        int int6 = atomikosProperties0.getMaxActives();
        boolean boolean7 = atomikosProperties0.isEnableLogging();
        java.lang.String str8 = atomikosProperties0.getTransactionManagerUniqueName();
        atomikosProperties0.maxTimeout = 1;
        atomikosProperties0.transactionManagerUniqueName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=false, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.service=hi!, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}";
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test8966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8966");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        atomikosProperties0.transactionManagerUniqueName = "";
        atomikosProperties0.setEnableLogging(false);
        long long11 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.setMaxTimeout((long) (short) 10);
        atomikosProperties0.defaultJtaTimeout = 50;
        java.lang.String str16 = atomikosProperties0.getLogBaseName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
    }

    @Test
    public void test8967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8967");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.lang.Object obj12 = properties2.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties13 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str15 = atomikosProperties14.logBaseDir;
        java.lang.String str16 = atomikosProperties14.logBaseName;
        java.lang.String str17 = atomikosProperties14.getLogBaseDir();
        boolean boolean18 = atomikosProperties14.isSerialJtaTransactions();
        atomikosProperties14.setLogBaseName("");
        atomikosProperties14.setTransactionManagerUniqueName("tmlog");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        atomikosProperties23.setTransactionManagerUniqueName("");
        int int27 = atomikosProperties23.getMaxActives();
        java.lang.Object obj28 = properties13.replace((java.lang.Object) "tmlog", (java.lang.Object) int27);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        properties31.clear();
        boolean boolean33 = properties31.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str35 = atomikosProperties34.logBaseDir;
        atomikosProperties34.setTransactionManagerUniqueName("");
        int int38 = atomikosProperties34.getMaxActives();
        java.lang.String str39 = atomikosProperties34.transactionManagerUniqueName;
        boolean boolean40 = properties31.containsValue((java.lang.Object) atomikosProperties34);
        java.util.Enumeration<java.lang.Object> objEnumeration41 = properties31.elements();
        java.util.Collection<java.lang.Object> objCollection42 = properties31.values();
        boolean boolean43 = properties13.containsValue((java.lang.Object) objCollection42);
        boolean boolean44 = properties13.isEmpty();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet45 = properties13.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str47 = atomikosProperties46.logBaseDir;
        atomikosProperties46.setTransactionManagerUniqueName("");
        int int50 = atomikosProperties46.getMaxActives();
        java.lang.String str51 = atomikosProperties46.transactionManagerUniqueName;
        atomikosProperties46.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties54 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long55 = atomikosProperties54.checkpointInterval;
        java.util.Properties properties56 = atomikosProperties54.asProperties();
        properties56.clear();
        java.util.Properties properties58 = new java.util.Properties(properties56);
        atomikosProperties46.set(properties56, "tmlog", (java.lang.Object) 0.0d);
        java.util.Properties properties62 = new java.util.Properties(properties56);
        java.lang.String str64 = properties62.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties65 = new java.util.Properties(properties62);
        boolean boolean66 = properties62.isEmpty();
        boolean boolean67 = properties13.contains((java.lang.Object) properties62);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 50 + "'", int27 == 50);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 50 + "'", int38 == 50);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objEnumeration41);
        org.junit.Assert.assertNotNull(objCollection42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objEntrySet45);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 50 + "'", int50 == 50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 500L + "'", long55 == 500L);
        org.junit.Assert.assertNotNull(properties56);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test8968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8968");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties0.enableLogging = true;
        atomikosProperties0.maxActives = (byte) -1;
        boolean boolean5 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setThreadedTwoPhaseCommit(false);
        atomikosProperties0.setTransactionManagerUniqueName("tmlog");
        atomikosProperties0.setEnableLogging(true);
        atomikosProperties0.setEnableLogging(true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test8969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8969");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        java.util.Enumeration<?> wildcardEnumeration13 = properties8.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties14.enableLogging = true;
        atomikosProperties14.maxActives = (byte) -1;
        boolean boolean19 = atomikosProperties14.isForceShutdownOnVmExit();
        boolean boolean20 = properties8.containsValue((java.lang.Object) atomikosProperties14);
        java.lang.String str21 = atomikosProperties14.logBaseName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertNotNull(wildcardEnumeration13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
    }

    @Test
    public void test8970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8970");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        long long2 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties3 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.Object> objSet4 = properties3.keySet();
        int int5 = properties3.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        atomikosProperties6.setTransactionManagerUniqueName("");
        int int10 = atomikosProperties6.getMaxActives();
        java.lang.String str11 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setTransactionManagerUniqueName("");
        atomikosProperties6.setDefaultJtaTimeout(0L);
        java.lang.Class<?> wildcardClass16 = atomikosProperties6.getClass();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        int int19 = atomikosProperties17.getMaxActives();
        java.lang.String str20 = atomikosProperties17.transactionManagerUniqueName;
        long long21 = atomikosProperties17.getCheckpointInterval();
        java.util.Properties properties22 = atomikosProperties17.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long24 = atomikosProperties23.checkpointInterval;
        java.util.Properties properties25 = atomikosProperties23.asProperties();
        java.lang.Object obj26 = properties25.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        atomikosProperties27.setMaxActives((int) (byte) -1);
        boolean boolean33 = atomikosProperties27.isEnableLogging();
        atomikosProperties27.transactionManagerUniqueName = "";
        atomikosProperties27.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        java.lang.String str40 = atomikosProperties38.logBaseName;
        java.lang.String str41 = atomikosProperties38.getLogBaseDir();
        atomikosProperties38.setMaxActives((int) (byte) -1);
        java.lang.String str44 = atomikosProperties38.getService();
        java.lang.Object obj45 = properties25.getOrDefault((java.lang.Object) atomikosProperties27, (java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties46 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long47 = atomikosProperties46.checkpointInterval;
        int int48 = atomikosProperties46.getMaxActives();
        java.lang.String str49 = atomikosProperties46.logBaseDir;
        java.lang.Object obj51 = properties25.putIfAbsent((java.lang.Object) atomikosProperties46, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties52 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str53 = atomikosProperties52.logBaseDir;
        java.lang.String str54 = atomikosProperties52.logBaseName;
        atomikosProperties52.setService("");
        boolean boolean57 = atomikosProperties52.threadedTwoPhaseCommit;
        java.lang.String str58 = atomikosProperties52.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str60 = atomikosProperties59.logBaseDir;
        java.lang.String str61 = atomikosProperties59.logBaseName;
        java.lang.String str62 = atomikosProperties59.getLogBaseDir();
        boolean boolean63 = atomikosProperties59.isSerialJtaTransactions();
        atomikosProperties59.serialJtaTransactions = true;
        java.lang.String str66 = atomikosProperties59.getService();
        java.lang.Object obj67 = properties25.putIfAbsent((java.lang.Object) str58, (java.lang.Object) atomikosProperties59);
        boolean boolean68 = properties3.replace((java.lang.Object) atomikosProperties6, (java.lang.Object) atomikosProperties17, (java.lang.Object) atomikosProperties59);
        atomikosProperties17.setSerialJtaTransactions(true);
        atomikosProperties17.setLogBaseDir("");
        long long73 = atomikosProperties17.maxTimeout;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10000L + "'", long2 == 10000L);
        org.junit.Assert.assertNotNull(properties3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 50 + "'", int19 == 50);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 500L + "'", long24 == 500L);
        org.junit.Assert.assertNotNull(properties25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "tmlog" + "'", str40, "tmlog");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 500L + "'", long47 == 500L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "tmlog" + "'", str54, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "tmlog" + "'", str58, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 300000L + "'", long73 == 300000L);
    }

    @Test
    public void test8971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8971");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        boolean boolean23 = atomikosProperties4.isForceShutdownOnVmExit();
        atomikosProperties4.enableLogging = true;
        atomikosProperties4.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        atomikosProperties4.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test8972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8972");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        boolean boolean6 = atomikosProperties0.isEnableLogging();
        java.lang.String str7 = atomikosProperties0.getLogBaseName();
        atomikosProperties0.setLogBaseName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}");
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.tmlog=0.0}");
        boolean boolean12 = atomikosProperties0.threadedTwoPhaseCommit;
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {}={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tmlog" + "'", str7, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test8973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8973");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        atomikosProperties5.logBaseName = "tmlog";
        int int12 = atomikosProperties5.maxActives;
        boolean boolean13 = properties2.containsValue((java.lang.Object) int12);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        atomikosProperties15.setThreadedTwoPhaseCommit(false);
        boolean boolean20 = properties2.remove((java.lang.Object) 1.0f, (java.lang.Object) false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties21.setCheckpointInterval((long) 100);
        atomikosProperties21.maxActives = (byte) 0;
        java.lang.Object obj26 = properties2.remove((java.lang.Object) atomikosProperties21);
        atomikosProperties21.maxTimeout = 0L;
        atomikosProperties21.threadedTwoPhaseCommit = true;
        atomikosProperties21.threadedTwoPhaseCommit = true;
        boolean boolean33 = atomikosProperties21.isThreadedTwoPhaseCommit();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test8974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8974");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        boolean boolean4 = properties2.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setLogBaseName("");
        java.lang.Object obj17 = properties2.replace((java.lang.Object) properties7, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long19 = atomikosProperties18.checkpointInterval;
        java.util.Properties properties20 = atomikosProperties18.asProperties();
        java.lang.Object obj21 = properties20.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        boolean boolean28 = atomikosProperties22.isEnableLogging();
        atomikosProperties22.transactionManagerUniqueName = "";
        atomikosProperties22.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str34 = atomikosProperties33.logBaseDir;
        java.lang.String str35 = atomikosProperties33.logBaseName;
        java.lang.String str36 = atomikosProperties33.getLogBaseDir();
        atomikosProperties33.setMaxActives((int) (byte) -1);
        java.lang.String str39 = atomikosProperties33.getService();
        java.lang.Object obj40 = properties20.getOrDefault((java.lang.Object) atomikosProperties22, (java.lang.Object) atomikosProperties33);
        int int41 = properties20.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet42 = properties20.entrySet();
        java.lang.Object obj43 = properties2.remove((java.lang.Object) objEntrySet42);
        java.util.Enumeration<java.lang.Object> objEnumeration44 = properties2.keys();
        java.util.Properties properties45 = new java.util.Properties(properties2);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 500L + "'", long19 == 500L);
        org.junit.Assert.assertNotNull(properties20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tmlog" + "'", str35, "tmlog");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(objEntrySet42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(objEnumeration44);
    }

    @Test
    public void test8975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8975");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.setCheckpointInterval((long) 100);
        int int6 = atomikosProperties0.getMaxActives();
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setDefaultJtaTimeout((long) 9);
        boolean boolean10 = atomikosProperties0.isSerialJtaTransactions();
        long long11 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str12 = atomikosProperties0.getLogBaseDir();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 50 + "'", int6 == 50);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 9L + "'", long11 == 9L);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test8976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8976");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj5 = properties2.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str7 = atomikosProperties6.logBaseDir;
        java.lang.String str8 = atomikosProperties6.logBaseName;
        java.lang.String str9 = atomikosProperties6.getLogBaseDir();
        atomikosProperties6.setMaxActives((int) (byte) -1);
        boolean boolean12 = atomikosProperties6.isEnableLogging();
        atomikosProperties6.transactionManagerUniqueName = "";
        atomikosProperties6.setEnableLogging(false);
        boolean boolean17 = atomikosProperties6.isEnableLogging();
        atomikosProperties6.maxActives = 1;
        atomikosProperties6.defaultJtaTimeout = 300000L;
        java.lang.String str22 = atomikosProperties6.getLogBaseName();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties23 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str24 = atomikosProperties23.logBaseDir;
        java.lang.String str25 = atomikosProperties23.logBaseName;
        java.lang.String str26 = atomikosProperties23.getLogBaseDir();
        boolean boolean27 = atomikosProperties23.isSerialJtaTransactions();
        atomikosProperties23.setLogBaseName("");
        atomikosProperties23.setTransactionManagerUniqueName("tmlog");
        atomikosProperties23.setMaxActives((int) (byte) 1);
        java.lang.Object obj34 = properties2.putIfAbsent((java.lang.Object) str22, (java.lang.Object) (byte) 1);
        java.util.Collection<java.lang.Object> objCollection35 = properties2.values();
        boolean boolean36 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        java.util.Properties properties39 = atomikosProperties37.asProperties();
        boolean boolean41 = properties39.containsValue((java.lang.Object) 100L);
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties39.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.String str46 = atomikosProperties43.getLogBaseDir();
        boolean boolean47 = atomikosProperties43.isSerialJtaTransactions();
        long long48 = atomikosProperties43.checkpointInterval;
        boolean boolean49 = atomikosProperties43.enableLogging;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        boolean boolean54 = atomikosProperties50.isSerialJtaTransactions();
        atomikosProperties50.serialJtaTransactions = true;
        atomikosProperties50.checkpointInterval = (-1L);
        atomikosProperties50.threadedTwoPhaseCommit = true;
        java.lang.String str61 = atomikosProperties50.transactionManagerUniqueName;
        atomikosProperties50.maxActives = (byte) 1;
        java.lang.Object obj64 = properties39.getOrDefault((java.lang.Object) boolean49, (java.lang.Object) atomikosProperties50);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        java.util.Properties properties67 = atomikosProperties65.asProperties();
        properties67.clear();
        boolean boolean69 = properties67.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties70 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str71 = atomikosProperties70.logBaseDir;
        atomikosProperties70.setTransactionManagerUniqueName("");
        int int74 = atomikosProperties70.getMaxActives();
        java.lang.String str75 = atomikosProperties70.transactionManagerUniqueName;
        boolean boolean76 = properties67.containsValue((java.lang.Object) atomikosProperties70);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties77 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long78 = atomikosProperties77.checkpointInterval;
        java.util.Properties properties79 = atomikosProperties77.asProperties();
        properties79.clear();
        java.util.Properties properties81 = new java.util.Properties(properties79);
        java.lang.Object obj84 = properties81.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str85 = properties81.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties86 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long87 = atomikosProperties86.checkpointInterval;
        boolean boolean88 = atomikosProperties86.isSerialJtaTransactions();
        atomikosProperties86.maxTimeout = 100;
        int int91 = atomikosProperties86.getMaxActives();
        java.lang.Object obj92 = properties67.replace((java.lang.Object) properties81, (java.lang.Object) int91);
        java.lang.Object obj93 = properties2.replace((java.lang.Object) properties39, (java.lang.Object) properties67);
        java.lang.String str96 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tmlog=0.0, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, ={com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}}", "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tmlog" + "'", str8, "tmlog");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tmlog" + "'", str22, "tmlog");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tmlog" + "'", str25, "tmlog");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(objCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertNotNull(properties39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objEnumeration42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertNotNull(properties67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 50 + "'", int74 == 50);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 500L + "'", long78 == 500L);
        org.junit.Assert.assertNotNull(properties79);
        org.junit.Assert.assertEquals("'" + obj84 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj84, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "{}" + "'", str85, "{}");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 500L + "'", long87 == 500L);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 50 + "'", int91 == 50);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str96, "{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
    }

    @Test
    public void test8977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8977");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.logBaseName = "tmlog";
        atomikosProperties0.setEnableLogging(true);
        long long9 = atomikosProperties0.maxTimeout;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        java.lang.String str11 = atomikosProperties0.transactionManagerUniqueName;
        java.lang.String str12 = atomikosProperties0.logBaseDir;
        long long13 = atomikosProperties0.maxTimeout;
        java.lang.String str14 = atomikosProperties0.logBaseDir;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 300000L + "'", long9 == 300000L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 300000L + "'", long13 == 300000L);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test8978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8978");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setLogBaseName("");
        boolean boolean6 = atomikosProperties0.threadedTwoPhaseCommit;
        long long7 = atomikosProperties0.getDefaultJtaTimeout();
        atomikosProperties0.setSerialJtaTransactions(true);
        boolean boolean10 = atomikosProperties0.isThreadedTwoPhaseCommit();
        long long11 = atomikosProperties0.getCheckpointInterval();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10000L + "'", long7 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 500L + "'", long11 == 500L);
    }

    @Test
    public void test8979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8979");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.util.Set<java.lang.Object> objSet14 = properties2.keySet();
        java.lang.String str16 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties17 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long18 = atomikosProperties17.checkpointInterval;
        java.util.Properties properties19 = atomikosProperties17.asProperties();
        boolean boolean21 = properties19.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        java.lang.Object obj27 = properties24.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties28 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str29 = atomikosProperties28.logBaseDir;
        java.lang.String str30 = atomikosProperties28.logBaseName;
        java.lang.String str31 = atomikosProperties28.getLogBaseDir();
        atomikosProperties28.setLogBaseName("");
        java.lang.Object obj34 = properties19.replace((java.lang.Object) properties24, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long36 = atomikosProperties35.checkpointInterval;
        java.util.Properties properties37 = atomikosProperties35.asProperties();
        java.lang.Object obj38 = properties37.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        java.lang.String str41 = atomikosProperties39.logBaseName;
        java.lang.String str42 = atomikosProperties39.getLogBaseDir();
        atomikosProperties39.setMaxActives((int) (byte) -1);
        boolean boolean45 = atomikosProperties39.isEnableLogging();
        atomikosProperties39.transactionManagerUniqueName = "";
        atomikosProperties39.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        atomikosProperties50.setMaxActives((int) (byte) -1);
        java.lang.String str56 = atomikosProperties50.getService();
        java.lang.Object obj57 = properties37.getOrDefault((java.lang.Object) atomikosProperties39, (java.lang.Object) atomikosProperties50);
        int int58 = properties37.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet59 = properties37.entrySet();
        java.lang.Object obj60 = properties19.remove((java.lang.Object) objEntrySet59);
        java.lang.Object obj61 = properties2.remove((java.lang.Object) properties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str63 = atomikosProperties62.logBaseDir;
        java.lang.String str64 = atomikosProperties62.logBaseName;
        java.lang.String str65 = atomikosProperties62.getLogBaseDir();
        atomikosProperties62.setMaxActives((int) (byte) -1);
        java.lang.String str68 = atomikosProperties62.getService();
        atomikosProperties62.setDefaultJtaTimeout((long) (-1));
        int int71 = atomikosProperties62.maxActives;
        long long72 = atomikosProperties62.maxTimeout;
        atomikosProperties62.setLogBaseDir("hi!");
        boolean boolean75 = properties2.containsValue((java.lang.Object) atomikosProperties62);
        java.lang.String str76 = atomikosProperties62.logBaseDir;
        java.lang.String str77 = atomikosProperties62.transactionManagerUniqueName;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(objSet14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 500L + "'", long18 == 500L);
        org.junit.Assert.assertNotNull(properties19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tmlog" + "'", str30, "tmlog");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 500L + "'", long36 == 500L);
        org.junit.Assert.assertNotNull(properties37);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "tmlog" + "'", str41, "tmlog");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(objEntrySet59);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "tmlog" + "'", str64, "tmlog");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 300000L + "'", long72 == 300000L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test8980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8980");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        int int5 = properties4.size();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet6 = properties4.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        java.util.Properties properties9 = atomikosProperties7.asProperties();
        java.lang.Object obj10 = properties9.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str12 = atomikosProperties11.logBaseDir;
        java.lang.String str13 = atomikosProperties11.logBaseName;
        java.lang.String str14 = atomikosProperties11.getLogBaseDir();
        atomikosProperties11.setMaxActives((int) (byte) -1);
        boolean boolean17 = atomikosProperties11.isEnableLogging();
        atomikosProperties11.transactionManagerUniqueName = "";
        atomikosProperties11.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str23 = atomikosProperties22.logBaseDir;
        java.lang.String str24 = atomikosProperties22.logBaseName;
        java.lang.String str25 = atomikosProperties22.getLogBaseDir();
        atomikosProperties22.setMaxActives((int) (byte) -1);
        java.lang.String str28 = atomikosProperties22.getService();
        java.lang.Object obj29 = properties9.getOrDefault((java.lang.Object) atomikosProperties11, (java.lang.Object) atomikosProperties22);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        int int32 = atomikosProperties30.getMaxActives();
        java.lang.String str33 = atomikosProperties30.logBaseDir;
        java.lang.Object obj35 = properties9.putIfAbsent((java.lang.Object) atomikosProperties30, (java.lang.Object) "");
        int int36 = properties9.size();
        java.util.Collection<java.lang.Object> objCollection37 = properties9.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        int int40 = atomikosProperties38.getMaxActives();
        java.lang.String str41 = atomikosProperties38.logBaseDir;
        java.lang.String str42 = atomikosProperties38.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        java.lang.String str45 = atomikosProperties43.logBaseName;
        java.lang.String str46 = atomikosProperties43.getLogBaseDir();
        atomikosProperties43.setMaxActives((int) (byte) -1);
        boolean boolean49 = atomikosProperties43.isEnableLogging();
        java.lang.String str50 = atomikosProperties43.getLogBaseName();
        java.lang.Object obj51 = properties9.replace((java.lang.Object) atomikosProperties38, (java.lang.Object) atomikosProperties43);
        atomikosProperties38.threadedTwoPhaseCommit = true;
        atomikosProperties38.service = "tmlog";
        java.lang.String str56 = atomikosProperties38.logBaseName;
        boolean boolean57 = atomikosProperties38.forceShutdownOnVmExit;
        atomikosProperties38.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean60 = properties4.equals((java.lang.Object) atomikosProperties38);
        java.lang.String str61 = atomikosProperties38.getService();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(objEntrySet6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNotNull(properties9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "tmlog" + "'", str13, "tmlog");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "tmlog" + "'", str24, "tmlog");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(objCollection37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 50 + "'", int40 == 50);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tmlog" + "'", str45, "tmlog");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "tmlog" + "'", str56, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "tmlog" + "'", str61, "tmlog");
    }

    @Test
    public void test8981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8981");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        atomikosProperties4.setTransactionManagerUniqueName("");
        int int8 = atomikosProperties4.getMaxActives();
        boolean boolean9 = properties2.containsValue((java.lang.Object) int8);
        java.util.Enumeration<java.lang.Object> objEnumeration10 = properties2.elements();
        java.util.Set<java.lang.Object> objSet11 = properties2.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str13 = atomikosProperties12.logBaseDir;
        java.lang.String str14 = atomikosProperties12.transactionManagerUniqueName;
        boolean boolean15 = atomikosProperties12.enableLogging;
        atomikosProperties12.setCheckpointInterval((long) 100);
        int int18 = atomikosProperties12.getMaxActives();
        long long19 = atomikosProperties12.getDefaultJtaTimeout();
        boolean boolean20 = properties2.containsValue((java.lang.Object) long19);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objEnumeration10);
        org.junit.Assert.assertNotNull(objSet11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 50 + "'", int18 == 50);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 10000L + "'", long19 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test8982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8982");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties8);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long14 = atomikosProperties13.checkpointInterval;
        java.util.Properties properties15 = atomikosProperties13.asProperties();
        properties15.clear();
        boolean boolean17 = properties15.isEmpty();
        java.lang.Object obj18 = properties15.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long20 = atomikosProperties19.checkpointInterval;
        java.util.Properties properties21 = atomikosProperties19.asProperties();
        properties21.clear();
        boolean boolean23 = properties21.isEmpty();
        java.util.Collection<java.lang.Object> objCollection24 = properties21.values();
        properties15.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties21);
        java.lang.Object obj28 = properties21.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}", "");
        boolean boolean29 = properties8.containsValue((java.lang.Object) properties21);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties30 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long31 = atomikosProperties30.checkpointInterval;
        java.util.Properties properties32 = atomikosProperties30.asProperties();
        properties32.clear();
        boolean boolean34 = properties32.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties35 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str36 = atomikosProperties35.logBaseDir;
        atomikosProperties35.setTransactionManagerUniqueName("");
        int int39 = atomikosProperties35.getMaxActives();
        java.lang.String str40 = atomikosProperties35.transactionManagerUniqueName;
        boolean boolean41 = properties32.containsValue((java.lang.Object) atomikosProperties35);
        boolean boolean42 = atomikosProperties35.isEnableLogging();
        atomikosProperties35.setMaxActives((int) (byte) -1);
        boolean boolean45 = atomikosProperties35.threadedTwoPhaseCommit;
        java.lang.Object obj46 = properties21.remove((java.lang.Object) atomikosProperties35);
        java.util.Enumeration<?> wildcardEnumeration47 = properties21.propertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        atomikosProperties48.setTransactionManagerUniqueName("");
        int int52 = atomikosProperties48.getMaxActives();
        java.lang.String str53 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setTransactionManagerUniqueName("");
        boolean boolean56 = atomikosProperties48.forceShutdownOnVmExit;
        java.lang.String str57 = atomikosProperties48.getService();
        atomikosProperties48.setMaxActives((int) (byte) 1);
        atomikosProperties48.setLogBaseDir("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long63 = atomikosProperties62.checkpointInterval;
        java.util.Properties properties64 = atomikosProperties62.asProperties();
        properties64.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str67 = atomikosProperties66.logBaseDir;
        atomikosProperties66.setTransactionManagerUniqueName("");
        int int70 = atomikosProperties66.getMaxActives();
        boolean boolean71 = properties64.containsValue((java.lang.Object) int70);
        java.lang.Object obj74 = properties64.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "tmlog");
        java.util.Properties properties75 = new java.util.Properties(properties64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str77 = atomikosProperties76.logBaseDir;
        atomikosProperties76.setTransactionManagerUniqueName("");
        int int80 = atomikosProperties76.getMaxActives();
        java.lang.String str81 = atomikosProperties76.getLogBaseDir();
        boolean boolean82 = atomikosProperties76.isEnableLogging();
        boolean boolean83 = atomikosProperties76.isForceShutdownOnVmExit();
        boolean boolean84 = properties64.containsValue((java.lang.Object) boolean83);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long86 = atomikosProperties85.checkpointInterval;
        boolean boolean87 = atomikosProperties85.isSerialJtaTransactions();
        atomikosProperties85.transactionManagerUniqueName = "";
        int int90 = atomikosProperties85.getMaxActives();
        java.lang.String str91 = atomikosProperties85.logBaseName;
        java.lang.String str92 = atomikosProperties85.getTransactionManagerUniqueName();
        java.lang.Object obj93 = properties64.get((java.lang.Object) atomikosProperties85);
        boolean boolean94 = properties21.remove((java.lang.Object) atomikosProperties48, (java.lang.Object) properties64);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 500L + "'", long14 == 500L);
        org.junit.Assert.assertNotNull(properties15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 500L + "'", long20 == 500L);
        org.junit.Assert.assertNotNull(properties21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objCollection24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 500L + "'", long31 == 500L);
        org.junit.Assert.assertNotNull(properties32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(wildcardEnumeration47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 50 + "'", int52 == 50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 500L + "'", long63 == 500L);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 50 + "'", int70 == 50);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 50 + "'", int80 == 50);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 500L + "'", long86 == 500L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 50 + "'", int90 == 50);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "tmlog" + "'", str91, "tmlog");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test8983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8983");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        boolean boolean1 = atomikosProperties0.serialJtaTransactions;
        atomikosProperties0.transactionManagerUniqueName = "{=}";
        atomikosProperties0.setService("{=}");
        boolean boolean6 = atomikosProperties0.threadedTwoPhaseCommit;
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test8984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8984");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        java.lang.String str29 = atomikosProperties13.transactionManagerUniqueName;
        java.lang.String str30 = atomikosProperties13.getLogBaseDir();
        boolean boolean31 = atomikosProperties13.isSerialJtaTransactions();
        boolean boolean32 = atomikosProperties13.serialJtaTransactions;
        boolean boolean33 = atomikosProperties13.isForceShutdownOnVmExit();
        atomikosProperties13.threadedTwoPhaseCommit = true;
        atomikosProperties13.serialJtaTransactions = false;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test8985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8985");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.setMaxActives((int) (byte) -1);
        java.lang.String str6 = atomikosProperties0.getService();
        atomikosProperties0.setDefaultJtaTimeout((long) (-1));
        long long9 = atomikosProperties0.getDefaultJtaTimeout();
        java.util.Properties properties10 = atomikosProperties0.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties11 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long12 = atomikosProperties11.checkpointInterval;
        long long13 = atomikosProperties11.getDefaultJtaTimeout();
        atomikosProperties11.setService("hi!");
        atomikosProperties11.serialJtaTransactions = false;
        boolean boolean18 = atomikosProperties11.isForceShutdownOnVmExit();
        boolean boolean19 = properties10.containsKey((java.lang.Object) atomikosProperties11);
        java.lang.String str20 = properties10.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        atomikosProperties21.forceShutdownOnVmExit = false;
        atomikosProperties21.threadedTwoPhaseCommit = false;
        atomikosProperties21.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties21.threadedTwoPhaseCommit = false;
        java.lang.String str31 = atomikosProperties21.transactionManagerUniqueName;
        boolean boolean32 = atomikosProperties21.isThreadedTwoPhaseCommit();
        long long33 = atomikosProperties21.getCheckpointInterval();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties34 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long35 = atomikosProperties34.checkpointInterval;
        java.util.Properties properties36 = atomikosProperties34.asProperties();
        boolean boolean38 = properties36.containsValue((java.lang.Object) 100L);
        java.lang.String str39 = properties36.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration40 = properties36.elements();
        java.lang.String str42 = properties36.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long44 = atomikosProperties43.checkpointInterval;
        java.util.Properties properties45 = atomikosProperties43.asProperties();
        java.lang.Object obj48 = properties45.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection49 = properties45.values();
        int int50 = properties45.size();
        java.lang.Object obj51 = null;
        boolean boolean52 = properties45.equals(obj51);
        java.util.Collection<java.lang.Object> objCollection53 = properties45.values();
        java.lang.Object obj54 = properties36.get((java.lang.Object) properties45);
        java.lang.Object obj55 = properties36.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties56 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long57 = atomikosProperties56.checkpointInterval;
        java.util.Properties properties58 = atomikosProperties56.asProperties();
        java.lang.Object obj61 = properties58.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties62 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long63 = atomikosProperties62.checkpointInterval;
        java.util.Properties properties64 = atomikosProperties62.asProperties();
        properties64.clear();
        java.util.Properties properties66 = new java.util.Properties(properties64);
        java.lang.Object obj69 = properties66.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str70 = properties66.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties71 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str72 = atomikosProperties71.logBaseDir;
        java.lang.String str73 = atomikosProperties71.logBaseName;
        java.lang.String str74 = atomikosProperties71.getLogBaseDir();
        atomikosProperties71.setMaxActives((int) (byte) -1);
        boolean boolean77 = atomikosProperties71.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties78.setCheckpointInterval((long) 100);
        boolean boolean81 = atomikosProperties78.isForceShutdownOnVmExit();
        java.lang.Object obj82 = properties66.putIfAbsent((java.lang.Object) atomikosProperties71, (java.lang.Object) boolean81);
        java.util.Set<java.lang.String> strSet83 = properties66.stringPropertyNames();
        java.util.Set<java.lang.Object> objSet84 = properties66.keySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties85 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long86 = atomikosProperties85.checkpointInterval;
        int int87 = atomikosProperties85.getMaxActives();
        atomikosProperties85.setCheckpointInterval(1L);
        long long90 = atomikosProperties85.getMaxTimeout();
        java.lang.Object obj91 = properties66.get((java.lang.Object) atomikosProperties85);
        java.lang.Object obj92 = properties58.remove((java.lang.Object) properties66);
        boolean boolean93 = properties58.isEmpty();
        java.lang.Object obj94 = properties58.clone();
        java.util.Set<java.lang.Object> objSet95 = properties58.keySet();
        boolean boolean96 = properties36.contains((java.lang.Object) objSet95);
        java.lang.Object obj97 = properties10.replace((java.lang.Object) atomikosProperties21, (java.lang.Object) boolean96);
        java.util.Properties properties98 = new java.util.Properties(properties10);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 500L + "'", long12 == 500L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}" + "'", str20, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str31, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 500L + "'", long33 == 500L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 500L + "'", long35 == 500L);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str39, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 500L + "'", long44 == 500L);
        org.junit.Assert.assertNotNull(properties45);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(objCollection49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objCollection53);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(obj55);
// flaky:         org.junit.Assert.assertEquals(obj55.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 500L + "'", long57 == 500L);
        org.junit.Assert.assertNotNull(properties58);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 500L + "'", long63 == 500L);
        org.junit.Assert.assertNotNull(properties64);
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj69, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{}" + "'", str70, "{}");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "tmlog" + "'", str73, "tmlog");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(objSet84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 500L + "'", long86 == 500L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 50 + "'", int87 == 50);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 300000L + "'", long90 == 300000L);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(obj94);
// flaky:         org.junit.Assert.assertEquals(obj94.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj94), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj94), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objSet95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test8986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8986");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        int int4 = atomikosProperties0.getMaxActives();
        java.lang.String str5 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long9 = atomikosProperties8.checkpointInterval;
        java.util.Properties properties10 = atomikosProperties8.asProperties();
        properties10.clear();
        java.util.Properties properties12 = new java.util.Properties(properties10);
        atomikosProperties0.set(properties10, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj18 = properties10.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties19 = new java.util.Properties(properties10);
        java.util.Set<java.lang.Object> objSet20 = properties10.keySet();
        java.lang.String str22 = properties10.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, -1=false}");
        java.lang.String str24 = properties10.getProperty("{com.atomikos.icatch.enable_logging=false, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.tm_unique_name=, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        boolean boolean25 = properties10.isEmpty();
        java.util.Enumeration<?> wildcardEnumeration26 = properties10.propertyNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 500L + "'", long9 == 500L);
        org.junit.Assert.assertNotNull(properties10);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(objSet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardEnumeration26);
    }

    @Test
    public void test8987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8987");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str6 = atomikosProperties5.logBaseDir;
        atomikosProperties5.setTransactionManagerUniqueName("");
        int int9 = atomikosProperties5.getMaxActives();
        java.lang.String str10 = atomikosProperties5.transactionManagerUniqueName;
        boolean boolean11 = properties2.containsValue((java.lang.Object) atomikosProperties5);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties12 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long13 = atomikosProperties12.checkpointInterval;
        java.util.Properties properties14 = atomikosProperties12.asProperties();
        properties14.clear();
        java.util.Properties properties16 = new java.util.Properties(properties14);
        java.lang.Object obj19 = properties16.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str20 = properties16.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long22 = atomikosProperties21.checkpointInterval;
        boolean boolean23 = atomikosProperties21.isSerialJtaTransactions();
        atomikosProperties21.maxTimeout = 100;
        int int26 = atomikosProperties21.getMaxActives();
        java.lang.Object obj27 = properties2.replace((java.lang.Object) properties16, (java.lang.Object) int26);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet28 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long30 = atomikosProperties29.checkpointInterval;
        java.util.Properties properties31 = atomikosProperties29.asProperties();
        boolean boolean33 = properties31.containsValue((java.lang.Object) 100L);
        java.lang.String str34 = properties31.toString();
        java.lang.Object obj37 = properties31.setProperty("", "hi!");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties38.setCheckpointInterval((long) 100);
        boolean boolean41 = atomikosProperties38.isForceShutdownOnVmExit();
        atomikosProperties38.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long44 = atomikosProperties38.getDefaultJtaTimeout();
        long long45 = atomikosProperties38.getMaxTimeout();
        atomikosProperties38.logBaseName = "tmlog";
        long long48 = atomikosProperties38.getDefaultJtaTimeout();
        atomikosProperties38.setForceShutdownOnVmExit(true);
        atomikosProperties38.maxTimeout = (short) 100;
        java.lang.Object obj53 = properties31.remove((java.lang.Object) atomikosProperties38);
        properties2.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties31);
        java.util.Set<java.lang.Object> objSet55 = properties31.keySet();
        java.util.Enumeration<java.lang.Object> objEnumeration56 = properties31.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties57.setCheckpointInterval((long) 100);
        boolean boolean60 = atomikosProperties57.isForceShutdownOnVmExit();
        atomikosProperties57.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        long long63 = atomikosProperties57.getDefaultJtaTimeout();
        long long64 = atomikosProperties57.getMaxTimeout();
        atomikosProperties57.logBaseName = "tmlog";
        long long67 = atomikosProperties57.getDefaultJtaTimeout();
        long long68 = atomikosProperties57.defaultJtaTimeout;
        atomikosProperties57.maxTimeout = 10000L;
        boolean boolean71 = atomikosProperties57.threadedTwoPhaseCommit;
        atomikosProperties57.setForceShutdownOnVmExit(true);
        boolean boolean74 = properties31.equals((java.lang.Object) true);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 500L + "'", long13 == 500L);
        org.junit.Assert.assertNotNull(properties14);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj19, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 500L + "'", long22 == 500L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 50 + "'", int26 == 50);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objEntrySet28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 500L + "'", long30 == 500L);
        org.junit.Assert.assertNotNull(properties31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str34, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 10000L + "'", long44 == 10000L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 300000L + "'", long45 == 300000L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10000L + "'", long48 == 10000L);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(objSet55);
        org.junit.Assert.assertNotNull(objEnumeration56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10000L + "'", long63 == 10000L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 300000L + "'", long64 == 300000L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10000L + "'", long67 == 10000L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10000L + "'", long68 == 10000L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test8988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8988");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        atomikosProperties0.setTransactionManagerUniqueName("");
        java.lang.String str4 = atomikosProperties0.getTransactionManagerUniqueName();
        long long5 = atomikosProperties0.maxTimeout;
        long long6 = atomikosProperties0.maxTimeout;
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 300000L + "'", long5 == 300000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test8989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8989");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        int int5 = properties4.size();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties6 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long7 = atomikosProperties6.checkpointInterval;
        java.util.Properties properties8 = atomikosProperties6.asProperties();
        properties8.clear();
        boolean boolean10 = properties8.isEmpty();
        java.util.Collection<java.lang.Object> objCollection11 = properties8.values();
        boolean boolean12 = properties4.containsKey((java.lang.Object) objCollection11);
        java.util.Properties properties13 = new java.util.Properties(properties4);
        java.util.Set<java.lang.String> strSet14 = properties4.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        properties17.clear();
        boolean boolean19 = properties17.isEmpty();
        java.lang.Object obj20 = properties17.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties22 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long23 = atomikosProperties22.checkpointInterval;
        java.util.Properties properties24 = atomikosProperties22.asProperties();
        java.lang.Object obj25 = properties24.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setMaxActives((int) (byte) -1);
        boolean boolean32 = atomikosProperties26.isEnableLogging();
        atomikosProperties26.transactionManagerUniqueName = "";
        atomikosProperties26.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        java.lang.String str43 = atomikosProperties37.getService();
        java.lang.Object obj44 = properties24.getOrDefault((java.lang.Object) atomikosProperties26, (java.lang.Object) atomikosProperties37);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        int int47 = atomikosProperties45.getMaxActives();
        java.lang.String str48 = atomikosProperties45.logBaseDir;
        java.lang.Object obj50 = properties24.putIfAbsent((java.lang.Object) atomikosProperties45, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties51 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str52 = atomikosProperties51.logBaseDir;
        java.lang.String str53 = atomikosProperties51.logBaseName;
        java.lang.String str54 = atomikosProperties51.getLogBaseDir();
        boolean boolean55 = atomikosProperties51.isSerialJtaTransactions();
        atomikosProperties51.setEnableLogging(false);
        boolean boolean58 = properties17.replace((java.lang.Object) true, (java.lang.Object) "", (java.lang.Object) atomikosProperties51);
        java.util.Properties properties59 = new java.util.Properties(properties17);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties61 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long62 = atomikosProperties61.checkpointInterval;
        java.util.Properties properties63 = atomikosProperties61.asProperties();
        java.lang.Object obj64 = properties63.clone();
        java.lang.Object obj65 = properties59.replace((java.lang.Object) true, obj64);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties66 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long67 = atomikosProperties66.checkpointInterval;
        java.util.Properties properties68 = atomikosProperties66.asProperties();
        boolean boolean70 = properties68.containsValue((java.lang.Object) 100L);
        java.lang.String str71 = properties68.toString();
        java.util.Enumeration<java.lang.Object> objEnumeration72 = properties68.elements();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties73 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long74 = atomikosProperties73.checkpointInterval;
        java.util.Properties properties75 = atomikosProperties73.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties76 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long77 = atomikosProperties76.checkpointInterval;
        java.util.Properties properties78 = atomikosProperties76.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties79 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties79.setCheckpointInterval((long) 100);
        boolean boolean82 = atomikosProperties79.isForceShutdownOnVmExit();
        atomikosProperties79.logBaseDir = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        boolean boolean85 = properties78.containsKey((java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties86 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties86.enableLogging = true;
        boolean boolean90 = properties75.replace((java.lang.Object) boolean85, (java.lang.Object) true, (java.lang.Object) "");
        java.util.Collection<java.lang.Object> objCollection91 = properties75.values();
        boolean boolean92 = properties68.contains((java.lang.Object) properties75);
        properties59.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties75);
        java.util.Enumeration<java.lang.Object> objEnumeration94 = properties59.elements();
        java.lang.Object obj95 = properties4.remove((java.lang.Object) properties59);
        java.io.OutputStream outputStream96 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties59.save(outputStream96, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, 4=1, com.atomikos.icatch.log_base_name=tmlog}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 500L + "'", long7 == 500L);
        org.junit.Assert.assertNotNull(properties8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 500L + "'", long23 == 500L);
        org.junit.Assert.assertNotNull(properties24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "tmlog" + "'", str53, "tmlog");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertNotNull(properties63);
        org.junit.Assert.assertNotNull(obj64);
// flaky:         org.junit.Assert.assertEquals(obj64.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 500L + "'", long67 == 500L);
        org.junit.Assert.assertNotNull(properties68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", str71, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNotNull(objEnumeration72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 500L + "'", long74 == 500L);
        org.junit.Assert.assertNotNull(properties75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 500L + "'", long77 == 500L);
        org.junit.Assert.assertNotNull(properties78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objCollection91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(objEnumeration94);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test8990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8990");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        java.lang.String str15 = properties2.getProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Enumeration<java.lang.Object> objEnumeration16 = properties2.elements();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet17 = properties2.entrySet();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        java.lang.String str20 = atomikosProperties18.logBaseName;
        java.lang.String str21 = atomikosProperties18.getLogBaseDir();
        atomikosProperties18.setMaxActives((int) (byte) -1);
        boolean boolean24 = atomikosProperties18.isEnableLogging();
        long long25 = atomikosProperties18.checkpointInterval;
        atomikosProperties18.setCheckpointInterval(10L);
        boolean boolean28 = atomikosProperties18.isForceShutdownOnVmExit();
        atomikosProperties18.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties18.setLogBaseName("hi!");
        boolean boolean33 = atomikosProperties18.isThreadedTwoPhaseCommit();
        atomikosProperties18.maxActives = 100;
        java.lang.String str36 = atomikosProperties18.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        atomikosProperties37.setTransactionManagerUniqueName("");
        int int41 = atomikosProperties37.getMaxActives();
        java.lang.String str42 = atomikosProperties37.transactionManagerUniqueName;
        atomikosProperties37.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        java.util.Properties properties47 = atomikosProperties45.asProperties();
        properties47.clear();
        java.util.Properties properties49 = new java.util.Properties(properties47);
        atomikosProperties37.set(properties47, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj55 = properties47.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.util.Properties properties56 = new java.util.Properties(properties47);
        java.util.Collection<java.lang.Object> objCollection57 = properties47.values();
        java.util.Properties properties58 = new java.util.Properties(properties47);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties59 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long60 = atomikosProperties59.checkpointInterval;
        java.util.Properties properties61 = atomikosProperties59.asProperties();
        properties61.clear();
        java.util.Properties properties63 = new java.util.Properties(properties61);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties64 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str65 = atomikosProperties64.logBaseDir;
        atomikosProperties64.setTransactionManagerUniqueName("");
        int int68 = atomikosProperties64.getMaxActives();
        atomikosProperties64.logBaseName = "tmlog";
        int int71 = atomikosProperties64.maxActives;
        boolean boolean72 = properties61.containsValue((java.lang.Object) int71);
        java.util.Properties properties73 = new java.util.Properties(properties61);
        java.util.Enumeration<java.lang.Object> objEnumeration74 = properties73.keys();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties75 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str76 = atomikosProperties75.logBaseDir;
        java.lang.String str77 = atomikosProperties75.logBaseName;
        java.lang.String str78 = atomikosProperties75.getLogBaseDir();
        atomikosProperties75.setMaxActives((int) (byte) -1);
        java.lang.String str81 = atomikosProperties75.getService();
        long long82 = atomikosProperties75.defaultJtaTimeout;
        java.lang.String str83 = atomikosProperties75.logBaseName;
        java.util.Properties properties84 = atomikosProperties75.asProperties();
        java.lang.Object obj85 = properties58.getOrDefault((java.lang.Object) objEnumeration74, (java.lang.Object) properties84);
        java.lang.Object obj86 = properties2.replace((java.lang.Object) str36, obj85);
        java.util.Set<java.lang.String> strSet87 = properties2.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(objEnumeration16);
        org.junit.Assert.assertNotNull(objEntrySet17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 500L + "'", long25 == 500L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 50 + "'", int41 == 50);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertNotNull(properties47);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(objCollection57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 500L + "'", long60 == 500L);
        org.junit.Assert.assertNotNull(properties61);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 50 + "'", int68 == 50);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 50 + "'", int71 == 50);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objEnumeration74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "tmlog" + "'", str77, "tmlog");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10000L + "'", long82 == 10000L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "tmlog" + "'", str83, "tmlog");
        org.junit.Assert.assertNotNull(properties84);
        org.junit.Assert.assertNotNull(obj85);
// flaky:         org.junit.Assert.assertEquals(obj85.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=-1, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(strSet87);
    }

    @Test
    public void test8991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8991");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        java.lang.Object obj5 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties7 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long8 = atomikosProperties7.checkpointInterval;
        atomikosProperties7.forceShutdownOnVmExit = false;
        atomikosProperties7.setTransactionManagerUniqueName("");
        java.lang.Object obj13 = properties2.putIfAbsent((java.lang.Object) 100, (java.lang.Object) atomikosProperties7);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long16 = atomikosProperties15.checkpointInterval;
        java.util.Properties properties17 = atomikosProperties15.asProperties();
        boolean boolean19 = properties17.containsValue((java.lang.Object) 100L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties20 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long21 = atomikosProperties20.checkpointInterval;
        java.util.Properties properties22 = atomikosProperties20.asProperties();
        java.lang.Object obj25 = properties22.put((java.lang.Object) '4', (java.lang.Object) 1L);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties26 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str27 = atomikosProperties26.logBaseDir;
        java.lang.String str28 = atomikosProperties26.logBaseName;
        java.lang.String str29 = atomikosProperties26.getLogBaseDir();
        atomikosProperties26.setLogBaseName("");
        java.lang.Object obj32 = properties17.replace((java.lang.Object) properties22, (java.lang.Object) "");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        java.lang.Object obj36 = properties35.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str38 = atomikosProperties37.logBaseDir;
        java.lang.String str39 = atomikosProperties37.logBaseName;
        java.lang.String str40 = atomikosProperties37.getLogBaseDir();
        atomikosProperties37.setMaxActives((int) (byte) -1);
        boolean boolean43 = atomikosProperties37.isEnableLogging();
        atomikosProperties37.transactionManagerUniqueName = "";
        atomikosProperties37.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties48 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str49 = atomikosProperties48.logBaseDir;
        java.lang.String str50 = atomikosProperties48.logBaseName;
        java.lang.String str51 = atomikosProperties48.getLogBaseDir();
        atomikosProperties48.setMaxActives((int) (byte) -1);
        java.lang.String str54 = atomikosProperties48.getService();
        java.lang.Object obj55 = properties35.getOrDefault((java.lang.Object) atomikosProperties37, (java.lang.Object) atomikosProperties48);
        boolean boolean56 = properties2.replace((java.lang.Object) (byte) -1, (java.lang.Object) properties17, (java.lang.Object) atomikosProperties48);
        boolean boolean57 = atomikosProperties48.isThreadedTwoPhaseCommit();
        atomikosProperties48.setLogBaseName("");
        atomikosProperties48.logBaseName = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}";
        java.util.Properties properties62 = atomikosProperties48.asProperties();
        java.util.Set<java.lang.String> strSet63 = properties62.stringPropertyNames();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "{}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 500L + "'", long8 == 500L);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 500L + "'", long16 == 500L);
        org.junit.Assert.assertNotNull(properties17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 500L + "'", long21 == 500L);
        org.junit.Assert.assertNotNull(properties22);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "tmlog" + "'", str28, "tmlog");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "tmlog" + "'", str39, "tmlog");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "tmlog" + "'", str50, "tmlog");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertNotNull(strSet63);
    }

    @Test
    public void test8992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8992");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        boolean boolean2 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.maxTimeout = 100;
        int int5 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.logBaseDir = "{}";
        atomikosProperties0.service = "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog, =hi!}";
        java.lang.String str12 = atomikosProperties0.getLogBaseDir();
        atomikosProperties0.checkpointInterval = (byte) -1;
        boolean boolean15 = atomikosProperties0.enableLogging;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 50 + "'", int5 == 50);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{}" + "'", str12, "{}");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test8993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8993");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        boolean boolean4 = properties2.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties5 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long6 = atomikosProperties5.checkpointInterval;
        java.util.Properties properties7 = atomikosProperties5.asProperties();
        java.lang.Object obj10 = properties7.put((java.lang.Object) '4', (java.lang.Object) 1L);
        java.util.Collection<java.lang.Object> objCollection11 = properties7.values();
        boolean boolean12 = properties2.containsKey((java.lang.Object) objCollection11);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties13 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str14 = atomikosProperties13.logBaseDir;
        java.lang.String str15 = atomikosProperties13.logBaseName;
        java.lang.String str16 = atomikosProperties13.getLogBaseName();
        int int17 = atomikosProperties13.getMaxActives();
        atomikosProperties13.setLogBaseDir("hi!");
        java.lang.String str20 = atomikosProperties13.logBaseName;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties21 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str22 = atomikosProperties21.logBaseDir;
        atomikosProperties21.setTransactionManagerUniqueName("");
        int int25 = atomikosProperties21.getMaxActives();
        java.lang.String str26 = atomikosProperties21.getLogBaseDir();
        java.lang.String str27 = atomikosProperties21.logBaseName;
        java.lang.Object obj28 = properties2.replace((java.lang.Object) atomikosProperties13, (java.lang.Object) atomikosProperties21);
        java.lang.String str29 = atomikosProperties21.getLogBaseDir();
        atomikosProperties21.maxActives = 3;
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 500L + "'", long6 == 500L);
        org.junit.Assert.assertNotNull(properties7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(objCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tmlog" + "'", str15, "tmlog");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tmlog" + "'", str16, "tmlog");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 50 + "'", int17 == 50);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 50 + "'", int25 == 50);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test8994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8994");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseName();
        int int4 = atomikosProperties0.getMaxActives();
        atomikosProperties0.setEnableLogging(false);
        atomikosProperties0.setDefaultJtaTimeout((long) 100);
        atomikosProperties0.setLogBaseDir("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, {com.atomikos.icatch.tmlog=0.0}=, com.atomikos.icatch.log_base_name=tmlog, []=hi!}");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "tmlog" + "'", str3, "tmlog");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 50 + "'", int4 == 50);
    }

    @Test
    public void test8995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8995");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.transactionManagerUniqueName;
        boolean boolean3 = atomikosProperties0.enableLogging;
        atomikosProperties0.setCheckpointInterval((long) 100);
        boolean boolean6 = atomikosProperties0.threadedTwoPhaseCommit;
        java.lang.String str7 = atomikosProperties0.service;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test8996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8996");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.util.Set<java.lang.String> strSet3 = properties2.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long5 = atomikosProperties4.checkpointInterval;
        java.util.Properties properties6 = atomikosProperties4.asProperties();
        java.lang.Object obj7 = properties6.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties8 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str9 = atomikosProperties8.logBaseDir;
        java.lang.String str10 = atomikosProperties8.logBaseName;
        java.lang.String str11 = atomikosProperties8.getLogBaseDir();
        atomikosProperties8.setMaxActives((int) (byte) -1);
        boolean boolean14 = atomikosProperties8.isEnableLogging();
        atomikosProperties8.transactionManagerUniqueName = "";
        atomikosProperties8.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties19 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str20 = atomikosProperties19.logBaseDir;
        java.lang.String str21 = atomikosProperties19.logBaseName;
        java.lang.String str22 = atomikosProperties19.getLogBaseDir();
        atomikosProperties19.setMaxActives((int) (byte) -1);
        java.lang.String str25 = atomikosProperties19.getService();
        java.lang.Object obj26 = properties6.getOrDefault((java.lang.Object) atomikosProperties8, (java.lang.Object) atomikosProperties19);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties27 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str28 = atomikosProperties27.logBaseDir;
        java.lang.String str29 = atomikosProperties27.logBaseName;
        java.lang.String str30 = atomikosProperties27.getLogBaseDir();
        boolean boolean31 = atomikosProperties27.isSerialJtaTransactions();
        long long32 = atomikosProperties27.checkpointInterval;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties33 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long34 = atomikosProperties33.checkpointInterval;
        java.util.Properties properties35 = atomikosProperties33.asProperties();
        properties35.clear();
        boolean boolean37 = properties35.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str39 = atomikosProperties38.logBaseDir;
        atomikosProperties38.setTransactionManagerUniqueName("");
        int int42 = atomikosProperties38.getMaxActives();
        java.lang.String str43 = atomikosProperties38.transactionManagerUniqueName;
        boolean boolean44 = properties35.containsValue((java.lang.Object) atomikosProperties38);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties45.setCheckpointInterval((long) 100);
        atomikosProperties45.maxActives = (byte) 0;
        atomikosProperties45.setTransactionManagerUniqueName("");
        java.lang.Object obj52 = properties35.get((java.lang.Object) atomikosProperties45);
        boolean boolean54 = properties35.containsValue((java.lang.Object) 100.0d);
        boolean boolean55 = properties2.replace(obj26, (java.lang.Object) atomikosProperties27, (java.lang.Object) boolean54);
        java.lang.Object obj56 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties57 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str58 = atomikosProperties57.logBaseDir;
        java.lang.String str59 = atomikosProperties57.logBaseName;
        java.lang.String str60 = atomikosProperties57.getLogBaseDir();
        boolean boolean61 = atomikosProperties57.isSerialJtaTransactions();
        long long62 = atomikosProperties57.checkpointInterval;
        boolean boolean63 = atomikosProperties57.enableLogging;
        java.lang.Object obj64 = properties2.get((java.lang.Object) boolean63);
        java.util.Properties properties65 = new java.util.Properties(properties2);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 500L + "'", long5 == 500L);
        org.junit.Assert.assertNotNull(properties6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "tmlog" + "'", str21, "tmlog");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tmlog" + "'", str29, "tmlog");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 500L + "'", long32 == 500L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 500L + "'", long34 == 500L);
        org.junit.Assert.assertNotNull(properties35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 50 + "'", int42 == 50);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
// flaky:         org.junit.Assert.assertEquals(obj56.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "tmlog" + "'", str59, "tmlog");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 500L + "'", long62 == 500L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(obj64);
    }

    @Test
    public void test8997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8997");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str1 = atomikosProperties0.logBaseDir;
        java.lang.String str2 = atomikosProperties0.logBaseName;
        java.lang.String str3 = atomikosProperties0.getLogBaseDir();
        boolean boolean4 = atomikosProperties0.isSerialJtaTransactions();
        atomikosProperties0.setEnableLogging(false);
        boolean boolean7 = atomikosProperties0.serialJtaTransactions;
        long long8 = atomikosProperties0.defaultJtaTimeout;
        java.lang.String str9 = atomikosProperties0.logBaseName;
        java.lang.String str10 = atomikosProperties0.logBaseName;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        java.lang.String str13 = atomikosProperties0.transactionManagerUniqueName;
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "tmlog" + "'", str2, "tmlog");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10000L + "'", long8 == 10000L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tmlog" + "'", str9, "tmlog");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tmlog" + "'", str10, "tmlog");
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test8998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8998");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        java.lang.Object obj3 = properties2.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties4 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str5 = atomikosProperties4.logBaseDir;
        java.lang.String str6 = atomikosProperties4.logBaseName;
        java.lang.String str7 = atomikosProperties4.getLogBaseDir();
        atomikosProperties4.setMaxActives((int) (byte) -1);
        boolean boolean10 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.transactionManagerUniqueName = "";
        atomikosProperties4.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties15 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str16 = atomikosProperties15.logBaseDir;
        java.lang.String str17 = atomikosProperties15.logBaseName;
        java.lang.String str18 = atomikosProperties15.getLogBaseDir();
        atomikosProperties15.setMaxActives((int) (byte) -1);
        java.lang.String str21 = atomikosProperties15.getService();
        java.lang.Object obj22 = properties2.getOrDefault((java.lang.Object) atomikosProperties4, (java.lang.Object) atomikosProperties15);
        atomikosProperties4.maxActives = ' ';
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties25 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str26 = atomikosProperties25.logBaseDir;
        java.lang.String str27 = atomikosProperties25.logBaseName;
        java.lang.String str28 = atomikosProperties25.getLogBaseDir();
        atomikosProperties25.setMaxActives((int) (byte) -1);
        boolean boolean31 = atomikosProperties25.isEnableLogging();
        atomikosProperties25.transactionManagerUniqueName = "";
        atomikosProperties25.threadedTwoPhaseCommit = true;
        java.util.Properties properties36 = atomikosProperties25.asProperties();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties38 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long39 = atomikosProperties38.checkpointInterval;
        java.util.Properties properties40 = atomikosProperties38.asProperties();
        properties40.clear();
        boolean boolean42 = properties40.isEmpty();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties43 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str44 = atomikosProperties43.logBaseDir;
        atomikosProperties43.setTransactionManagerUniqueName("");
        int int47 = atomikosProperties43.getMaxActives();
        java.lang.String str48 = atomikosProperties43.transactionManagerUniqueName;
        boolean boolean49 = properties40.containsValue((java.lang.Object) atomikosProperties43);
        java.util.Enumeration<java.lang.Object> objEnumeration50 = properties40.elements();
        atomikosProperties4.set(properties36, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", (java.lang.Object) properties40);
        atomikosProperties4.maxTimeout = (short) 0;
        boolean boolean54 = atomikosProperties4.isEnableLogging();
        atomikosProperties4.setMaxActives((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "tmlog" + "'", str6, "tmlog");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "tmlog" + "'", str17, "tmlog");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(properties36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 500L + "'", long39 == 500L);
        org.junit.Assert.assertNotNull(properties40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objEnumeration50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test8999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test8999");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        atomikosProperties0.forceShutdownOnVmExit = false;
        atomikosProperties0.threadedTwoPhaseCommit = false;
        long long6 = atomikosProperties0.getMaxTimeout();
        java.lang.String str7 = atomikosProperties0.transactionManagerUniqueName;
        atomikosProperties0.maxTimeout = 100;
        java.lang.String str10 = atomikosProperties0.getService();
        atomikosProperties0.logBaseName = "{com.atomikos.icatch.tmlog=0.0}";
        long long13 = atomikosProperties0.defaultJtaTimeout;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties14 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long15 = atomikosProperties14.checkpointInterval;
        java.util.Properties properties16 = atomikosProperties14.asProperties();
        java.lang.Object obj17 = properties16.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties18 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str19 = atomikosProperties18.logBaseDir;
        java.lang.String str20 = atomikosProperties18.logBaseName;
        java.lang.String str21 = atomikosProperties18.getLogBaseDir();
        atomikosProperties18.setMaxActives((int) (byte) -1);
        boolean boolean24 = atomikosProperties18.isEnableLogging();
        atomikosProperties18.transactionManagerUniqueName = "";
        atomikosProperties18.setEnableLogging(false);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties29 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str30 = atomikosProperties29.logBaseDir;
        java.lang.String str31 = atomikosProperties29.logBaseName;
        java.lang.String str32 = atomikosProperties29.getLogBaseDir();
        atomikosProperties29.setMaxActives((int) (byte) -1);
        java.lang.String str35 = atomikosProperties29.getService();
        java.lang.Object obj36 = properties16.getOrDefault((java.lang.Object) atomikosProperties18, (java.lang.Object) atomikosProperties29);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties37 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long38 = atomikosProperties37.checkpointInterval;
        int int39 = atomikosProperties37.getMaxActives();
        java.lang.String str40 = atomikosProperties37.logBaseDir;
        java.lang.Object obj42 = properties16.putIfAbsent((java.lang.Object) atomikosProperties37, (java.lang.Object) "");
        int int43 = properties16.size();
        java.util.Collection<java.lang.Object> objCollection44 = properties16.values();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties45 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long46 = atomikosProperties45.checkpointInterval;
        int int47 = atomikosProperties45.getMaxActives();
        java.lang.String str48 = atomikosProperties45.logBaseDir;
        java.lang.String str49 = atomikosProperties45.service;
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties50 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str51 = atomikosProperties50.logBaseDir;
        java.lang.String str52 = atomikosProperties50.logBaseName;
        java.lang.String str53 = atomikosProperties50.getLogBaseDir();
        atomikosProperties50.setMaxActives((int) (byte) -1);
        boolean boolean56 = atomikosProperties50.isEnableLogging();
        java.lang.String str57 = atomikosProperties50.getLogBaseName();
        java.lang.Object obj58 = properties16.replace((java.lang.Object) atomikosProperties45, (java.lang.Object) atomikosProperties50);
        atomikosProperties45.checkpointInterval = 100L;
        int int61 = atomikosProperties45.maxActives;
        java.util.Properties properties62 = atomikosProperties45.asProperties();
        java.util.Set<java.lang.String> strSet63 = properties62.stringPropertyNames();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties65 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long66 = atomikosProperties65.checkpointInterval;
        atomikosProperties65.forceShutdownOnVmExit = false;
        atomikosProperties65.threadedTwoPhaseCommit = false;
        atomikosProperties65.setTransactionManagerUniqueName("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        atomikosProperties65.threadedTwoPhaseCommit = false;
        atomikosProperties65.setCheckpointInterval((long) (short) 1);
        boolean boolean77 = atomikosProperties65.serialJtaTransactions;
        atomikosProperties0.set(properties62, "{{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}={}, {com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=-1, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=0, com.atomikos.icatch.log_base_name=tmlog}=, com.atomikos.icatch.{}=false}", (java.lang.Object) boolean77);
        java.util.Collection<java.lang.Object> objCollection79 = properties62.values();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 300000L + "'", long6 == 300000L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10000L + "'", long13 == 10000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 500L + "'", long15 == 500L);
        org.junit.Assert.assertNotNull(properties16);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tmlog" + "'", str20, "tmlog");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 500L + "'", long38 == 500L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 50 + "'", int39 == 50);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(objCollection44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 500L + "'", long46 == 500L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 50 + "'", int47 == 50);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "tmlog" + "'", str52, "tmlog");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "tmlog" + "'", str57, "tmlog");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 50 + "'", int61 == 50);
        org.junit.Assert.assertNotNull(properties62);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 500L + "'", long66 == 500L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objCollection79);
    }

    @Test
    public void test9000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test9000");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties0 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long1 = atomikosProperties0.checkpointInterval;
        java.util.Properties properties2 = atomikosProperties0.asProperties();
        properties2.clear();
        java.util.Properties properties4 = new java.util.Properties(properties2);
        java.lang.Object obj7 = properties4.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str8 = properties4.toString();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties9 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str10 = atomikosProperties9.logBaseDir;
        java.lang.String str11 = atomikosProperties9.logBaseName;
        java.lang.String str12 = atomikosProperties9.getLogBaseDir();
        atomikosProperties9.setMaxActives((int) (byte) -1);
        boolean boolean15 = atomikosProperties9.isEnableLogging();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties16 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        atomikosProperties16.setCheckpointInterval((long) 100);
        boolean boolean19 = atomikosProperties16.isForceShutdownOnVmExit();
        java.lang.Object obj20 = properties4.putIfAbsent((java.lang.Object) atomikosProperties9, (java.lang.Object) boolean19);
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet21 = properties4.entrySet();
        java.util.Set<java.lang.String> strSet22 = properties4.stringPropertyNames();
        properties4.clear();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties24 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str25 = atomikosProperties24.logBaseDir;
        java.lang.String str26 = atomikosProperties24.logBaseName;
        java.lang.String str27 = atomikosProperties24.getLogBaseName();
        atomikosProperties24.setDefaultJtaTimeout((long) (byte) 1);
        boolean boolean30 = atomikosProperties24.isSerialJtaTransactions();
        java.lang.String str31 = atomikosProperties24.getLogBaseName();
        java.util.Properties properties32 = new java.util.Properties();
        java.lang.Object obj35 = properties32.getOrDefault((java.lang.Object) 0.0f, (java.lang.Object) 0.0d);
        java.lang.Object obj38 = properties32.setProperty("{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties39 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        java.lang.String str40 = atomikosProperties39.logBaseDir;
        atomikosProperties39.setTransactionManagerUniqueName("");
        int int43 = atomikosProperties39.getMaxActives();
        java.lang.String str44 = atomikosProperties39.transactionManagerUniqueName;
        atomikosProperties39.setService("");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties47 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long48 = atomikosProperties47.checkpointInterval;
        java.util.Properties properties49 = atomikosProperties47.asProperties();
        properties49.clear();
        java.util.Properties properties51 = new java.util.Properties(properties49);
        atomikosProperties39.set(properties49, "tmlog", (java.lang.Object) 0.0d);
        java.lang.Object obj57 = properties49.setProperty("", "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties58 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long59 = atomikosProperties58.checkpointInterval;
        java.util.Properties properties60 = atomikosProperties58.asProperties();
        properties60.clear();
        java.util.Properties properties62 = new java.util.Properties(properties60);
        java.lang.Object obj65 = properties62.getOrDefault((java.lang.Object) "", (java.lang.Object) "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        java.lang.String str66 = properties62.toString();
        java.lang.Object obj69 = properties62.setProperty("tmlog", "");
        java.util.Set<java.lang.Object> objSet70 = properties62.keySet();
        java.lang.Object obj71 = properties49.remove((java.lang.Object) properties62);
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties72 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long73 = atomikosProperties72.checkpointInterval;
        java.util.Properties properties74 = atomikosProperties72.asProperties();
        properties74.clear();
        boolean boolean76 = properties74.isEmpty();
        java.lang.Object obj77 = properties74.clone();
        org.springframework.boot.jta.atomikos.AtomikosProperties atomikosProperties78 = new org.springframework.boot.jta.atomikos.AtomikosProperties();
        long long79 = atomikosProperties78.checkpointInterval;
        java.util.Properties properties80 = atomikosProperties78.asProperties();
        properties80.clear();
        boolean boolean82 = properties80.isEmpty();
        java.util.Collection<java.lang.Object> objCollection83 = properties80.values();
        properties74.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties80);
        java.util.Enumeration<?> wildcardEnumeration85 = properties74.propertyNames();
        java.lang.Object obj86 = properties49.get((java.lang.Object) properties74);
        properties32.putAll((java.util.Map<java.lang.Object, java.lang.Object>) properties49);
        java.util.Enumeration<java.lang.Object> objEnumeration88 = properties32.elements();
        java.util.Enumeration<java.lang.Object> objEnumeration89 = properties32.elements();
        java.lang.Object obj90 = properties4.replace((java.lang.Object) str31, (java.lang.Object) objEnumeration89);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 500L + "'", long1 == 500L);
        org.junit.Assert.assertNotNull(properties2);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj7, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tmlog" + "'", str11, "tmlog");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(objEntrySet21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "tmlog" + "'", str26, "tmlog");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "tmlog" + "'", str27, "tmlog");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tmlog" + "'", str31, "tmlog");
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + 0.0d + "'", obj35, 0.0d);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 50 + "'", int43 == 50);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 500L + "'", long48 == 500L);
        org.junit.Assert.assertNotNull(properties49);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 500L + "'", long59 == 500L);
        org.junit.Assert.assertNotNull(properties60);
        org.junit.Assert.assertEquals("'" + obj65 + "' != '" + "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}" + "'", obj65, "{com.atomikos.icatch.enable_logging=true, com.atomikos.icatch.force_shutdown_on_vm_exit=false, com.atomikos.icatch.checkpoint_interval=500, com.atomikos.icatch.serial_jta_transactions=true, com.atomikos.icatch.default_jta_timeout=10000, com.atomikos.icatch.max_timeout=300000, com.atomikos.icatch.threaded_2pc=false, com.atomikos.icatch.max_actives=50, com.atomikos.icatch.log_base_name=tmlog}");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{}" + "'", str66, "{}");
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(objSet70);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 500L + "'", long73 == 500L);
        org.junit.Assert.assertNotNull(properties74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "{}");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 500L + "'", long79 == 500L);
        org.junit.Assert.assertNotNull(properties80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objCollection83);
        org.junit.Assert.assertNotNull(wildcardEnumeration85);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(objEnumeration88);
        org.junit.Assert.assertNotNull(objEnumeration89);
        org.junit.Assert.assertNull(obj90);
    }
}
