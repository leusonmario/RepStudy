/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 05:37:50 GMT 2021
 */

package org.springframework.boot.jta.atomikos;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.Enumeration;
import java.util.Properties;
import org.assertj.core.data.MapEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.ComparisonFailure;
import org.junit.runner.RunWith;
import org.springframework.boot.jta.atomikos.AtomikosProperties;
import org.springframework.boot.jta.atomikos.AtomikosPropertiesTests;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtomikosPropertiesTests_ESTest extends AtomikosPropertiesTests_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String string0 = "";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(atomikosProperties0.logBaseName, atomikosProperties0.logBaseName);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.properties.asProperties();
      assertNotNull(properties0);
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(50, atomikosProperties1.maxActives);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "|Ax_[4\"L";
      stringArray0[1] = string1;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      assertEquals(2, stringArray0.length);
      assertEquals(2, mapEntryArray0.length);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      
      int int0 = (-132);
      atomikosProperties0.maxActives = int0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-132), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals((-132), atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals((-132), atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getService());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals((-132), atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertEquals((-132), atomikosProperties2.maxActives);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties3);
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertEquals((-132), atomikosProperties3.getMaxActives());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties3.getService());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties3.maxTimeout);
      assertEquals(500L, atomikosProperties3.checkpointInterval);
      assertTrue(atomikosProperties3.enableLogging);
      assertEquals(10000L, atomikosProperties3.defaultJtaTimeout);
      assertEquals((-132), atomikosProperties3.maxActives);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertFalse(atomikosProperties3.threadedTwoPhaseCommit);
      
      AtomikosProperties atomikosProperties4 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties4);
      assertTrue(atomikosProperties4.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties4.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties4.getCheckpointInterval());
      assertTrue(atomikosProperties4.isEnableLogging());
      assertNull(atomikosProperties4.getService());
      assertEquals(300000L, atomikosProperties4.getMaxTimeout());
      assertFalse(atomikosProperties4.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties4.getLogBaseDir());
      assertNull(atomikosProperties4.getTransactionManagerUniqueName());
      assertEquals((-132), atomikosProperties4.getMaxActives());
      assertEquals("tmlog", atomikosProperties4.getLogBaseName());
      assertFalse(atomikosProperties4.isForceShutdownOnVmExit());
      assertSame(atomikosProperties4, atomikosProperties1);
      assertSame(atomikosProperties4, atomikosProperties3);
      assertSame(atomikosProperties4, atomikosProperties0);
      assertSame(atomikosProperties4, atomikosProperties2);
      assertEquals(500L, atomikosProperties4.checkpointInterval);
      assertEquals(300000L, atomikosProperties4.maxTimeout);
      assertFalse(atomikosProperties4.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties4.serialJtaTransactions);
      assertEquals((-132), atomikosProperties4.maxActives);
      assertTrue(atomikosProperties4.enableLogging);
      assertEquals(10000L, atomikosProperties4.defaultJtaTimeout);
      assertFalse(atomikosProperties4.forceShutdownOnVmExit);
      
      Properties properties0 = atomikosPropertiesTests0.properties.asProperties();
      assertNotNull(properties0);
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[9];
      String string0 = "cx01S";
      stringArray0[0] = string0;
      stringArray0[1] = atomikosProperties0.logBaseName;
      stringArray0[2] = atomikosProperties0.logBaseDir;
      stringArray0[3] = atomikosProperties2.logBaseName;
      stringArray0[4] = atomikosPropertiesTests0.properties.transactionManagerUniqueName;
      stringArray0[5] = atomikosProperties1.service;
      stringArray0[6] = atomikosProperties2.transactionManagerUniqueName;
      stringArray0[7] = atomikosProperties4.logBaseDir;
      stringArray0[8] = atomikosProperties3.logBaseName;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "@-RP(";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "HOS?slTULi=FJ";
      String string1 = null;
      atomikosPropertiesTests0.assertProperty(string0, string1);
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      boolean boolean0 = true;
      atomikosProperties0.setEnableLogging(boolean0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getService());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties2.maxActives);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties3);
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertNull(atomikosProperties3.getService());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertEquals(500L, atomikosProperties3.checkpointInterval);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertTrue(atomikosProperties3.enableLogging);
      assertEquals(10000L, atomikosProperties3.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties3.maxTimeout);
      assertEquals(50, atomikosProperties3.maxActives);
      assertFalse(atomikosProperties3.threadedTwoPhaseCommit);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = atomikosProperties1.service;
      stringArray0[1] = atomikosProperties3.logBaseDir;
      stringArray0[2] = atomikosProperties3.logBaseDir;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "$c?k";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      String[] stringArray0 = new String[4];
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties1);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "|6SxMp`~";
      stringArray0[1] = string1;
      String string2 = "@FR,mk5f4T+20\\tr";
      stringArray0[2] = string2;
      String string3 = "IS8";
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertFalse(properties1.isEmpty());
      assertEquals(17, properties1.size());
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      
      stringArray0[3] = string3;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotSame(properties0, properties1);
      assertFalse(properties0.equals((Object)properties1));
      assertEquals(4, mapEntryArray0.length);
      assertEquals(4, stringArray0.length);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getService());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(atomikosProperties2.service, atomikosProperties2.logBaseDir);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      
      long long0 = 0L;
      atomikosProperties0.checkpointInterval = long0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(0L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties1.checkpointInterval);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertEquals(0L, atomikosProperties2.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertEquals(50, atomikosProperties2.maxActives);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(0L, atomikosProperties2.checkpointInterval);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties3);
      assertEquals(0L, atomikosProperties3.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertNull(atomikosProperties3.getService());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertEquals(300000L, atomikosProperties3.maxTimeout);
      assertEquals(10000L, atomikosProperties3.defaultJtaTimeout);
      assertEquals(50, atomikosProperties3.maxActives);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertTrue(atomikosProperties3.enableLogging);
      assertFalse(atomikosProperties3.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties3.checkpointInterval);
      
      atomikosProperties2.setLogBaseName(atomikosProperties1.logBaseName);
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(0L, atomikosProperties2.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties1, atomikosProperties2);
      assertSame(atomikosProperties1, atomikosProperties3);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties3);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties1.checkpointInterval);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertEquals(50, atomikosProperties2.maxActives);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(0L, atomikosProperties2.checkpointInterval);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      
      atomikosProperties3.serialJtaTransactions = atomikosProperties2.enableLogging;
      assertEquals(0L, atomikosProperties2.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties3.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertNull(atomikosProperties3.getService());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties3.isEnableLogging());
      
      boolean boolean0 = true;
      atomikosProperties3.setThreadedTwoPhaseCommit(boolean0);
      assertEquals(0L, atomikosProperties3.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertNull(atomikosProperties3.getService());
      assertTrue(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertEquals(300000L, atomikosProperties3.maxTimeout);
      assertEquals(10000L, atomikosProperties3.defaultJtaTimeout);
      assertEquals(50, atomikosProperties3.maxActives);
      assertTrue(atomikosProperties3.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertTrue(atomikosProperties3.enableLogging);
      assertEquals(0L, atomikosProperties3.checkpointInterval);
      
      atomikosProperties0.maxActives = atomikosProperties1.maxActives;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties3);
      assertEquals(0L, atomikosProperties3.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertNull(atomikosProperties3.getService());
      assertTrue(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertEquals(300000L, atomikosProperties3.maxTimeout);
      assertEquals(10000L, atomikosProperties3.defaultJtaTimeout);
      assertEquals(50, atomikosProperties3.maxActives);
      assertTrue(atomikosProperties3.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertTrue(atomikosProperties3.enableLogging);
      assertEquals(0L, atomikosProperties3.checkpointInterval);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertFalse(properties1.isEmpty());
      assertEquals(17, properties1.size());
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties2);
      assertEquals(17, properties2.size());
      assertFalse(properties2.isEmpty());
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      
      AtomikosProperties atomikosProperties4 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties4);
      assertTrue(atomikosProperties4.isEnableLogging());
      assertNull(atomikosProperties4.getService());
      assertNull(atomikosProperties4.getTransactionManagerUniqueName());
      assertNull(atomikosProperties4.getLogBaseDir());
      assertTrue(atomikosProperties4.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties4.getMaxActives());
      assertFalse(atomikosProperties4.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties4.getMaxTimeout());
      assertTrue(atomikosProperties4.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties4.getDefaultJtaTimeout());
      assertEquals(0L, atomikosProperties4.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties4.getLogBaseName());
      assertSame(atomikosProperties4, atomikosProperties2);
      assertSame(atomikosProperties4, atomikosProperties3);
      assertSame(atomikosProperties4, atomikosProperties1);
      assertSame(atomikosProperties4, atomikosProperties0);
      assertTrue(atomikosProperties4.enableLogging);
      assertTrue(atomikosProperties4.serialJtaTransactions);
      assertEquals(0L, atomikosProperties4.checkpointInterval);
      assertEquals(50, atomikosProperties4.maxActives);
      assertEquals(300000L, atomikosProperties4.maxTimeout);
      assertTrue(atomikosProperties4.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties4.defaultJtaTimeout);
      assertFalse(atomikosProperties4.forceShutdownOnVmExit);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties4);
      assertTrue(atomikosProperties4.isEnableLogging());
      assertNull(atomikosProperties4.getService());
      assertNull(atomikosProperties4.getTransactionManagerUniqueName());
      assertNull(atomikosProperties4.getLogBaseDir());
      assertTrue(atomikosProperties4.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties4.getMaxActives());
      assertFalse(atomikosProperties4.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties4.getMaxTimeout());
      assertTrue(atomikosProperties4.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties4.getDefaultJtaTimeout());
      assertEquals(0L, atomikosProperties4.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties4.getLogBaseName());
      assertSame(atomikosProperties4, atomikosProperties2);
      assertSame(atomikosProperties4, atomikosProperties3);
      assertSame(atomikosProperties4, atomikosProperties1);
      assertSame(atomikosProperties4, atomikosProperties0);
      assertTrue(atomikosProperties4.enableLogging);
      assertTrue(atomikosProperties4.serialJtaTransactions);
      assertEquals(0L, atomikosProperties4.checkpointInterval);
      assertEquals(50, atomikosProperties4.maxActives);
      assertEquals(300000L, atomikosProperties4.maxTimeout);
      assertTrue(atomikosProperties4.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties4.defaultJtaTimeout);
      assertFalse(atomikosProperties4.forceShutdownOnVmExit);
      
      String string0 = "";
      atomikosPropertiesTests0.assertProperty(string0, atomikosProperties1.logBaseDir);
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertSame(atomikosProperties1, atomikosProperties2);
      assertSame(atomikosProperties1, atomikosProperties3);
      assertSame(atomikosProperties1, atomikosProperties4);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(0L, atomikosProperties1.checkpointInterval);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = null;
      atomikosPropertiesTests0.properties = atomikosProperties0;
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties1);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      boolean boolean0 = true;
      atomikosProperties0.threadedTwoPhaseCommit = boolean0;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      Properties properties1 = atomikosProperties0.asProperties();
      assertNotNull(properties1);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(9, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties1, properties0);
      assertFalse(properties1.equals((Object)properties0));
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      boolean boolean1 = false;
      atomikosProperties0.serialJtaTransactions = boolean1;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties2);
      assertEquals(17, properties2.size());
      assertFalse(properties2.isEmpty());
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertFalse(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      
      boolean boolean2 = false;
      atomikosProperties0.enableLogging = boolean2;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      int int0 = 611;
      int int1 = 801;
      atomikosProperties0.setMaxActives(int1);
      assertEquals(801, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(int1 == int0);
      assertEquals(801, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      atomikosProperties0.maxActives = int0;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(611, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(611, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertFalse(atomikosPropertiesTests0.properties.isEnableLogging());
      assertTrue(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(611, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      atomikosProperties0.maxActives = int0;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(611, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      
      String string0 = "c_|DPu5A_3PnL";
      atomikosPropertiesTests0.assertProperty(string0, atomikosProperties0.transactionManagerUniqueName);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(611, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(611, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(611, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(611, atomikosProperties1.maxActives);
      
      String string1 = "v/~";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(atomikosProperties0.logBaseName, string1);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      Properties properties0 = null;
      String[] stringArray0 = new String[0];
      boolean boolean0 = true;
      atomikosProperties0.forceShutdownOnVmExit = boolean0;
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      long long0 = (-302L);
      atomikosProperties0.defaultJtaTimeout = long0;
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-302L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-302L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals((-302L), atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      
      MapEntry<?, ?>[] mapEntryArray1 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray1);
      assertNotSame(mapEntryArray1, mapEntryArray0);
      assertFalse(mapEntryArray1.equals((Object)mapEntryArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray1.length);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getService());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-302L), atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals((-302L), atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      
      MapEntry<?, ?>[] mapEntryArray2 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray2);
      assertNotSame(mapEntryArray2, mapEntryArray0);
      assertNotSame(mapEntryArray2, mapEntryArray1);
      assertFalse(mapEntryArray2.equals((Object)mapEntryArray0));
      assertFalse(mapEntryArray2.equals((Object)mapEntryArray1));
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray2.length);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[3];
      Enumeration<Object> enumeration0 = properties0.keys();
      assertNotNull(enumeration0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String string0 = "%s@%x{i=%s,ip=%s,e=%s,ep=%s}";
      stringArray0[0] = string0;
      String string1 = "h<B.xi5lAbH}";
      stringArray0[1] = string1;
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      
      long long0 = 0L;
      atomikosProperties0.checkpointInterval = long0;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      
      String string2 = "IkhE#y";
      stringArray0[2] = string2;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      assertEquals(3, stringArray0.length);
      assertEquals(3, mapEntryArray0.length);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties1);
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(0L, atomikosProperties1.checkpointInterval);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      
      atomikosProperties0.setMaxActives(atomikosPropertiesTests0.properties.maxActives);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertSame(atomikosProperties0, atomikosProperties1);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(0L, atomikosProperties1.checkpointInterval);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      
      long long1 = (-1L);
      atomikosProperties0.checkpointInterval = long1;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      MapEntry<?, ?>[] mapEntryArray1 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray1);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotSame(mapEntryArray1, mapEntryArray0);
      assertFalse(mapEntryArray1.equals((Object)mapEntryArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, mapEntryArray1.length);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertEquals(17, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals((-1L), atomikosProperties2.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertTrue(atomikosProperties2.enableLogging);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals((-1L), atomikosProperties2.checkpointInterval);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties2.maxActives);
      
      Properties properties2 = new Properties();
      assertNotNull(properties2);
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertFalse(properties2.equals((Object)properties1));
      assertFalse(properties2.equals((Object)properties0));
      
      long long2 = (-160L);
      atomikosProperties2.setDefaultJtaTimeout(long2);
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals((-1L), atomikosProperties2.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals((-160L), atomikosProperties2.getDefaultJtaTimeout());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertTrue(atomikosProperties2.enableLogging);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals((-1L), atomikosProperties2.checkpointInterval);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertEquals((-160L), atomikosProperties2.defaultJtaTimeout);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties2.maxActives);
      
      Properties properties3 = atomikosProperties1.asProperties();
      assertNotNull(properties3);
      assertFalse(properties3.isEmpty());
      assertEquals(9, properties3.size());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals((-160L), atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals((-1L), atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNotSame(properties3, properties0);
      assertNotSame(properties3, properties2);
      assertNotSame(properties3, properties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertFalse(properties3.equals((Object)properties0));
      assertFalse(properties3.equals((Object)properties2));
      assertFalse(properties3.equals((Object)properties1));
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals((-160L), atomikosProperties1.defaultJtaTimeout);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals((-1L), atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      
      String string3 = "7V5huEqGk";
      Object object0 = properties3.put(atomikosPropertiesTests0.properties, atomikosPropertiesTests0.properties);
      assertNull(object0);
      assertEquals((-160L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-1L), atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10, properties3.size());
      assertFalse(properties3.isEmpty());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals((-160L), atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals((-1L), atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals((-160L), atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals((-1L), atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties0, atomikosProperties1);
      assertSame(atomikosProperties0, atomikosProperties2);
      assertNotSame(properties3, properties0);
      assertNotSame(properties3, properties2);
      assertNotSame(properties3, properties1);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties2);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties1);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertFalse(properties3.equals((Object)properties0));
      assertFalse(properties3.equals((Object)properties2));
      assertFalse(properties3.equals((Object)properties1));
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals((-160L), atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1L), atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosPropertiesTests0.properties.serialJtaTransactions);
      assertTrue(atomikosPropertiesTests0.properties.enableLogging);
      assertEquals(50, atomikosPropertiesTests0.properties.maxActives);
      assertFalse(atomikosPropertiesTests0.properties.forceShutdownOnVmExit);
      assertEquals((-160L), atomikosPropertiesTests0.properties.defaultJtaTimeout);
      assertEquals((-1L), atomikosPropertiesTests0.properties.checkpointInterval);
      assertFalse(atomikosPropertiesTests0.properties.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosPropertiesTests0.properties.maxTimeout);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals((-160L), atomikosProperties1.defaultJtaTimeout);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals((-1L), atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      
      properties2.clear();
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties3);
      assertNotSame(properties2, properties0);
      assertFalse(properties2.equals((Object)properties1));
      assertFalse(properties2.equals((Object)properties3));
      assertFalse(properties2.equals((Object)properties0));
      
      Object object1 = properties2.put(properties3, string3);
      assertNull(object1);
      assertFalse(properties2.isEmpty());
      assertEquals(1, properties2.size());
      assertEquals(10, properties3.size());
      assertFalse(properties3.isEmpty());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals((-160L), atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals((-1L), atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties3);
      assertNotSame(properties2, properties0);
      assertNotSame(properties3, properties0);
      assertNotSame(properties3, properties2);
      assertNotSame(properties3, properties1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertFalse(properties2.equals((Object)properties1));
      assertFalse(properties2.equals((Object)properties3));
      assertFalse(properties2.equals((Object)properties0));
      assertFalse(properties3.equals((Object)properties0));
      assertFalse(properties3.equals((Object)properties2));
      assertFalse(properties3.equals((Object)properties1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals((-160L), atomikosProperties1.defaultJtaTimeout);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals((-1L), atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      
      MapEntry<?, ?>[] mapEntryArray2 = atomikosPropertiesTests0.defaultOf(properties2, stringArray0);
      assertNotNull(mapEntryArray2);
      assertFalse(properties2.isEmpty());
      assertEquals(1, properties2.size());
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties3);
      assertNotSame(properties2, properties0);
      assertNotSame(mapEntryArray2, mapEntryArray0);
      assertNotSame(mapEntryArray2, mapEntryArray1);
      assertFalse(properties2.equals((Object)properties1));
      assertFalse(properties2.equals((Object)properties3));
      assertFalse(properties2.equals((Object)properties0));
      assertFalse(mapEntryArray2.equals((Object)mapEntryArray0));
      assertFalse(mapEntryArray2.equals((Object)mapEntryArray1));
      assertEquals(3, stringArray0.length);
      assertEquals(3, mapEntryArray2.length);
      
      atomikosProperties2.forceShutdownOnVmExit = atomikosPropertiesTests0.properties.threadedTwoPhaseCommit;
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals((-1L), atomikosProperties2.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals((-160L), atomikosProperties2.getDefaultJtaTimeout());
      
      String string4 = "file";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(atomikosProperties2.transactionManagerUniqueName, string4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      int int0 = 0;
      atomikosProperties0.setMaxActives(int0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      atomikosProperties0.setMaxActives(atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      Object object0 = properties0.put(atomikosPropertiesTests0, atomikosPropertiesTests0);
      assertNull(object0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      
      String string0 = "<A#]*PS~Q`Na%7ZNS";
      Properties properties1 = new Properties();
      assertNotNull(properties1);
      assertEquals(0, properties1.size());
      assertTrue(properties1.isEmpty());
      assertFalse(properties1.equals((Object)properties0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = properties1.put(properties0, object1);
      assertNull(object2);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      assertFalse(properties1.isEmpty());
      assertEquals(1, properties1.size());
      assertNotSame(properties0, properties1);
      assertNotSame(properties1, properties0);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(properties1.equals((Object)properties0));
      
      atomikosProperties0.setLogBaseName(string0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("<A#]*PS~Q`Na%7ZNS", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      String string1 = "m7C1T_:~";
      atomikosProperties0.set(properties1, string1, properties1);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("<A#]*PS~Q`Na%7ZNS", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(properties1.isEmpty());
      assertEquals(2, properties1.size());
      assertNotSame(properties1, properties0);
      assertNotSame(string1, string0);
      assertFalse(properties1.equals((Object)properties0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("<A#]*PS~Q`Na%7ZNS", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("<A#]*PS~Q`Na%7ZNS", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(0, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals(0, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("<A#]*PS~Q`Na%7ZNS", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(0, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = atomikosProperties1.transactionManagerUniqueName;
      stringArray0[1] = atomikosProperties1.service;
      stringArray0[2] = atomikosProperties0.logBaseName;
      stringArray0[3] = atomikosProperties0.service;
      stringArray0[4] = atomikosProperties0.logBaseDir;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      long long0 = 0L;
      atomikosProperties0.defaultJtaTimeout = long0;
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      int int0 = 22;
      atomikosProperties0.maxActives = int0;
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(22, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      boolean boolean0 = false;
      atomikosProperties0.serialJtaTransactions = boolean0;
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(22, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(22, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(22, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(0L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      atomikosProperties0.setTransactionManagerUniqueName(atomikosPropertiesTests0.properties.service);
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(22, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(22, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      atomikosProperties0.maxActives = atomikosPropertiesTests0.properties.maxActives;
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(22, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.checkpointInterval = long0;
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(22, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      int int1 = 7;
      atomikosProperties0.setMaxActives(int1);
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(7, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(int1 == int0);
      assertFalse(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertEquals(7, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(0L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(0L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(7, atomikosProperties1.getMaxActives());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(0L, atomikosProperties1.checkpointInterval);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.serialJtaTransactions);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(0L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(7, atomikosProperties1.maxActives);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      long long0 = 0L;
      atomikosProperties0.setMaxTimeout(long0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(50, atomikosProperties0.maxActives);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String string0 = "ce";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      atomikosProperties0.logBaseName = string0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("ce", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertEquals(17, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties2);
      assertFalse(properties2.isEmpty());
      assertEquals(17, properties2.size());
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertTrue(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("ce", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("ce", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(0L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      Properties properties3 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties3);
      assertFalse(properties3.isEmpty());
      assertEquals(17, properties3.size());
      assertNotSame(properties3, properties2);
      assertNotSame(properties3, properties1);
      assertNotSame(properties3, properties0);
      assertTrue(properties3.equals((Object)properties1));
      assertTrue(properties3.equals((Object)properties0));
      assertTrue(properties3.equals((Object)properties2));
      
      Properties properties4 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties4);
      assertFalse(properties4.isEmpty());
      assertEquals(17, properties4.size());
      assertNotSame(properties4, properties3);
      assertNotSame(properties4, properties1);
      assertNotSame(properties4, properties2);
      assertNotSame(properties4, properties0);
      assertTrue(properties4.equals((Object)properties2));
      assertTrue(properties4.equals((Object)properties1));
      assertTrue(properties4.equals((Object)properties0));
      assertTrue(properties4.equals((Object)properties3));
      
      Properties properties5 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties5);
      assertEquals(17, properties5.size());
      assertFalse(properties5.isEmpty());
      assertNotSame(properties5, properties2);
      assertNotSame(properties5, properties0);
      assertNotSame(properties5, properties4);
      assertNotSame(properties5, properties3);
      assertNotSame(properties5, properties1);
      assertTrue(properties5.equals((Object)properties1));
      assertTrue(properties5.equals((Object)properties4));
      assertTrue(properties5.equals((Object)properties3));
      assertTrue(properties5.equals((Object)properties2));
      assertTrue(properties5.equals((Object)properties0));
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertNull(atomikosProperties1.getService());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("ce", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties1.maxTimeout);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = atomikosProperties1.logBaseDir;
      stringArray0[1] = atomikosProperties0.logBaseName;
      String string1 = "^,kqk.";
      stringArray0[2] = string1;
      stringArray0[3] = atomikosProperties0.logBaseDir;
      stringArray0[4] = atomikosPropertiesTests0.properties.logBaseDir;
      stringArray0[5] = atomikosProperties1.logBaseName;
      stringArray0[6] = atomikosPropertiesTests0.properties.transactionManagerUniqueName;
      stringArray0[7] = atomikosProperties0.service;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getService());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(50, atomikosProperties1.maxActives);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      
      long long0 = (-1L);
      atomikosProperties1.setMaxTimeout(long0);
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getService());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals((-1L), atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals((-1L), atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals((-1L), atomikosProperties2.getMaxTimeout());
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertTrue(atomikosProperties2.enableLogging);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertEquals((-1L), atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties2.maxActives);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties2);
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals((-1L), atomikosProperties2.getMaxTimeout());
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertTrue(atomikosProperties2.enableLogging);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertEquals((-1L), atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties2.maxActives);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[2];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      stringArray0[0] = string0;
      PipedOutputStream pipedOutputStream0 = null;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, atomikosProperties1.maxActives);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
