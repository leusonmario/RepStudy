/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 01:09:59 GMT 2021
 */

package org.springframework.boot.jta.atomikos;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.Properties;
import org.assertj.core.data.MapEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.ComparisonFailure;
import org.junit.runner.RunWith;
import org.springframework.boot.jta.atomikos.AtomikosProperties;
import org.springframework.boot.jta.atomikos.AtomikosPropertiesTests;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtomikosPropertiesTests_ESTest extends AtomikosPropertiesTests_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[1];
      String string0 = ";b,\\Fb;R\\`K";
      stringArray0[0] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "i%!~'z";
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = null;
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = string0;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      AtomikosPropertiesTests atomikosPropertiesTests1 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests1);
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      
      Properties properties0 = atomikosPropertiesTests1.loadDefaultSettings();
      assertNotNull(properties0);
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[5];
      String string0 = "b!tjAu\\";
      stringArray0[0] = string0;
      String string1 = "com.arjuna.ats.internal.arjuna.objectstore.FileSystemStore";
      stringArray0[1] = string1;
      String string2 = "$]Ua0hPhb1\"q,";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "r3d.-O7M-WurfRt,D=";
      stringArray0[4] = string4;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, mapEntryArray0.length);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertNotSame(properties1, properties0);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertEquals(17, properties1.size());
      assertFalse(properties1.isEmpty());
      
      boolean boolean0 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      
      boolean boolean1 = false;
      int int0 = 831;
      atomikosProperties0.setMaxActives(int0);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(831, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      atomikosProperties0.setSerialJtaTransactions(boolean1);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(boolean1 == boolean0);
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(831, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      int int1 = 9;
      atomikosProperties0.setMaxActives(int1);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(int1 == int0);
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(9, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties2);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertEquals(17, properties2.size());
      assertFalse(properties2.isEmpty());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(9, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getService());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertNotSame(properties1, properties0);
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties1.isEmpty());
      assertEquals(17, properties1.size());
      
      Object object2 = properties0.put(object0, object1);
      assertNull(object2);
      assertNotSame(properties0, properties1);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertFalse(properties0.equals((Object)properties1));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(properties0.isEmpty());
      assertEquals(18, properties0.size());
      
      String string0 = "fshkc0V\\3GHNA|;1";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      Enumeration<Object> enumeration0 = properties0.keys();
      assertNotNull(enumeration0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      String string0 = "RuhTf3qC3=WK8]H[iI(";
      Object object0 = properties0.put(atomikosPropertiesTests0, string0);
      assertNull(object0);
      assertFalse(properties0.isEmpty());
      assertEquals(1, properties0.size());
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "IT?*";
      String string1 = null;
      atomikosPropertiesTests0.assertProperty(string0, string1);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[2];
      String string0 = "ir.NlfeEv{u \\&%&;";
      stringArray0[0] = string0;
      String string1 = "MiWci9a";
      stringArray0[1] = string1;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, mapEntryArray0.length);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      atomikosPropertiesTests0.setproperties(atomikosPropertiesTests0.properties);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "uniqueName";
      String string1 = "|yN|#1fx{E#:)";
      Properties properties0 = atomikosPropertiesTests0.properties.asProperties();
      assertNotNull(properties0);
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      String string2 = "";
      stringArray0[3] = string2;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, mapEntryArray0.length);
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String string3 = null;
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      
      String string4 = "eG>KuJ1";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string3, string4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = null;
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties1);
      assertFalse(properties1.isEmpty());
      assertEquals(17, properties1.size());
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      String string0 = "1";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("1", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("1", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals("1", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("1", atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      
      long long0 = 0L;
      int int0 = (-797);
      atomikosProperties1.setMaxActives(int0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals((-797), atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("1", atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      
      atomikosProperties1.setMaxTimeout(long0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(0L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals((-797), atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("1", atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(0L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals((-797), atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("1", atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties2.getMaxTimeout());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals("1", atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals((-797), atomikosProperties2.getMaxActives());
      
      String string1 = "![0i`dhj#xPo68kQUz";
      atomikosProperties2.setTransactionManagerUniqueName(string1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties2.getMaxTimeout());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getService());
      assertEquals("![0i`dhj#xPo68kQUz", atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-797), atomikosProperties2.getMaxActives());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties2);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties2.getMaxTimeout());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getService());
      assertEquals("![0i`dhj#xPo68kQUz", atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-797), atomikosProperties2.getMaxActives());
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties2);
      assertNotSame(properties2, properties1);
      assertTrue(properties2.equals((Object)properties1));
      assertFalse(properties2.isEmpty());
      assertEquals(17, properties2.size());
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties3);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals(0L, atomikosProperties3.getMaxTimeout());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals((-797), atomikosProperties3.getMaxActives());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties3.getService());
      assertEquals("![0i`dhj#xPo68kQUz", atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertTrue(atomikosProperties3.isEnableLogging());
      
      String string2 = "object store location property not set.";
      atomikosProperties3.setTransactionManagerUniqueName(string2);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals(0L, atomikosProperties3.getMaxTimeout());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals("object store location property not set.", atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals((-797), atomikosProperties3.getMaxActives());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties3.getService());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertTrue(atomikosProperties3.isEnableLogging());
      
      MapEntry<?, ?>[] mapEntryArray1 = atomikosPropertiesTests0.defaultOf(properties1, stringArray0);
      assertNotNull(mapEntryArray1);
      assertNotSame(properties1, properties2);
      assertNotSame(mapEntryArray1, mapEntryArray0);
      assertTrue(properties1.equals((Object)properties2));
      assertFalse(mapEntryArray1.equals((Object)mapEntryArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray1.length);
      assertFalse(properties1.isEmpty());
      assertEquals(17, properties1.size());
      
      MapEntry<?, ?>[] mapEntryArray2 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray2);
      assertNotSame(mapEntryArray2, mapEntryArray1);
      assertNotSame(mapEntryArray2, mapEntryArray0);
      assertFalse(mapEntryArray2.equals((Object)mapEntryArray1));
      assertFalse(mapEntryArray2.equals((Object)mapEntryArray0));
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray2.length);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties3);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals(0L, atomikosProperties3.getMaxTimeout());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals("object store location property not set.", atomikosProperties3.getTransactionManagerUniqueName());
      assertEquals((-797), atomikosProperties3.getMaxActives());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties3.getService());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertTrue(atomikosProperties3.isEnableLogging());
      
      AtomikosProperties atomikosProperties4 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties4);
      assertSame(atomikosProperties4, atomikosProperties3);
      assertSame(atomikosProperties4, atomikosProperties1);
      assertSame(atomikosProperties4, atomikosProperties0);
      assertSame(atomikosProperties4, atomikosProperties2);
      assertTrue(atomikosProperties4.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties4.getCheckpointInterval());
      assertEquals(0L, atomikosProperties4.getMaxTimeout());
      assertEquals(10000L, atomikosProperties4.getDefaultJtaTimeout());
      assertFalse(atomikosProperties4.isForceShutdownOnVmExit());
      assertEquals("object store location property not set.", atomikosProperties4.getTransactionManagerUniqueName());
      assertEquals((-797), atomikosProperties4.getMaxActives());
      assertNull(atomikosProperties4.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties4.getLogBaseName());
      assertTrue(atomikosProperties4.isEnableLogging());
      assertNull(atomikosProperties4.getService());
      assertFalse(atomikosProperties4.isThreadedTwoPhaseCommit());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties4);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties3);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(0L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals((-797), atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("object store location property not set.", atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      
      String string3 = "hH";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string2, string3);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      long long0 = (-258L);
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals((-258L), atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      long long1 = 0L;
      atomikosProperties0.setDefaultJtaTimeout(long1);
      assertFalse(long1 == long0);
      assertEquals((-258L), atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals((-258L), atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(0L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-258L), atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(0L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals((-258L), atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      
      int int0 = (-847);
      atomikosProperties0.setMaxActives(int0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-847), atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      long long0 = 0L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-847), atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-847), atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals((-847), atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals((-847), atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      
      String string0 = "..";
      String string1 = "";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string1);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      long long0 = (-1738L);
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      
      boolean boolean0 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1738L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1738L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1738L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals((-1738L), atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      
      long long0 = 2318L;
      atomikosProperties1.setDefaultJtaTimeout(long0);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(2318L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      
      long long1 = (-3352L);
      atomikosProperties1.setCheckpointInterval(long1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(long1 == long0);
      assertEquals(2318L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getService());
      assertEquals((-3352L), atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isEnableLogging());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(2318L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getService());
      assertEquals((-3352L), atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isEnableLogging());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(2318L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getService());
      assertEquals((-3352L), atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isEnableLogging());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(2318L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getService());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals((-3352L), atomikosProperties2.getCheckpointInterval());
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties3);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals((-3352L), atomikosProperties3.getCheckpointInterval());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertEquals(2318L, atomikosProperties3.getDefaultJtaTimeout());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertNull(atomikosProperties3.getService());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      
      String string0 = "";
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      String[] stringArray0 = new String[9];
      String string0 = "|1Y";
      stringArray0[0] = string0;
      String string1 = "org.assertj.core.api.UriAssert";
      stringArray0[1] = string1;
      String string2 = "lcI+%h 7MK,Q";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "}cjoUm#B{{!>Rw!Vs";
      stringArray0[4] = string4;
      String string5 = "&8`}";
      stringArray0[5] = string5;
      String string6 = "";
      stringArray0[6] = string6;
      String string7 = "R[";
      stringArray0[7] = string7;
      String string8 = "- =v&We%0a<,!dGGkY4";
      stringArray0[8] = string8;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, mapEntryArray0.length);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      
      AtomikosProperties atomikosProperties0 = null;
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties1);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "o[\\Y$9>aVgryN^.:CE";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      atomikosProperties0.setEnableLogging(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      boolean boolean2 = false;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile1, boolean0, boolean2, boolean1);
      assertFalse(boolean3);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getService());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getService());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties3);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertNull(atomikosProperties3.getService());
      assertFalse(atomikosProperties3.isEnableLogging());
      
      AtomikosProperties atomikosProperties4 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties4);
      assertSame(atomikosProperties4, atomikosProperties2);
      assertSame(atomikosProperties4, atomikosProperties0);
      assertSame(atomikosProperties4, atomikosProperties1);
      assertSame(atomikosProperties4, atomikosProperties3);
      assertNull(atomikosProperties4.getTransactionManagerUniqueName());
      assertNull(atomikosProperties4.getLogBaseDir());
      assertNull(atomikosProperties4.getService());
      assertFalse(atomikosProperties4.isEnableLogging());
      assertEquals(500L, atomikosProperties4.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties4.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties4.getMaxActives());
      assertEquals(300000L, atomikosProperties4.getMaxTimeout());
      assertFalse(atomikosProperties4.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties4.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties4.getLogBaseName());
      assertFalse(atomikosProperties4.isThreadedTwoPhaseCommit());
      
      Properties properties0 = null;
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      String string1 = "com.atomikos.icatch.service";
      stringArray0[2] = string1;
      stringArray0[3] = string0;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }
}
