/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 10:13:25 GMT 2021
 */

package org.springframework.boot.jta.atomikos;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Properties;
import org.assertj.core.data.MapEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.ComparisonFailure;
import org.junit.runner.RunWith;
import org.springframework.boot.jta.atomikos.AtomikosProperties;
import org.springframework.boot.jta.atomikos.AtomikosPropertiesTests;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtomikosPropertiesTests_ESTest extends AtomikosPropertiesTests_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string0 = "checkpoint_interval";
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNotNull(atomikosProperties0);
      
      String[] stringArray0 = new String[1];
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      stringArray0[0] = string0;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(mapEntryArray0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "'";
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.properties.asProperties();
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      assertNotNull(properties0);
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNotNull(atomikosProperties0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      assertNotNull(properties0);
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      assertNotNull(mapEntryArray0);
      
      String string0 = "/nLADkEc;/w3!U";
      String string1 = "1w8T";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string1);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.properties.asProperties();
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      assertNotNull(properties0);
      
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "W. k+9@E^";
      stringArray0[2] = string2;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, mapEntryArray0.length);
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      assertNotNull(mapEntryArray0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      String string0 = null;
      String string1 = "g";
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(17, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties1, properties0);
      assertNotNull(properties1);
      
      String string2 = "U97}4:)$";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "serial_jta_transactions";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNotNull(atomikosProperties0);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      
      Properties properties0 = atomikosProperties1.asProperties();
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(properties0);
      
      boolean boolean0 = true;
      atomikosProperties1.setThreadedTwoPhaseCommit(boolean0);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      Properties properties1 = atomikosProperties1.asProperties();
      assertFalse(properties1.equals((Object)properties0));
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(9, properties1.size());
      assertFalse(properties1.isEmpty());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotSame(properties1, properties0);
      assertNotNull(properties1);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertTrue(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getService());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertNotNull(atomikosProperties2);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties2);
      
      String string0 = "max_timeout";
      String string1 = "FileSystemStore.createHierarchy(";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string1);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNotNull(atomikosProperties0);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNotNull(atomikosProperties0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      String[] stringArray0 = new String[1];
      String string0 = "/";
      String string1 = null;
      atomikosPropertiesTests0.assertProperty(string0, string1);
      String string2 = "";
      stringArray0[0] = string2;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(mapEntryArray0);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(properties1.equals((Object)properties0));
      assertEquals(17, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties1, properties0);
      assertNotNull(properties1);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = null;
      atomikosPropertiesTests0.properties = atomikosProperties0;
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      assertNotNull(properties0);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties1);
      
      String string0 = "R[7lbEC(<~^Q%0C>";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(string0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // R[7lbEC(<~^Q%0C>
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = false;
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      long long0 = 500L;
      String string0 = "fb/p";
      atomikosProperties0.setTransactionManagerUniqueName(string0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("fb/p", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosProperties0.setCheckpointInterval(long0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("fb/p", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("fb/p", atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("fb/p", atomikosProperties1.getTransactionManagerUniqueName());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      
      String string1 = ":h#^uPN#";
      atomikosProperties1.setCheckpointInterval(long0);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("fb/p", atomikosProperties1.getTransactionManagerUniqueName());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      String string2 = ")jZ?M#.VgB:\\np,Wxx";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string1, string2);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      String[] stringArray0 = new String[8];
      String string0 = "default_jta_timeout";
      stringArray0[0] = string0;
      String string1 = "\"<&v\"H wrbRCP@yt6";
      stringArray0[1] = string1;
      String string2 = "a=U[5g!2|zOo:%aT~";
      stringArray0[2] = string2;
      String string3 = "4%x}";
      stringArray0[3] = string3;
      String string4 = "(%Mm3r=";
      stringArray0[4] = string4;
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = true;
      atomikosProperties0.setEnableLogging(boolean0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      String string5 = "{9Esgs[9Hj^-&";
      stringArray0[5] = string5;
      String string6 = "UxoIT|*JIJ";
      stringArray0[6] = string6;
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.properties;
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      
      String string7 = "org.eclipse.jetty.util.InetAddressSet$LegacyInetRange";
      long long0 = (-2965L);
      atomikosProperties1.setMaxTimeout(long0);
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertEquals((-2965L), atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      stringArray0[7] = string7;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, mapEntryArray0.length);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(mapEntryArray0);
      
      boolean boolean1 = false;
      atomikosProperties1.setThreadedTwoPhaseCommit(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertEquals((-2965L), atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals((-2965L), atomikosProperties2.getMaxTimeout());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertNotNull(atomikosProperties2);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties3.getService());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertEquals((-2965L), atomikosProperties3.getMaxTimeout());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertNotNull(atomikosProperties3);
      
      String string8 = "Class name must not be empty";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(stringArray0[6], string8);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNotNull(atomikosProperties0);
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      
      boolean boolean0 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getService());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNotNull(atomikosProperties0);
      
      int int0 = 0;
      String string0 = "2";
      atomikosProperties0.setLogBaseName(string0);
      assertEquals("2", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.setMaxActives(int0);
      assertEquals("2", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      String string1 = "T`F{d{#B`oG7_";
      atomikosProperties0.setLogBaseName(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals("T`F{d{#B`oG7_", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNotSame(string1, string0);
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals("T`F{d{#B`oG7_", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(0, atomikosPropertiesTests0.properties.getMaxActives());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("T`F{d{#B`oG7_", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertEquals("T`F{d{#B`oG7_", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      
      int int1 = (-3463);
      atomikosProperties0.setMaxActives(int1);
      assertFalse(int1 == int0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals((-3463), atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals("T`F{d{#B`oG7_", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertSame(atomikosProperties0, atomikosProperties1);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertTrue(properties1.equals((Object)properties0));
      assertFalse(properties1.isEmpty());
      assertEquals(17, properties1.size());
      assertNotSame(properties1, properties0);
      assertNotNull(properties1);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals((-3463), atomikosProperties2.getMaxActives());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals("T`F{d{#B`oG7_", atomikosProperties2.getLogBaseName());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getService());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertNotNull(atomikosProperties2);
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNotNull(atomikosProperties0);
      
      String string0 = "_./j{yZgse1";
      atomikosProperties0.setLogBaseName(string0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("_./j{yZgse1", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      long long0 = 0L;
      atomikosProperties0.setMaxTimeout(long0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("_./j{yZgse1", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("_./j{yZgse1", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getService());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("_./j{yZgse1", atomikosProperties1.getLogBaseName());
      assertEquals(0L, atomikosProperties1.getMaxTimeout());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(0L, atomikosProperties2.getMaxTimeout());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals("_./j{yZgse1", atomikosProperties2.getLogBaseName());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getService());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertNotNull(atomikosProperties2);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties2);
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(0L, atomikosProperties2.getMaxTimeout());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals("_./j{yZgse1", atomikosProperties2.getLogBaseName());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getService());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      
      String string1 = "vKr+(Hg9N";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string1, string1);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNotNull(atomikosProperties0);
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      assertNotNull(properties0);
      
      long long0 = 0L;
      boolean boolean0 = false;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      String string0 = "";
      atomikosProperties0.setLogBaseDir(string0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertEquals("", atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getService());
      assertEquals(0L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getService());
      assertEquals(0L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties2.getLogBaseDir());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertNotNull(atomikosProperties2);
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertTrue(atomikosProperties3.isEnableLogging());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals("", atomikosProperties3.getLogBaseDir());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals(0L, atomikosProperties3.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertNull(atomikosProperties3.getService());
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertNotNull(atomikosProperties3);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(properties1.equals((Object)properties0));
      assertEquals(17, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties1, properties0);
      assertNotNull(properties1);
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertEquals(17, properties2.size());
      assertFalse(properties2.isEmpty());
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertNotNull(properties2);
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNotNull(atomikosProperties0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      long long0 = (-1L);
      Properties properties0 = atomikosPropertiesTests0.properties.asProperties();
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      assertNotNull(properties0);
      
      String[] stringArray0 = null;
      atomikosProperties0.setCheckpointInterval(long0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1L), atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1L), atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals((-1L), atomikosProperties0.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getService());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1L), atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getService());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1L), atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals((-1L), atomikosPropertiesTests0.properties.getCheckpointInterval());
      
      long long1 = (-248L);
      atomikosProperties1.setCheckpointInterval(long1);
      assertFalse(long1 == long0);
      assertEquals((-248L), atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getService());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      Properties properties1 = new Properties();
      assertFalse(properties1.equals((Object)properties0));
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotNull(properties1);
      
      Properties properties2 = new Properties();
      assertFalse(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertNotNull(properties2);
      
      properties2.putAll(properties1);
      assertFalse(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties2));
      assertFalse(properties1.equals((Object)properties0));
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties2);
      
      properties2.putAll(properties1);
      assertFalse(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties2));
      assertFalse(properties1.equals((Object)properties0));
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      atomikosProperties1.setCheckpointInterval(long0);
      assertFalse(long0 == long1);
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getService());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals((-1L), atomikosProperties1.getCheckpointInterval());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertSame(atomikosProperties1, atomikosProperties0);
      
      Object object1 = properties1.replace((Object) properties2, object0);
      assertFalse(properties2.equals((Object)properties0));
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties1.equals((Object)properties2));
      assertFalse(properties1.equals((Object)properties0));
      assertTrue(properties2.isEmpty());
      assertEquals(0, properties2.size());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties2);
      assertNull(object1);
      
      String[] stringArray1 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties1, stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, mapEntryArray0.length);
      assertTrue(properties1.equals((Object)properties2));
      assertFalse(properties1.equals((Object)properties0));
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties2);
      assertNotNull(mapEntryArray0);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals((-1L), atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNotNull(atomikosProperties2);
      
      int int0 = 0;
      atomikosPropertiesTests0.properties.setMaxActives(int0);
      MapEntry<?, ?>[] mapEntryArray1 = atomikosPropertiesTests0.defaultOf(properties1, stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, mapEntryArray1.length);
      assertFalse(mapEntryArray1.equals((Object)mapEntryArray0));
      assertTrue(properties1.equals((Object)properties2));
      assertFalse(properties1.equals((Object)properties0));
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertNotSame(mapEntryArray1, mapEntryArray0);
      assertNotSame(properties1, properties0);
      assertNotSame(properties1, properties2);
      assertNotNull(mapEntryArray1);
      
      Properties properties3 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(properties3.equals((Object)properties2));
      assertFalse(properties3.equals((Object)properties1));
      assertFalse(properties3.equals((Object)properties0));
      assertFalse(properties3.isEmpty());
      assertEquals(17, properties3.size());
      assertNotSame(properties3, properties2);
      assertNotSame(properties3, properties1);
      assertNotSame(properties3, properties0);
      assertNotNull(properties3);
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNotNull(atomikosProperties0);
      
      int int0 = 0;
      String string0 = "2";
      atomikosProperties0.setLogBaseName(string0);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("2", atomikosProperties0.getLogBaseName());
      
      atomikosProperties0.setMaxActives(int0);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("2", atomikosProperties0.getLogBaseName());
      
      String string1 = "T`F{d{#B`oG7_";
      atomikosProperties0.setLogBaseName(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("T`F{d{#B`oG7_", atomikosProperties0.getLogBaseName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNotSame(string1, string0);
      
      boolean boolean0 = false;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals("T`F{d{#B`oG7_", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals("T`F{d{#B`oG7_", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals("T`F{d{#B`oG7_", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(0, atomikosPropertiesTests0.properties.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(0, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("T`F{d{#B`oG7_", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      
      int int1 = (-3463);
      atomikosProperties0.setMaxActives(int1);
      assertFalse(int1 == int0);
      assertEquals("T`F{d{#B`oG7_", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals((-3463), atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertSame(atomikosProperties0, atomikosProperties1);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertTrue(properties1.equals((Object)properties0));
      assertEquals(17, properties1.size());
      assertFalse(properties1.isEmpty());
      assertNotSame(properties1, properties0);
      assertNotNull(properties1);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals("T`F{d{#B`oG7_", atomikosProperties2.getLogBaseName());
      assertFalse(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getService());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals((-3463), atomikosProperties2.getMaxActives());
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertNotNull(atomikosProperties2);
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNotNull(atomikosProperties0);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      boolean boolean0 = true;
      atomikosProperties0.setSerialJtaTransactions(boolean0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      String[] stringArray0 = new String[6];
      long long0 = (-3450L);
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-3450L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-3450L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals((-3450L), atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      String string0 = "&*=H";
      stringArray0[0] = string0;
      String string1 = "z`bmNA. U5}C.h";
      stringArray0[1] = string1;
      String string2 = "";
      boolean boolean1 = true;
      atomikosProperties0.setThreadedTwoPhaseCommit(boolean1);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-3450L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      stringArray0[2] = string2;
      String string3 = "#";
      stringArray0[3] = string3;
      String string4 = "d$fcoI";
      stringArray0[4] = string4;
      String string5 = "nH=o'C";
      long long1 = 1L;
      atomikosProperties0.setMaxTimeout(long1);
      assertFalse(long1 == long0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-3450L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      stringArray0[5] = string5;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, mapEntryArray0.length);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(mapEntryArray0);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(1L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals((-3450L), atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertEquals((-3450L), atomikosProperties1.getDefaultJtaTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(1L, atomikosProperties1.getMaxTimeout());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      
      MapEntry<?, ?>[] mapEntryArray1 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, mapEntryArray1.length);
      assertFalse(mapEntryArray1.equals((Object)mapEntryArray0));
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotSame(mapEntryArray1, mapEntryArray0);
      assertNotNull(mapEntryArray1);
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals((-3450L), atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getService());
      assertTrue(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(1L, atomikosProperties2.getMaxTimeout());
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNotNull(atomikosProperties2);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      String[] stringArray0 = new String[5];
      String string0 = "ZUud*cGp\"JrsCv";
      stringArray0[0] = string0;
      String string1 = "FileSystemStore.read_uncommitted(";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "m~";
      stringArray0[4] = string4;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, mapEntryArray0.length);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(mapEntryArray0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertNotNull(atomikosProperties0);
      
      long long0 = 0L;
      atomikosProperties0.setCheckpointInterval(long0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      boolean boolean0 = true;
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNotNull(atomikosProperties1);
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertSame(atomikosProperties0, atomikosProperties1);
  }
}
