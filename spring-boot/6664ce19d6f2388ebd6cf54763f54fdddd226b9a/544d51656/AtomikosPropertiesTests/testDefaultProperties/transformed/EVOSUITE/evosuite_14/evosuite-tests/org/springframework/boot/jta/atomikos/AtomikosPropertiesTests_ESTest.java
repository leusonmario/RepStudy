/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 14:34:42 GMT 2021
 */

package org.springframework.boot.jta.atomikos;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import java.util.function.BiFunction;
import org.assertj.core.data.MapEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.ComparisonFailure;
import org.junit.runner.RunWith;
import org.springframework.boot.jta.atomikos.AtomikosProperties;
import org.springframework.boot.jta.atomikos.AtomikosPropertiesTests;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtomikosPropertiesTests_ESTest extends AtomikosPropertiesTests_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[6];
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      atomikosPropertiesTests0.setproperties(atomikosPropertiesTests0.properties);
      Properties properties0 = atomikosPropertiesTests0.properties.asProperties();
      assertNotNull(properties0);
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosPropertiesTests0.assertProperty(atomikosProperties0.logBaseName, atomikosPropertiesTests0.properties.transactionManagerUniqueName);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = atomikosProperties0.service;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = null;
      String[] stringArray0 = new String[9];
      String string0 = "c#Kk{78*O]ExR,]Ai";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.jta.atomikos.AtomikosPropertiesTests", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = null;
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String string0 = "org.eclipse.jetty.util.InetAddressSet$InetPattern";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = null;
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "&U5o";
      stringArray0[1] = string1;
      String string2 = "66";
      stringArray0[2] = string2;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, mapEntryArray0.length);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertNotSame(properties1, properties0);
      assertEquals(17, properties1.size());
      assertFalse(properties1.isEmpty());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNull(atomikosProperties1);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosPropertiesTests atomikosPropertiesTests1 = new AtomikosPropertiesTests();
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertNotNull(atomikosPropertiesTests1);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests1.properties;
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      
      AtomikosProperties atomikosProperties1 = new AtomikosProperties();
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertNotNull(atomikosProperties1);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      
      atomikosPropertiesTests0.assertProperty(atomikosProperties1.logBaseName, atomikosProperties1.logBaseDir);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(atomikosProperties1.equals((Object)atomikosProperties0));
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      String string0 = "(jl])';yrgyLw&";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string0);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      String string0 = null;
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      String string1 = "#f";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      String string0 = ".class";
      atomikosProperties1.setLogBaseName(atomikosProperties0.logBaseDir);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getLogBaseName());
      
      atomikosProperties1.setLogBaseName(string0);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(".class", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(".class", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(50, atomikosProperties2.maxActives);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertEquals(".class", atomikosProperties2.getLogBaseName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getService());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      
      AtomikosProperties atomikosProperties3 = new AtomikosProperties();
      assertFalse(atomikosProperties3.equals((Object)atomikosProperties1));
      assertFalse(atomikosProperties3.equals((Object)atomikosProperties0));
      assertFalse(atomikosProperties3.equals((Object)atomikosProperties2));
      assertNotNull(atomikosProperties3);
      assertFalse(atomikosProperties3.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertTrue(atomikosProperties3.enableLogging);
      assertEquals(500L, atomikosProperties3.checkpointInterval);
      assertEquals(300000L, atomikosProperties3.maxTimeout);
      assertEquals(50, atomikosProperties3.maxActives);
      assertEquals(10000L, atomikosProperties3.defaultJtaTimeout);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertNull(atomikosProperties3.getService());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties3);
      assertFalse(atomikosProperties3.equals((Object)atomikosProperties1));
      assertFalse(atomikosProperties3.equals((Object)atomikosProperties0));
      assertFalse(atomikosProperties3.equals((Object)atomikosProperties2));
      assertFalse(atomikosProperties3.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertTrue(atomikosProperties3.enableLogging);
      assertEquals(500L, atomikosProperties3.checkpointInterval);
      assertEquals(300000L, atomikosProperties3.maxTimeout);
      assertEquals(50, atomikosProperties3.maxActives);
      assertEquals(10000L, atomikosProperties3.defaultJtaTimeout);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertNotSame(atomikosProperties3, atomikosProperties1);
      assertNotSame(atomikosProperties3, atomikosProperties0);
      assertNotSame(atomikosProperties3, atomikosProperties2);
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertNull(atomikosProperties3.getService());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      
      AtomikosProperties atomikosProperties4 = atomikosPropertiesTests0.getproperties();
      assertFalse(atomikosProperties4.equals((Object)atomikosProperties1));
      assertFalse(atomikosProperties4.equals((Object)atomikosProperties0));
      assertFalse(atomikosProperties4.equals((Object)atomikosProperties2));
      assertNotNull(atomikosProperties4);
      assertEquals(300000L, atomikosProperties4.maxTimeout);
      assertEquals(10000L, atomikosProperties4.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties4.checkpointInterval);
      assertTrue(atomikosProperties4.serialJtaTransactions);
      assertTrue(atomikosProperties4.enableLogging);
      assertFalse(atomikosProperties4.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties4.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties4.maxActives);
      assertNotSame(atomikosProperties4, atomikosProperties1);
      assertSame(atomikosProperties4, atomikosProperties3);
      assertNotSame(atomikosProperties4, atomikosProperties0);
      assertNotSame(atomikosProperties4, atomikosProperties2);
      assertFalse(atomikosProperties4.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties4.getTransactionManagerUniqueName());
      assertNull(atomikosProperties4.getService());
      assertEquals("tmlog", atomikosProperties4.getLogBaseName());
      assertTrue(atomikosProperties4.isEnableLogging());
      assertEquals(50, atomikosProperties4.getMaxActives());
      assertEquals(10000L, atomikosProperties4.getDefaultJtaTimeout());
      assertFalse(atomikosProperties4.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties4.getCheckpointInterval());
      assertTrue(atomikosProperties4.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties4.getMaxTimeout());
      assertNull(atomikosProperties4.getLogBaseDir());
      
      String string1 = "com.atomikos.icatch.default_jta_timeout";
      atomikosProperties2.setLogBaseDir(string1);
      assertFalse(atomikosProperties2.equals((Object)atomikosProperties3));
      assertFalse(atomikosProperties2.equals((Object)atomikosProperties4));
      assertFalse(string1.equals((Object)string0));
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(50, atomikosProperties2.maxActives);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertNotSame(atomikosProperties2, atomikosProperties3);
      assertNotSame(atomikosProperties2, atomikosProperties4);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNotSame(string1, string0);
      assertEquals(".class", atomikosProperties2.getLogBaseName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getService());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals("com.atomikos.icatch.default_jta_timeout", atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      
      String string2 = null;
      atomikosProperties2.service = string2;
      assertEquals(".class", atomikosProperties2.getLogBaseName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getService());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals("com.atomikos.icatch.default_jta_timeout", atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      
      AtomikosProperties atomikosProperties5 = atomikosPropertiesTests0.getproperties();
      assertFalse(atomikosProperties5.equals((Object)atomikosProperties1));
      assertFalse(atomikosProperties5.equals((Object)atomikosProperties0));
      assertFalse(atomikosProperties5.equals((Object)atomikosProperties2));
      assertNotNull(atomikosProperties5);
      assertEquals(300000L, atomikosProperties5.maxTimeout);
      assertEquals(50, atomikosProperties5.maxActives);
      assertEquals(10000L, atomikosProperties5.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties5.checkpointInterval);
      assertTrue(atomikosProperties5.enableLogging);
      assertTrue(atomikosProperties5.serialJtaTransactions);
      assertFalse(atomikosProperties5.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties5.forceShutdownOnVmExit);
      assertNotSame(atomikosProperties5, atomikosProperties1);
      assertSame(atomikosProperties5, atomikosProperties3);
      assertNotSame(atomikosProperties5, atomikosProperties0);
      assertNotSame(atomikosProperties5, atomikosProperties2);
      assertSame(atomikosProperties5, atomikosProperties4);
      assertNull(atomikosProperties5.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties5.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties5.getService());
      assertEquals("tmlog", atomikosProperties5.getLogBaseName());
      assertTrue(atomikosProperties5.isEnableLogging());
      assertEquals(500L, atomikosProperties5.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties5.getDefaultJtaTimeout());
      assertTrue(atomikosProperties5.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties5.getMaxTimeout());
      assertFalse(atomikosProperties5.isForceShutdownOnVmExit());
      assertNull(atomikosProperties5.getLogBaseDir());
      assertEquals(50, atomikosProperties5.getMaxActives());
      
      boolean boolean0 = false;
      atomikosProperties5.serialJtaTransactions = boolean0;
      assertNull(atomikosProperties5.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties5.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties5.getService());
      assertFalse(atomikosProperties5.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties5.getLogBaseName());
      assertTrue(atomikosProperties5.isEnableLogging());
      assertEquals(500L, atomikosProperties5.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties5.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties5.getMaxTimeout());
      assertFalse(atomikosProperties5.isForceShutdownOnVmExit());
      assertNull(atomikosProperties5.getLogBaseDir());
      assertEquals(50, atomikosProperties5.getMaxActives());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties2);
      assertFalse(atomikosProperties2.equals((Object)atomikosProperties3));
      assertFalse(atomikosProperties2.equals((Object)atomikosProperties4));
      assertFalse(atomikosProperties2.equals((Object)atomikosProperties5));
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(50, atomikosProperties2.maxActives);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertNotSame(atomikosProperties2, atomikosProperties3);
      assertNotSame(atomikosProperties2, atomikosProperties4);
      assertNotSame(atomikosProperties2, atomikosProperties5);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertEquals(".class", atomikosProperties2.getLogBaseName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getService());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals("com.atomikos.icatch.default_jta_timeout", atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties3);
      assertFalse(atomikosProperties3.equals((Object)atomikosProperties1));
      assertFalse(atomikosProperties3.equals((Object)atomikosProperties0));
      assertFalse(atomikosProperties3.equals((Object)atomikosProperties2));
      assertFalse(atomikosProperties3.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties3.enableLogging);
      assertFalse(atomikosProperties3.serialJtaTransactions);
      assertEquals(500L, atomikosProperties3.checkpointInterval);
      assertEquals(300000L, atomikosProperties3.maxTimeout);
      assertEquals(50, atomikosProperties3.maxActives);
      assertEquals(10000L, atomikosProperties3.defaultJtaTimeout);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertSame(atomikosProperties3, atomikosProperties4);
      assertNotSame(atomikosProperties3, atomikosProperties1);
      assertNotSame(atomikosProperties3, atomikosProperties0);
      assertNotSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties5);
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertNull(atomikosProperties3.getService());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties3.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      
      atomikosPropertiesTests0.assertProperty(atomikosProperties2.logBaseName, atomikosProperties5.logBaseDir);
      assertFalse(atomikosProperties5.equals((Object)atomikosProperties1));
      assertFalse(atomikosProperties5.equals((Object)atomikosProperties0));
      assertFalse(atomikosProperties5.equals((Object)atomikosProperties2));
      assertFalse(atomikosProperties2.equals((Object)atomikosProperties3));
      assertFalse(atomikosProperties2.equals((Object)atomikosProperties4));
      assertFalse(atomikosProperties2.equals((Object)atomikosProperties5));
      assertEquals(300000L, atomikosProperties5.maxTimeout);
      assertEquals(50, atomikosProperties5.maxActives);
      assertEquals(10000L, atomikosProperties5.defaultJtaTimeout);
      assertFalse(atomikosProperties5.serialJtaTransactions);
      assertEquals(500L, atomikosProperties5.checkpointInterval);
      assertTrue(atomikosProperties5.enableLogging);
      assertFalse(atomikosProperties5.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties5.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(50, atomikosProperties2.maxActives);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertNotSame(atomikosProperties5, atomikosProperties1);
      assertSame(atomikosProperties5, atomikosProperties3);
      assertNotSame(atomikosProperties5, atomikosProperties0);
      assertNotSame(atomikosProperties5, atomikosProperties2);
      assertSame(atomikosProperties5, atomikosProperties4);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertNotSame(atomikosProperties2, atomikosProperties3);
      assertNotSame(atomikosProperties2, atomikosProperties4);
      assertNotSame(atomikosProperties2, atomikosProperties5);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertNull(atomikosProperties5.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties5.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties5.getService());
      assertFalse(atomikosProperties5.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties5.getLogBaseName());
      assertTrue(atomikosProperties5.isEnableLogging());
      assertEquals(500L, atomikosProperties5.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties5.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties5.getMaxTimeout());
      assertFalse(atomikosProperties5.isForceShutdownOnVmExit());
      assertNull(atomikosProperties5.getLogBaseDir());
      assertEquals(50, atomikosProperties5.getMaxActives());
      assertEquals(".class", atomikosProperties2.getLogBaseName());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getService());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals("com.atomikos.icatch.default_jta_timeout", atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      
      AtomikosProperties atomikosProperties6 = atomikosPropertiesTests0.getproperties();
      assertFalse(atomikosProperties6.equals((Object)atomikosProperties1));
      assertFalse(atomikosProperties6.equals((Object)atomikosProperties0));
      assertFalse(atomikosProperties6.equals((Object)atomikosProperties2));
      assertNotNull(atomikosProperties6);
      assertEquals(300000L, atomikosProperties6.maxTimeout);
      assertEquals(10000L, atomikosProperties6.defaultJtaTimeout);
      assertEquals(50, atomikosProperties6.maxActives);
      assertFalse(atomikosProperties6.serialJtaTransactions);
      assertEquals(500L, atomikosProperties6.checkpointInterval);
      assertTrue(atomikosProperties6.enableLogging);
      assertFalse(atomikosProperties6.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties6.forceShutdownOnVmExit);
      assertNotSame(atomikosProperties6, atomikosProperties1);
      assertSame(atomikosProperties6, atomikosProperties4);
      assertSame(atomikosProperties6, atomikosProperties3);
      assertNotSame(atomikosProperties6, atomikosProperties0);
      assertNotSame(atomikosProperties6, atomikosProperties2);
      assertSame(atomikosProperties6, atomikosProperties5);
      assertNull(atomikosProperties6.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties6.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties6.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties6.getLogBaseName());
      assertEquals(300000L, atomikosProperties6.getMaxTimeout());
      assertTrue(atomikosProperties6.isEnableLogging());
      assertNull(atomikosProperties6.getService());
      assertEquals(10000L, atomikosProperties6.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties6.getCheckpointInterval());
      assertFalse(atomikosProperties6.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties6.getMaxActives());
      assertNull(atomikosProperties6.getLogBaseDir());
      
      AtomikosProperties atomikosProperties7 = atomikosPropertiesTests0.getproperties();
      assertFalse(atomikosProperties7.equals((Object)atomikosProperties2));
      assertFalse(atomikosProperties7.equals((Object)atomikosProperties0));
      assertFalse(atomikosProperties7.equals((Object)atomikosProperties1));
      assertNotNull(atomikosProperties7);
      assertFalse(atomikosProperties7.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties7.enableLogging);
      assertFalse(atomikosProperties7.serialJtaTransactions);
      assertFalse(atomikosProperties7.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties7.maxActives);
      assertEquals(10000L, atomikosProperties7.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties7.checkpointInterval);
      assertEquals(300000L, atomikosProperties7.maxTimeout);
      assertSame(atomikosProperties7, atomikosProperties4);
      assertNotSame(atomikosProperties7, atomikosProperties2);
      assertSame(atomikosProperties7, atomikosProperties3);
      assertSame(atomikosProperties7, atomikosProperties6);
      assertSame(atomikosProperties7, atomikosProperties5);
      assertNotSame(atomikosProperties7, atomikosProperties0);
      assertNotSame(atomikosProperties7, atomikosProperties1);
      assertEquals(500L, atomikosProperties7.getCheckpointInterval());
      assertEquals(50, atomikosProperties7.getMaxActives());
      assertFalse(atomikosProperties7.isSerialJtaTransactions());
      assertNull(atomikosProperties7.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosProperties7.getDefaultJtaTimeout());
      assertFalse(atomikosProperties7.isForceShutdownOnVmExit());
      assertNull(atomikosProperties7.getLogBaseDir());
      assertEquals("tmlog", atomikosProperties7.getLogBaseName());
      assertFalse(atomikosProperties7.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties7.getMaxTimeout());
      assertTrue(atomikosProperties7.isEnableLogging());
      assertNull(atomikosProperties7.getService());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      String string0 = "";
      atomikosProperties0.logBaseName = string0;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      boolean boolean0 = false;
      atomikosProperties0.setEnableLogging(boolean0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.enableLogging);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getService());
      assertEquals("", atomikosProperties2.getLogBaseName());
      
      boolean boolean1 = false;
      atomikosProperties1.setEnableLogging(boolean1);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.isEmpty());
      assertEquals(17, properties1.size());
      
      atomikosProperties2.forceShutdownOnVmExit = atomikosProperties0.forceShutdownOnVmExit;
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getService());
      assertEquals("", atomikosProperties2.getLogBaseName());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties2);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.enableLogging);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getService());
      assertEquals("", atomikosProperties2.getLogBaseName());
      
      String string1 = "com.atomikos.icatch.force_shutdown_on_vm_exit";
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals("", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      
      String string2 = "com.atomikos.icatch.threaded_2pc";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string1, string2);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      boolean boolean0 = true;
      atomikosProperties0.serialJtaTransactions = boolean0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      
      long long0 = 0L;
      atomikosProperties0.setMaxTimeout(long0);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(0L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      atomikosProperties0.setLogBaseName(atomikosPropertiesTests0.properties.transactionManagerUniqueName);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(0L, atomikosProperties0.getMaxTimeout());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties1);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties1.maxTimeout);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNull(atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(0L, atomikosProperties1.maxTimeout);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNull(atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(0L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertEquals(0L, atomikosProperties2.maxTimeout);
      assertEquals(50, atomikosProperties2.maxActives);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getLogBaseName());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getService());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertEquals(0L, atomikosProperties2.getMaxTimeout());
      
      String string0 = "";
      String string1 = "TE1UX'%Jdh5Rhs_";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string0, string1);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      long long0 = (-1L);
      atomikosProperties0.setDefaultJtaTimeout(long0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-1L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals((-1L), atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertEquals((-1L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals((-1L), atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      
      atomikosProperties0.setThreadedTwoPhaseCommit(atomikosPropertiesTests0.properties.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals((-1L), atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1L), atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertTrue(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals((-1L), atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals((-1L), atomikosProperties1.getDefaultJtaTimeout());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.isEmpty());
      assertEquals(17, properties1.size());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertEquals((-1L), atomikosProperties2.defaultJtaTimeout);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertTrue(atomikosProperties2.enableLogging);
      assertEquals(50, atomikosProperties2.maxActives);
      assertTrue(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertTrue(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getService());
      assertEquals((-1L), atomikosProperties2.getDefaultJtaTimeout());
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      String string0 = "";
      atomikosProperties0.logBaseName = string0;
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      long long0 = 0L;
      boolean boolean0 = true;
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosProperties0.setForceShutdownOnVmExit(boolean0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = properties0.computeIfPresent(atomikosProperties0, biFunction0);
      assertNull(object0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = atomikosProperties0.logBaseName;
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, mapEntryArray0.length);
      assertEquals(17, properties0.size());
      assertFalse(properties0.isEmpty());
      
      atomikosProperties0.checkpointInterval = long0;
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.forceShutdownOnVmExit);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertEquals(0L, atomikosProperties0.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertNotSame(properties1, properties0);
      assertEquals(17, properties1.size());
      assertFalse(properties1.isEmpty());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(0L, atomikosProperties1.checkpointInterval);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertEquals("", atomikosProperties1.getLogBaseName());
      assertEquals(0L, atomikosProperties1.getCheckpointInterval());
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertNotNull(properties2);
      assertNotSame(properties2, properties1);
      assertNotSame(properties2, properties0);
      assertEquals(17, properties2.size());
      assertFalse(properties2.isEmpty());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = null;
      // Undeclared exception!
      try { 
        properties2.put(object1, object2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosPropertiesTests atomikosPropertiesTests1 = new AtomikosPropertiesTests();
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertNotNull(atomikosPropertiesTests1);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests1.properties;
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      int int0 = 0;
      String string0 = "\\M\"1-#yTSM*y]";
      atomikosProperties0.setLogBaseDir(string0);
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("\\M\"1-#yTSM*y]", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosProperties0.setMaxActives(int0);
      assertFalse(atomikosPropertiesTests1.equals((Object)atomikosPropertiesTests0));
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(0, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNotSame(atomikosPropertiesTests1, atomikosPropertiesTests0);
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("\\M\"1-#yTSM*y]", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("\\M\"1-#yTSM*y]", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(0, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals("\\M\"1-#yTSM*y]", atomikosPropertiesTests0.properties.getLogBaseDir());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertNotNull(atomikosProperties1);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(0, atomikosProperties1.maxActives);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("\\M\"1-#yTSM*y]", atomikosProperties1.getLogBaseDir());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      
      atomikosProperties1.setEnableLogging(atomikosPropertiesTests0.properties.forceShutdownOnVmExit);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(0, atomikosProperties1.maxActives);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("\\M\"1-#yTSM*y]", atomikosProperties1.getLogBaseDir());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties1.enableLogging);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(0, atomikosProperties1.maxActives);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("\\M\"1-#yTSM*y]", atomikosProperties1.getLogBaseDir());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      
      Properties properties0 = atomikosPropertiesTests0.properties.asProperties();
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertNotNull(properties0);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertEquals(10, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = atomikosPropertiesTests0.properties.transactionManagerUniqueName;
      stringArray0[1] = atomikosProperties1.transactionManagerUniqueName;
      stringArray0[2] = atomikosPropertiesTests0.properties.logBaseDir;
      atomikosProperties1.maxTimeout = atomikosProperties0.maxTimeout;
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("\\M\"1-#yTSM*y]", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("\\M\"1-#yTSM*y]", atomikosProperties1.getLogBaseDir());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      
      stringArray0[3] = string0;
      stringArray0[4] = atomikosPropertiesTests0.properties.service;
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(properties1, properties0);
      assertEquals(17, properties1.size());
      assertFalse(properties1.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = properties0.put(properties1, object0);
      assertFalse(atomikosPropertiesTests0.equals((Object)atomikosPropertiesTests1));
      assertFalse(properties1.equals((Object)properties0));
      assertFalse(properties0.equals((Object)properties1));
      assertNull(object1);
      assertNotSame(atomikosPropertiesTests0, atomikosPropertiesTests1);
      assertNotSame(properties1, properties0);
      assertNotSame(properties0, properties1);
      assertEquals(17, properties1.size());
      assertFalse(properties1.isEmpty());
      assertFalse(properties0.isEmpty());
      assertEquals(11, properties0.size());
      
      atomikosPropertiesTests0.properties = atomikosPropertiesTests1.properties;
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(0, atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertEquals("\\M\"1-#yTSM*y]", atomikosProperties0.getLogBaseDir());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertFalse(atomikosPropertiesTests0.properties.isEnableLogging());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(0, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals("\\M\"1-#yTSM*y]", atomikosPropertiesTests0.properties.getLogBaseDir());
      
      stringArray0[5] = atomikosPropertiesTests0.properties.logBaseDir;
      stringArray0[6] = atomikosPropertiesTests0.properties.logBaseDir;
      String string1 = "";
      stringArray0[7] = string1;
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      
      String string0 = "org.assertj.core.api.DoubleAssert";
      atomikosProperties0.logBaseName = string0;
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties0.getLogBaseName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      
      boolean boolean0 = false;
      atomikosProperties0.setEnableLogging(boolean0);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertEquals(50, atomikosProperties0.maxActives);
      assertFalse(atomikosProperties0.enableLogging);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(9, properties0.size());
      assertFalse(properties0.isEmpty());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties1.enableLogging);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties1.enableLogging);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(50, atomikosProperties2.maxActives);
      assertFalse(atomikosProperties2.enableLogging);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getService());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties2.getLogBaseName());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      
      boolean boolean1 = false;
      atomikosProperties1.setEnableLogging(boolean1);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties1.enableLogging);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.isEmpty());
      assertEquals(17, properties1.size());
      
      long long0 = 0L;
      atomikosProperties2.setDefaultJtaTimeout(long0);
      assertEquals(0L, atomikosProperties2.defaultJtaTimeout);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(50, atomikosProperties2.maxActives);
      assertFalse(atomikosProperties2.enableLogging);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getService());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties2.getLogBaseName());
      assertEquals(0L, atomikosProperties2.getDefaultJtaTimeout());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      
      atomikosProperties2.forceShutdownOnVmExit = atomikosProperties0.forceShutdownOnVmExit;
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(0L, atomikosProperties0.getDefaultJtaTimeout());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertNull(atomikosProperties0.getService());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getService());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties2.getLogBaseName());
      assertEquals(0L, atomikosProperties2.getDefaultJtaTimeout());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties2);
      assertEquals(0L, atomikosProperties2.defaultJtaTimeout);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(50, atomikosProperties2.maxActives);
      assertFalse(atomikosProperties2.enableLogging);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertNull(atomikosProperties2.getService());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties2.getLogBaseName());
      assertEquals(0L, atomikosProperties2.getDefaultJtaTimeout());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      
      String string1 = "com.atomikos.icatch.force_shutdown_on_vm_exit";
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals(0L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(0L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertNull(atomikosProperties1.getService());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties3);
      assertFalse(atomikosProperties3.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties3.maxTimeout);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties3.checkpointInterval);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertEquals(50, atomikosProperties3.maxActives);
      assertFalse(atomikosProperties3.enableLogging);
      assertEquals(0L, atomikosProperties3.defaultJtaTimeout);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertNull(atomikosProperties3.getService());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertEquals("org.assertj.core.api.DoubleAssert", atomikosProperties3.getLogBaseName());
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertEquals(0L, atomikosProperties3.getDefaultJtaTimeout());
      assertEquals(500L, atomikosProperties3.getCheckpointInterval());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertFalse(atomikosProperties3.isEnableLogging());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertNull(atomikosProperties3.getLogBaseDir());
      
      String string2 = "com.atomikos.icatch.threaded_2pc";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string1, string2);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = new AtomikosProperties();
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.enableLogging);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      
      atomikosPropertiesTests0.properties = atomikosProperties0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(50, atomikosProperties1.maxActives);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertTrue(atomikosProperties2.enableLogging);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertEquals(300000L, atomikosProperties2.maxTimeout);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties2.getLogBaseName());
      assertEquals(300000L, atomikosProperties2.getMaxTimeout());
      assertTrue(atomikosProperties2.isEnableLogging());
      assertNull(atomikosProperties2.getService());
      
      atomikosProperties1.setCheckpointInterval(atomikosPropertiesTests0.properties.defaultJtaTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(10000L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      AtomikosProperties atomikosProperties3 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties3);
      assertFalse(atomikosProperties3.forceShutdownOnVmExit);
      assertTrue(atomikosProperties3.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties3.checkpointInterval);
      assertTrue(atomikosProperties3.enableLogging);
      assertEquals(10000L, atomikosProperties3.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties3.maxTimeout);
      assertFalse(atomikosProperties3.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties3.maxActives);
      assertSame(atomikosProperties3, atomikosProperties1);
      assertSame(atomikosProperties3, atomikosProperties0);
      assertSame(atomikosProperties3, atomikosProperties2);
      assertEquals(300000L, atomikosProperties3.getMaxTimeout());
      assertEquals(50, atomikosProperties3.getMaxActives());
      assertEquals(10000L, atomikosProperties3.getDefaultJtaTimeout());
      assertFalse(atomikosProperties3.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties3.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties3.getLogBaseName());
      assertTrue(atomikosProperties3.isEnableLogging());
      assertNull(atomikosProperties3.getService());
      assertNull(atomikosProperties3.getTransactionManagerUniqueName());
      assertTrue(atomikosProperties3.isSerialJtaTransactions());
      assertNull(atomikosProperties3.getLogBaseDir());
      assertEquals(10000L, atomikosProperties3.getCheckpointInterval());
      
      AtomikosProperties atomikosProperties4 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties4);
      assertEquals(10000L, atomikosProperties4.defaultJtaTimeout);
      assertEquals(50, atomikosProperties4.maxActives);
      assertFalse(atomikosProperties4.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties4.maxTimeout);
      assertEquals(10000L, atomikosProperties4.checkpointInterval);
      assertTrue(atomikosProperties4.serialJtaTransactions);
      assertTrue(atomikosProperties4.enableLogging);
      assertFalse(atomikosProperties4.forceShutdownOnVmExit);
      assertSame(atomikosProperties4, atomikosProperties1);
      assertSame(atomikosProperties4, atomikosProperties3);
      assertSame(atomikosProperties4, atomikosProperties0);
      assertSame(atomikosProperties4, atomikosProperties2);
      assertNull(atomikosProperties4.getService());
      assertFalse(atomikosProperties4.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties4.isEnableLogging());
      assertTrue(atomikosProperties4.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties4.getMaxTimeout());
      assertFalse(atomikosProperties4.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties4.getMaxActives());
      assertEquals("tmlog", atomikosProperties4.getLogBaseName());
      assertEquals(10000L, atomikosProperties4.getCheckpointInterval());
      assertNull(atomikosProperties4.getLogBaseDir());
      assertEquals(10000L, atomikosProperties4.getDefaultJtaTimeout());
      assertNull(atomikosProperties4.getTransactionManagerUniqueName());
      
      Properties properties0 = atomikosPropertiesTests0.loadDefaultSettings();
      assertNotNull(properties0);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      
      String string0 = "";
      atomikosPropertiesTests0.properties.setTransactionManagerUniqueName(string0);
      assertFalse(atomikosPropertiesTests0.properties.forceShutdownOnVmExit);
      assertTrue(atomikosPropertiesTests0.properties.serialJtaTransactions);
      assertEquals(300000L, atomikosPropertiesTests0.properties.maxTimeout);
      assertTrue(atomikosPropertiesTests0.properties.enableLogging);
      assertEquals(10000L, atomikosPropertiesTests0.properties.defaultJtaTimeout);
      assertFalse(atomikosPropertiesTests0.properties.threadedTwoPhaseCommit);
      assertEquals(50, atomikosPropertiesTests0.properties.maxActives);
      assertEquals(10000L, atomikosPropertiesTests0.properties.checkpointInterval);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(50, atomikosProperties1.maxActives);
      assertEquals(10000L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties4);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties0);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties3);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties2);
      assertSame(atomikosPropertiesTests0.properties, atomikosProperties1);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertSame(atomikosProperties1, atomikosProperties4);
      assertSame(atomikosProperties1, atomikosProperties3);
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertEquals("", atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(10000L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals("", atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.isEmpty());
      assertEquals(17, properties1.size());
      
      int int0 = (-2363);
      atomikosProperties0.setMaxActives(int0);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-2363), atomikosProperties0.maxActives);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertSame(atomikosProperties0, atomikosProperties4);
      assertSame(atomikosProperties0, atomikosProperties2);
      assertSame(atomikosProperties0, atomikosProperties3);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-2363), atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      
      AtomikosProperties atomikosProperties5 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties5);
      assertTrue(atomikosProperties5.enableLogging);
      assertEquals(10000L, atomikosProperties5.defaultJtaTimeout);
      assertEquals((-2363), atomikosProperties5.maxActives);
      assertFalse(atomikosProperties5.forceShutdownOnVmExit);
      assertEquals(300000L, atomikosProperties5.maxTimeout);
      assertTrue(atomikosProperties5.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties5.checkpointInterval);
      assertFalse(atomikosProperties5.threadedTwoPhaseCommit);
      assertSame(atomikosProperties5, atomikosProperties3);
      assertSame(atomikosProperties5, atomikosProperties4);
      assertSame(atomikosProperties5, atomikosProperties1);
      assertSame(atomikosProperties5, atomikosProperties0);
      assertSame(atomikosProperties5, atomikosProperties2);
      assertTrue(atomikosProperties5.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties5.getDefaultJtaTimeout());
      assertFalse(atomikosProperties5.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties5.isEnableLogging());
      assertEquals("tmlog", atomikosProperties5.getLogBaseName());
      assertNull(atomikosProperties5.getLogBaseDir());
      assertFalse(atomikosProperties5.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties5.getTransactionManagerUniqueName());
      assertEquals(300000L, atomikosProperties5.getMaxTimeout());
      assertNull(atomikosProperties5.getService());
      assertEquals((-2363), atomikosProperties5.getMaxActives());
      assertEquals(10000L, atomikosProperties5.getCheckpointInterval());
      
      String[] stringArray0 = new String[0];
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties1, stringArray0);
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.isEmpty());
      assertEquals(17, properties1.size());
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile1, boolean1, atomikosProperties0.forceShutdownOnVmExit, atomikosProperties1.enableLogging);
      assertFalse(boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-2363), atomikosProperties0.maxActives);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertEquals(10000L, atomikosProperties1.checkpointInterval);
      assertTrue(atomikosProperties1.enableLogging);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals((-2363), atomikosProperties1.maxActives);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertSame(atomikosProperties0, atomikosProperties1);
      assertSame(atomikosProperties0, atomikosProperties4);
      assertSame(atomikosProperties0, atomikosProperties5);
      assertSame(atomikosProperties0, atomikosProperties2);
      assertSame(atomikosProperties0, atomikosProperties3);
      assertSame(atomikosProperties1, atomikosProperties5);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertSame(atomikosProperties1, atomikosProperties4);
      assertSame(atomikosProperties1, atomikosProperties3);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertEquals(10000L, atomikosProperties0.getCheckpointInterval());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-2363), atomikosProperties0.getMaxActives());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertNull(atomikosProperties0.getService());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertEquals(10000L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals("", atomikosProperties1.getTransactionManagerUniqueName());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertNull(atomikosProperties1.getService());
      assertEquals((-2363), atomikosProperties1.getMaxActives());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      
      Properties properties2 = atomikosPropertiesTests0.loadDefaultSettings();
      assertTrue(properties2.equals((Object)properties1));
      assertTrue(properties2.equals((Object)properties0));
      assertNotNull(properties2);
      assertNotSame(properties2, properties0);
      assertNotSame(properties2, properties1);
      assertEquals(17, properties2.size());
      assertFalse(properties2.isEmpty());
      
      Properties properties3 = atomikosPropertiesTests0.loadDefaultSettings();
      assertTrue(properties3.equals((Object)properties0));
      assertTrue(properties3.equals((Object)properties1));
      assertTrue(properties3.equals((Object)properties2));
      assertNotNull(properties3);
      assertNotSame(properties3, properties2);
      assertNotSame(properties3, properties1);
      assertNotSame(properties3, properties0);
      assertFalse(properties3.isEmpty());
      assertEquals(17, properties3.size());
      
      MapEntry<?, ?>[] mapEntryArray1 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertFalse(mapEntryArray1.equals((Object)mapEntryArray0));
      assertTrue(properties0.equals((Object)properties1));
      assertTrue(properties0.equals((Object)properties3));
      assertTrue(properties0.equals((Object)properties2));
      assertNotNull(mapEntryArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray1.length);
      assertNotSame(mapEntryArray1, mapEntryArray0);
      assertNotSame(properties0, properties3);
      assertNotSame(properties0, properties2);
      assertNotSame(properties0, properties1);
      assertFalse(properties0.isEmpty());
      assertEquals(17, properties0.size());
      
      Properties properties4 = atomikosPropertiesTests0.loadDefaultSettings();
      assertTrue(properties4.equals((Object)properties0));
      assertTrue(properties4.equals((Object)properties3));
      assertTrue(properties4.equals((Object)properties1));
      assertTrue(properties4.equals((Object)properties2));
      assertNotNull(properties4);
      assertNotSame(properties4, properties2);
      assertNotSame(properties4, properties1);
      assertNotSame(properties4, properties0);
      assertNotSame(properties4, properties3);
      assertEquals(17, properties4.size());
      assertFalse(properties4.isEmpty());
      
      AtomikosProperties atomikosProperties6 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties6);
      assertFalse(atomikosProperties6.forceShutdownOnVmExit);
      assertEquals(10000L, atomikosProperties6.checkpointInterval);
      assertEquals(300000L, atomikosProperties6.maxTimeout);
      assertTrue(atomikosProperties6.serialJtaTransactions);
      assertFalse(atomikosProperties6.threadedTwoPhaseCommit);
      assertEquals((-2363), atomikosProperties6.maxActives);
      assertTrue(atomikosProperties6.enableLogging);
      assertEquals(10000L, atomikosProperties6.defaultJtaTimeout);
      assertSame(atomikosProperties6, atomikosProperties0);
      assertSame(atomikosProperties6, atomikosProperties5);
      assertSame(atomikosProperties6, atomikosProperties2);
      assertSame(atomikosProperties6, atomikosProperties3);
      assertSame(atomikosProperties6, atomikosProperties1);
      assertSame(atomikosProperties6, atomikosProperties4);
      assertEquals("tmlog", atomikosProperties6.getLogBaseName());
      assertEquals((-2363), atomikosProperties6.getMaxActives());
      assertEquals(300000L, atomikosProperties6.getMaxTimeout());
      assertNull(atomikosProperties6.getService());
      assertTrue(atomikosProperties6.isSerialJtaTransactions());
      assertFalse(atomikosProperties6.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties6.isEnableLogging());
      assertEquals(10000L, atomikosProperties6.getCheckpointInterval());
      assertEquals(10000L, atomikosProperties6.getDefaultJtaTimeout());
      assertEquals("", atomikosProperties6.getTransactionManagerUniqueName());
      assertNull(atomikosProperties6.getLogBaseDir());
      assertFalse(atomikosProperties6.isForceShutdownOnVmExit());
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      String string0 = "";
      atomikosProperties0.logBaseName = string0;
      assertTrue(atomikosProperties0.isEnableLogging());
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      boolean boolean0 = false;
      atomikosProperties0.setEnableLogging(boolean0);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertFalse(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(50, atomikosProperties1.maxActives);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties1);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(50, atomikosProperties1.maxActives);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      
      long long0 = (-1626L);
      atomikosProperties1.setMaxTimeout(long0);
      assertEquals((-1626L), atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(50, atomikosProperties1.maxActives);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals((-1626L), atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      
      AtomikosProperties atomikosProperties2 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties2);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertFalse(atomikosProperties2.enableLogging);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals((-1626L), atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertEquals((-1626L), atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getService());
      assertEquals("", atomikosProperties2.getLogBaseName());
      
      boolean boolean1 = false;
      atomikosProperties1.setEnableLogging(boolean1);
      assertEquals((-1626L), atomikosProperties1.maxTimeout);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertEquals(500L, atomikosProperties1.checkpointInterval);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertFalse(atomikosProperties1.enableLogging);
      assertEquals(50, atomikosProperties1.maxActives);
      assertSame(atomikosProperties1, atomikosProperties2);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals((-1626L), atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      
      Properties properties1 = atomikosPropertiesTests0.loadDefaultSettings();
      assertFalse(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      assertNotSame(properties1, properties0);
      assertFalse(properties1.isEmpty());
      assertEquals(17, properties1.size());
      
      atomikosProperties2.forceShutdownOnVmExit = atomikosProperties0.forceShutdownOnVmExit;
      assertNull(atomikosProperties0.getService());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertEquals((-1626L), atomikosProperties0.getMaxTimeout());
      assertEquals("", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertFalse(atomikosProperties0.isEnableLogging());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-1626L), atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getService());
      assertEquals("", atomikosProperties2.getLogBaseName());
      
      atomikosPropertiesTests0.setproperties(atomikosProperties2);
      assertEquals(50, atomikosProperties2.maxActives);
      assertEquals(10000L, atomikosProperties2.defaultJtaTimeout);
      assertFalse(atomikosProperties2.enableLogging);
      assertFalse(atomikosProperties2.forceShutdownOnVmExit);
      assertEquals((-1626L), atomikosProperties2.maxTimeout);
      assertFalse(atomikosProperties2.threadedTwoPhaseCommit);
      assertEquals(500L, atomikosProperties2.checkpointInterval);
      assertTrue(atomikosProperties2.serialJtaTransactions);
      assertSame(atomikosProperties2, atomikosProperties1);
      assertSame(atomikosProperties2, atomikosProperties0);
      assertEquals((-1626L), atomikosProperties2.getMaxTimeout());
      assertNull(atomikosProperties2.getTransactionManagerUniqueName());
      assertNull(atomikosProperties2.getLogBaseDir());
      assertFalse(atomikosProperties2.isThreadedTwoPhaseCommit());
      assertFalse(atomikosProperties2.isEnableLogging());
      assertFalse(atomikosProperties2.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties2.getDefaultJtaTimeout());
      assertTrue(atomikosProperties2.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties2.getCheckpointInterval());
      assertEquals(50, atomikosProperties2.getMaxActives());
      assertNull(atomikosProperties2.getService());
      assertEquals("", atomikosProperties2.getLogBaseName());
      
      String string1 = "com.atomikos.icatch.force_shutdown_on_vmexit";
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertFalse(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertEquals((-1626L), atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertEquals(500L, atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      assertEquals("", atomikosPropertiesTests0.properties.getLogBaseName());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertNull(atomikosProperties1.getService());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(500L, atomikosProperties1.getCheckpointInterval());
      assertEquals((-1626L), atomikosProperties1.getMaxTimeout());
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertEquals("", atomikosProperties1.getLogBaseName());
      assertFalse(atomikosProperties1.isEnableLogging());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertNull(atomikosProperties1.getLogBaseDir());
      
      String string2 = "com.atomikos.icatch.threaded_2pc";
      // Undeclared exception!
      try { 
        atomikosPropertiesTests0.assertProperty(string1, string2);
        fail("Expecting exception: ComparisonFailure");
      
      } catch(ComparisonFailure e) {
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      AtomikosPropertiesTests atomikosPropertiesTests0 = new AtomikosPropertiesTests();
      assertNotNull(atomikosPropertiesTests0);
      
      AtomikosProperties atomikosProperties0 = atomikosPropertiesTests0.properties;
      assertNotNull(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      String string0 = "";
      boolean boolean0 = false;
      atomikosPropertiesTests0.setproperties(atomikosProperties0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertEquals(500L, atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertEquals(500L, atomikosProperties0.getCheckpointInterval());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      long long0 = (-2049L);
      atomikosProperties0.checkpointInterval = long0;
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2049L), atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      
      Properties properties0 = atomikosProperties0.asProperties();
      assertNotNull(properties0);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-2049L), atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2049L), atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      
      String[] stringArray0 = new String[0];
      MapEntry<?, ?>[] mapEntryArray0 = atomikosPropertiesTests0.defaultOf(properties0, stringArray0);
      assertNotNull(mapEntryArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, mapEntryArray0.length);
      assertEquals(300000L, atomikosProperties0.maxTimeout);
      assertEquals((-2049L), atomikosProperties0.checkpointInterval);
      assertFalse(atomikosProperties0.threadedTwoPhaseCommit);
      assertEquals(50, atomikosProperties0.maxActives);
      assertTrue(atomikosProperties0.serialJtaTransactions);
      assertFalse(atomikosProperties0.forceShutdownOnVmExit);
      assertTrue(atomikosProperties0.enableLogging);
      assertEquals(10000L, atomikosProperties0.defaultJtaTimeout);
      assertNull(atomikosProperties0.getService());
      assertNull(atomikosProperties0.getTransactionManagerUniqueName());
      assertNull(atomikosProperties0.getLogBaseDir());
      assertEquals(300000L, atomikosProperties0.getMaxTimeout());
      assertFalse(atomikosProperties0.isForceShutdownOnVmExit());
      assertEquals(50, atomikosProperties0.getMaxActives());
      assertEquals(10000L, atomikosProperties0.getDefaultJtaTimeout());
      assertTrue(atomikosProperties0.isSerialJtaTransactions());
      assertEquals((-2049L), atomikosProperties0.getCheckpointInterval());
      assertEquals("tmlog", atomikosProperties0.getLogBaseName());
      assertFalse(atomikosProperties0.isThreadedTwoPhaseCommit());
      assertTrue(atomikosProperties0.isEnableLogging());
      assertFalse(properties0.isEmpty());
      assertEquals(9, properties0.size());
      
      AtomikosProperties atomikosProperties1 = atomikosPropertiesTests0.getproperties();
      assertNotNull(atomikosProperties1);
      assertEquals(300000L, atomikosProperties1.maxTimeout);
      assertFalse(atomikosProperties1.forceShutdownOnVmExit);
      assertTrue(atomikosProperties1.enableLogging);
      assertEquals(10000L, atomikosProperties1.defaultJtaTimeout);
      assertTrue(atomikosProperties1.serialJtaTransactions);
      assertFalse(atomikosProperties1.threadedTwoPhaseCommit);
      assertEquals((-2049L), atomikosProperties1.checkpointInterval);
      assertEquals(50, atomikosProperties1.maxActives);
      assertSame(atomikosProperties1, atomikosProperties0);
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals((-2049L), atomikosProperties1.getCheckpointInterval());
      
      String string1 = "org.assertj.core.api.AbstractBigDecimalAssert";
      atomikosPropertiesTests0.properties = atomikosProperties1;
      assertFalse(atomikosProperties1.isThreadedTwoPhaseCommit());
      assertNull(atomikosProperties1.getService());
      assertNull(atomikosProperties1.getLogBaseDir());
      assertNull(atomikosProperties1.getTransactionManagerUniqueName());
      assertEquals("tmlog", atomikosProperties1.getLogBaseName());
      assertTrue(atomikosProperties1.isEnableLogging());
      assertEquals(50, atomikosProperties1.getMaxActives());
      assertEquals(300000L, atomikosProperties1.getMaxTimeout());
      assertTrue(atomikosProperties1.isSerialJtaTransactions());
      assertEquals(10000L, atomikosProperties1.getDefaultJtaTimeout());
      assertFalse(atomikosProperties1.isForceShutdownOnVmExit());
      assertEquals((-2049L), atomikosProperties1.getCheckpointInterval());
      assertEquals(10000L, atomikosPropertiesTests0.properties.getDefaultJtaTimeout());
      assertTrue(atomikosPropertiesTests0.properties.isSerialJtaTransactions());
      assertEquals(300000L, atomikosPropertiesTests0.properties.getMaxTimeout());
      assertEquals((-2049L), atomikosPropertiesTests0.properties.getCheckpointInterval());
      assertEquals("tmlog", atomikosPropertiesTests0.properties.getLogBaseName());
      assertFalse(atomikosPropertiesTests0.properties.isThreadedTwoPhaseCommit());
      assertTrue(atomikosPropertiesTests0.properties.isEnableLogging());
      assertNull(atomikosPropertiesTests0.properties.getLogBaseDir());
      assertNull(atomikosPropertiesTests0.properties.getTransactionManagerUniqueName());
      assertNull(atomikosPropertiesTests0.properties.getService());
      assertFalse(atomikosPropertiesTests0.properties.isForceShutdownOnVmExit());
      assertEquals(50, atomikosPropertiesTests0.properties.getMaxActives());
      
      atomikosPropertiesTests0.assertProperty(string1, atomikosPropertiesTests0.properties.transactionManagerUniqueName);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
  }
}
